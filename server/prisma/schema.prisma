// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  output          = "../../prisma"
  previewFeatures = ["nativeDistinct", "relationJoins"]
  binaryTargets   = ["native", "debian-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Lang {
  en
  fr
  de
  es
  ru
  pt
}

model User {
  id              String           @id @unique @db.Uuid
  lang            Lang             @default(fr)
  name            String           @db.VarChar(255)
  admin           Boolean          @default(false)
  moderator       Boolean          @default(false)
  connexionToken  String           @db.Uuid
  bruteLimit      Int              @default(3)
  gold            Int              @default(0)
  fightSpeed      Int              @default(1)
  backgroundMusic Boolean          @default(true)
  brutes          Brute[]
  achievements    Achievement[]
  reports         BruteReport[]
  tournamentGolds TournamentGold[]
}

enum DestinyChoiceSide {
  LEFT  @map("0")
  RIGHT @map("1")
}

enum Gender {
  male
  female
}

model BruteBody {
  id      String @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  brute   Brute  @relation(fields: [bruteId], references: [id])
  bruteId String @unique @db.Uuid
  p2      Int    @default(0) // Body size (small = 0, big = 7) (male only, 0 for females)
  p3      Int    @default(0) // Hair [0-11] 12 = no head
  p4      Int    @default(0) // (male) Beard [0-4] 5 = nothing / (female) Front hair [0-2] 3 = nothing
  p7      Int    @default(0) // Main clothing [0-6] 7 = naked
  p1      Int    @default(0) // Armor variation [0-1]
  p1a     Int    @default(0) // [0-1] 0=belt, 1=nothing
  p1b     Int    @default(0) // [0-1] 0=roman belt, 1=nothing
  p6      Int    @default(0) // (male) 0=shorts, 1=trousers / (female) 0=shorts, 1=nothing
  p8      Int    @default(0) // [0-4] Supposed to be shoes but doesn't change anything ??
  p7b     Int    @default(0) // Shoes underside (2 = visible, others = hidden)
  p5      Int    @default(0) // 0=Nothing, 1=Shirt.
}

model BruteColors {
  id      String @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  brute   Brute  @relation(fields: [bruteId], references: [id])
  bruteId String @unique @db.Uuid
  col0    String @default("#eaaca6") @db.VarChar(7) // Skin
  col0a   String @default("#eaaca6") @db.VarChar(7) // Face
  col0c   String @default("#eaaca6") @db.VarChar(7) // Ear
  col1    String @default("#ffaa1e") @db.VarChar(7) // Hair
  col1a   String @default("#ffaa1e") @db.VarChar(7) // Hair back
  col1b   String @default("#ffaa1e") @db.VarChar(7) // Hair back 2
  col1c   String @default("#ffaa1e") @db.VarChar(7) // Hair front
  col1d   String @default("#ffaa1e") @db.VarChar(7) // Eyebrows
  col3    String @default("#bb1111") @db.VarChar(7) // Primary (includes eyes)
  col2    String @default("#8ba3d7") @db.VarChar(7) // Secondary
  col2b   String @default("#7a73c8") @db.VarChar(7) // Accent 1
  col3b   String @default("#fae31f") @db.VarChar(7) // Accent 2
  col2a   String @default("#fff9ae") @db.VarChar(7) // Accent 3
  col4    String @default("#559399") @db.VarChar(7) // Shirt
  col4a   String @default("#7a73c8") @db.VarChar(7) // Shoes accent ?
  col4b   String @default("#0000ff") @db.VarChar(7) // ??
}

enum WeaponName {
  fan
  keyboard
  knife
  leek
  mug
  sai
  racquet
  axe
  bumps
  flail
  fryingPan
  hatchet
  mammothBone
  morningStar
  trombone
  baton
  halbard
  lance
  trident
  whip
  noodleBowl
  piopio
  shuriken
  broadsword
  scimitar
  sword
}

enum SkillName {
  herculeanStrength
  felineAgility
  lightningBolt
  vitality
  immortality
  reconnaissance
  weaponsMaster
  martialArts
  sixthSense
  hostility
  fistsOfFury
  shield
  armor
  toughenedSkin
  untouchable
  sabotage
  shock
  bodybuilder
  relentless
  survival
  leadSkeleton
  balletShoes
  determination
  firstStrike
  resistant
  counterAttack
  ironHead
  thief
  fierceBrute
  tragicPotion
  net
  bomb
  hammer
  cryOfTheDamned
  hypnosis
  flashFlood
  tamer
  regeneration
  chef
  spy
  saboteur
  backup
  hideaway
  monk
}

enum PetName {
  dog1
  dog2
  dog3
  panther
  bear
}

model Brute {
  id                           String                  @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                         String                  @db.VarChar(255)
  deletedAt                    DateTime?               @db.Timestamptz()
  createdAt                    DateTime                @default(now()) @db.Timestamptz()
  destinyPath                  DestinyChoiceSide[]     @default([])
  previousDestinyPath          DestinyChoiceSide[]     @default([])
  level                        Int                     @default(1)
  xp                           Int                     @default(0)
  hp                           Int                     @default(0)
  enduranceStat                Int                     @default(0)
  enduranceModifier            Float                   @default(1)
  enduranceValue               Int                     @default(0)
  strengthStat                 Int                     @default(0)
  strengthModifier             Float                   @default(1)
  strengthValue                Int                     @default(0)
  agilityStat                  Int                     @default(0)
  agilityModifier              Float                   @default(1)
  agilityValue                 Int                     @default(0)
  speedStat                    Int                     @default(0)
  speedModifier                Float                   @default(1)
  speedValue                   Int                     @default(0)
  ranking                      Int                     @default(11)
  gender                       Gender
  user                         User?                   @relation(fields: [userId], references: [id])
  userId                       String?                 @db.Uuid
  body                         BruteBody?
  colors                       BruteColors?
  weapons                      WeaponName[]            @default([])
  skills                       SkillName[]             @default([])
  pets                         PetName[]               @default([])
  master                       Brute?                  @relation("Master", fields: [masterId], references: [id])
  masterId                     String?                 @db.Uuid
  pupils                       Brute[]                 @relation("Master")
  pupilsCount                  Int                     @default(0)
  clan                         Clan?                   @relation(fields: [clanId], references: [id])
  clanId                       String?                 @db.Uuid
  registeredForTournament      Boolean                 @default(false)
  nextTournamentDate           DateTime?               @db.Date
  currentTournamentDate        DateTime?               @db.Date
  currentTournamentStepWatched Int?                    @default(0)
  lastFight                    DateTime?               @db.Date
  fightsLeft                   Int                     @default(6)
  victories                    Int                     @default(0)
  fights                       Fight[]
  fightsAsAdversary            Fight[]                 @relation("Adversary")
  logs                         Log[]
  destinyChoices               DestinyChoice[]
  tournaments                  Tournament[]
  opponents                    Brute[]                 @relation("Opponents")
  opponentOf                   Brute[]                 @relation("Opponents")
  opponentsGeneratedAt         DateTime?               @db.Date
  canRankUpSince               DateTime?               @db.Date
  achievements                 Achievement[]
  reports                      BruteReport[]
  favorite                     Boolean                 @default(false)
  titles                       Title[]
  masterOfClan                 Clan?                   @relation("MasterOfClan")
  clanPosts                    ClanPost[]
  wantToJoinClan               Clan?                   @relation("JoinRequests", fields: [wantToJoinClanId], references: [id])
  wantToJoinClanId             String?                 @db.Uuid
  threads                      ClanThread[]
  inventory                    BruteInventoryItem[]
  tournamentAchievements       TournamentAchievement[]
  tournamentXps                TournamentXp[]
}

// FIGHTS
enum FighterType {
  brute
  pet
}

model Fight {
  id             String           @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  date           DateTime         @default(now()) @db.Date
  brute1         Brute            @relation(fields: [brute1Id], references: [id])
  brute1Id       String           @db.Uuid
  brute2         Brute?           @relation("Adversary", fields: [brute2Id], references: [id])
  brute2Id       String?          @db.Uuid
  winner         String           @db.VarChar(255)
  loser          String           @db.VarChar(255)
  steps          String           @db.Text
  fighters       String           @db.Text
  logs           Log[]
  tournament     Tournament?      @relation(fields: [tournamentId], references: [id])
  tournamentId   String?          @db.Uuid
  TournamentStep TournamentStep[]

  @@index([tournamentId, winner, brute1Id, brute2Id])
}

// LOGS
enum LogType {
  win
  lose
  child
  childup
  up
  lvl
  survive
  tournament
  tournamentXp
}

model Log {
  id             String   @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  date           DateTime @default(now()) @db.Date
  currentBrute   Brute    @relation(fields: [currentBruteId], references: [id])
  currentBruteId String   @db.Uuid
  type           LogType
  level          Int?
  brute          String?  @db.VarChar(255)
  fight          Fight?   @relation(fields: [fightId], references: [id])
  fightId        String?  @db.Uuid
  xp             Int?
}

// LEVEL UP
enum DestinyChoiceType {
  skill
  weapon
  pet
  stats
}

enum BruteStat {
  endurance
  strength
  agility
  speed
}

model DestinyChoice {
  id         String              @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  brute      Brute               @relation(fields: [bruteId], references: [id])
  bruteId    String              @db.Uuid
  path       DestinyChoiceSide[]
  type       DestinyChoiceType
  skill      SkillName?
  weapon     WeaponName?
  pet        PetName?
  stat1      BruteStat?
  stat1Value Int?
  stat2      BruteStat?
  stat2Value Int?
}

// TOURNAMENTS
enum TournamentType {
  DAILY
  GLOBAL
  CUSTOM
}

model Tournament {
  id           String           @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  date         DateTime         @db.Date
  type         TournamentType   @default(DAILY)
  participants Brute[]
  rounds       Int
  fights       Fight[]
  steps        TournamentStep[]

  @@index([type, date])
}

model TournamentStep {
  id           String     @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String     @db.Uuid
  step         Int
  fight        Fight      @relation(fields: [fightId], references: [id])
  fightId      String     @db.Uuid

  @@index([tournamentId, step])
}

model TournamentAchievement {
  id               String          @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  brute            Brute           @relation(fields: [bruteId], references: [id])
  bruteId          String          @db.Uuid
  date             DateTime        @db.Date
  achievement      AchievementName
  achievementCount Int
}

model TournamentGold {
  id     String   @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  date   DateTime @db.Date
  user   User     @relation(fields: [userId], references: [id])
  userId String   @db.Uuid
  gold   Int
}

model TournamentXp {
  id      String   @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  date    DateTime @db.Date
  brute   Brute    @relation(fields: [bruteId], references: [id])
  bruteId String   @db.Uuid
  xp      Int
}

// ACHIEVEMENTS
enum AchievementName {
  // Fights
  wins
  defeats
  flawless
  winWith1HP
  steal2Weapons
  singleHitWin
  combo3
  combo4
  combo5
  counter5
  evade10
  block25
  counter4b2b
  reversal4b2b
  block4b2b
  evade4b2b
  throw10b2b
  disarm4
  disarm8
  damage50once
  damage100once
  hit20times
  use10skills
  kill3pets
  maxDamage
  // Skills use
  saboteur
  // Perks unlock
  dog
  panther
  bear
  panther_bear
  felAg_fistsOfF
  felAg_fistsOfF_untouch_relentless
  vita_armor_toughened
  herculStr_hammer_fierceBrute
  shock
  balletShoes_survival
  cryOfTheDamned_hypnosis
  shield_counterAttack
  reconnaissance_monk
  immortality
  doubleBoost
  tripleBoost
  quadrupleBoost
  regeneration_potion
  bear_tamer
  tripleDogs
  fiveWeapons
  tenWeapons
  fifteenWeapons
  twentyWeapons
  twentyThreeWeapons
  monk_sixthSense_whip
  weaponsMaster_sharp_bodybuilder_heavy
  hostility_counterWeapon
  flashFlood_twelveWeapons
  lightningBolt_firstStrike
  herculeanStrength
  felineAgility
  lightningBolt
  vitality
  potion_chef
  tamer_net
  untouchable_balletShoes
  survival_resistant
  hideaway_spy
  weaponsFast3
  weaponsSharp3
  weaponsHeavy3
  weaponsLong3
  weaponsThrown3
  weaponsBlunt3
  thor
  // Stats
  agility50
  agility100
  speed50
  speed100
  strength50
  strength100
  hp300
  hp600
  maxLevel
  allAchievements
  // Tournament
  winTournamentAs20
  winTournamentAs15
  looseAgainst2
  looseAgainst3
  looseAgainst4
  winAgainst2
  winAgainst3
  winAgainst4
  winAsLower
  win
  // Ranks
  rankUp10
  rankUp9
  rankUp8
  rankUp7
  rankUp6
  rankUp5
  rankUp4
  rankUp3
  rankUp2
  rankUp1
  rankUp0
  // User
  sacrifice
  beta
  bug
}

model Achievement {
  id      String          @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name    AchievementName
  count   Int             @default(0)
  brute   Brute?          @relation(fields: [bruteId], references: [id])
  bruteId String?         @db.Uuid
  user    User?           @relation(fields: [userId], references: [id])
  userId  String?         @db.Uuid

  @@unique([name, bruteId])
}

model Title {
  id     String          @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name   AchievementName
  count  Int             @default(1)
  brutes Brute[]
}

// REPORTS
enum BruteReportStatus {
  pending
  accepted
  rejected
}

enum BruteReportReason {
  name
}

model BruteReport {
  id      String            @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  brute   Brute             @relation(fields: [bruteId], references: [id])
  bruteId String            @db.Uuid
  users   User[]
  reason  BruteReportReason @default(name)
  count   Int               @default(1)
  date    DateTime          @default(now()) @db.Date
  status  BruteReportStatus @default(pending)
}

// SERVER STATE
model ServerState {
  id                    String  @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  globalTournamentValid Boolean @default(true)
}

model BannedWord {
  id   String @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  word String @db.VarChar(255)
}

model WorkerJob {
  id      String @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  worker  String @db.VarChar(255)
  payload String @db.Text
}

enum BossName {
  GoldClaw
  EmberFang
}

model Clan {
  id           String       @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name         String       @unique @db.VarChar(255)
  limit        Int          @default(10)
  points       Int          @default(0)
  boss         BossName     @default(GoldClaw)
  damageOnBoss Int          @default(0)
  master       Brute        @relation("MasterOfClan", fields: [masterId], references: [id])
  masterId     String       @unique @db.Uuid
  brutes       Brute[]
  joinRequests Brute[]      @relation("JoinRequests")
  threads      ClanThread[]

  @@index([name, points])
}

model ClanThread {
  id        String     @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  clan      Clan       @relation(fields: [clanId], references: [id])
  clanId    String     @db.Uuid
  creator   Brute      @relation(fields: [creatorId], references: [id])
  creatorId String     @db.Uuid
  title     String     @db.VarChar(255)
  locked    Boolean    @default(false)
  pinned    Boolean    @default(false)
  postCount Int        @default(1)
  posts     ClanPost[]
  createdAt DateTime   @default(now()) @db.Timestamp()
  updatedAt DateTime   @default(now()) @db.Timestamp()
}

model ClanPost {
  id       String     @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  thread   ClanThread @relation(fields: [threadId], references: [id])
  threadId String     @db.Uuid
  author   Brute      @relation(fields: [authorId], references: [id])
  authorId String     @db.Uuid
  date     DateTime   @default(now()) @db.Timestamp()
  message  String     @db.Text
}

// Inventory
enum InventoryItemType {
  visualReset
}

model BruteInventoryItem {
  id      String            @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type    InventoryItemType
  count   Int               @default(1)
  bruteId String            @db.Uuid
  brute   Brute             @relation(fields: [bruteId], references: [id])

  @@unique([type, bruteId])
}
