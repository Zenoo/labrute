
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Brute
 * 
 */
export type Brute = $Result.DefaultSelection<Prisma.$BrutePayload>
/**
 * Model BruteStartingStats
 * 
 */
export type BruteStartingStats = $Result.DefaultSelection<Prisma.$BruteStartingStatsPayload>
/**
 * Model Fight
 * 
 */
export type Fight = $Result.DefaultSelection<Prisma.$FightPayload>
/**
 * Model Log
 * 
 */
export type Log = $Result.DefaultSelection<Prisma.$LogPayload>
/**
 * Model DestinyChoice
 * 
 */
export type DestinyChoice = $Result.DefaultSelection<Prisma.$DestinyChoicePayload>
/**
 * Model Tournament
 * 
 */
export type Tournament = $Result.DefaultSelection<Prisma.$TournamentPayload>
/**
 * Model TournamentAchievement
 * 
 */
export type TournamentAchievement = $Result.DefaultSelection<Prisma.$TournamentAchievementPayload>
/**
 * Model TournamentGold
 * 
 */
export type TournamentGold = $Result.DefaultSelection<Prisma.$TournamentGoldPayload>
/**
 * Model TournamentXp
 * 
 */
export type TournamentXp = $Result.DefaultSelection<Prisma.$TournamentXpPayload>
/**
 * Model Achievement
 * 
 */
export type Achievement = $Result.DefaultSelection<Prisma.$AchievementPayload>
/**
 * Model Title
 * 
 */
export type Title = $Result.DefaultSelection<Prisma.$TitlePayload>
/**
 * Model BruteReport
 * 
 */
export type BruteReport = $Result.DefaultSelection<Prisma.$BruteReportPayload>
/**
 * Model ServerState
 * 
 */
export type ServerState = $Result.DefaultSelection<Prisma.$ServerStatePayload>
/**
 * Model BannedWord
 * 
 */
export type BannedWord = $Result.DefaultSelection<Prisma.$BannedWordPayload>
/**
 * Model BannedIp
 * 
 */
export type BannedIp = $Result.DefaultSelection<Prisma.$BannedIpPayload>
/**
 * Model Clan
 * 
 */
export type Clan = $Result.DefaultSelection<Prisma.$ClanPayload>
/**
 * Model ClanThread
 * 
 */
export type ClanThread = $Result.DefaultSelection<Prisma.$ClanThreadPayload>
/**
 * Model ClanPost
 * 
 */
export type ClanPost = $Result.DefaultSelection<Prisma.$ClanPostPayload>
/**
 * Model BossDamage
 * 
 */
export type BossDamage = $Result.DefaultSelection<Prisma.$BossDamagePayload>
/**
 * Model ClanWar
 * 
 */
export type ClanWar = $Result.DefaultSelection<Prisma.$ClanWarPayload>
/**
 * Model ClanWarFighters
 * 
 */
export type ClanWarFighters = $Result.DefaultSelection<Prisma.$ClanWarFightersPayload>
/**
 * Model InventoryItem
 * 
 */
export type InventoryItem = $Result.DefaultSelection<Prisma.$InventoryItemPayload>
/**
 * Model Release
 * 
 */
export type Release = $Result.DefaultSelection<Prisma.$ReleasePayload>
/**
 * Model Event
 * 
 */
export type Event = $Result.DefaultSelection<Prisma.$EventPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Lang: {
  en: 'en',
  fr: 'fr',
  de: 'de',
  es: 'es',
  ru: 'ru',
  pt: 'pt'
};

export type Lang = (typeof Lang)[keyof typeof Lang]


export const Gender: {
  male: 'male',
  female: 'female'
};

export type Gender = (typeof Gender)[keyof typeof Gender]


export const DestinyChoiceSide: {
  LEFT: 'LEFT',
  RIGHT: 'RIGHT'
};

export type DestinyChoiceSide = (typeof DestinyChoiceSide)[keyof typeof DestinyChoiceSide]


export const WeaponName: {
  fan: 'fan',
  keyboard: 'keyboard',
  knife: 'knife',
  leek: 'leek',
  mug: 'mug',
  sai: 'sai',
  racquet: 'racquet',
  axe: 'axe',
  bumps: 'bumps',
  flail: 'flail',
  fryingPan: 'fryingPan',
  hatchet: 'hatchet',
  mammothBone: 'mammothBone',
  morningStar: 'morningStar',
  trombone: 'trombone',
  baton: 'baton',
  halbard: 'halbard',
  lance: 'lance',
  trident: 'trident',
  whip: 'whip',
  noodleBowl: 'noodleBowl',
  piopio: 'piopio',
  shuriken: 'shuriken',
  broadsword: 'broadsword',
  scimitar: 'scimitar',
  sword: 'sword'
};

export type WeaponName = (typeof WeaponName)[keyof typeof WeaponName]


export const SkillName: {
  herculeanStrength: 'herculeanStrength',
  felineAgility: 'felineAgility',
  lightningBolt: 'lightningBolt',
  vitality: 'vitality',
  immortality: 'immortality',
  reconnaissance: 'reconnaissance',
  weaponsMaster: 'weaponsMaster',
  martialArts: 'martialArts',
  sixthSense: 'sixthSense',
  hostility: 'hostility',
  fistsOfFury: 'fistsOfFury',
  shield: 'shield',
  armor: 'armor',
  toughenedSkin: 'toughenedSkin',
  untouchable: 'untouchable',
  sabotage: 'sabotage',
  shock: 'shock',
  bodybuilder: 'bodybuilder',
  relentless: 'relentless',
  survival: 'survival',
  leadSkeleton: 'leadSkeleton',
  balletShoes: 'balletShoes',
  determination: 'determination',
  firstStrike: 'firstStrike',
  resistant: 'resistant',
  counterAttack: 'counterAttack',
  ironHead: 'ironHead',
  thief: 'thief',
  fierceBrute: 'fierceBrute',
  tragicPotion: 'tragicPotion',
  net: 'net',
  bomb: 'bomb',
  hammer: 'hammer',
  cryOfTheDamned: 'cryOfTheDamned',
  hypnosis: 'hypnosis',
  flashFlood: 'flashFlood',
  tamer: 'tamer',
  regeneration: 'regeneration',
  chef: 'chef',
  spy: 'spy',
  saboteur: 'saboteur',
  backup: 'backup',
  hideaway: 'hideaway',
  monk: 'monk',
  vampirism: 'vampirism',
  chaining: 'chaining',
  haste: 'haste',
  treat: 'treat',
  repulse: 'repulse'
};

export type SkillName = (typeof SkillName)[keyof typeof SkillName]


export const PetName: {
  dog1: 'dog1',
  dog2: 'dog2',
  dog3: 'dog3',
  panther: 'panther',
  bear: 'bear'
};

export type PetName = (typeof PetName)[keyof typeof PetName]


export const FightModifier: {
  noThrows: 'noThrows',
  focusOpponent: 'focusOpponent',
  alwaysUseSupers: 'alwaysUseSupers',
  drawEveryWeapon: 'drawEveryWeapon',
  doubleAgility: 'doubleAgility',
  randomSkill: 'randomSkill',
  randomWeapon: 'randomWeapon',
  bareHandsFirstHit: 'bareHandsFirstHit',
  startWithWeapon: 'startWithWeapon'
};

export type FightModifier = (typeof FightModifier)[keyof typeof FightModifier]


export const LogType: {
  win: 'win',
  lose: 'lose',
  child: 'child',
  childup: 'childup',
  up: 'up',
  lvl: 'lvl',
  ascend: 'ascend',
  tournament: 'tournament',
  tournamentXp: 'tournamentXp',
  bossDefeat: 'bossDefeat'
};

export type LogType = (typeof LogType)[keyof typeof LogType]


export const DestinyChoiceType: {
  skill: 'skill',
  weapon: 'weapon',
  pet: 'pet',
  stats: 'stats'
};

export type DestinyChoiceType = (typeof DestinyChoiceType)[keyof typeof DestinyChoiceType]


export const BruteStat: {
  endurance: 'endurance',
  strength: 'strength',
  agility: 'agility',
  speed: 'speed'
};

export type BruteStat = (typeof BruteStat)[keyof typeof BruteStat]


export const TournamentType: {
  DAILY: 'DAILY',
  GLOBAL: 'GLOBAL',
  CUSTOM: 'CUSTOM',
  BATTLE_ROYALE: 'BATTLE_ROYALE'
};

export type TournamentType = (typeof TournamentType)[keyof typeof TournamentType]


export const AchievementName: {
  wins: 'wins',
  defeats: 'defeats',
  flawless: 'flawless',
  winWith1HP: 'winWith1HP',
  steal2Weapons: 'steal2Weapons',
  singleHitWin: 'singleHitWin',
  combo3: 'combo3',
  combo4: 'combo4',
  combo5: 'combo5',
  counter5: 'counter5',
  evade10: 'evade10',
  block25: 'block25',
  counter4b2b: 'counter4b2b',
  reversal4b2b: 'reversal4b2b',
  block4b2b: 'block4b2b',
  evade4b2b: 'evade4b2b',
  throw10b2b: 'throw10b2b',
  disarm4: 'disarm4',
  disarm8: 'disarm8',
  damage50once: 'damage50once',
  damage100once: 'damage100once',
  hit20times: 'hit20times',
  use10skills: 'use10skills',
  kill3pets: 'kill3pets',
  maxDamage: 'maxDamage',
  hpHealed: 'hpHealed',
  saboteur: 'saboteur',
  dog: 'dog',
  panther: 'panther',
  bear: 'bear',
  panther_bear: 'panther_bear',
  felAg_fistsOfF: 'felAg_fistsOfF',
  felAg_fistsOfF_untouch_relentless: 'felAg_fistsOfF_untouch_relentless',
  vita_armor_toughened: 'vita_armor_toughened',
  herculStr_hammer_fierceBrute: 'herculStr_hammer_fierceBrute',
  shock: 'shock',
  balletShoes_survival: 'balletShoes_survival',
  cryOfTheDamned_hypnosis: 'cryOfTheDamned_hypnosis',
  shield_counterAttack: 'shield_counterAttack',
  reconnaissance_monk: 'reconnaissance_monk',
  immortality: 'immortality',
  doubleBoost: 'doubleBoost',
  tripleBoost: 'tripleBoost',
  quadrupleBoost: 'quadrupleBoost',
  regeneration_potion: 'regeneration_potion',
  bear_tamer: 'bear_tamer',
  tripleDogs: 'tripleDogs',
  fiveWeapons: 'fiveWeapons',
  tenWeapons: 'tenWeapons',
  fifteenWeapons: 'fifteenWeapons',
  twentyWeapons: 'twentyWeapons',
  twentyThreeWeapons: 'twentyThreeWeapons',
  monk_sixthSense_whip: 'monk_sixthSense_whip',
  weaponsMaster_sharp_bodybuilder_heavy: 'weaponsMaster_sharp_bodybuilder_heavy',
  hostility_counterWeapon: 'hostility_counterWeapon',
  flashFlood_twelveWeapons: 'flashFlood_twelveWeapons',
  lightningBolt_firstStrike: 'lightningBolt_firstStrike',
  herculeanStrength: 'herculeanStrength',
  felineAgility: 'felineAgility',
  lightningBolt: 'lightningBolt',
  vitality: 'vitality',
  potion_chef: 'potion_chef',
  tamer_net: 'tamer_net',
  untouchable_balletShoes: 'untouchable_balletShoes',
  survival_resistant: 'survival_resistant',
  hideaway_spy: 'hideaway_spy',
  weaponsFast3: 'weaponsFast3',
  weaponsSharp3: 'weaponsSharp3',
  weaponsHeavy3: 'weaponsHeavy3',
  weaponsLong3: 'weaponsLong3',
  weaponsThrown3: 'weaponsThrown3',
  weaponsBlunt3: 'weaponsBlunt3',
  thor: 'thor',
  deflector: 'deflector',
  allFastWeapons: 'allFastWeapons',
  allSharpWeapons: 'allSharpWeapons',
  allHeavyWeapons: 'allHeavyWeapons',
  allLongWeapons: 'allLongWeapons',
  allThrownWeapons: 'allThrownWeapons',
  allBluntWeapons: 'allBluntWeapons',
  agility50: 'agility50',
  agility100: 'agility100',
  speed50: 'speed50',
  speed100: 'speed100',
  strength50: 'strength50',
  strength100: 'strength100',
  hp300: 'hp300',
  hp600: 'hp600',
  maxLevel: 'maxLevel',
  allAchievements: 'allAchievements',
  winTournamentAs20: 'winTournamentAs20',
  winTournamentAs15: 'winTournamentAs15',
  looseAgainst2: 'looseAgainst2',
  looseAgainst3: 'looseAgainst3',
  looseAgainst4: 'looseAgainst4',
  winAgainst2: 'winAgainst2',
  winAgainst3: 'winAgainst3',
  winAgainst4: 'winAgainst4',
  winAsLower: 'winAsLower',
  win: 'win',
  battleRoyaleWin: 'battleRoyaleWin',
  rankUp10: 'rankUp10',
  rankUp9: 'rankUp9',
  rankUp8: 'rankUp8',
  rankUp7: 'rankUp7',
  rankUp6: 'rankUp6',
  rankUp5: 'rankUp5',
  rankUp4: 'rankUp4',
  rankUp3: 'rankUp3',
  rankUp2: 'rankUp2',
  rankUp1: 'rankUp1',
  rankUp0: 'rankUp0',
  ascend: 'ascend',
  sacrifice: 'sacrifice',
  beta: 'beta',
  bug: 'bug'
};

export type AchievementName = (typeof AchievementName)[keyof typeof AchievementName]


export const BruteReportReason: {
  name: 'name'
};

export type BruteReportReason = (typeof BruteReportReason)[keyof typeof BruteReportReason]


export const BruteReportStatus: {
  pending: 'pending',
  accepted: 'accepted',
  rejected: 'rejected'
};

export type BruteReportStatus = (typeof BruteReportStatus)[keyof typeof BruteReportStatus]


export const BossName: {
  GoldClaw: 'GoldClaw',
  EmberFang: 'EmberFang',
  Cerberus: 'Cerberus'
};

export type BossName = (typeof BossName)[keyof typeof BossName]


export const ClanWarType: {
  friendly: 'friendly',
  official: 'official'
};

export type ClanWarType = (typeof ClanWarType)[keyof typeof ClanWarType]


export const ClanWarStatus: {
  pending: 'pending',
  ongoing: 'ongoing',
  waitingForRewards: 'waitingForRewards',
  finished: 'finished'
};

export type ClanWarStatus = (typeof ClanWarStatus)[keyof typeof ClanWarStatus]


export const InventoryItemType: {
  visualReset: 'visualReset',
  bossTicket: 'bossTicket',
  nameChange: 'nameChange',
  favoriteFight: 'favoriteFight'
};

export type InventoryItemType = (typeof InventoryItemType)[keyof typeof InventoryItemType]


export const EventType: {
  battleRoyale: 'battleRoyale'
};

export type EventType = (typeof EventType)[keyof typeof EventType]


export const EventStatus: {
  starting: 'starting',
  ongoing: 'ongoing',
  finished: 'finished'
};

export type EventStatus = (typeof EventStatus)[keyof typeof EventStatus]

}

export type Lang = $Enums.Lang

export const Lang: typeof $Enums.Lang

export type Gender = $Enums.Gender

export const Gender: typeof $Enums.Gender

export type DestinyChoiceSide = $Enums.DestinyChoiceSide

export const DestinyChoiceSide: typeof $Enums.DestinyChoiceSide

export type WeaponName = $Enums.WeaponName

export const WeaponName: typeof $Enums.WeaponName

export type SkillName = $Enums.SkillName

export const SkillName: typeof $Enums.SkillName

export type PetName = $Enums.PetName

export const PetName: typeof $Enums.PetName

export type FightModifier = $Enums.FightModifier

export const FightModifier: typeof $Enums.FightModifier

export type LogType = $Enums.LogType

export const LogType: typeof $Enums.LogType

export type DestinyChoiceType = $Enums.DestinyChoiceType

export const DestinyChoiceType: typeof $Enums.DestinyChoiceType

export type BruteStat = $Enums.BruteStat

export const BruteStat: typeof $Enums.BruteStat

export type TournamentType = $Enums.TournamentType

export const TournamentType: typeof $Enums.TournamentType

export type AchievementName = $Enums.AchievementName

export const AchievementName: typeof $Enums.AchievementName

export type BruteReportReason = $Enums.BruteReportReason

export const BruteReportReason: typeof $Enums.BruteReportReason

export type BruteReportStatus = $Enums.BruteReportStatus

export const BruteReportStatus: typeof $Enums.BruteReportStatus

export type BossName = $Enums.BossName

export const BossName: typeof $Enums.BossName

export type ClanWarType = $Enums.ClanWarType

export const ClanWarType: typeof $Enums.ClanWarType

export type ClanWarStatus = $Enums.ClanWarStatus

export const ClanWarStatus: typeof $Enums.ClanWarStatus

export type InventoryItemType = $Enums.InventoryItemType

export const InventoryItemType: typeof $Enums.InventoryItemType

export type EventType = $Enums.EventType

export const EventType: typeof $Enums.EventType

export type EventStatus = $Enums.EventStatus

export const EventStatus: typeof $Enums.EventStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs, $Utils.Call<Prisma.TypeMapCb, {
    extArgs: ExtArgs
  }>, ClientOptions>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.brute`: Exposes CRUD operations for the **Brute** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Brutes
    * const brutes = await prisma.brute.findMany()
    * ```
    */
  get brute(): Prisma.BruteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bruteStartingStats`: Exposes CRUD operations for the **BruteStartingStats** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BruteStartingStats
    * const bruteStartingStats = await prisma.bruteStartingStats.findMany()
    * ```
    */
  get bruteStartingStats(): Prisma.BruteStartingStatsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.fight`: Exposes CRUD operations for the **Fight** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Fights
    * const fights = await prisma.fight.findMany()
    * ```
    */
  get fight(): Prisma.FightDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.log`: Exposes CRUD operations for the **Log** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Logs
    * const logs = await prisma.log.findMany()
    * ```
    */
  get log(): Prisma.LogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.destinyChoice`: Exposes CRUD operations for the **DestinyChoice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DestinyChoices
    * const destinyChoices = await prisma.destinyChoice.findMany()
    * ```
    */
  get destinyChoice(): Prisma.DestinyChoiceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tournament`: Exposes CRUD operations for the **Tournament** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tournaments
    * const tournaments = await prisma.tournament.findMany()
    * ```
    */
  get tournament(): Prisma.TournamentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tournamentAchievement`: Exposes CRUD operations for the **TournamentAchievement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TournamentAchievements
    * const tournamentAchievements = await prisma.tournamentAchievement.findMany()
    * ```
    */
  get tournamentAchievement(): Prisma.TournamentAchievementDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tournamentGold`: Exposes CRUD operations for the **TournamentGold** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TournamentGolds
    * const tournamentGolds = await prisma.tournamentGold.findMany()
    * ```
    */
  get tournamentGold(): Prisma.TournamentGoldDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tournamentXp`: Exposes CRUD operations for the **TournamentXp** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TournamentXps
    * const tournamentXps = await prisma.tournamentXp.findMany()
    * ```
    */
  get tournamentXp(): Prisma.TournamentXpDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.achievement`: Exposes CRUD operations for the **Achievement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Achievements
    * const achievements = await prisma.achievement.findMany()
    * ```
    */
  get achievement(): Prisma.AchievementDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.title`: Exposes CRUD operations for the **Title** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Titles
    * const titles = await prisma.title.findMany()
    * ```
    */
  get title(): Prisma.TitleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bruteReport`: Exposes CRUD operations for the **BruteReport** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BruteReports
    * const bruteReports = await prisma.bruteReport.findMany()
    * ```
    */
  get bruteReport(): Prisma.BruteReportDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.serverState`: Exposes CRUD operations for the **ServerState** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ServerStates
    * const serverStates = await prisma.serverState.findMany()
    * ```
    */
  get serverState(): Prisma.ServerStateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bannedWord`: Exposes CRUD operations for the **BannedWord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BannedWords
    * const bannedWords = await prisma.bannedWord.findMany()
    * ```
    */
  get bannedWord(): Prisma.BannedWordDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bannedIp`: Exposes CRUD operations for the **BannedIp** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BannedIps
    * const bannedIps = await prisma.bannedIp.findMany()
    * ```
    */
  get bannedIp(): Prisma.BannedIpDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.clan`: Exposes CRUD operations for the **Clan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clans
    * const clans = await prisma.clan.findMany()
    * ```
    */
  get clan(): Prisma.ClanDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.clanThread`: Exposes CRUD operations for the **ClanThread** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClanThreads
    * const clanThreads = await prisma.clanThread.findMany()
    * ```
    */
  get clanThread(): Prisma.ClanThreadDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.clanPost`: Exposes CRUD operations for the **ClanPost** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClanPosts
    * const clanPosts = await prisma.clanPost.findMany()
    * ```
    */
  get clanPost(): Prisma.ClanPostDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bossDamage`: Exposes CRUD operations for the **BossDamage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BossDamages
    * const bossDamages = await prisma.bossDamage.findMany()
    * ```
    */
  get bossDamage(): Prisma.BossDamageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.clanWar`: Exposes CRUD operations for the **ClanWar** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClanWars
    * const clanWars = await prisma.clanWar.findMany()
    * ```
    */
  get clanWar(): Prisma.ClanWarDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.clanWarFighters`: Exposes CRUD operations for the **ClanWarFighters** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClanWarFighters
    * const clanWarFighters = await prisma.clanWarFighters.findMany()
    * ```
    */
  get clanWarFighters(): Prisma.ClanWarFightersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.inventoryItem`: Exposes CRUD operations for the **InventoryItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InventoryItems
    * const inventoryItems = await prisma.inventoryItem.findMany()
    * ```
    */
  get inventoryItem(): Prisma.InventoryItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.release`: Exposes CRUD operations for the **Release** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Releases
    * const releases = await prisma.release.findMany()
    * ```
    */
  get release(): Prisma.ReleaseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.event`: Exposes CRUD operations for the **Event** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.event.findMany()
    * ```
    */
  get event(): Prisma.EventDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.18.0
   * Query Engine version: 4c784e32044a8a016d99474bd02a3b6123742169
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Brute: 'Brute',
    BruteStartingStats: 'BruteStartingStats',
    Fight: 'Fight',
    Log: 'Log',
    DestinyChoice: 'DestinyChoice',
    Tournament: 'Tournament',
    TournamentAchievement: 'TournamentAchievement',
    TournamentGold: 'TournamentGold',
    TournamentXp: 'TournamentXp',
    Achievement: 'Achievement',
    Title: 'Title',
    BruteReport: 'BruteReport',
    ServerState: 'ServerState',
    BannedWord: 'BannedWord',
    BannedIp: 'BannedIp',
    Clan: 'Clan',
    ClanThread: 'ClanThread',
    ClanPost: 'ClanPost',
    BossDamage: 'BossDamage',
    ClanWar: 'ClanWar',
    ClanWarFighters: 'ClanWarFighters',
    InventoryItem: 'InventoryItem',
    Release: 'Release',
    Event: 'Event'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "brute" | "bruteStartingStats" | "fight" | "log" | "destinyChoice" | "tournament" | "tournamentAchievement" | "tournamentGold" | "tournamentXp" | "achievement" | "title" | "bruteReport" | "serverState" | "bannedWord" | "bannedIp" | "clan" | "clanThread" | "clanPost" | "bossDamage" | "clanWar" | "clanWarFighters" | "inventoryItem" | "release" | "event"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Brute: {
        payload: Prisma.$BrutePayload<ExtArgs>
        fields: Prisma.BruteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BruteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrutePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BruteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrutePayload>
          }
          findFirst: {
            args: Prisma.BruteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrutePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BruteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrutePayload>
          }
          findMany: {
            args: Prisma.BruteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrutePayload>[]
          }
          create: {
            args: Prisma.BruteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrutePayload>
          }
          createMany: {
            args: Prisma.BruteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BruteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrutePayload>[]
          }
          delete: {
            args: Prisma.BruteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrutePayload>
          }
          update: {
            args: Prisma.BruteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrutePayload>
          }
          deleteMany: {
            args: Prisma.BruteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BruteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BruteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrutePayload>
          }
          aggregate: {
            args: Prisma.BruteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBrute>
          }
          groupBy: {
            args: Prisma.BruteGroupByArgs<ExtArgs>
            result: $Utils.Optional<BruteGroupByOutputType>[]
          }
          count: {
            args: Prisma.BruteCountArgs<ExtArgs>
            result: $Utils.Optional<BruteCountAggregateOutputType> | number
          }
        }
      }
      BruteStartingStats: {
        payload: Prisma.$BruteStartingStatsPayload<ExtArgs>
        fields: Prisma.BruteStartingStatsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BruteStartingStatsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BruteStartingStatsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BruteStartingStatsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BruteStartingStatsPayload>
          }
          findFirst: {
            args: Prisma.BruteStartingStatsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BruteStartingStatsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BruteStartingStatsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BruteStartingStatsPayload>
          }
          findMany: {
            args: Prisma.BruteStartingStatsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BruteStartingStatsPayload>[]
          }
          create: {
            args: Prisma.BruteStartingStatsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BruteStartingStatsPayload>
          }
          createMany: {
            args: Prisma.BruteStartingStatsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BruteStartingStatsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BruteStartingStatsPayload>[]
          }
          delete: {
            args: Prisma.BruteStartingStatsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BruteStartingStatsPayload>
          }
          update: {
            args: Prisma.BruteStartingStatsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BruteStartingStatsPayload>
          }
          deleteMany: {
            args: Prisma.BruteStartingStatsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BruteStartingStatsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BruteStartingStatsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BruteStartingStatsPayload>
          }
          aggregate: {
            args: Prisma.BruteStartingStatsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBruteStartingStats>
          }
          groupBy: {
            args: Prisma.BruteStartingStatsGroupByArgs<ExtArgs>
            result: $Utils.Optional<BruteStartingStatsGroupByOutputType>[]
          }
          count: {
            args: Prisma.BruteStartingStatsCountArgs<ExtArgs>
            result: $Utils.Optional<BruteStartingStatsCountAggregateOutputType> | number
          }
        }
      }
      Fight: {
        payload: Prisma.$FightPayload<ExtArgs>
        fields: Prisma.FightFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FightFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FightPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FightFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FightPayload>
          }
          findFirst: {
            args: Prisma.FightFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FightPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FightFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FightPayload>
          }
          findMany: {
            args: Prisma.FightFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FightPayload>[]
          }
          create: {
            args: Prisma.FightCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FightPayload>
          }
          createMany: {
            args: Prisma.FightCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FightCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FightPayload>[]
          }
          delete: {
            args: Prisma.FightDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FightPayload>
          }
          update: {
            args: Prisma.FightUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FightPayload>
          }
          deleteMany: {
            args: Prisma.FightDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FightUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FightUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FightPayload>
          }
          aggregate: {
            args: Prisma.FightAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFight>
          }
          groupBy: {
            args: Prisma.FightGroupByArgs<ExtArgs>
            result: $Utils.Optional<FightGroupByOutputType>[]
          }
          count: {
            args: Prisma.FightCountArgs<ExtArgs>
            result: $Utils.Optional<FightCountAggregateOutputType> | number
          }
        }
      }
      Log: {
        payload: Prisma.$LogPayload<ExtArgs>
        fields: Prisma.LogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          findFirst: {
            args: Prisma.LogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          findMany: {
            args: Prisma.LogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>[]
          }
          create: {
            args: Prisma.LogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          createMany: {
            args: Prisma.LogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>[]
          }
          delete: {
            args: Prisma.LogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          update: {
            args: Prisma.LogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          deleteMany: {
            args: Prisma.LogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          aggregate: {
            args: Prisma.LogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLog>
          }
          groupBy: {
            args: Prisma.LogGroupByArgs<ExtArgs>
            result: $Utils.Optional<LogGroupByOutputType>[]
          }
          count: {
            args: Prisma.LogCountArgs<ExtArgs>
            result: $Utils.Optional<LogCountAggregateOutputType> | number
          }
        }
      }
      DestinyChoice: {
        payload: Prisma.$DestinyChoicePayload<ExtArgs>
        fields: Prisma.DestinyChoiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DestinyChoiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DestinyChoicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DestinyChoiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DestinyChoicePayload>
          }
          findFirst: {
            args: Prisma.DestinyChoiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DestinyChoicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DestinyChoiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DestinyChoicePayload>
          }
          findMany: {
            args: Prisma.DestinyChoiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DestinyChoicePayload>[]
          }
          create: {
            args: Prisma.DestinyChoiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DestinyChoicePayload>
          }
          createMany: {
            args: Prisma.DestinyChoiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DestinyChoiceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DestinyChoicePayload>[]
          }
          delete: {
            args: Prisma.DestinyChoiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DestinyChoicePayload>
          }
          update: {
            args: Prisma.DestinyChoiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DestinyChoicePayload>
          }
          deleteMany: {
            args: Prisma.DestinyChoiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DestinyChoiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DestinyChoiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DestinyChoicePayload>
          }
          aggregate: {
            args: Prisma.DestinyChoiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDestinyChoice>
          }
          groupBy: {
            args: Prisma.DestinyChoiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<DestinyChoiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.DestinyChoiceCountArgs<ExtArgs>
            result: $Utils.Optional<DestinyChoiceCountAggregateOutputType> | number
          }
        }
      }
      Tournament: {
        payload: Prisma.$TournamentPayload<ExtArgs>
        fields: Prisma.TournamentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TournamentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TournamentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>
          }
          findFirst: {
            args: Prisma.TournamentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TournamentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>
          }
          findMany: {
            args: Prisma.TournamentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>[]
          }
          create: {
            args: Prisma.TournamentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>
          }
          createMany: {
            args: Prisma.TournamentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TournamentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>[]
          }
          delete: {
            args: Prisma.TournamentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>
          }
          update: {
            args: Prisma.TournamentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>
          }
          deleteMany: {
            args: Prisma.TournamentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TournamentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TournamentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>
          }
          aggregate: {
            args: Prisma.TournamentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTournament>
          }
          groupBy: {
            args: Prisma.TournamentGroupByArgs<ExtArgs>
            result: $Utils.Optional<TournamentGroupByOutputType>[]
          }
          count: {
            args: Prisma.TournamentCountArgs<ExtArgs>
            result: $Utils.Optional<TournamentCountAggregateOutputType> | number
          }
        }
      }
      TournamentAchievement: {
        payload: Prisma.$TournamentAchievementPayload<ExtArgs>
        fields: Prisma.TournamentAchievementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TournamentAchievementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentAchievementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TournamentAchievementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentAchievementPayload>
          }
          findFirst: {
            args: Prisma.TournamentAchievementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentAchievementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TournamentAchievementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentAchievementPayload>
          }
          findMany: {
            args: Prisma.TournamentAchievementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentAchievementPayload>[]
          }
          create: {
            args: Prisma.TournamentAchievementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentAchievementPayload>
          }
          createMany: {
            args: Prisma.TournamentAchievementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TournamentAchievementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentAchievementPayload>[]
          }
          delete: {
            args: Prisma.TournamentAchievementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentAchievementPayload>
          }
          update: {
            args: Prisma.TournamentAchievementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentAchievementPayload>
          }
          deleteMany: {
            args: Prisma.TournamentAchievementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TournamentAchievementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TournamentAchievementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentAchievementPayload>
          }
          aggregate: {
            args: Prisma.TournamentAchievementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTournamentAchievement>
          }
          groupBy: {
            args: Prisma.TournamentAchievementGroupByArgs<ExtArgs>
            result: $Utils.Optional<TournamentAchievementGroupByOutputType>[]
          }
          count: {
            args: Prisma.TournamentAchievementCountArgs<ExtArgs>
            result: $Utils.Optional<TournamentAchievementCountAggregateOutputType> | number
          }
        }
      }
      TournamentGold: {
        payload: Prisma.$TournamentGoldPayload<ExtArgs>
        fields: Prisma.TournamentGoldFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TournamentGoldFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentGoldPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TournamentGoldFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentGoldPayload>
          }
          findFirst: {
            args: Prisma.TournamentGoldFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentGoldPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TournamentGoldFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentGoldPayload>
          }
          findMany: {
            args: Prisma.TournamentGoldFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentGoldPayload>[]
          }
          create: {
            args: Prisma.TournamentGoldCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentGoldPayload>
          }
          createMany: {
            args: Prisma.TournamentGoldCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TournamentGoldCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentGoldPayload>[]
          }
          delete: {
            args: Prisma.TournamentGoldDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentGoldPayload>
          }
          update: {
            args: Prisma.TournamentGoldUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentGoldPayload>
          }
          deleteMany: {
            args: Prisma.TournamentGoldDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TournamentGoldUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TournamentGoldUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentGoldPayload>
          }
          aggregate: {
            args: Prisma.TournamentGoldAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTournamentGold>
          }
          groupBy: {
            args: Prisma.TournamentGoldGroupByArgs<ExtArgs>
            result: $Utils.Optional<TournamentGoldGroupByOutputType>[]
          }
          count: {
            args: Prisma.TournamentGoldCountArgs<ExtArgs>
            result: $Utils.Optional<TournamentGoldCountAggregateOutputType> | number
          }
        }
      }
      TournamentXp: {
        payload: Prisma.$TournamentXpPayload<ExtArgs>
        fields: Prisma.TournamentXpFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TournamentXpFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentXpPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TournamentXpFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentXpPayload>
          }
          findFirst: {
            args: Prisma.TournamentXpFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentXpPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TournamentXpFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentXpPayload>
          }
          findMany: {
            args: Prisma.TournamentXpFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentXpPayload>[]
          }
          create: {
            args: Prisma.TournamentXpCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentXpPayload>
          }
          createMany: {
            args: Prisma.TournamentXpCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TournamentXpCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentXpPayload>[]
          }
          delete: {
            args: Prisma.TournamentXpDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentXpPayload>
          }
          update: {
            args: Prisma.TournamentXpUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentXpPayload>
          }
          deleteMany: {
            args: Prisma.TournamentXpDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TournamentXpUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TournamentXpUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentXpPayload>
          }
          aggregate: {
            args: Prisma.TournamentXpAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTournamentXp>
          }
          groupBy: {
            args: Prisma.TournamentXpGroupByArgs<ExtArgs>
            result: $Utils.Optional<TournamentXpGroupByOutputType>[]
          }
          count: {
            args: Prisma.TournamentXpCountArgs<ExtArgs>
            result: $Utils.Optional<TournamentXpCountAggregateOutputType> | number
          }
        }
      }
      Achievement: {
        payload: Prisma.$AchievementPayload<ExtArgs>
        fields: Prisma.AchievementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AchievementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AchievementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          findFirst: {
            args: Prisma.AchievementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AchievementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          findMany: {
            args: Prisma.AchievementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>[]
          }
          create: {
            args: Prisma.AchievementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          createMany: {
            args: Prisma.AchievementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AchievementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>[]
          }
          delete: {
            args: Prisma.AchievementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          update: {
            args: Prisma.AchievementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          deleteMany: {
            args: Prisma.AchievementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AchievementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AchievementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          aggregate: {
            args: Prisma.AchievementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAchievement>
          }
          groupBy: {
            args: Prisma.AchievementGroupByArgs<ExtArgs>
            result: $Utils.Optional<AchievementGroupByOutputType>[]
          }
          count: {
            args: Prisma.AchievementCountArgs<ExtArgs>
            result: $Utils.Optional<AchievementCountAggregateOutputType> | number
          }
        }
      }
      Title: {
        payload: Prisma.$TitlePayload<ExtArgs>
        fields: Prisma.TitleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TitleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TitlePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TitleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TitlePayload>
          }
          findFirst: {
            args: Prisma.TitleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TitlePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TitleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TitlePayload>
          }
          findMany: {
            args: Prisma.TitleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TitlePayload>[]
          }
          create: {
            args: Prisma.TitleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TitlePayload>
          }
          createMany: {
            args: Prisma.TitleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TitleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TitlePayload>[]
          }
          delete: {
            args: Prisma.TitleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TitlePayload>
          }
          update: {
            args: Prisma.TitleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TitlePayload>
          }
          deleteMany: {
            args: Prisma.TitleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TitleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TitleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TitlePayload>
          }
          aggregate: {
            args: Prisma.TitleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTitle>
          }
          groupBy: {
            args: Prisma.TitleGroupByArgs<ExtArgs>
            result: $Utils.Optional<TitleGroupByOutputType>[]
          }
          count: {
            args: Prisma.TitleCountArgs<ExtArgs>
            result: $Utils.Optional<TitleCountAggregateOutputType> | number
          }
        }
      }
      BruteReport: {
        payload: Prisma.$BruteReportPayload<ExtArgs>
        fields: Prisma.BruteReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BruteReportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BruteReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BruteReportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BruteReportPayload>
          }
          findFirst: {
            args: Prisma.BruteReportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BruteReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BruteReportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BruteReportPayload>
          }
          findMany: {
            args: Prisma.BruteReportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BruteReportPayload>[]
          }
          create: {
            args: Prisma.BruteReportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BruteReportPayload>
          }
          createMany: {
            args: Prisma.BruteReportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BruteReportCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BruteReportPayload>[]
          }
          delete: {
            args: Prisma.BruteReportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BruteReportPayload>
          }
          update: {
            args: Prisma.BruteReportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BruteReportPayload>
          }
          deleteMany: {
            args: Prisma.BruteReportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BruteReportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BruteReportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BruteReportPayload>
          }
          aggregate: {
            args: Prisma.BruteReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBruteReport>
          }
          groupBy: {
            args: Prisma.BruteReportGroupByArgs<ExtArgs>
            result: $Utils.Optional<BruteReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.BruteReportCountArgs<ExtArgs>
            result: $Utils.Optional<BruteReportCountAggregateOutputType> | number
          }
        }
      }
      ServerState: {
        payload: Prisma.$ServerStatePayload<ExtArgs>
        fields: Prisma.ServerStateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServerStateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServerStatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServerStateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServerStatePayload>
          }
          findFirst: {
            args: Prisma.ServerStateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServerStatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServerStateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServerStatePayload>
          }
          findMany: {
            args: Prisma.ServerStateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServerStatePayload>[]
          }
          create: {
            args: Prisma.ServerStateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServerStatePayload>
          }
          createMany: {
            args: Prisma.ServerStateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ServerStateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServerStatePayload>[]
          }
          delete: {
            args: Prisma.ServerStateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServerStatePayload>
          }
          update: {
            args: Prisma.ServerStateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServerStatePayload>
          }
          deleteMany: {
            args: Prisma.ServerStateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ServerStateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ServerStateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServerStatePayload>
          }
          aggregate: {
            args: Prisma.ServerStateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateServerState>
          }
          groupBy: {
            args: Prisma.ServerStateGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServerStateGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServerStateCountArgs<ExtArgs>
            result: $Utils.Optional<ServerStateCountAggregateOutputType> | number
          }
        }
      }
      BannedWord: {
        payload: Prisma.$BannedWordPayload<ExtArgs>
        fields: Prisma.BannedWordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BannedWordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BannedWordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BannedWordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BannedWordPayload>
          }
          findFirst: {
            args: Prisma.BannedWordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BannedWordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BannedWordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BannedWordPayload>
          }
          findMany: {
            args: Prisma.BannedWordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BannedWordPayload>[]
          }
          create: {
            args: Prisma.BannedWordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BannedWordPayload>
          }
          createMany: {
            args: Prisma.BannedWordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BannedWordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BannedWordPayload>[]
          }
          delete: {
            args: Prisma.BannedWordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BannedWordPayload>
          }
          update: {
            args: Prisma.BannedWordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BannedWordPayload>
          }
          deleteMany: {
            args: Prisma.BannedWordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BannedWordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BannedWordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BannedWordPayload>
          }
          aggregate: {
            args: Prisma.BannedWordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBannedWord>
          }
          groupBy: {
            args: Prisma.BannedWordGroupByArgs<ExtArgs>
            result: $Utils.Optional<BannedWordGroupByOutputType>[]
          }
          count: {
            args: Prisma.BannedWordCountArgs<ExtArgs>
            result: $Utils.Optional<BannedWordCountAggregateOutputType> | number
          }
        }
      }
      BannedIp: {
        payload: Prisma.$BannedIpPayload<ExtArgs>
        fields: Prisma.BannedIpFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BannedIpFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BannedIpPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BannedIpFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BannedIpPayload>
          }
          findFirst: {
            args: Prisma.BannedIpFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BannedIpPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BannedIpFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BannedIpPayload>
          }
          findMany: {
            args: Prisma.BannedIpFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BannedIpPayload>[]
          }
          create: {
            args: Prisma.BannedIpCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BannedIpPayload>
          }
          createMany: {
            args: Prisma.BannedIpCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BannedIpCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BannedIpPayload>[]
          }
          delete: {
            args: Prisma.BannedIpDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BannedIpPayload>
          }
          update: {
            args: Prisma.BannedIpUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BannedIpPayload>
          }
          deleteMany: {
            args: Prisma.BannedIpDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BannedIpUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BannedIpUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BannedIpPayload>
          }
          aggregate: {
            args: Prisma.BannedIpAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBannedIp>
          }
          groupBy: {
            args: Prisma.BannedIpGroupByArgs<ExtArgs>
            result: $Utils.Optional<BannedIpGroupByOutputType>[]
          }
          count: {
            args: Prisma.BannedIpCountArgs<ExtArgs>
            result: $Utils.Optional<BannedIpCountAggregateOutputType> | number
          }
        }
      }
      Clan: {
        payload: Prisma.$ClanPayload<ExtArgs>
        fields: Prisma.ClanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanPayload>
          }
          findFirst: {
            args: Prisma.ClanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanPayload>
          }
          findMany: {
            args: Prisma.ClanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanPayload>[]
          }
          create: {
            args: Prisma.ClanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanPayload>
          }
          createMany: {
            args: Prisma.ClanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanPayload>[]
          }
          delete: {
            args: Prisma.ClanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanPayload>
          }
          update: {
            args: Prisma.ClanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanPayload>
          }
          deleteMany: {
            args: Prisma.ClanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanPayload>
          }
          aggregate: {
            args: Prisma.ClanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClan>
          }
          groupBy: {
            args: Prisma.ClanGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClanGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClanCountArgs<ExtArgs>
            result: $Utils.Optional<ClanCountAggregateOutputType> | number
          }
        }
      }
      ClanThread: {
        payload: Prisma.$ClanThreadPayload<ExtArgs>
        fields: Prisma.ClanThreadFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClanThreadFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanThreadPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClanThreadFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanThreadPayload>
          }
          findFirst: {
            args: Prisma.ClanThreadFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanThreadPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClanThreadFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanThreadPayload>
          }
          findMany: {
            args: Prisma.ClanThreadFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanThreadPayload>[]
          }
          create: {
            args: Prisma.ClanThreadCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanThreadPayload>
          }
          createMany: {
            args: Prisma.ClanThreadCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClanThreadCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanThreadPayload>[]
          }
          delete: {
            args: Prisma.ClanThreadDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanThreadPayload>
          }
          update: {
            args: Prisma.ClanThreadUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanThreadPayload>
          }
          deleteMany: {
            args: Prisma.ClanThreadDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClanThreadUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClanThreadUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanThreadPayload>
          }
          aggregate: {
            args: Prisma.ClanThreadAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClanThread>
          }
          groupBy: {
            args: Prisma.ClanThreadGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClanThreadGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClanThreadCountArgs<ExtArgs>
            result: $Utils.Optional<ClanThreadCountAggregateOutputType> | number
          }
        }
      }
      ClanPost: {
        payload: Prisma.$ClanPostPayload<ExtArgs>
        fields: Prisma.ClanPostFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClanPostFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanPostPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClanPostFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanPostPayload>
          }
          findFirst: {
            args: Prisma.ClanPostFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanPostPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClanPostFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanPostPayload>
          }
          findMany: {
            args: Prisma.ClanPostFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanPostPayload>[]
          }
          create: {
            args: Prisma.ClanPostCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanPostPayload>
          }
          createMany: {
            args: Prisma.ClanPostCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClanPostCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanPostPayload>[]
          }
          delete: {
            args: Prisma.ClanPostDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanPostPayload>
          }
          update: {
            args: Prisma.ClanPostUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanPostPayload>
          }
          deleteMany: {
            args: Prisma.ClanPostDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClanPostUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClanPostUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanPostPayload>
          }
          aggregate: {
            args: Prisma.ClanPostAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClanPost>
          }
          groupBy: {
            args: Prisma.ClanPostGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClanPostGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClanPostCountArgs<ExtArgs>
            result: $Utils.Optional<ClanPostCountAggregateOutputType> | number
          }
        }
      }
      BossDamage: {
        payload: Prisma.$BossDamagePayload<ExtArgs>
        fields: Prisma.BossDamageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BossDamageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BossDamagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BossDamageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BossDamagePayload>
          }
          findFirst: {
            args: Prisma.BossDamageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BossDamagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BossDamageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BossDamagePayload>
          }
          findMany: {
            args: Prisma.BossDamageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BossDamagePayload>[]
          }
          create: {
            args: Prisma.BossDamageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BossDamagePayload>
          }
          createMany: {
            args: Prisma.BossDamageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BossDamageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BossDamagePayload>[]
          }
          delete: {
            args: Prisma.BossDamageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BossDamagePayload>
          }
          update: {
            args: Prisma.BossDamageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BossDamagePayload>
          }
          deleteMany: {
            args: Prisma.BossDamageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BossDamageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BossDamageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BossDamagePayload>
          }
          aggregate: {
            args: Prisma.BossDamageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBossDamage>
          }
          groupBy: {
            args: Prisma.BossDamageGroupByArgs<ExtArgs>
            result: $Utils.Optional<BossDamageGroupByOutputType>[]
          }
          count: {
            args: Prisma.BossDamageCountArgs<ExtArgs>
            result: $Utils.Optional<BossDamageCountAggregateOutputType> | number
          }
        }
      }
      ClanWar: {
        payload: Prisma.$ClanWarPayload<ExtArgs>
        fields: Prisma.ClanWarFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClanWarFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanWarPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClanWarFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanWarPayload>
          }
          findFirst: {
            args: Prisma.ClanWarFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanWarPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClanWarFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanWarPayload>
          }
          findMany: {
            args: Prisma.ClanWarFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanWarPayload>[]
          }
          create: {
            args: Prisma.ClanWarCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanWarPayload>
          }
          createMany: {
            args: Prisma.ClanWarCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClanWarCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanWarPayload>[]
          }
          delete: {
            args: Prisma.ClanWarDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanWarPayload>
          }
          update: {
            args: Prisma.ClanWarUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanWarPayload>
          }
          deleteMany: {
            args: Prisma.ClanWarDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClanWarUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClanWarUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanWarPayload>
          }
          aggregate: {
            args: Prisma.ClanWarAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClanWar>
          }
          groupBy: {
            args: Prisma.ClanWarGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClanWarGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClanWarCountArgs<ExtArgs>
            result: $Utils.Optional<ClanWarCountAggregateOutputType> | number
          }
        }
      }
      ClanWarFighters: {
        payload: Prisma.$ClanWarFightersPayload<ExtArgs>
        fields: Prisma.ClanWarFightersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClanWarFightersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanWarFightersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClanWarFightersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanWarFightersPayload>
          }
          findFirst: {
            args: Prisma.ClanWarFightersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanWarFightersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClanWarFightersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanWarFightersPayload>
          }
          findMany: {
            args: Prisma.ClanWarFightersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanWarFightersPayload>[]
          }
          create: {
            args: Prisma.ClanWarFightersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanWarFightersPayload>
          }
          createMany: {
            args: Prisma.ClanWarFightersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClanWarFightersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanWarFightersPayload>[]
          }
          delete: {
            args: Prisma.ClanWarFightersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanWarFightersPayload>
          }
          update: {
            args: Prisma.ClanWarFightersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanWarFightersPayload>
          }
          deleteMany: {
            args: Prisma.ClanWarFightersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClanWarFightersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClanWarFightersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClanWarFightersPayload>
          }
          aggregate: {
            args: Prisma.ClanWarFightersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClanWarFighters>
          }
          groupBy: {
            args: Prisma.ClanWarFightersGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClanWarFightersGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClanWarFightersCountArgs<ExtArgs>
            result: $Utils.Optional<ClanWarFightersCountAggregateOutputType> | number
          }
        }
      }
      InventoryItem: {
        payload: Prisma.$InventoryItemPayload<ExtArgs>
        fields: Prisma.InventoryItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InventoryItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InventoryItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>
          }
          findFirst: {
            args: Prisma.InventoryItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InventoryItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>
          }
          findMany: {
            args: Prisma.InventoryItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>[]
          }
          create: {
            args: Prisma.InventoryItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>
          }
          createMany: {
            args: Prisma.InventoryItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InventoryItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>[]
          }
          delete: {
            args: Prisma.InventoryItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>
          }
          update: {
            args: Prisma.InventoryItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>
          }
          deleteMany: {
            args: Prisma.InventoryItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InventoryItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InventoryItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>
          }
          aggregate: {
            args: Prisma.InventoryItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInventoryItem>
          }
          groupBy: {
            args: Prisma.InventoryItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<InventoryItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.InventoryItemCountArgs<ExtArgs>
            result: $Utils.Optional<InventoryItemCountAggregateOutputType> | number
          }
        }
      }
      Release: {
        payload: Prisma.$ReleasePayload<ExtArgs>
        fields: Prisma.ReleaseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReleaseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReleasePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReleaseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReleasePayload>
          }
          findFirst: {
            args: Prisma.ReleaseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReleasePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReleaseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReleasePayload>
          }
          findMany: {
            args: Prisma.ReleaseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReleasePayload>[]
          }
          create: {
            args: Prisma.ReleaseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReleasePayload>
          }
          createMany: {
            args: Prisma.ReleaseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReleaseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReleasePayload>[]
          }
          delete: {
            args: Prisma.ReleaseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReleasePayload>
          }
          update: {
            args: Prisma.ReleaseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReleasePayload>
          }
          deleteMany: {
            args: Prisma.ReleaseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReleaseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReleaseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReleasePayload>
          }
          aggregate: {
            args: Prisma.ReleaseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRelease>
          }
          groupBy: {
            args: Prisma.ReleaseGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReleaseGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReleaseCountArgs<ExtArgs>
            result: $Utils.Optional<ReleaseCountAggregateOutputType> | number
          }
        }
      }
      Event: {
        payload: Prisma.$EventPayload<ExtArgs>
        fields: Prisma.EventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findFirst: {
            args: Prisma.EventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findMany: {
            args: Prisma.EventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          create: {
            args: Prisma.EventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          createMany: {
            args: Prisma.EventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          delete: {
            args: Prisma.EventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          update: {
            args: Prisma.EventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          deleteMany: {
            args: Prisma.EventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          aggregate: {
            args: Prisma.EventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEvent>
          }
          groupBy: {
            args: Prisma.EventGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventCountArgs<ExtArgs>
            result: $Utils.Optional<EventCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    brute?: BruteOmit
    bruteStartingStats?: BruteStartingStatsOmit
    fight?: FightOmit
    log?: LogOmit
    destinyChoice?: DestinyChoiceOmit
    tournament?: TournamentOmit
    tournamentAchievement?: TournamentAchievementOmit
    tournamentGold?: TournamentGoldOmit
    tournamentXp?: TournamentXpOmit
    achievement?: AchievementOmit
    title?: TitleOmit
    bruteReport?: BruteReportOmit
    serverState?: ServerStateOmit
    bannedWord?: BannedWordOmit
    bannedIp?: BannedIpOmit
    clan?: ClanOmit
    clanThread?: ClanThreadOmit
    clanPost?: ClanPostOmit
    bossDamage?: BossDamageOmit
    clanWar?: ClanWarOmit
    clanWarFighters?: ClanWarFightersOmit
    inventoryItem?: InventoryItemOmit
    release?: ReleaseOmit
    event?: EventOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    brutes: number
    achievements: number
    reports: number
    tournamentGolds: number
    inventory: number
    favoriteFights: number
    following: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brutes?: boolean | UserCountOutputTypeCountBrutesArgs
    achievements?: boolean | UserCountOutputTypeCountAchievementsArgs
    reports?: boolean | UserCountOutputTypeCountReportsArgs
    tournamentGolds?: boolean | UserCountOutputTypeCountTournamentGoldsArgs
    inventory?: boolean | UserCountOutputTypeCountInventoryArgs
    favoriteFights?: boolean | UserCountOutputTypeCountFavoriteFightsArgs
    following?: boolean | UserCountOutputTypeCountFollowingArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBrutesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BruteWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAchievementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AchievementWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BruteReportWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTournamentGoldsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TournamentGoldWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInventoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryItemWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFavoriteFightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FightWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFollowingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BruteWhereInput
  }


  /**
   * Count Type BruteCountOutputType
   */

  export type BruteCountOutputType = {
    pupils: number
    fights: number
    fightsAsAdversary: number
    logs: number
    destinyChoices: number
    tournaments: number
    opponents: number
    opponentOf: number
    achievements: number
    reports: number
    titles: number
    clanPosts: number
    threads: number
    inventory: number
    tournamentAchievements: number
    tournamentXps: number
    damageOnBosses: number
    followers: number
    inClanWarAttackerFighters: number
    inClanWarDefenderFighters: number
    wonEvents: number
  }

  export type BruteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pupils?: boolean | BruteCountOutputTypeCountPupilsArgs
    fights?: boolean | BruteCountOutputTypeCountFightsArgs
    fightsAsAdversary?: boolean | BruteCountOutputTypeCountFightsAsAdversaryArgs
    logs?: boolean | BruteCountOutputTypeCountLogsArgs
    destinyChoices?: boolean | BruteCountOutputTypeCountDestinyChoicesArgs
    tournaments?: boolean | BruteCountOutputTypeCountTournamentsArgs
    opponents?: boolean | BruteCountOutputTypeCountOpponentsArgs
    opponentOf?: boolean | BruteCountOutputTypeCountOpponentOfArgs
    achievements?: boolean | BruteCountOutputTypeCountAchievementsArgs
    reports?: boolean | BruteCountOutputTypeCountReportsArgs
    titles?: boolean | BruteCountOutputTypeCountTitlesArgs
    clanPosts?: boolean | BruteCountOutputTypeCountClanPostsArgs
    threads?: boolean | BruteCountOutputTypeCountThreadsArgs
    inventory?: boolean | BruteCountOutputTypeCountInventoryArgs
    tournamentAchievements?: boolean | BruteCountOutputTypeCountTournamentAchievementsArgs
    tournamentXps?: boolean | BruteCountOutputTypeCountTournamentXpsArgs
    damageOnBosses?: boolean | BruteCountOutputTypeCountDamageOnBossesArgs
    followers?: boolean | BruteCountOutputTypeCountFollowersArgs
    inClanWarAttackerFighters?: boolean | BruteCountOutputTypeCountInClanWarAttackerFightersArgs
    inClanWarDefenderFighters?: boolean | BruteCountOutputTypeCountInClanWarDefenderFightersArgs
    wonEvents?: boolean | BruteCountOutputTypeCountWonEventsArgs
  }

  // Custom InputTypes
  /**
   * BruteCountOutputType without action
   */
  export type BruteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BruteCountOutputType
     */
    select?: BruteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BruteCountOutputType without action
   */
  export type BruteCountOutputTypeCountPupilsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BruteWhereInput
  }

  /**
   * BruteCountOutputType without action
   */
  export type BruteCountOutputTypeCountFightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FightWhereInput
  }

  /**
   * BruteCountOutputType without action
   */
  export type BruteCountOutputTypeCountFightsAsAdversaryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FightWhereInput
  }

  /**
   * BruteCountOutputType without action
   */
  export type BruteCountOutputTypeCountLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogWhereInput
  }

  /**
   * BruteCountOutputType without action
   */
  export type BruteCountOutputTypeCountDestinyChoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DestinyChoiceWhereInput
  }

  /**
   * BruteCountOutputType without action
   */
  export type BruteCountOutputTypeCountTournamentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TournamentWhereInput
  }

  /**
   * BruteCountOutputType without action
   */
  export type BruteCountOutputTypeCountOpponentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BruteWhereInput
  }

  /**
   * BruteCountOutputType without action
   */
  export type BruteCountOutputTypeCountOpponentOfArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BruteWhereInput
  }

  /**
   * BruteCountOutputType without action
   */
  export type BruteCountOutputTypeCountAchievementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AchievementWhereInput
  }

  /**
   * BruteCountOutputType without action
   */
  export type BruteCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BruteReportWhereInput
  }

  /**
   * BruteCountOutputType without action
   */
  export type BruteCountOutputTypeCountTitlesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TitleWhereInput
  }

  /**
   * BruteCountOutputType without action
   */
  export type BruteCountOutputTypeCountClanPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClanPostWhereInput
  }

  /**
   * BruteCountOutputType without action
   */
  export type BruteCountOutputTypeCountThreadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClanThreadWhereInput
  }

  /**
   * BruteCountOutputType without action
   */
  export type BruteCountOutputTypeCountInventoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryItemWhereInput
  }

  /**
   * BruteCountOutputType without action
   */
  export type BruteCountOutputTypeCountTournamentAchievementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TournamentAchievementWhereInput
  }

  /**
   * BruteCountOutputType without action
   */
  export type BruteCountOutputTypeCountTournamentXpsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TournamentXpWhereInput
  }

  /**
   * BruteCountOutputType without action
   */
  export type BruteCountOutputTypeCountDamageOnBossesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BossDamageWhereInput
  }

  /**
   * BruteCountOutputType without action
   */
  export type BruteCountOutputTypeCountFollowersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * BruteCountOutputType without action
   */
  export type BruteCountOutputTypeCountInClanWarAttackerFightersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClanWarFightersWhereInput
  }

  /**
   * BruteCountOutputType without action
   */
  export type BruteCountOutputTypeCountInClanWarDefenderFightersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClanWarFightersWhereInput
  }

  /**
   * BruteCountOutputType without action
   */
  export type BruteCountOutputTypeCountWonEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }


  /**
   * Count Type FightCountOutputType
   */

  export type FightCountOutputType = {
    logs: number
    favoritedBy: number
  }

  export type FightCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    logs?: boolean | FightCountOutputTypeCountLogsArgs
    favoritedBy?: boolean | FightCountOutputTypeCountFavoritedByArgs
  }

  // Custom InputTypes
  /**
   * FightCountOutputType without action
   */
  export type FightCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FightCountOutputType
     */
    select?: FightCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FightCountOutputType without action
   */
  export type FightCountOutputTypeCountLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogWhereInput
  }

  /**
   * FightCountOutputType without action
   */
  export type FightCountOutputTypeCountFavoritedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type DestinyChoiceCountOutputType
   */

  export type DestinyChoiceCountOutputType = {
    logs: number
  }

  export type DestinyChoiceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    logs?: boolean | DestinyChoiceCountOutputTypeCountLogsArgs
  }

  // Custom InputTypes
  /**
   * DestinyChoiceCountOutputType without action
   */
  export type DestinyChoiceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DestinyChoiceCountOutputType
     */
    select?: DestinyChoiceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DestinyChoiceCountOutputType without action
   */
  export type DestinyChoiceCountOutputTypeCountLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogWhereInput
  }


  /**
   * Count Type TournamentCountOutputType
   */

  export type TournamentCountOutputType = {
    participants: number
    fights: number
  }

  export type TournamentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participants?: boolean | TournamentCountOutputTypeCountParticipantsArgs
    fights?: boolean | TournamentCountOutputTypeCountFightsArgs
  }

  // Custom InputTypes
  /**
   * TournamentCountOutputType without action
   */
  export type TournamentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentCountOutputType
     */
    select?: TournamentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TournamentCountOutputType without action
   */
  export type TournamentCountOutputTypeCountParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BruteWhereInput
  }

  /**
   * TournamentCountOutputType without action
   */
  export type TournamentCountOutputTypeCountFightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FightWhereInput
  }


  /**
   * Count Type TitleCountOutputType
   */

  export type TitleCountOutputType = {
    brutes: number
  }

  export type TitleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brutes?: boolean | TitleCountOutputTypeCountBrutesArgs
  }

  // Custom InputTypes
  /**
   * TitleCountOutputType without action
   */
  export type TitleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TitleCountOutputType
     */
    select?: TitleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TitleCountOutputType without action
   */
  export type TitleCountOutputTypeCountBrutesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BruteWhereInput
  }


  /**
   * Count Type BruteReportCountOutputType
   */

  export type BruteReportCountOutputType = {
    users: number
  }

  export type BruteReportCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | BruteReportCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * BruteReportCountOutputType without action
   */
  export type BruteReportCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BruteReportCountOutputType
     */
    select?: BruteReportCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BruteReportCountOutputType without action
   */
  export type BruteReportCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type ClanCountOutputType
   */

  export type ClanCountOutputType = {
    brutes: number
    joinRequests: number
    threads: number
    bossDamages: number
    attacks: number
    defenses: number
    wins: number
  }

  export type ClanCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brutes?: boolean | ClanCountOutputTypeCountBrutesArgs
    joinRequests?: boolean | ClanCountOutputTypeCountJoinRequestsArgs
    threads?: boolean | ClanCountOutputTypeCountThreadsArgs
    bossDamages?: boolean | ClanCountOutputTypeCountBossDamagesArgs
    attacks?: boolean | ClanCountOutputTypeCountAttacksArgs
    defenses?: boolean | ClanCountOutputTypeCountDefensesArgs
    wins?: boolean | ClanCountOutputTypeCountWinsArgs
  }

  // Custom InputTypes
  /**
   * ClanCountOutputType without action
   */
  export type ClanCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanCountOutputType
     */
    select?: ClanCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClanCountOutputType without action
   */
  export type ClanCountOutputTypeCountBrutesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BruteWhereInput
  }

  /**
   * ClanCountOutputType without action
   */
  export type ClanCountOutputTypeCountJoinRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BruteWhereInput
  }

  /**
   * ClanCountOutputType without action
   */
  export type ClanCountOutputTypeCountThreadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClanThreadWhereInput
  }

  /**
   * ClanCountOutputType without action
   */
  export type ClanCountOutputTypeCountBossDamagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BossDamageWhereInput
  }

  /**
   * ClanCountOutputType without action
   */
  export type ClanCountOutputTypeCountAttacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClanWarWhereInput
  }

  /**
   * ClanCountOutputType without action
   */
  export type ClanCountOutputTypeCountDefensesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClanWarWhereInput
  }

  /**
   * ClanCountOutputType without action
   */
  export type ClanCountOutputTypeCountWinsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClanWarWhereInput
  }


  /**
   * Count Type ClanThreadCountOutputType
   */

  export type ClanThreadCountOutputType = {
    posts: number
  }

  export type ClanThreadCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    posts?: boolean | ClanThreadCountOutputTypeCountPostsArgs
  }

  // Custom InputTypes
  /**
   * ClanThreadCountOutputType without action
   */
  export type ClanThreadCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanThreadCountOutputType
     */
    select?: ClanThreadCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClanThreadCountOutputType without action
   */
  export type ClanThreadCountOutputTypeCountPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClanPostWhereInput
  }


  /**
   * Count Type ClanWarCountOutputType
   */

  export type ClanWarCountOutputType = {
    fights: number
    fighters: number
  }

  export type ClanWarCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fights?: boolean | ClanWarCountOutputTypeCountFightsArgs
    fighters?: boolean | ClanWarCountOutputTypeCountFightersArgs
  }

  // Custom InputTypes
  /**
   * ClanWarCountOutputType without action
   */
  export type ClanWarCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanWarCountOutputType
     */
    select?: ClanWarCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClanWarCountOutputType without action
   */
  export type ClanWarCountOutputTypeCountFightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FightWhereInput
  }

  /**
   * ClanWarCountOutputType without action
   */
  export type ClanWarCountOutputTypeCountFightersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClanWarFightersWhereInput
  }


  /**
   * Count Type ClanWarFightersCountOutputType
   */

  export type ClanWarFightersCountOutputType = {
    attackers: number
    defenders: number
  }

  export type ClanWarFightersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attackers?: boolean | ClanWarFightersCountOutputTypeCountAttackersArgs
    defenders?: boolean | ClanWarFightersCountOutputTypeCountDefendersArgs
  }

  // Custom InputTypes
  /**
   * ClanWarFightersCountOutputType without action
   */
  export type ClanWarFightersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanWarFightersCountOutputType
     */
    select?: ClanWarFightersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClanWarFightersCountOutputType without action
   */
  export type ClanWarFightersCountOutputTypeCountAttackersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BruteWhereInput
  }

  /**
   * ClanWarFightersCountOutputType without action
   */
  export type ClanWarFightersCountOutputTypeCountDefendersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BruteWhereInput
  }


  /**
   * Count Type EventCountOutputType
   */

  export type EventCountOutputType = {
    brutes: number
  }

  export type EventCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brutes?: boolean | EventCountOutputTypeCountBrutesArgs
  }

  // Custom InputTypes
  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventCountOutputType
     */
    select?: EventCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountBrutesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BruteWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    bruteLimit: number | null
    gold: number | null
    fightSpeed: number | null
  }

  export type UserSumAggregateOutputType = {
    bruteLimit: number | null
    gold: number | null
    fightSpeed: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    lang: $Enums.Lang | null
    name: string | null
    admin: boolean | null
    moderator: boolean | null
    connexionToken: string | null
    bruteLimit: number | null
    gold: number | null
    fightSpeed: number | null
    backgroundMusic: boolean | null
    dinorpgDone: Date | null
    bannedAt: Date | null
    banReason: string | null
    lastReleaseSeen: string | null
    displayVersusPage: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    lang: $Enums.Lang | null
    name: string | null
    admin: boolean | null
    moderator: boolean | null
    connexionToken: string | null
    bruteLimit: number | null
    gold: number | null
    fightSpeed: number | null
    backgroundMusic: boolean | null
    dinorpgDone: Date | null
    bannedAt: Date | null
    banReason: string | null
    lastReleaseSeen: string | null
    displayVersusPage: boolean | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    lang: number
    name: number
    admin: number
    moderator: number
    connexionToken: number
    bruteLimit: number
    gold: number
    fightSpeed: number
    backgroundMusic: number
    dinorpgDone: number
    ips: number
    bannedAt: number
    banReason: number
    lastReleaseSeen: number
    displayVersusPage: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    bruteLimit?: true
    gold?: true
    fightSpeed?: true
  }

  export type UserSumAggregateInputType = {
    bruteLimit?: true
    gold?: true
    fightSpeed?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    lang?: true
    name?: true
    admin?: true
    moderator?: true
    connexionToken?: true
    bruteLimit?: true
    gold?: true
    fightSpeed?: true
    backgroundMusic?: true
    dinorpgDone?: true
    bannedAt?: true
    banReason?: true
    lastReleaseSeen?: true
    displayVersusPage?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    lang?: true
    name?: true
    admin?: true
    moderator?: true
    connexionToken?: true
    bruteLimit?: true
    gold?: true
    fightSpeed?: true
    backgroundMusic?: true
    dinorpgDone?: true
    bannedAt?: true
    banReason?: true
    lastReleaseSeen?: true
    displayVersusPage?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    lang?: true
    name?: true
    admin?: true
    moderator?: true
    connexionToken?: true
    bruteLimit?: true
    gold?: true
    fightSpeed?: true
    backgroundMusic?: true
    dinorpgDone?: true
    ips?: true
    bannedAt?: true
    banReason?: true
    lastReleaseSeen?: true
    displayVersusPage?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    lang: $Enums.Lang
    name: string
    admin: boolean
    moderator: boolean
    connexionToken: string
    bruteLimit: number
    gold: number
    fightSpeed: number
    backgroundMusic: boolean
    dinorpgDone: Date | null
    ips: string[]
    bannedAt: Date | null
    banReason: string | null
    lastReleaseSeen: string | null
    displayVersusPage: boolean
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lang?: boolean
    name?: boolean
    admin?: boolean
    moderator?: boolean
    connexionToken?: boolean
    bruteLimit?: boolean
    gold?: boolean
    fightSpeed?: boolean
    backgroundMusic?: boolean
    dinorpgDone?: boolean
    ips?: boolean
    bannedAt?: boolean
    banReason?: boolean
    lastReleaseSeen?: boolean
    displayVersusPage?: boolean
    brutes?: boolean | User$brutesArgs<ExtArgs>
    achievements?: boolean | User$achievementsArgs<ExtArgs>
    reports?: boolean | User$reportsArgs<ExtArgs>
    tournamentGolds?: boolean | User$tournamentGoldsArgs<ExtArgs>
    inventory?: boolean | User$inventoryArgs<ExtArgs>
    favoriteFights?: boolean | User$favoriteFightsArgs<ExtArgs>
    following?: boolean | User$followingArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lang?: boolean
    name?: boolean
    admin?: boolean
    moderator?: boolean
    connexionToken?: boolean
    bruteLimit?: boolean
    gold?: boolean
    fightSpeed?: boolean
    backgroundMusic?: boolean
    dinorpgDone?: boolean
    ips?: boolean
    bannedAt?: boolean
    banReason?: boolean
    lastReleaseSeen?: boolean
    displayVersusPage?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    lang?: boolean
    name?: boolean
    admin?: boolean
    moderator?: boolean
    connexionToken?: boolean
    bruteLimit?: boolean
    gold?: boolean
    fightSpeed?: boolean
    backgroundMusic?: boolean
    dinorpgDone?: boolean
    ips?: boolean
    bannedAt?: boolean
    banReason?: boolean
    lastReleaseSeen?: boolean
    displayVersusPage?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "lang" | "name" | "admin" | "moderator" | "connexionToken" | "bruteLimit" | "gold" | "fightSpeed" | "backgroundMusic" | "dinorpgDone" | "ips" | "bannedAt" | "banReason" | "lastReleaseSeen" | "displayVersusPage", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brutes?: boolean | User$brutesArgs<ExtArgs>
    achievements?: boolean | User$achievementsArgs<ExtArgs>
    reports?: boolean | User$reportsArgs<ExtArgs>
    tournamentGolds?: boolean | User$tournamentGoldsArgs<ExtArgs>
    inventory?: boolean | User$inventoryArgs<ExtArgs>
    favoriteFights?: boolean | User$favoriteFightsArgs<ExtArgs>
    following?: boolean | User$followingArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      brutes: Prisma.$BrutePayload<ExtArgs>[]
      achievements: Prisma.$AchievementPayload<ExtArgs>[]
      reports: Prisma.$BruteReportPayload<ExtArgs>[]
      tournamentGolds: Prisma.$TournamentGoldPayload<ExtArgs>[]
      inventory: Prisma.$InventoryItemPayload<ExtArgs>[]
      favoriteFights: Prisma.$FightPayload<ExtArgs>[]
      following: Prisma.$BrutePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      lang: $Enums.Lang
      name: string
      admin: boolean
      moderator: boolean
      connexionToken: string
      bruteLimit: number
      gold: number
      fightSpeed: number
      backgroundMusic: boolean
      dinorpgDone: Date | null
      ips: string[]
      bannedAt: Date | null
      banReason: string | null
      lastReleaseSeen: string | null
      displayVersusPage: boolean
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    brutes<T extends User$brutesArgs<ExtArgs> = {}>(args?: Subset<T, User$brutesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrutePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    achievements<T extends User$achievementsArgs<ExtArgs> = {}>(args?: Subset<T, User$achievementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    reports<T extends User$reportsArgs<ExtArgs> = {}>(args?: Subset<T, User$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BruteReportPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    tournamentGolds<T extends User$tournamentGoldsArgs<ExtArgs> = {}>(args?: Subset<T, User$tournamentGoldsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentGoldPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    inventory<T extends User$inventoryArgs<ExtArgs> = {}>(args?: Subset<T, User$inventoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    favoriteFights<T extends User$favoriteFightsArgs<ExtArgs> = {}>(args?: Subset<T, User$favoriteFightsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FightPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    following<T extends User$followingArgs<ExtArgs> = {}>(args?: Subset<T, User$followingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrutePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly lang: FieldRef<"User", 'Lang'>
    readonly name: FieldRef<"User", 'String'>
    readonly admin: FieldRef<"User", 'Boolean'>
    readonly moderator: FieldRef<"User", 'Boolean'>
    readonly connexionToken: FieldRef<"User", 'String'>
    readonly bruteLimit: FieldRef<"User", 'Int'>
    readonly gold: FieldRef<"User", 'Int'>
    readonly fightSpeed: FieldRef<"User", 'Int'>
    readonly backgroundMusic: FieldRef<"User", 'Boolean'>
    readonly dinorpgDone: FieldRef<"User", 'DateTime'>
    readonly ips: FieldRef<"User", 'String[]'>
    readonly bannedAt: FieldRef<"User", 'DateTime'>
    readonly banReason: FieldRef<"User", 'String'>
    readonly lastReleaseSeen: FieldRef<"User", 'String'>
    readonly displayVersusPage: FieldRef<"User", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.brutes
   */
  export type User$brutesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brute
     */
    omit?: BruteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteInclude<ExtArgs> | null
    where?: BruteWhereInput
    orderBy?: BruteOrderByWithRelationInput | BruteOrderByWithRelationInput[]
    cursor?: BruteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BruteScalarFieldEnum | BruteScalarFieldEnum[]
  }

  /**
   * User.achievements
   */
  export type User$achievementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    where?: AchievementWhereInput
    orderBy?: AchievementOrderByWithRelationInput | AchievementOrderByWithRelationInput[]
    cursor?: AchievementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AchievementScalarFieldEnum | AchievementScalarFieldEnum[]
  }

  /**
   * User.reports
   */
  export type User$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BruteReport
     */
    select?: BruteReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BruteReport
     */
    omit?: BruteReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteReportInclude<ExtArgs> | null
    where?: BruteReportWhereInput
    orderBy?: BruteReportOrderByWithRelationInput | BruteReportOrderByWithRelationInput[]
    cursor?: BruteReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BruteReportScalarFieldEnum | BruteReportScalarFieldEnum[]
  }

  /**
   * User.tournamentGolds
   */
  export type User$tournamentGoldsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentGold
     */
    select?: TournamentGoldSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentGold
     */
    omit?: TournamentGoldOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentGoldInclude<ExtArgs> | null
    where?: TournamentGoldWhereInput
    orderBy?: TournamentGoldOrderByWithRelationInput | TournamentGoldOrderByWithRelationInput[]
    cursor?: TournamentGoldWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TournamentGoldScalarFieldEnum | TournamentGoldScalarFieldEnum[]
  }

  /**
   * User.inventory
   */
  export type User$inventoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    where?: InventoryItemWhereInput
    orderBy?: InventoryItemOrderByWithRelationInput | InventoryItemOrderByWithRelationInput[]
    cursor?: InventoryItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryItemScalarFieldEnum | InventoryItemScalarFieldEnum[]
  }

  /**
   * User.favoriteFights
   */
  export type User$favoriteFightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fight
     */
    select?: FightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Fight
     */
    omit?: FightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FightInclude<ExtArgs> | null
    where?: FightWhereInput
    orderBy?: FightOrderByWithRelationInput | FightOrderByWithRelationInput[]
    cursor?: FightWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FightScalarFieldEnum | FightScalarFieldEnum[]
  }

  /**
   * User.following
   */
  export type User$followingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brute
     */
    omit?: BruteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteInclude<ExtArgs> | null
    where?: BruteWhereInput
    orderBy?: BruteOrderByWithRelationInput | BruteOrderByWithRelationInput[]
    cursor?: BruteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BruteScalarFieldEnum | BruteScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Brute
   */

  export type AggregateBrute = {
    _count: BruteCountAggregateOutputType | null
    _avg: BruteAvgAggregateOutputType | null
    _sum: BruteSumAggregateOutputType | null
    _min: BruteMinAggregateOutputType | null
    _max: BruteMaxAggregateOutputType | null
  }

  export type BruteAvgAggregateOutputType = {
    level: number | null
    xp: number | null
    hp: number | null
    enduranceStat: number | null
    enduranceModifier: number | null
    enduranceValue: number | null
    strengthStat: number | null
    strengthModifier: number | null
    strengthValue: number | null
    agilityStat: number | null
    agilityModifier: number | null
    agilityValue: number | null
    speedStat: number | null
    speedModifier: number | null
    speedValue: number | null
    ranking: number | null
    ascensions: number | null
    pupilsCount: number | null
    currentTournamentStepWatched: number | null
    globalTournamentRoundWatched: number | null
    eventTournamentRoundWatched: number | null
    fightsLeft: number | null
    victories: number | null
    losses: number | null
    tournamentWins: number | null
    resets: number | null
  }

  export type BruteSumAggregateOutputType = {
    level: number | null
    xp: number | null
    hp: number | null
    enduranceStat: number | null
    enduranceModifier: number | null
    enduranceValue: number | null
    strengthStat: number | null
    strengthModifier: number | null
    strengthValue: number | null
    agilityStat: number | null
    agilityModifier: number | null
    agilityValue: number | null
    speedStat: number | null
    speedModifier: number | null
    speedValue: number | null
    ranking: number | null
    ascensions: number | null
    pupilsCount: number | null
    currentTournamentStepWatched: number | null
    globalTournamentRoundWatched: number | null
    eventTournamentRoundWatched: number | null
    fightsLeft: number | null
    victories: number | null
    losses: number | null
    tournamentWins: number | null
    resets: number | null
  }

  export type BruteMinAggregateOutputType = {
    id: string | null
    name: string | null
    deletedAt: Date | null
    createdAt: Date | null
    willBeDeletedAt: Date | null
    deletionReason: string | null
    level: number | null
    xp: number | null
    hp: number | null
    enduranceStat: number | null
    enduranceModifier: number | null
    enduranceValue: number | null
    strengthStat: number | null
    strengthModifier: number | null
    strengthValue: number | null
    agilityStat: number | null
    agilityModifier: number | null
    agilityValue: number | null
    speedStat: number | null
    speedModifier: number | null
    speedValue: number | null
    ranking: number | null
    gender: $Enums.Gender | null
    userId: string | null
    body: string | null
    colors: string | null
    ascensions: number | null
    masterId: string | null
    pupilsCount: number | null
    clanId: string | null
    registeredForTournament: boolean | null
    nextTournamentDate: Date | null
    currentTournamentDate: Date | null
    currentTournamentStepWatched: number | null
    globalTournamentWatchedDate: Date | null
    globalTournamentRoundWatched: number | null
    eventTournamentWatchedDate: Date | null
    eventTournamentRoundWatched: number | null
    lastFight: Date | null
    fightsLeft: number | null
    victories: number | null
    losses: number | null
    opponentsGeneratedAt: Date | null
    canRankUpSince: Date | null
    favorite: boolean | null
    wantToJoinClanId: string | null
    tournamentWins: number | null
    eventId: string | null
    resets: number | null
  }

  export type BruteMaxAggregateOutputType = {
    id: string | null
    name: string | null
    deletedAt: Date | null
    createdAt: Date | null
    willBeDeletedAt: Date | null
    deletionReason: string | null
    level: number | null
    xp: number | null
    hp: number | null
    enduranceStat: number | null
    enduranceModifier: number | null
    enduranceValue: number | null
    strengthStat: number | null
    strengthModifier: number | null
    strengthValue: number | null
    agilityStat: number | null
    agilityModifier: number | null
    agilityValue: number | null
    speedStat: number | null
    speedModifier: number | null
    speedValue: number | null
    ranking: number | null
    gender: $Enums.Gender | null
    userId: string | null
    body: string | null
    colors: string | null
    ascensions: number | null
    masterId: string | null
    pupilsCount: number | null
    clanId: string | null
    registeredForTournament: boolean | null
    nextTournamentDate: Date | null
    currentTournamentDate: Date | null
    currentTournamentStepWatched: number | null
    globalTournamentWatchedDate: Date | null
    globalTournamentRoundWatched: number | null
    eventTournamentWatchedDate: Date | null
    eventTournamentRoundWatched: number | null
    lastFight: Date | null
    fightsLeft: number | null
    victories: number | null
    losses: number | null
    opponentsGeneratedAt: Date | null
    canRankUpSince: Date | null
    favorite: boolean | null
    wantToJoinClanId: string | null
    tournamentWins: number | null
    eventId: string | null
    resets: number | null
  }

  export type BruteCountAggregateOutputType = {
    id: number
    name: number
    deletedAt: number
    createdAt: number
    willBeDeletedAt: number
    deletionReason: number
    destinyPath: number
    previousDestinyPath: number
    level: number
    xp: number
    hp: number
    enduranceStat: number
    enduranceModifier: number
    enduranceValue: number
    strengthStat: number
    strengthModifier: number
    strengthValue: number
    agilityStat: number
    agilityModifier: number
    agilityValue: number
    speedStat: number
    speedModifier: number
    speedValue: number
    ranking: number
    gender: number
    userId: number
    body: number
    colors: number
    weapons: number
    skills: number
    pets: number
    ascensions: number
    ascendedWeapons: number
    ascendedSkills: number
    ascendedPets: number
    masterId: number
    pupilsCount: number
    clanId: number
    registeredForTournament: number
    nextTournamentDate: number
    currentTournamentDate: number
    currentTournamentStepWatched: number
    globalTournamentWatchedDate: number
    globalTournamentRoundWatched: number
    eventTournamentWatchedDate: number
    eventTournamentRoundWatched: number
    lastFight: number
    fightsLeft: number
    victories: number
    losses: number
    opponentsGeneratedAt: number
    canRankUpSince: number
    favorite: number
    wantToJoinClanId: number
    tournamentWins: number
    eventId: number
    resets: number
    _all: number
  }


  export type BruteAvgAggregateInputType = {
    level?: true
    xp?: true
    hp?: true
    enduranceStat?: true
    enduranceModifier?: true
    enduranceValue?: true
    strengthStat?: true
    strengthModifier?: true
    strengthValue?: true
    agilityStat?: true
    agilityModifier?: true
    agilityValue?: true
    speedStat?: true
    speedModifier?: true
    speedValue?: true
    ranking?: true
    ascensions?: true
    pupilsCount?: true
    currentTournamentStepWatched?: true
    globalTournamentRoundWatched?: true
    eventTournamentRoundWatched?: true
    fightsLeft?: true
    victories?: true
    losses?: true
    tournamentWins?: true
    resets?: true
  }

  export type BruteSumAggregateInputType = {
    level?: true
    xp?: true
    hp?: true
    enduranceStat?: true
    enduranceModifier?: true
    enduranceValue?: true
    strengthStat?: true
    strengthModifier?: true
    strengthValue?: true
    agilityStat?: true
    agilityModifier?: true
    agilityValue?: true
    speedStat?: true
    speedModifier?: true
    speedValue?: true
    ranking?: true
    ascensions?: true
    pupilsCount?: true
    currentTournamentStepWatched?: true
    globalTournamentRoundWatched?: true
    eventTournamentRoundWatched?: true
    fightsLeft?: true
    victories?: true
    losses?: true
    tournamentWins?: true
    resets?: true
  }

  export type BruteMinAggregateInputType = {
    id?: true
    name?: true
    deletedAt?: true
    createdAt?: true
    willBeDeletedAt?: true
    deletionReason?: true
    level?: true
    xp?: true
    hp?: true
    enduranceStat?: true
    enduranceModifier?: true
    enduranceValue?: true
    strengthStat?: true
    strengthModifier?: true
    strengthValue?: true
    agilityStat?: true
    agilityModifier?: true
    agilityValue?: true
    speedStat?: true
    speedModifier?: true
    speedValue?: true
    ranking?: true
    gender?: true
    userId?: true
    body?: true
    colors?: true
    ascensions?: true
    masterId?: true
    pupilsCount?: true
    clanId?: true
    registeredForTournament?: true
    nextTournamentDate?: true
    currentTournamentDate?: true
    currentTournamentStepWatched?: true
    globalTournamentWatchedDate?: true
    globalTournamentRoundWatched?: true
    eventTournamentWatchedDate?: true
    eventTournamentRoundWatched?: true
    lastFight?: true
    fightsLeft?: true
    victories?: true
    losses?: true
    opponentsGeneratedAt?: true
    canRankUpSince?: true
    favorite?: true
    wantToJoinClanId?: true
    tournamentWins?: true
    eventId?: true
    resets?: true
  }

  export type BruteMaxAggregateInputType = {
    id?: true
    name?: true
    deletedAt?: true
    createdAt?: true
    willBeDeletedAt?: true
    deletionReason?: true
    level?: true
    xp?: true
    hp?: true
    enduranceStat?: true
    enduranceModifier?: true
    enduranceValue?: true
    strengthStat?: true
    strengthModifier?: true
    strengthValue?: true
    agilityStat?: true
    agilityModifier?: true
    agilityValue?: true
    speedStat?: true
    speedModifier?: true
    speedValue?: true
    ranking?: true
    gender?: true
    userId?: true
    body?: true
    colors?: true
    ascensions?: true
    masterId?: true
    pupilsCount?: true
    clanId?: true
    registeredForTournament?: true
    nextTournamentDate?: true
    currentTournamentDate?: true
    currentTournamentStepWatched?: true
    globalTournamentWatchedDate?: true
    globalTournamentRoundWatched?: true
    eventTournamentWatchedDate?: true
    eventTournamentRoundWatched?: true
    lastFight?: true
    fightsLeft?: true
    victories?: true
    losses?: true
    opponentsGeneratedAt?: true
    canRankUpSince?: true
    favorite?: true
    wantToJoinClanId?: true
    tournamentWins?: true
    eventId?: true
    resets?: true
  }

  export type BruteCountAggregateInputType = {
    id?: true
    name?: true
    deletedAt?: true
    createdAt?: true
    willBeDeletedAt?: true
    deletionReason?: true
    destinyPath?: true
    previousDestinyPath?: true
    level?: true
    xp?: true
    hp?: true
    enduranceStat?: true
    enduranceModifier?: true
    enduranceValue?: true
    strengthStat?: true
    strengthModifier?: true
    strengthValue?: true
    agilityStat?: true
    agilityModifier?: true
    agilityValue?: true
    speedStat?: true
    speedModifier?: true
    speedValue?: true
    ranking?: true
    gender?: true
    userId?: true
    body?: true
    colors?: true
    weapons?: true
    skills?: true
    pets?: true
    ascensions?: true
    ascendedWeapons?: true
    ascendedSkills?: true
    ascendedPets?: true
    masterId?: true
    pupilsCount?: true
    clanId?: true
    registeredForTournament?: true
    nextTournamentDate?: true
    currentTournamentDate?: true
    currentTournamentStepWatched?: true
    globalTournamentWatchedDate?: true
    globalTournamentRoundWatched?: true
    eventTournamentWatchedDate?: true
    eventTournamentRoundWatched?: true
    lastFight?: true
    fightsLeft?: true
    victories?: true
    losses?: true
    opponentsGeneratedAt?: true
    canRankUpSince?: true
    favorite?: true
    wantToJoinClanId?: true
    tournamentWins?: true
    eventId?: true
    resets?: true
    _all?: true
  }

  export type BruteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Brute to aggregate.
     */
    where?: BruteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brutes to fetch.
     */
    orderBy?: BruteOrderByWithRelationInput | BruteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BruteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brutes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brutes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Brutes
    **/
    _count?: true | BruteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BruteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BruteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BruteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BruteMaxAggregateInputType
  }

  export type GetBruteAggregateType<T extends BruteAggregateArgs> = {
        [P in keyof T & keyof AggregateBrute]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBrute[P]>
      : GetScalarType<T[P], AggregateBrute[P]>
  }




  export type BruteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BruteWhereInput
    orderBy?: BruteOrderByWithAggregationInput | BruteOrderByWithAggregationInput[]
    by: BruteScalarFieldEnum[] | BruteScalarFieldEnum
    having?: BruteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BruteCountAggregateInputType | true
    _avg?: BruteAvgAggregateInputType
    _sum?: BruteSumAggregateInputType
    _min?: BruteMinAggregateInputType
    _max?: BruteMaxAggregateInputType
  }

  export type BruteGroupByOutputType = {
    id: string
    name: string
    deletedAt: Date | null
    createdAt: Date
    willBeDeletedAt: Date | null
    deletionReason: string | null
    destinyPath: $Enums.DestinyChoiceSide[]
    previousDestinyPath: $Enums.DestinyChoiceSide[]
    level: number
    xp: number
    hp: number
    enduranceStat: number
    enduranceModifier: number
    enduranceValue: number
    strengthStat: number
    strengthModifier: number
    strengthValue: number
    agilityStat: number
    agilityModifier: number
    agilityValue: number
    speedStat: number
    speedModifier: number
    speedValue: number
    ranking: number
    gender: $Enums.Gender
    userId: string | null
    body: string
    colors: string
    weapons: $Enums.WeaponName[]
    skills: $Enums.SkillName[]
    pets: $Enums.PetName[]
    ascensions: number
    ascendedWeapons: $Enums.WeaponName[]
    ascendedSkills: $Enums.SkillName[]
    ascendedPets: $Enums.PetName[]
    masterId: string | null
    pupilsCount: number
    clanId: string | null
    registeredForTournament: boolean
    nextTournamentDate: Date | null
    currentTournamentDate: Date | null
    currentTournamentStepWatched: number | null
    globalTournamentWatchedDate: Date | null
    globalTournamentRoundWatched: number | null
    eventTournamentWatchedDate: Date | null
    eventTournamentRoundWatched: number | null
    lastFight: Date | null
    fightsLeft: number
    victories: number
    losses: number
    opponentsGeneratedAt: Date | null
    canRankUpSince: Date | null
    favorite: boolean
    wantToJoinClanId: string | null
    tournamentWins: number
    eventId: string | null
    resets: number
    _count: BruteCountAggregateOutputType | null
    _avg: BruteAvgAggregateOutputType | null
    _sum: BruteSumAggregateOutputType | null
    _min: BruteMinAggregateOutputType | null
    _max: BruteMaxAggregateOutputType | null
  }

  type GetBruteGroupByPayload<T extends BruteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BruteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BruteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BruteGroupByOutputType[P]>
            : GetScalarType<T[P], BruteGroupByOutputType[P]>
        }
      >
    >


  export type BruteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    willBeDeletedAt?: boolean
    deletionReason?: boolean
    destinyPath?: boolean
    previousDestinyPath?: boolean
    level?: boolean
    xp?: boolean
    hp?: boolean
    enduranceStat?: boolean
    enduranceModifier?: boolean
    enduranceValue?: boolean
    strengthStat?: boolean
    strengthModifier?: boolean
    strengthValue?: boolean
    agilityStat?: boolean
    agilityModifier?: boolean
    agilityValue?: boolean
    speedStat?: boolean
    speedModifier?: boolean
    speedValue?: boolean
    ranking?: boolean
    gender?: boolean
    userId?: boolean
    body?: boolean
    colors?: boolean
    weapons?: boolean
    skills?: boolean
    pets?: boolean
    ascensions?: boolean
    ascendedWeapons?: boolean
    ascendedSkills?: boolean
    ascendedPets?: boolean
    masterId?: boolean
    pupilsCount?: boolean
    clanId?: boolean
    registeredForTournament?: boolean
    nextTournamentDate?: boolean
    currentTournamentDate?: boolean
    currentTournamentStepWatched?: boolean
    globalTournamentWatchedDate?: boolean
    globalTournamentRoundWatched?: boolean
    eventTournamentWatchedDate?: boolean
    eventTournamentRoundWatched?: boolean
    lastFight?: boolean
    fightsLeft?: boolean
    victories?: boolean
    losses?: boolean
    opponentsGeneratedAt?: boolean
    canRankUpSince?: boolean
    favorite?: boolean
    wantToJoinClanId?: boolean
    tournamentWins?: boolean
    eventId?: boolean
    resets?: boolean
    user?: boolean | Brute$userArgs<ExtArgs>
    master?: boolean | Brute$masterArgs<ExtArgs>
    pupils?: boolean | Brute$pupilsArgs<ExtArgs>
    clan?: boolean | Brute$clanArgs<ExtArgs>
    fights?: boolean | Brute$fightsArgs<ExtArgs>
    fightsAsAdversary?: boolean | Brute$fightsAsAdversaryArgs<ExtArgs>
    logs?: boolean | Brute$logsArgs<ExtArgs>
    destinyChoices?: boolean | Brute$destinyChoicesArgs<ExtArgs>
    tournaments?: boolean | Brute$tournamentsArgs<ExtArgs>
    opponents?: boolean | Brute$opponentsArgs<ExtArgs>
    opponentOf?: boolean | Brute$opponentOfArgs<ExtArgs>
    achievements?: boolean | Brute$achievementsArgs<ExtArgs>
    reports?: boolean | Brute$reportsArgs<ExtArgs>
    titles?: boolean | Brute$titlesArgs<ExtArgs>
    masterOfClan?: boolean | Brute$masterOfClanArgs<ExtArgs>
    clanPosts?: boolean | Brute$clanPostsArgs<ExtArgs>
    wantToJoinClan?: boolean | Brute$wantToJoinClanArgs<ExtArgs>
    threads?: boolean | Brute$threadsArgs<ExtArgs>
    inventory?: boolean | Brute$inventoryArgs<ExtArgs>
    tournamentAchievements?: boolean | Brute$tournamentAchievementsArgs<ExtArgs>
    tournamentXps?: boolean | Brute$tournamentXpsArgs<ExtArgs>
    startingStats?: boolean | Brute$startingStatsArgs<ExtArgs>
    damageOnBosses?: boolean | Brute$damageOnBossesArgs<ExtArgs>
    followers?: boolean | Brute$followersArgs<ExtArgs>
    inClanWarAttackerFighters?: boolean | Brute$inClanWarAttackerFightersArgs<ExtArgs>
    inClanWarDefenderFighters?: boolean | Brute$inClanWarDefenderFightersArgs<ExtArgs>
    event?: boolean | Brute$eventArgs<ExtArgs>
    wonEvents?: boolean | Brute$wonEventsArgs<ExtArgs>
    _count?: boolean | BruteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["brute"]>

  export type BruteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    willBeDeletedAt?: boolean
    deletionReason?: boolean
    destinyPath?: boolean
    previousDestinyPath?: boolean
    level?: boolean
    xp?: boolean
    hp?: boolean
    enduranceStat?: boolean
    enduranceModifier?: boolean
    enduranceValue?: boolean
    strengthStat?: boolean
    strengthModifier?: boolean
    strengthValue?: boolean
    agilityStat?: boolean
    agilityModifier?: boolean
    agilityValue?: boolean
    speedStat?: boolean
    speedModifier?: boolean
    speedValue?: boolean
    ranking?: boolean
    gender?: boolean
    userId?: boolean
    body?: boolean
    colors?: boolean
    weapons?: boolean
    skills?: boolean
    pets?: boolean
    ascensions?: boolean
    ascendedWeapons?: boolean
    ascendedSkills?: boolean
    ascendedPets?: boolean
    masterId?: boolean
    pupilsCount?: boolean
    clanId?: boolean
    registeredForTournament?: boolean
    nextTournamentDate?: boolean
    currentTournamentDate?: boolean
    currentTournamentStepWatched?: boolean
    globalTournamentWatchedDate?: boolean
    globalTournamentRoundWatched?: boolean
    eventTournamentWatchedDate?: boolean
    eventTournamentRoundWatched?: boolean
    lastFight?: boolean
    fightsLeft?: boolean
    victories?: boolean
    losses?: boolean
    opponentsGeneratedAt?: boolean
    canRankUpSince?: boolean
    favorite?: boolean
    wantToJoinClanId?: boolean
    tournamentWins?: boolean
    eventId?: boolean
    resets?: boolean
    user?: boolean | Brute$userArgs<ExtArgs>
    master?: boolean | Brute$masterArgs<ExtArgs>
    clan?: boolean | Brute$clanArgs<ExtArgs>
    wantToJoinClan?: boolean | Brute$wantToJoinClanArgs<ExtArgs>
    event?: boolean | Brute$eventArgs<ExtArgs>
  }, ExtArgs["result"]["brute"]>

  export type BruteSelectScalar = {
    id?: boolean
    name?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    willBeDeletedAt?: boolean
    deletionReason?: boolean
    destinyPath?: boolean
    previousDestinyPath?: boolean
    level?: boolean
    xp?: boolean
    hp?: boolean
    enduranceStat?: boolean
    enduranceModifier?: boolean
    enduranceValue?: boolean
    strengthStat?: boolean
    strengthModifier?: boolean
    strengthValue?: boolean
    agilityStat?: boolean
    agilityModifier?: boolean
    agilityValue?: boolean
    speedStat?: boolean
    speedModifier?: boolean
    speedValue?: boolean
    ranking?: boolean
    gender?: boolean
    userId?: boolean
    body?: boolean
    colors?: boolean
    weapons?: boolean
    skills?: boolean
    pets?: boolean
    ascensions?: boolean
    ascendedWeapons?: boolean
    ascendedSkills?: boolean
    ascendedPets?: boolean
    masterId?: boolean
    pupilsCount?: boolean
    clanId?: boolean
    registeredForTournament?: boolean
    nextTournamentDate?: boolean
    currentTournamentDate?: boolean
    currentTournamentStepWatched?: boolean
    globalTournamentWatchedDate?: boolean
    globalTournamentRoundWatched?: boolean
    eventTournamentWatchedDate?: boolean
    eventTournamentRoundWatched?: boolean
    lastFight?: boolean
    fightsLeft?: boolean
    victories?: boolean
    losses?: boolean
    opponentsGeneratedAt?: boolean
    canRankUpSince?: boolean
    favorite?: boolean
    wantToJoinClanId?: boolean
    tournamentWins?: boolean
    eventId?: boolean
    resets?: boolean
  }

  export type BruteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "deletedAt" | "createdAt" | "willBeDeletedAt" | "deletionReason" | "destinyPath" | "previousDestinyPath" | "level" | "xp" | "hp" | "enduranceStat" | "enduranceModifier" | "enduranceValue" | "strengthStat" | "strengthModifier" | "strengthValue" | "agilityStat" | "agilityModifier" | "agilityValue" | "speedStat" | "speedModifier" | "speedValue" | "ranking" | "gender" | "userId" | "body" | "colors" | "weapons" | "skills" | "pets" | "ascensions" | "ascendedWeapons" | "ascendedSkills" | "ascendedPets" | "masterId" | "pupilsCount" | "clanId" | "registeredForTournament" | "nextTournamentDate" | "currentTournamentDate" | "currentTournamentStepWatched" | "globalTournamentWatchedDate" | "globalTournamentRoundWatched" | "eventTournamentWatchedDate" | "eventTournamentRoundWatched" | "lastFight" | "fightsLeft" | "victories" | "losses" | "opponentsGeneratedAt" | "canRankUpSince" | "favorite" | "wantToJoinClanId" | "tournamentWins" | "eventId" | "resets", ExtArgs["result"]["brute"]>
  export type BruteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Brute$userArgs<ExtArgs>
    master?: boolean | Brute$masterArgs<ExtArgs>
    pupils?: boolean | Brute$pupilsArgs<ExtArgs>
    clan?: boolean | Brute$clanArgs<ExtArgs>
    fights?: boolean | Brute$fightsArgs<ExtArgs>
    fightsAsAdversary?: boolean | Brute$fightsAsAdversaryArgs<ExtArgs>
    logs?: boolean | Brute$logsArgs<ExtArgs>
    destinyChoices?: boolean | Brute$destinyChoicesArgs<ExtArgs>
    tournaments?: boolean | Brute$tournamentsArgs<ExtArgs>
    opponents?: boolean | Brute$opponentsArgs<ExtArgs>
    opponentOf?: boolean | Brute$opponentOfArgs<ExtArgs>
    achievements?: boolean | Brute$achievementsArgs<ExtArgs>
    reports?: boolean | Brute$reportsArgs<ExtArgs>
    titles?: boolean | Brute$titlesArgs<ExtArgs>
    masterOfClan?: boolean | Brute$masterOfClanArgs<ExtArgs>
    clanPosts?: boolean | Brute$clanPostsArgs<ExtArgs>
    wantToJoinClan?: boolean | Brute$wantToJoinClanArgs<ExtArgs>
    threads?: boolean | Brute$threadsArgs<ExtArgs>
    inventory?: boolean | Brute$inventoryArgs<ExtArgs>
    tournamentAchievements?: boolean | Brute$tournamentAchievementsArgs<ExtArgs>
    tournamentXps?: boolean | Brute$tournamentXpsArgs<ExtArgs>
    startingStats?: boolean | Brute$startingStatsArgs<ExtArgs>
    damageOnBosses?: boolean | Brute$damageOnBossesArgs<ExtArgs>
    followers?: boolean | Brute$followersArgs<ExtArgs>
    inClanWarAttackerFighters?: boolean | Brute$inClanWarAttackerFightersArgs<ExtArgs>
    inClanWarDefenderFighters?: boolean | Brute$inClanWarDefenderFightersArgs<ExtArgs>
    event?: boolean | Brute$eventArgs<ExtArgs>
    wonEvents?: boolean | Brute$wonEventsArgs<ExtArgs>
    _count?: boolean | BruteCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BruteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Brute$userArgs<ExtArgs>
    master?: boolean | Brute$masterArgs<ExtArgs>
    clan?: boolean | Brute$clanArgs<ExtArgs>
    wantToJoinClan?: boolean | Brute$wantToJoinClanArgs<ExtArgs>
    event?: boolean | Brute$eventArgs<ExtArgs>
  }

  export type $BrutePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Brute"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      master: Prisma.$BrutePayload<ExtArgs> | null
      pupils: Prisma.$BrutePayload<ExtArgs>[]
      clan: Prisma.$ClanPayload<ExtArgs> | null
      fights: Prisma.$FightPayload<ExtArgs>[]
      fightsAsAdversary: Prisma.$FightPayload<ExtArgs>[]
      logs: Prisma.$LogPayload<ExtArgs>[]
      destinyChoices: Prisma.$DestinyChoicePayload<ExtArgs>[]
      tournaments: Prisma.$TournamentPayload<ExtArgs>[]
      opponents: Prisma.$BrutePayload<ExtArgs>[]
      opponentOf: Prisma.$BrutePayload<ExtArgs>[]
      achievements: Prisma.$AchievementPayload<ExtArgs>[]
      reports: Prisma.$BruteReportPayload<ExtArgs>[]
      titles: Prisma.$TitlePayload<ExtArgs>[]
      masterOfClan: Prisma.$ClanPayload<ExtArgs> | null
      clanPosts: Prisma.$ClanPostPayload<ExtArgs>[]
      wantToJoinClan: Prisma.$ClanPayload<ExtArgs> | null
      threads: Prisma.$ClanThreadPayload<ExtArgs>[]
      inventory: Prisma.$InventoryItemPayload<ExtArgs>[]
      tournamentAchievements: Prisma.$TournamentAchievementPayload<ExtArgs>[]
      tournamentXps: Prisma.$TournamentXpPayload<ExtArgs>[]
      startingStats: Prisma.$BruteStartingStatsPayload<ExtArgs> | null
      damageOnBosses: Prisma.$BossDamagePayload<ExtArgs>[]
      followers: Prisma.$UserPayload<ExtArgs>[]
      inClanWarAttackerFighters: Prisma.$ClanWarFightersPayload<ExtArgs>[]
      inClanWarDefenderFighters: Prisma.$ClanWarFightersPayload<ExtArgs>[]
      event: Prisma.$EventPayload<ExtArgs> | null
      wonEvents: Prisma.$EventPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      deletedAt: Date | null
      createdAt: Date
      willBeDeletedAt: Date | null
      deletionReason: string | null
      destinyPath: $Enums.DestinyChoiceSide[]
      previousDestinyPath: $Enums.DestinyChoiceSide[]
      level: number
      xp: number
      hp: number
      enduranceStat: number
      enduranceModifier: number
      enduranceValue: number
      strengthStat: number
      strengthModifier: number
      strengthValue: number
      agilityStat: number
      agilityModifier: number
      agilityValue: number
      speedStat: number
      speedModifier: number
      speedValue: number
      ranking: number
      gender: $Enums.Gender
      userId: string | null
      body: string
      colors: string
      weapons: $Enums.WeaponName[]
      skills: $Enums.SkillName[]
      pets: $Enums.PetName[]
      ascensions: number
      ascendedWeapons: $Enums.WeaponName[]
      ascendedSkills: $Enums.SkillName[]
      ascendedPets: $Enums.PetName[]
      masterId: string | null
      pupilsCount: number
      clanId: string | null
      registeredForTournament: boolean
      nextTournamentDate: Date | null
      currentTournamentDate: Date | null
      currentTournamentStepWatched: number | null
      globalTournamentWatchedDate: Date | null
      globalTournamentRoundWatched: number | null
      eventTournamentWatchedDate: Date | null
      eventTournamentRoundWatched: number | null
      lastFight: Date | null
      fightsLeft: number
      victories: number
      losses: number
      opponentsGeneratedAt: Date | null
      canRankUpSince: Date | null
      favorite: boolean
      wantToJoinClanId: string | null
      tournamentWins: number
      eventId: string | null
      resets: number
    }, ExtArgs["result"]["brute"]>
    composites: {}
  }

  type BruteGetPayload<S extends boolean | null | undefined | BruteDefaultArgs> = $Result.GetResult<Prisma.$BrutePayload, S>

  type BruteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BruteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: BruteCountAggregateInputType | true
    }

  export interface BruteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Brute'], meta: { name: 'Brute' } }
    /**
     * Find zero or one Brute that matches the filter.
     * @param {BruteFindUniqueArgs} args - Arguments to find a Brute
     * @example
     * // Get one Brute
     * const brute = await prisma.brute.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BruteFindUniqueArgs>(args: SelectSubset<T, BruteFindUniqueArgs<ExtArgs>>): Prisma__BruteClient<$Result.GetResult<Prisma.$BrutePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Brute that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BruteFindUniqueOrThrowArgs} args - Arguments to find a Brute
     * @example
     * // Get one Brute
     * const brute = await prisma.brute.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BruteFindUniqueOrThrowArgs>(args: SelectSubset<T, BruteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BruteClient<$Result.GetResult<Prisma.$BrutePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Brute that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BruteFindFirstArgs} args - Arguments to find a Brute
     * @example
     * // Get one Brute
     * const brute = await prisma.brute.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BruteFindFirstArgs>(args?: SelectSubset<T, BruteFindFirstArgs<ExtArgs>>): Prisma__BruteClient<$Result.GetResult<Prisma.$BrutePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Brute that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BruteFindFirstOrThrowArgs} args - Arguments to find a Brute
     * @example
     * // Get one Brute
     * const brute = await prisma.brute.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BruteFindFirstOrThrowArgs>(args?: SelectSubset<T, BruteFindFirstOrThrowArgs<ExtArgs>>): Prisma__BruteClient<$Result.GetResult<Prisma.$BrutePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Brutes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BruteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Brutes
     * const brutes = await prisma.brute.findMany()
     * 
     * // Get first 10 Brutes
     * const brutes = await prisma.brute.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bruteWithIdOnly = await prisma.brute.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BruteFindManyArgs>(args?: SelectSubset<T, BruteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrutePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Brute.
     * @param {BruteCreateArgs} args - Arguments to create a Brute.
     * @example
     * // Create one Brute
     * const Brute = await prisma.brute.create({
     *   data: {
     *     // ... data to create a Brute
     *   }
     * })
     * 
     */
    create<T extends BruteCreateArgs>(args: SelectSubset<T, BruteCreateArgs<ExtArgs>>): Prisma__BruteClient<$Result.GetResult<Prisma.$BrutePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Brutes.
     * @param {BruteCreateManyArgs} args - Arguments to create many Brutes.
     * @example
     * // Create many Brutes
     * const brute = await prisma.brute.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BruteCreateManyArgs>(args?: SelectSubset<T, BruteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Brutes and returns the data saved in the database.
     * @param {BruteCreateManyAndReturnArgs} args - Arguments to create many Brutes.
     * @example
     * // Create many Brutes
     * const brute = await prisma.brute.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Brutes and only return the `id`
     * const bruteWithIdOnly = await prisma.brute.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BruteCreateManyAndReturnArgs>(args?: SelectSubset<T, BruteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrutePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Brute.
     * @param {BruteDeleteArgs} args - Arguments to delete one Brute.
     * @example
     * // Delete one Brute
     * const Brute = await prisma.brute.delete({
     *   where: {
     *     // ... filter to delete one Brute
     *   }
     * })
     * 
     */
    delete<T extends BruteDeleteArgs>(args: SelectSubset<T, BruteDeleteArgs<ExtArgs>>): Prisma__BruteClient<$Result.GetResult<Prisma.$BrutePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Brute.
     * @param {BruteUpdateArgs} args - Arguments to update one Brute.
     * @example
     * // Update one Brute
     * const brute = await prisma.brute.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BruteUpdateArgs>(args: SelectSubset<T, BruteUpdateArgs<ExtArgs>>): Prisma__BruteClient<$Result.GetResult<Prisma.$BrutePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Brutes.
     * @param {BruteDeleteManyArgs} args - Arguments to filter Brutes to delete.
     * @example
     * // Delete a few Brutes
     * const { count } = await prisma.brute.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BruteDeleteManyArgs>(args?: SelectSubset<T, BruteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Brutes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BruteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Brutes
     * const brute = await prisma.brute.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BruteUpdateManyArgs>(args: SelectSubset<T, BruteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Brute.
     * @param {BruteUpsertArgs} args - Arguments to update or create a Brute.
     * @example
     * // Update or create a Brute
     * const brute = await prisma.brute.upsert({
     *   create: {
     *     // ... data to create a Brute
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Brute we want to update
     *   }
     * })
     */
    upsert<T extends BruteUpsertArgs>(args: SelectSubset<T, BruteUpsertArgs<ExtArgs>>): Prisma__BruteClient<$Result.GetResult<Prisma.$BrutePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Brutes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BruteCountArgs} args - Arguments to filter Brutes to count.
     * @example
     * // Count the number of Brutes
     * const count = await prisma.brute.count({
     *   where: {
     *     // ... the filter for the Brutes we want to count
     *   }
     * })
    **/
    count<T extends BruteCountArgs>(
      args?: Subset<T, BruteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BruteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Brute.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BruteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BruteAggregateArgs>(args: Subset<T, BruteAggregateArgs>): Prisma.PrismaPromise<GetBruteAggregateType<T>>

    /**
     * Group by Brute.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BruteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BruteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BruteGroupByArgs['orderBy'] }
        : { orderBy?: BruteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BruteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBruteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Brute model
   */
  readonly fields: BruteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Brute.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BruteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Brute$userArgs<ExtArgs> = {}>(args?: Subset<T, Brute$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    master<T extends Brute$masterArgs<ExtArgs> = {}>(args?: Subset<T, Brute$masterArgs<ExtArgs>>): Prisma__BruteClient<$Result.GetResult<Prisma.$BrutePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    pupils<T extends Brute$pupilsArgs<ExtArgs> = {}>(args?: Subset<T, Brute$pupilsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrutePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    clan<T extends Brute$clanArgs<ExtArgs> = {}>(args?: Subset<T, Brute$clanArgs<ExtArgs>>): Prisma__ClanClient<$Result.GetResult<Prisma.$ClanPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    fights<T extends Brute$fightsArgs<ExtArgs> = {}>(args?: Subset<T, Brute$fightsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FightPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    fightsAsAdversary<T extends Brute$fightsAsAdversaryArgs<ExtArgs> = {}>(args?: Subset<T, Brute$fightsAsAdversaryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FightPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    logs<T extends Brute$logsArgs<ExtArgs> = {}>(args?: Subset<T, Brute$logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    destinyChoices<T extends Brute$destinyChoicesArgs<ExtArgs> = {}>(args?: Subset<T, Brute$destinyChoicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DestinyChoicePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    tournaments<T extends Brute$tournamentsArgs<ExtArgs> = {}>(args?: Subset<T, Brute$tournamentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    opponents<T extends Brute$opponentsArgs<ExtArgs> = {}>(args?: Subset<T, Brute$opponentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrutePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    opponentOf<T extends Brute$opponentOfArgs<ExtArgs> = {}>(args?: Subset<T, Brute$opponentOfArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrutePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    achievements<T extends Brute$achievementsArgs<ExtArgs> = {}>(args?: Subset<T, Brute$achievementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    reports<T extends Brute$reportsArgs<ExtArgs> = {}>(args?: Subset<T, Brute$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BruteReportPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    titles<T extends Brute$titlesArgs<ExtArgs> = {}>(args?: Subset<T, Brute$titlesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TitlePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    masterOfClan<T extends Brute$masterOfClanArgs<ExtArgs> = {}>(args?: Subset<T, Brute$masterOfClanArgs<ExtArgs>>): Prisma__ClanClient<$Result.GetResult<Prisma.$ClanPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    clanPosts<T extends Brute$clanPostsArgs<ExtArgs> = {}>(args?: Subset<T, Brute$clanPostsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClanPostPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    wantToJoinClan<T extends Brute$wantToJoinClanArgs<ExtArgs> = {}>(args?: Subset<T, Brute$wantToJoinClanArgs<ExtArgs>>): Prisma__ClanClient<$Result.GetResult<Prisma.$ClanPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    threads<T extends Brute$threadsArgs<ExtArgs> = {}>(args?: Subset<T, Brute$threadsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClanThreadPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    inventory<T extends Brute$inventoryArgs<ExtArgs> = {}>(args?: Subset<T, Brute$inventoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    tournamentAchievements<T extends Brute$tournamentAchievementsArgs<ExtArgs> = {}>(args?: Subset<T, Brute$tournamentAchievementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentAchievementPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    tournamentXps<T extends Brute$tournamentXpsArgs<ExtArgs> = {}>(args?: Subset<T, Brute$tournamentXpsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentXpPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    startingStats<T extends Brute$startingStatsArgs<ExtArgs> = {}>(args?: Subset<T, Brute$startingStatsArgs<ExtArgs>>): Prisma__BruteStartingStatsClient<$Result.GetResult<Prisma.$BruteStartingStatsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    damageOnBosses<T extends Brute$damageOnBossesArgs<ExtArgs> = {}>(args?: Subset<T, Brute$damageOnBossesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BossDamagePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    followers<T extends Brute$followersArgs<ExtArgs> = {}>(args?: Subset<T, Brute$followersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    inClanWarAttackerFighters<T extends Brute$inClanWarAttackerFightersArgs<ExtArgs> = {}>(args?: Subset<T, Brute$inClanWarAttackerFightersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClanWarFightersPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    inClanWarDefenderFighters<T extends Brute$inClanWarDefenderFightersArgs<ExtArgs> = {}>(args?: Subset<T, Brute$inClanWarDefenderFightersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClanWarFightersPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    event<T extends Brute$eventArgs<ExtArgs> = {}>(args?: Subset<T, Brute$eventArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    wonEvents<T extends Brute$wonEventsArgs<ExtArgs> = {}>(args?: Subset<T, Brute$wonEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Brute model
   */ 
  interface BruteFieldRefs {
    readonly id: FieldRef<"Brute", 'String'>
    readonly name: FieldRef<"Brute", 'String'>
    readonly deletedAt: FieldRef<"Brute", 'DateTime'>
    readonly createdAt: FieldRef<"Brute", 'DateTime'>
    readonly willBeDeletedAt: FieldRef<"Brute", 'DateTime'>
    readonly deletionReason: FieldRef<"Brute", 'String'>
    readonly destinyPath: FieldRef<"Brute", 'DestinyChoiceSide[]'>
    readonly previousDestinyPath: FieldRef<"Brute", 'DestinyChoiceSide[]'>
    readonly level: FieldRef<"Brute", 'Int'>
    readonly xp: FieldRef<"Brute", 'Int'>
    readonly hp: FieldRef<"Brute", 'Int'>
    readonly enduranceStat: FieldRef<"Brute", 'Int'>
    readonly enduranceModifier: FieldRef<"Brute", 'Float'>
    readonly enduranceValue: FieldRef<"Brute", 'Int'>
    readonly strengthStat: FieldRef<"Brute", 'Int'>
    readonly strengthModifier: FieldRef<"Brute", 'Float'>
    readonly strengthValue: FieldRef<"Brute", 'Int'>
    readonly agilityStat: FieldRef<"Brute", 'Int'>
    readonly agilityModifier: FieldRef<"Brute", 'Float'>
    readonly agilityValue: FieldRef<"Brute", 'Int'>
    readonly speedStat: FieldRef<"Brute", 'Int'>
    readonly speedModifier: FieldRef<"Brute", 'Float'>
    readonly speedValue: FieldRef<"Brute", 'Int'>
    readonly ranking: FieldRef<"Brute", 'Int'>
    readonly gender: FieldRef<"Brute", 'Gender'>
    readonly userId: FieldRef<"Brute", 'String'>
    readonly body: FieldRef<"Brute", 'String'>
    readonly colors: FieldRef<"Brute", 'String'>
    readonly weapons: FieldRef<"Brute", 'WeaponName[]'>
    readonly skills: FieldRef<"Brute", 'SkillName[]'>
    readonly pets: FieldRef<"Brute", 'PetName[]'>
    readonly ascensions: FieldRef<"Brute", 'Int'>
    readonly ascendedWeapons: FieldRef<"Brute", 'WeaponName[]'>
    readonly ascendedSkills: FieldRef<"Brute", 'SkillName[]'>
    readonly ascendedPets: FieldRef<"Brute", 'PetName[]'>
    readonly masterId: FieldRef<"Brute", 'String'>
    readonly pupilsCount: FieldRef<"Brute", 'Int'>
    readonly clanId: FieldRef<"Brute", 'String'>
    readonly registeredForTournament: FieldRef<"Brute", 'Boolean'>
    readonly nextTournamentDate: FieldRef<"Brute", 'DateTime'>
    readonly currentTournamentDate: FieldRef<"Brute", 'DateTime'>
    readonly currentTournamentStepWatched: FieldRef<"Brute", 'Int'>
    readonly globalTournamentWatchedDate: FieldRef<"Brute", 'DateTime'>
    readonly globalTournamentRoundWatched: FieldRef<"Brute", 'Int'>
    readonly eventTournamentWatchedDate: FieldRef<"Brute", 'DateTime'>
    readonly eventTournamentRoundWatched: FieldRef<"Brute", 'Int'>
    readonly lastFight: FieldRef<"Brute", 'DateTime'>
    readonly fightsLeft: FieldRef<"Brute", 'Int'>
    readonly victories: FieldRef<"Brute", 'Int'>
    readonly losses: FieldRef<"Brute", 'Int'>
    readonly opponentsGeneratedAt: FieldRef<"Brute", 'DateTime'>
    readonly canRankUpSince: FieldRef<"Brute", 'DateTime'>
    readonly favorite: FieldRef<"Brute", 'Boolean'>
    readonly wantToJoinClanId: FieldRef<"Brute", 'String'>
    readonly tournamentWins: FieldRef<"Brute", 'Int'>
    readonly eventId: FieldRef<"Brute", 'String'>
    readonly resets: FieldRef<"Brute", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Brute findUnique
   */
  export type BruteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brute
     */
    omit?: BruteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteInclude<ExtArgs> | null
    /**
     * Filter, which Brute to fetch.
     */
    where: BruteWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Brute findUniqueOrThrow
   */
  export type BruteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brute
     */
    omit?: BruteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteInclude<ExtArgs> | null
    /**
     * Filter, which Brute to fetch.
     */
    where: BruteWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Brute findFirst
   */
  export type BruteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brute
     */
    omit?: BruteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteInclude<ExtArgs> | null
    /**
     * Filter, which Brute to fetch.
     */
    where?: BruteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brutes to fetch.
     */
    orderBy?: BruteOrderByWithRelationInput | BruteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brutes.
     */
    cursor?: BruteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brutes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brutes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brutes.
     */
    distinct?: BruteScalarFieldEnum | BruteScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Brute findFirstOrThrow
   */
  export type BruteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brute
     */
    omit?: BruteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteInclude<ExtArgs> | null
    /**
     * Filter, which Brute to fetch.
     */
    where?: BruteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brutes to fetch.
     */
    orderBy?: BruteOrderByWithRelationInput | BruteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brutes.
     */
    cursor?: BruteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brutes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brutes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brutes.
     */
    distinct?: BruteScalarFieldEnum | BruteScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Brute findMany
   */
  export type BruteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brute
     */
    omit?: BruteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteInclude<ExtArgs> | null
    /**
     * Filter, which Brutes to fetch.
     */
    where?: BruteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brutes to fetch.
     */
    orderBy?: BruteOrderByWithRelationInput | BruteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Brutes.
     */
    cursor?: BruteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brutes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brutes.
     */
    skip?: number
    distinct?: BruteScalarFieldEnum | BruteScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Brute create
   */
  export type BruteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brute
     */
    omit?: BruteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteInclude<ExtArgs> | null
    /**
     * The data needed to create a Brute.
     */
    data: XOR<BruteCreateInput, BruteUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Brute createMany
   */
  export type BruteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Brutes.
     */
    data: BruteCreateManyInput | BruteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Brute createManyAndReturn
   */
  export type BruteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Brute
     */
    omit?: BruteOmit<ExtArgs> | null
    /**
     * The data used to create many Brutes.
     */
    data: BruteCreateManyInput | BruteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Brute update
   */
  export type BruteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brute
     */
    omit?: BruteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteInclude<ExtArgs> | null
    /**
     * The data needed to update a Brute.
     */
    data: XOR<BruteUpdateInput, BruteUncheckedUpdateInput>
    /**
     * Choose, which Brute to update.
     */
    where: BruteWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Brute updateMany
   */
  export type BruteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Brutes.
     */
    data: XOR<BruteUpdateManyMutationInput, BruteUncheckedUpdateManyInput>
    /**
     * Filter which Brutes to update
     */
    where?: BruteWhereInput
  }

  /**
   * Brute upsert
   */
  export type BruteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brute
     */
    omit?: BruteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteInclude<ExtArgs> | null
    /**
     * The filter to search for the Brute to update in case it exists.
     */
    where: BruteWhereUniqueInput
    /**
     * In case the Brute found by the `where` argument doesn't exist, create a new Brute with this data.
     */
    create: XOR<BruteCreateInput, BruteUncheckedCreateInput>
    /**
     * In case the Brute was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BruteUpdateInput, BruteUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Brute delete
   */
  export type BruteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brute
     */
    omit?: BruteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteInclude<ExtArgs> | null
    /**
     * Filter which Brute to delete.
     */
    where: BruteWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Brute deleteMany
   */
  export type BruteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Brutes to delete
     */
    where?: BruteWhereInput
  }

  /**
   * Brute.user
   */
  export type Brute$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Brute.master
   */
  export type Brute$masterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brute
     */
    omit?: BruteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteInclude<ExtArgs> | null
    where?: BruteWhereInput
  }

  /**
   * Brute.pupils
   */
  export type Brute$pupilsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brute
     */
    omit?: BruteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteInclude<ExtArgs> | null
    where?: BruteWhereInput
    orderBy?: BruteOrderByWithRelationInput | BruteOrderByWithRelationInput[]
    cursor?: BruteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BruteScalarFieldEnum | BruteScalarFieldEnum[]
  }

  /**
   * Brute.clan
   */
  export type Brute$clanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clan
     */
    select?: ClanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clan
     */
    omit?: ClanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanInclude<ExtArgs> | null
    where?: ClanWhereInput
  }

  /**
   * Brute.fights
   */
  export type Brute$fightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fight
     */
    select?: FightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Fight
     */
    omit?: FightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FightInclude<ExtArgs> | null
    where?: FightWhereInput
    orderBy?: FightOrderByWithRelationInput | FightOrderByWithRelationInput[]
    cursor?: FightWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FightScalarFieldEnum | FightScalarFieldEnum[]
  }

  /**
   * Brute.fightsAsAdversary
   */
  export type Brute$fightsAsAdversaryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fight
     */
    select?: FightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Fight
     */
    omit?: FightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FightInclude<ExtArgs> | null
    where?: FightWhereInput
    orderBy?: FightOrderByWithRelationInput | FightOrderByWithRelationInput[]
    cursor?: FightWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FightScalarFieldEnum | FightScalarFieldEnum[]
  }

  /**
   * Brute.logs
   */
  export type Brute$logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    where?: LogWhereInput
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    cursor?: LogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * Brute.destinyChoices
   */
  export type Brute$destinyChoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DestinyChoice
     */
    select?: DestinyChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DestinyChoice
     */
    omit?: DestinyChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DestinyChoiceInclude<ExtArgs> | null
    where?: DestinyChoiceWhereInput
    orderBy?: DestinyChoiceOrderByWithRelationInput | DestinyChoiceOrderByWithRelationInput[]
    cursor?: DestinyChoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DestinyChoiceScalarFieldEnum | DestinyChoiceScalarFieldEnum[]
  }

  /**
   * Brute.tournaments
   */
  export type Brute$tournamentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    where?: TournamentWhereInput
    orderBy?: TournamentOrderByWithRelationInput | TournamentOrderByWithRelationInput[]
    cursor?: TournamentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TournamentScalarFieldEnum | TournamentScalarFieldEnum[]
  }

  /**
   * Brute.opponents
   */
  export type Brute$opponentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brute
     */
    omit?: BruteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteInclude<ExtArgs> | null
    where?: BruteWhereInput
    orderBy?: BruteOrderByWithRelationInput | BruteOrderByWithRelationInput[]
    cursor?: BruteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BruteScalarFieldEnum | BruteScalarFieldEnum[]
  }

  /**
   * Brute.opponentOf
   */
  export type Brute$opponentOfArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brute
     */
    omit?: BruteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteInclude<ExtArgs> | null
    where?: BruteWhereInput
    orderBy?: BruteOrderByWithRelationInput | BruteOrderByWithRelationInput[]
    cursor?: BruteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BruteScalarFieldEnum | BruteScalarFieldEnum[]
  }

  /**
   * Brute.achievements
   */
  export type Brute$achievementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    where?: AchievementWhereInput
    orderBy?: AchievementOrderByWithRelationInput | AchievementOrderByWithRelationInput[]
    cursor?: AchievementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AchievementScalarFieldEnum | AchievementScalarFieldEnum[]
  }

  /**
   * Brute.reports
   */
  export type Brute$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BruteReport
     */
    select?: BruteReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BruteReport
     */
    omit?: BruteReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteReportInclude<ExtArgs> | null
    where?: BruteReportWhereInput
    orderBy?: BruteReportOrderByWithRelationInput | BruteReportOrderByWithRelationInput[]
    cursor?: BruteReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BruteReportScalarFieldEnum | BruteReportScalarFieldEnum[]
  }

  /**
   * Brute.titles
   */
  export type Brute$titlesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Title
     */
    select?: TitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Title
     */
    omit?: TitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TitleInclude<ExtArgs> | null
    where?: TitleWhereInput
    orderBy?: TitleOrderByWithRelationInput | TitleOrderByWithRelationInput[]
    cursor?: TitleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TitleScalarFieldEnum | TitleScalarFieldEnum[]
  }

  /**
   * Brute.masterOfClan
   */
  export type Brute$masterOfClanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clan
     */
    select?: ClanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clan
     */
    omit?: ClanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanInclude<ExtArgs> | null
    where?: ClanWhereInput
  }

  /**
   * Brute.clanPosts
   */
  export type Brute$clanPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanPost
     */
    select?: ClanPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanPost
     */
    omit?: ClanPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanPostInclude<ExtArgs> | null
    where?: ClanPostWhereInput
    orderBy?: ClanPostOrderByWithRelationInput | ClanPostOrderByWithRelationInput[]
    cursor?: ClanPostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClanPostScalarFieldEnum | ClanPostScalarFieldEnum[]
  }

  /**
   * Brute.wantToJoinClan
   */
  export type Brute$wantToJoinClanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clan
     */
    select?: ClanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clan
     */
    omit?: ClanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanInclude<ExtArgs> | null
    where?: ClanWhereInput
  }

  /**
   * Brute.threads
   */
  export type Brute$threadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanThread
     */
    select?: ClanThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanThread
     */
    omit?: ClanThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanThreadInclude<ExtArgs> | null
    where?: ClanThreadWhereInput
    orderBy?: ClanThreadOrderByWithRelationInput | ClanThreadOrderByWithRelationInput[]
    cursor?: ClanThreadWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClanThreadScalarFieldEnum | ClanThreadScalarFieldEnum[]
  }

  /**
   * Brute.inventory
   */
  export type Brute$inventoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    where?: InventoryItemWhereInput
    orderBy?: InventoryItemOrderByWithRelationInput | InventoryItemOrderByWithRelationInput[]
    cursor?: InventoryItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryItemScalarFieldEnum | InventoryItemScalarFieldEnum[]
  }

  /**
   * Brute.tournamentAchievements
   */
  export type Brute$tournamentAchievementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentAchievement
     */
    select?: TournamentAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentAchievement
     */
    omit?: TournamentAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentAchievementInclude<ExtArgs> | null
    where?: TournamentAchievementWhereInput
    orderBy?: TournamentAchievementOrderByWithRelationInput | TournamentAchievementOrderByWithRelationInput[]
    cursor?: TournamentAchievementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TournamentAchievementScalarFieldEnum | TournamentAchievementScalarFieldEnum[]
  }

  /**
   * Brute.tournamentXps
   */
  export type Brute$tournamentXpsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentXp
     */
    select?: TournamentXpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentXp
     */
    omit?: TournamentXpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentXpInclude<ExtArgs> | null
    where?: TournamentXpWhereInput
    orderBy?: TournamentXpOrderByWithRelationInput | TournamentXpOrderByWithRelationInput[]
    cursor?: TournamentXpWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TournamentXpScalarFieldEnum | TournamentXpScalarFieldEnum[]
  }

  /**
   * Brute.startingStats
   */
  export type Brute$startingStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BruteStartingStats
     */
    select?: BruteStartingStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BruteStartingStats
     */
    omit?: BruteStartingStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteStartingStatsInclude<ExtArgs> | null
    where?: BruteStartingStatsWhereInput
  }

  /**
   * Brute.damageOnBosses
   */
  export type Brute$damageOnBossesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BossDamage
     */
    select?: BossDamageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BossDamage
     */
    omit?: BossDamageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BossDamageInclude<ExtArgs> | null
    where?: BossDamageWhereInput
    orderBy?: BossDamageOrderByWithRelationInput | BossDamageOrderByWithRelationInput[]
    cursor?: BossDamageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BossDamageScalarFieldEnum | BossDamageScalarFieldEnum[]
  }

  /**
   * Brute.followers
   */
  export type Brute$followersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Brute.inClanWarAttackerFighters
   */
  export type Brute$inClanWarAttackerFightersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanWarFighters
     */
    select?: ClanWarFightersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanWarFighters
     */
    omit?: ClanWarFightersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanWarFightersInclude<ExtArgs> | null
    where?: ClanWarFightersWhereInput
    orderBy?: ClanWarFightersOrderByWithRelationInput | ClanWarFightersOrderByWithRelationInput[]
    cursor?: ClanWarFightersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClanWarFightersScalarFieldEnum | ClanWarFightersScalarFieldEnum[]
  }

  /**
   * Brute.inClanWarDefenderFighters
   */
  export type Brute$inClanWarDefenderFightersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanWarFighters
     */
    select?: ClanWarFightersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanWarFighters
     */
    omit?: ClanWarFightersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanWarFightersInclude<ExtArgs> | null
    where?: ClanWarFightersWhereInput
    orderBy?: ClanWarFightersOrderByWithRelationInput | ClanWarFightersOrderByWithRelationInput[]
    cursor?: ClanWarFightersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClanWarFightersScalarFieldEnum | ClanWarFightersScalarFieldEnum[]
  }

  /**
   * Brute.event
   */
  export type Brute$eventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
  }

  /**
   * Brute.wonEvents
   */
  export type Brute$wonEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Brute without action
   */
  export type BruteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brute
     */
    omit?: BruteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteInclude<ExtArgs> | null
  }


  /**
   * Model BruteStartingStats
   */

  export type AggregateBruteStartingStats = {
    _count: BruteStartingStatsCountAggregateOutputType | null
    _avg: BruteStartingStatsAvgAggregateOutputType | null
    _sum: BruteStartingStatsSumAggregateOutputType | null
    _min: BruteStartingStatsMinAggregateOutputType | null
    _max: BruteStartingStatsMaxAggregateOutputType | null
  }

  export type BruteStartingStatsAvgAggregateOutputType = {
    endurance: number | null
    strength: number | null
    agility: number | null
    speed: number | null
  }

  export type BruteStartingStatsSumAggregateOutputType = {
    endurance: number | null
    strength: number | null
    agility: number | null
    speed: number | null
  }

  export type BruteStartingStatsMinAggregateOutputType = {
    id: string | null
    endurance: number | null
    strength: number | null
    agility: number | null
    speed: number | null
    bruteId: string | null
  }

  export type BruteStartingStatsMaxAggregateOutputType = {
    id: string | null
    endurance: number | null
    strength: number | null
    agility: number | null
    speed: number | null
    bruteId: string | null
  }

  export type BruteStartingStatsCountAggregateOutputType = {
    id: number
    endurance: number
    strength: number
    agility: number
    speed: number
    bruteId: number
    _all: number
  }


  export type BruteStartingStatsAvgAggregateInputType = {
    endurance?: true
    strength?: true
    agility?: true
    speed?: true
  }

  export type BruteStartingStatsSumAggregateInputType = {
    endurance?: true
    strength?: true
    agility?: true
    speed?: true
  }

  export type BruteStartingStatsMinAggregateInputType = {
    id?: true
    endurance?: true
    strength?: true
    agility?: true
    speed?: true
    bruteId?: true
  }

  export type BruteStartingStatsMaxAggregateInputType = {
    id?: true
    endurance?: true
    strength?: true
    agility?: true
    speed?: true
    bruteId?: true
  }

  export type BruteStartingStatsCountAggregateInputType = {
    id?: true
    endurance?: true
    strength?: true
    agility?: true
    speed?: true
    bruteId?: true
    _all?: true
  }

  export type BruteStartingStatsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BruteStartingStats to aggregate.
     */
    where?: BruteStartingStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BruteStartingStats to fetch.
     */
    orderBy?: BruteStartingStatsOrderByWithRelationInput | BruteStartingStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BruteStartingStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BruteStartingStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BruteStartingStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BruteStartingStats
    **/
    _count?: true | BruteStartingStatsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BruteStartingStatsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BruteStartingStatsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BruteStartingStatsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BruteStartingStatsMaxAggregateInputType
  }

  export type GetBruteStartingStatsAggregateType<T extends BruteStartingStatsAggregateArgs> = {
        [P in keyof T & keyof AggregateBruteStartingStats]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBruteStartingStats[P]>
      : GetScalarType<T[P], AggregateBruteStartingStats[P]>
  }




  export type BruteStartingStatsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BruteStartingStatsWhereInput
    orderBy?: BruteStartingStatsOrderByWithAggregationInput | BruteStartingStatsOrderByWithAggregationInput[]
    by: BruteStartingStatsScalarFieldEnum[] | BruteStartingStatsScalarFieldEnum
    having?: BruteStartingStatsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BruteStartingStatsCountAggregateInputType | true
    _avg?: BruteStartingStatsAvgAggregateInputType
    _sum?: BruteStartingStatsSumAggregateInputType
    _min?: BruteStartingStatsMinAggregateInputType
    _max?: BruteStartingStatsMaxAggregateInputType
  }

  export type BruteStartingStatsGroupByOutputType = {
    id: string
    endurance: number
    strength: number
    agility: number
    speed: number
    bruteId: string
    _count: BruteStartingStatsCountAggregateOutputType | null
    _avg: BruteStartingStatsAvgAggregateOutputType | null
    _sum: BruteStartingStatsSumAggregateOutputType | null
    _min: BruteStartingStatsMinAggregateOutputType | null
    _max: BruteStartingStatsMaxAggregateOutputType | null
  }

  type GetBruteStartingStatsGroupByPayload<T extends BruteStartingStatsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BruteStartingStatsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BruteStartingStatsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BruteStartingStatsGroupByOutputType[P]>
            : GetScalarType<T[P], BruteStartingStatsGroupByOutputType[P]>
        }
      >
    >


  export type BruteStartingStatsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    endurance?: boolean
    strength?: boolean
    agility?: boolean
    speed?: boolean
    bruteId?: boolean
    brute?: boolean | BruteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bruteStartingStats"]>

  export type BruteStartingStatsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    endurance?: boolean
    strength?: boolean
    agility?: boolean
    speed?: boolean
    bruteId?: boolean
    brute?: boolean | BruteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bruteStartingStats"]>

  export type BruteStartingStatsSelectScalar = {
    id?: boolean
    endurance?: boolean
    strength?: boolean
    agility?: boolean
    speed?: boolean
    bruteId?: boolean
  }

  export type BruteStartingStatsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "endurance" | "strength" | "agility" | "speed" | "bruteId", ExtArgs["result"]["bruteStartingStats"]>
  export type BruteStartingStatsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brute?: boolean | BruteDefaultArgs<ExtArgs>
  }
  export type BruteStartingStatsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brute?: boolean | BruteDefaultArgs<ExtArgs>
  }

  export type $BruteStartingStatsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BruteStartingStats"
    objects: {
      brute: Prisma.$BrutePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      endurance: number
      strength: number
      agility: number
      speed: number
      bruteId: string
    }, ExtArgs["result"]["bruteStartingStats"]>
    composites: {}
  }

  type BruteStartingStatsGetPayload<S extends boolean | null | undefined | BruteStartingStatsDefaultArgs> = $Result.GetResult<Prisma.$BruteStartingStatsPayload, S>

  type BruteStartingStatsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BruteStartingStatsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: BruteStartingStatsCountAggregateInputType | true
    }

  export interface BruteStartingStatsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BruteStartingStats'], meta: { name: 'BruteStartingStats' } }
    /**
     * Find zero or one BruteStartingStats that matches the filter.
     * @param {BruteStartingStatsFindUniqueArgs} args - Arguments to find a BruteStartingStats
     * @example
     * // Get one BruteStartingStats
     * const bruteStartingStats = await prisma.bruteStartingStats.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BruteStartingStatsFindUniqueArgs>(args: SelectSubset<T, BruteStartingStatsFindUniqueArgs<ExtArgs>>): Prisma__BruteStartingStatsClient<$Result.GetResult<Prisma.$BruteStartingStatsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one BruteStartingStats that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BruteStartingStatsFindUniqueOrThrowArgs} args - Arguments to find a BruteStartingStats
     * @example
     * // Get one BruteStartingStats
     * const bruteStartingStats = await prisma.bruteStartingStats.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BruteStartingStatsFindUniqueOrThrowArgs>(args: SelectSubset<T, BruteStartingStatsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BruteStartingStatsClient<$Result.GetResult<Prisma.$BruteStartingStatsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first BruteStartingStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BruteStartingStatsFindFirstArgs} args - Arguments to find a BruteStartingStats
     * @example
     * // Get one BruteStartingStats
     * const bruteStartingStats = await prisma.bruteStartingStats.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BruteStartingStatsFindFirstArgs>(args?: SelectSubset<T, BruteStartingStatsFindFirstArgs<ExtArgs>>): Prisma__BruteStartingStatsClient<$Result.GetResult<Prisma.$BruteStartingStatsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first BruteStartingStats that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BruteStartingStatsFindFirstOrThrowArgs} args - Arguments to find a BruteStartingStats
     * @example
     * // Get one BruteStartingStats
     * const bruteStartingStats = await prisma.bruteStartingStats.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BruteStartingStatsFindFirstOrThrowArgs>(args?: SelectSubset<T, BruteStartingStatsFindFirstOrThrowArgs<ExtArgs>>): Prisma__BruteStartingStatsClient<$Result.GetResult<Prisma.$BruteStartingStatsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more BruteStartingStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BruteStartingStatsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BruteStartingStats
     * const bruteStartingStats = await prisma.bruteStartingStats.findMany()
     * 
     * // Get first 10 BruteStartingStats
     * const bruteStartingStats = await prisma.bruteStartingStats.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bruteStartingStatsWithIdOnly = await prisma.bruteStartingStats.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BruteStartingStatsFindManyArgs>(args?: SelectSubset<T, BruteStartingStatsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BruteStartingStatsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a BruteStartingStats.
     * @param {BruteStartingStatsCreateArgs} args - Arguments to create a BruteStartingStats.
     * @example
     * // Create one BruteStartingStats
     * const BruteStartingStats = await prisma.bruteStartingStats.create({
     *   data: {
     *     // ... data to create a BruteStartingStats
     *   }
     * })
     * 
     */
    create<T extends BruteStartingStatsCreateArgs>(args: SelectSubset<T, BruteStartingStatsCreateArgs<ExtArgs>>): Prisma__BruteStartingStatsClient<$Result.GetResult<Prisma.$BruteStartingStatsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many BruteStartingStats.
     * @param {BruteStartingStatsCreateManyArgs} args - Arguments to create many BruteStartingStats.
     * @example
     * // Create many BruteStartingStats
     * const bruteStartingStats = await prisma.bruteStartingStats.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BruteStartingStatsCreateManyArgs>(args?: SelectSubset<T, BruteStartingStatsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BruteStartingStats and returns the data saved in the database.
     * @param {BruteStartingStatsCreateManyAndReturnArgs} args - Arguments to create many BruteStartingStats.
     * @example
     * // Create many BruteStartingStats
     * const bruteStartingStats = await prisma.bruteStartingStats.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BruteStartingStats and only return the `id`
     * const bruteStartingStatsWithIdOnly = await prisma.bruteStartingStats.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BruteStartingStatsCreateManyAndReturnArgs>(args?: SelectSubset<T, BruteStartingStatsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BruteStartingStatsPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a BruteStartingStats.
     * @param {BruteStartingStatsDeleteArgs} args - Arguments to delete one BruteStartingStats.
     * @example
     * // Delete one BruteStartingStats
     * const BruteStartingStats = await prisma.bruteStartingStats.delete({
     *   where: {
     *     // ... filter to delete one BruteStartingStats
     *   }
     * })
     * 
     */
    delete<T extends BruteStartingStatsDeleteArgs>(args: SelectSubset<T, BruteStartingStatsDeleteArgs<ExtArgs>>): Prisma__BruteStartingStatsClient<$Result.GetResult<Prisma.$BruteStartingStatsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one BruteStartingStats.
     * @param {BruteStartingStatsUpdateArgs} args - Arguments to update one BruteStartingStats.
     * @example
     * // Update one BruteStartingStats
     * const bruteStartingStats = await prisma.bruteStartingStats.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BruteStartingStatsUpdateArgs>(args: SelectSubset<T, BruteStartingStatsUpdateArgs<ExtArgs>>): Prisma__BruteStartingStatsClient<$Result.GetResult<Prisma.$BruteStartingStatsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more BruteStartingStats.
     * @param {BruteStartingStatsDeleteManyArgs} args - Arguments to filter BruteStartingStats to delete.
     * @example
     * // Delete a few BruteStartingStats
     * const { count } = await prisma.bruteStartingStats.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BruteStartingStatsDeleteManyArgs>(args?: SelectSubset<T, BruteStartingStatsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BruteStartingStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BruteStartingStatsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BruteStartingStats
     * const bruteStartingStats = await prisma.bruteStartingStats.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BruteStartingStatsUpdateManyArgs>(args: SelectSubset<T, BruteStartingStatsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BruteStartingStats.
     * @param {BruteStartingStatsUpsertArgs} args - Arguments to update or create a BruteStartingStats.
     * @example
     * // Update or create a BruteStartingStats
     * const bruteStartingStats = await prisma.bruteStartingStats.upsert({
     *   create: {
     *     // ... data to create a BruteStartingStats
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BruteStartingStats we want to update
     *   }
     * })
     */
    upsert<T extends BruteStartingStatsUpsertArgs>(args: SelectSubset<T, BruteStartingStatsUpsertArgs<ExtArgs>>): Prisma__BruteStartingStatsClient<$Result.GetResult<Prisma.$BruteStartingStatsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of BruteStartingStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BruteStartingStatsCountArgs} args - Arguments to filter BruteStartingStats to count.
     * @example
     * // Count the number of BruteStartingStats
     * const count = await prisma.bruteStartingStats.count({
     *   where: {
     *     // ... the filter for the BruteStartingStats we want to count
     *   }
     * })
    **/
    count<T extends BruteStartingStatsCountArgs>(
      args?: Subset<T, BruteStartingStatsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BruteStartingStatsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BruteStartingStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BruteStartingStatsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BruteStartingStatsAggregateArgs>(args: Subset<T, BruteStartingStatsAggregateArgs>): Prisma.PrismaPromise<GetBruteStartingStatsAggregateType<T>>

    /**
     * Group by BruteStartingStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BruteStartingStatsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BruteStartingStatsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BruteStartingStatsGroupByArgs['orderBy'] }
        : { orderBy?: BruteStartingStatsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BruteStartingStatsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBruteStartingStatsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BruteStartingStats model
   */
  readonly fields: BruteStartingStatsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BruteStartingStats.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BruteStartingStatsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    brute<T extends BruteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BruteDefaultArgs<ExtArgs>>): Prisma__BruteClient<$Result.GetResult<Prisma.$BrutePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BruteStartingStats model
   */ 
  interface BruteStartingStatsFieldRefs {
    readonly id: FieldRef<"BruteStartingStats", 'String'>
    readonly endurance: FieldRef<"BruteStartingStats", 'Int'>
    readonly strength: FieldRef<"BruteStartingStats", 'Int'>
    readonly agility: FieldRef<"BruteStartingStats", 'Int'>
    readonly speed: FieldRef<"BruteStartingStats", 'Int'>
    readonly bruteId: FieldRef<"BruteStartingStats", 'String'>
  }
    

  // Custom InputTypes
  /**
   * BruteStartingStats findUnique
   */
  export type BruteStartingStatsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BruteStartingStats
     */
    select?: BruteStartingStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BruteStartingStats
     */
    omit?: BruteStartingStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteStartingStatsInclude<ExtArgs> | null
    /**
     * Filter, which BruteStartingStats to fetch.
     */
    where: BruteStartingStatsWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BruteStartingStats findUniqueOrThrow
   */
  export type BruteStartingStatsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BruteStartingStats
     */
    select?: BruteStartingStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BruteStartingStats
     */
    omit?: BruteStartingStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteStartingStatsInclude<ExtArgs> | null
    /**
     * Filter, which BruteStartingStats to fetch.
     */
    where: BruteStartingStatsWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BruteStartingStats findFirst
   */
  export type BruteStartingStatsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BruteStartingStats
     */
    select?: BruteStartingStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BruteStartingStats
     */
    omit?: BruteStartingStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteStartingStatsInclude<ExtArgs> | null
    /**
     * Filter, which BruteStartingStats to fetch.
     */
    where?: BruteStartingStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BruteStartingStats to fetch.
     */
    orderBy?: BruteStartingStatsOrderByWithRelationInput | BruteStartingStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BruteStartingStats.
     */
    cursor?: BruteStartingStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BruteStartingStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BruteStartingStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BruteStartingStats.
     */
    distinct?: BruteStartingStatsScalarFieldEnum | BruteStartingStatsScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BruteStartingStats findFirstOrThrow
   */
  export type BruteStartingStatsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BruteStartingStats
     */
    select?: BruteStartingStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BruteStartingStats
     */
    omit?: BruteStartingStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteStartingStatsInclude<ExtArgs> | null
    /**
     * Filter, which BruteStartingStats to fetch.
     */
    where?: BruteStartingStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BruteStartingStats to fetch.
     */
    orderBy?: BruteStartingStatsOrderByWithRelationInput | BruteStartingStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BruteStartingStats.
     */
    cursor?: BruteStartingStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BruteStartingStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BruteStartingStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BruteStartingStats.
     */
    distinct?: BruteStartingStatsScalarFieldEnum | BruteStartingStatsScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BruteStartingStats findMany
   */
  export type BruteStartingStatsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BruteStartingStats
     */
    select?: BruteStartingStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BruteStartingStats
     */
    omit?: BruteStartingStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteStartingStatsInclude<ExtArgs> | null
    /**
     * Filter, which BruteStartingStats to fetch.
     */
    where?: BruteStartingStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BruteStartingStats to fetch.
     */
    orderBy?: BruteStartingStatsOrderByWithRelationInput | BruteStartingStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BruteStartingStats.
     */
    cursor?: BruteStartingStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BruteStartingStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BruteStartingStats.
     */
    skip?: number
    distinct?: BruteStartingStatsScalarFieldEnum | BruteStartingStatsScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BruteStartingStats create
   */
  export type BruteStartingStatsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BruteStartingStats
     */
    select?: BruteStartingStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BruteStartingStats
     */
    omit?: BruteStartingStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteStartingStatsInclude<ExtArgs> | null
    /**
     * The data needed to create a BruteStartingStats.
     */
    data: XOR<BruteStartingStatsCreateInput, BruteStartingStatsUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BruteStartingStats createMany
   */
  export type BruteStartingStatsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BruteStartingStats.
     */
    data: BruteStartingStatsCreateManyInput | BruteStartingStatsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BruteStartingStats createManyAndReturn
   */
  export type BruteStartingStatsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BruteStartingStats
     */
    select?: BruteStartingStatsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BruteStartingStats
     */
    omit?: BruteStartingStatsOmit<ExtArgs> | null
    /**
     * The data used to create many BruteStartingStats.
     */
    data: BruteStartingStatsCreateManyInput | BruteStartingStatsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteStartingStatsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BruteStartingStats update
   */
  export type BruteStartingStatsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BruteStartingStats
     */
    select?: BruteStartingStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BruteStartingStats
     */
    omit?: BruteStartingStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteStartingStatsInclude<ExtArgs> | null
    /**
     * The data needed to update a BruteStartingStats.
     */
    data: XOR<BruteStartingStatsUpdateInput, BruteStartingStatsUncheckedUpdateInput>
    /**
     * Choose, which BruteStartingStats to update.
     */
    where: BruteStartingStatsWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BruteStartingStats updateMany
   */
  export type BruteStartingStatsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BruteStartingStats.
     */
    data: XOR<BruteStartingStatsUpdateManyMutationInput, BruteStartingStatsUncheckedUpdateManyInput>
    /**
     * Filter which BruteStartingStats to update
     */
    where?: BruteStartingStatsWhereInput
  }

  /**
   * BruteStartingStats upsert
   */
  export type BruteStartingStatsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BruteStartingStats
     */
    select?: BruteStartingStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BruteStartingStats
     */
    omit?: BruteStartingStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteStartingStatsInclude<ExtArgs> | null
    /**
     * The filter to search for the BruteStartingStats to update in case it exists.
     */
    where: BruteStartingStatsWhereUniqueInput
    /**
     * In case the BruteStartingStats found by the `where` argument doesn't exist, create a new BruteStartingStats with this data.
     */
    create: XOR<BruteStartingStatsCreateInput, BruteStartingStatsUncheckedCreateInput>
    /**
     * In case the BruteStartingStats was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BruteStartingStatsUpdateInput, BruteStartingStatsUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BruteStartingStats delete
   */
  export type BruteStartingStatsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BruteStartingStats
     */
    select?: BruteStartingStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BruteStartingStats
     */
    omit?: BruteStartingStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteStartingStatsInclude<ExtArgs> | null
    /**
     * Filter which BruteStartingStats to delete.
     */
    where: BruteStartingStatsWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BruteStartingStats deleteMany
   */
  export type BruteStartingStatsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BruteStartingStats to delete
     */
    where?: BruteStartingStatsWhereInput
  }

  /**
   * BruteStartingStats without action
   */
  export type BruteStartingStatsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BruteStartingStats
     */
    select?: BruteStartingStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BruteStartingStats
     */
    omit?: BruteStartingStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteStartingStatsInclude<ExtArgs> | null
  }


  /**
   * Model Fight
   */

  export type AggregateFight = {
    _count: FightCountAggregateOutputType | null
    _avg: FightAvgAggregateOutputType | null
    _sum: FightSumAggregateOutputType | null
    _min: FightMinAggregateOutputType | null
    _max: FightMaxAggregateOutputType | null
  }

  export type FightAvgAggregateOutputType = {
    tournamentStep: number | null
  }

  export type FightSumAggregateOutputType = {
    tournamentStep: number | null
  }

  export type FightMinAggregateOutputType = {
    id: string | null
    date: Date | null
    brute1Id: string | null
    brute2Id: string | null
    winner: string | null
    loser: string | null
    steps: string | null
    fighters: string | null
    tournamentId: string | null
    tournamentStep: number | null
    background: string | null
    clanWarId: string | null
  }

  export type FightMaxAggregateOutputType = {
    id: string | null
    date: Date | null
    brute1Id: string | null
    brute2Id: string | null
    winner: string | null
    loser: string | null
    steps: string | null
    fighters: string | null
    tournamentId: string | null
    tournamentStep: number | null
    background: string | null
    clanWarId: string | null
  }

  export type FightCountAggregateOutputType = {
    id: number
    date: number
    brute1Id: number
    brute2Id: number
    winner: number
    loser: number
    steps: number
    fighters: number
    tournamentId: number
    tournamentStep: number
    modifiers: number
    background: number
    clanWarId: number
    _all: number
  }


  export type FightAvgAggregateInputType = {
    tournamentStep?: true
  }

  export type FightSumAggregateInputType = {
    tournamentStep?: true
  }

  export type FightMinAggregateInputType = {
    id?: true
    date?: true
    brute1Id?: true
    brute2Id?: true
    winner?: true
    loser?: true
    steps?: true
    fighters?: true
    tournamentId?: true
    tournamentStep?: true
    background?: true
    clanWarId?: true
  }

  export type FightMaxAggregateInputType = {
    id?: true
    date?: true
    brute1Id?: true
    brute2Id?: true
    winner?: true
    loser?: true
    steps?: true
    fighters?: true
    tournamentId?: true
    tournamentStep?: true
    background?: true
    clanWarId?: true
  }

  export type FightCountAggregateInputType = {
    id?: true
    date?: true
    brute1Id?: true
    brute2Id?: true
    winner?: true
    loser?: true
    steps?: true
    fighters?: true
    tournamentId?: true
    tournamentStep?: true
    modifiers?: true
    background?: true
    clanWarId?: true
    _all?: true
  }

  export type FightAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Fight to aggregate.
     */
    where?: FightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fights to fetch.
     */
    orderBy?: FightOrderByWithRelationInput | FightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Fights
    **/
    _count?: true | FightCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FightAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FightSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FightMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FightMaxAggregateInputType
  }

  export type GetFightAggregateType<T extends FightAggregateArgs> = {
        [P in keyof T & keyof AggregateFight]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFight[P]>
      : GetScalarType<T[P], AggregateFight[P]>
  }




  export type FightGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FightWhereInput
    orderBy?: FightOrderByWithAggregationInput | FightOrderByWithAggregationInput[]
    by: FightScalarFieldEnum[] | FightScalarFieldEnum
    having?: FightScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FightCountAggregateInputType | true
    _avg?: FightAvgAggregateInputType
    _sum?: FightSumAggregateInputType
    _min?: FightMinAggregateInputType
    _max?: FightMaxAggregateInputType
  }

  export type FightGroupByOutputType = {
    id: string
    date: Date
    brute1Id: string
    brute2Id: string | null
    winner: string
    loser: string
    steps: string
    fighters: string
    tournamentId: string | null
    tournamentStep: number
    modifiers: $Enums.FightModifier[]
    background: string
    clanWarId: string | null
    _count: FightCountAggregateOutputType | null
    _avg: FightAvgAggregateOutputType | null
    _sum: FightSumAggregateOutputType | null
    _min: FightMinAggregateOutputType | null
    _max: FightMaxAggregateOutputType | null
  }

  type GetFightGroupByPayload<T extends FightGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FightGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FightGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FightGroupByOutputType[P]>
            : GetScalarType<T[P], FightGroupByOutputType[P]>
        }
      >
    >


  export type FightSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    brute1Id?: boolean
    brute2Id?: boolean
    winner?: boolean
    loser?: boolean
    steps?: boolean
    fighters?: boolean
    tournamentId?: boolean
    tournamentStep?: boolean
    modifiers?: boolean
    background?: boolean
    clanWarId?: boolean
    brute1?: boolean | BruteDefaultArgs<ExtArgs>
    brute2?: boolean | Fight$brute2Args<ExtArgs>
    logs?: boolean | Fight$logsArgs<ExtArgs>
    tournament?: boolean | Fight$tournamentArgs<ExtArgs>
    favoritedBy?: boolean | Fight$favoritedByArgs<ExtArgs>
    clanWar?: boolean | Fight$clanWarArgs<ExtArgs>
    _count?: boolean | FightCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fight"]>

  export type FightSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    brute1Id?: boolean
    brute2Id?: boolean
    winner?: boolean
    loser?: boolean
    steps?: boolean
    fighters?: boolean
    tournamentId?: boolean
    tournamentStep?: boolean
    modifiers?: boolean
    background?: boolean
    clanWarId?: boolean
    brute1?: boolean | BruteDefaultArgs<ExtArgs>
    brute2?: boolean | Fight$brute2Args<ExtArgs>
    tournament?: boolean | Fight$tournamentArgs<ExtArgs>
    clanWar?: boolean | Fight$clanWarArgs<ExtArgs>
  }, ExtArgs["result"]["fight"]>

  export type FightSelectScalar = {
    id?: boolean
    date?: boolean
    brute1Id?: boolean
    brute2Id?: boolean
    winner?: boolean
    loser?: boolean
    steps?: boolean
    fighters?: boolean
    tournamentId?: boolean
    tournamentStep?: boolean
    modifiers?: boolean
    background?: boolean
    clanWarId?: boolean
  }

  export type FightOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "date" | "brute1Id" | "brute2Id" | "winner" | "loser" | "steps" | "fighters" | "tournamentId" | "tournamentStep" | "modifiers" | "background" | "clanWarId", ExtArgs["result"]["fight"]>
  export type FightInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brute1?: boolean | BruteDefaultArgs<ExtArgs>
    brute2?: boolean | Fight$brute2Args<ExtArgs>
    logs?: boolean | Fight$logsArgs<ExtArgs>
    tournament?: boolean | Fight$tournamentArgs<ExtArgs>
    favoritedBy?: boolean | Fight$favoritedByArgs<ExtArgs>
    clanWar?: boolean | Fight$clanWarArgs<ExtArgs>
    _count?: boolean | FightCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FightIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brute1?: boolean | BruteDefaultArgs<ExtArgs>
    brute2?: boolean | Fight$brute2Args<ExtArgs>
    tournament?: boolean | Fight$tournamentArgs<ExtArgs>
    clanWar?: boolean | Fight$clanWarArgs<ExtArgs>
  }

  export type $FightPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Fight"
    objects: {
      brute1: Prisma.$BrutePayload<ExtArgs>
      brute2: Prisma.$BrutePayload<ExtArgs> | null
      logs: Prisma.$LogPayload<ExtArgs>[]
      tournament: Prisma.$TournamentPayload<ExtArgs> | null
      favoritedBy: Prisma.$UserPayload<ExtArgs>[]
      clanWar: Prisma.$ClanWarPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      date: Date
      brute1Id: string
      brute2Id: string | null
      winner: string
      loser: string
      steps: string
      fighters: string
      tournamentId: string | null
      tournamentStep: number
      modifiers: $Enums.FightModifier[]
      background: string
      clanWarId: string | null
    }, ExtArgs["result"]["fight"]>
    composites: {}
  }

  type FightGetPayload<S extends boolean | null | undefined | FightDefaultArgs> = $Result.GetResult<Prisma.$FightPayload, S>

  type FightCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FightFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: FightCountAggregateInputType | true
    }

  export interface FightDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Fight'], meta: { name: 'Fight' } }
    /**
     * Find zero or one Fight that matches the filter.
     * @param {FightFindUniqueArgs} args - Arguments to find a Fight
     * @example
     * // Get one Fight
     * const fight = await prisma.fight.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FightFindUniqueArgs>(args: SelectSubset<T, FightFindUniqueArgs<ExtArgs>>): Prisma__FightClient<$Result.GetResult<Prisma.$FightPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Fight that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FightFindUniqueOrThrowArgs} args - Arguments to find a Fight
     * @example
     * // Get one Fight
     * const fight = await prisma.fight.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FightFindUniqueOrThrowArgs>(args: SelectSubset<T, FightFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FightClient<$Result.GetResult<Prisma.$FightPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Fight that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FightFindFirstArgs} args - Arguments to find a Fight
     * @example
     * // Get one Fight
     * const fight = await prisma.fight.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FightFindFirstArgs>(args?: SelectSubset<T, FightFindFirstArgs<ExtArgs>>): Prisma__FightClient<$Result.GetResult<Prisma.$FightPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Fight that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FightFindFirstOrThrowArgs} args - Arguments to find a Fight
     * @example
     * // Get one Fight
     * const fight = await prisma.fight.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FightFindFirstOrThrowArgs>(args?: SelectSubset<T, FightFindFirstOrThrowArgs<ExtArgs>>): Prisma__FightClient<$Result.GetResult<Prisma.$FightPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Fights that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FightFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Fights
     * const fights = await prisma.fight.findMany()
     * 
     * // Get first 10 Fights
     * const fights = await prisma.fight.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fightWithIdOnly = await prisma.fight.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FightFindManyArgs>(args?: SelectSubset<T, FightFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FightPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Fight.
     * @param {FightCreateArgs} args - Arguments to create a Fight.
     * @example
     * // Create one Fight
     * const Fight = await prisma.fight.create({
     *   data: {
     *     // ... data to create a Fight
     *   }
     * })
     * 
     */
    create<T extends FightCreateArgs>(args: SelectSubset<T, FightCreateArgs<ExtArgs>>): Prisma__FightClient<$Result.GetResult<Prisma.$FightPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Fights.
     * @param {FightCreateManyArgs} args - Arguments to create many Fights.
     * @example
     * // Create many Fights
     * const fight = await prisma.fight.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FightCreateManyArgs>(args?: SelectSubset<T, FightCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Fights and returns the data saved in the database.
     * @param {FightCreateManyAndReturnArgs} args - Arguments to create many Fights.
     * @example
     * // Create many Fights
     * const fight = await prisma.fight.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Fights and only return the `id`
     * const fightWithIdOnly = await prisma.fight.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FightCreateManyAndReturnArgs>(args?: SelectSubset<T, FightCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FightPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Fight.
     * @param {FightDeleteArgs} args - Arguments to delete one Fight.
     * @example
     * // Delete one Fight
     * const Fight = await prisma.fight.delete({
     *   where: {
     *     // ... filter to delete one Fight
     *   }
     * })
     * 
     */
    delete<T extends FightDeleteArgs>(args: SelectSubset<T, FightDeleteArgs<ExtArgs>>): Prisma__FightClient<$Result.GetResult<Prisma.$FightPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Fight.
     * @param {FightUpdateArgs} args - Arguments to update one Fight.
     * @example
     * // Update one Fight
     * const fight = await prisma.fight.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FightUpdateArgs>(args: SelectSubset<T, FightUpdateArgs<ExtArgs>>): Prisma__FightClient<$Result.GetResult<Prisma.$FightPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Fights.
     * @param {FightDeleteManyArgs} args - Arguments to filter Fights to delete.
     * @example
     * // Delete a few Fights
     * const { count } = await prisma.fight.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FightDeleteManyArgs>(args?: SelectSubset<T, FightDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Fights.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FightUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Fights
     * const fight = await prisma.fight.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FightUpdateManyArgs>(args: SelectSubset<T, FightUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Fight.
     * @param {FightUpsertArgs} args - Arguments to update or create a Fight.
     * @example
     * // Update or create a Fight
     * const fight = await prisma.fight.upsert({
     *   create: {
     *     // ... data to create a Fight
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Fight we want to update
     *   }
     * })
     */
    upsert<T extends FightUpsertArgs>(args: SelectSubset<T, FightUpsertArgs<ExtArgs>>): Prisma__FightClient<$Result.GetResult<Prisma.$FightPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Fights.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FightCountArgs} args - Arguments to filter Fights to count.
     * @example
     * // Count the number of Fights
     * const count = await prisma.fight.count({
     *   where: {
     *     // ... the filter for the Fights we want to count
     *   }
     * })
    **/
    count<T extends FightCountArgs>(
      args?: Subset<T, FightCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FightCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Fight.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FightAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FightAggregateArgs>(args: Subset<T, FightAggregateArgs>): Prisma.PrismaPromise<GetFightAggregateType<T>>

    /**
     * Group by Fight.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FightGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FightGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FightGroupByArgs['orderBy'] }
        : { orderBy?: FightGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FightGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFightGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Fight model
   */
  readonly fields: FightFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Fight.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FightClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    brute1<T extends BruteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BruteDefaultArgs<ExtArgs>>): Prisma__BruteClient<$Result.GetResult<Prisma.$BrutePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    brute2<T extends Fight$brute2Args<ExtArgs> = {}>(args?: Subset<T, Fight$brute2Args<ExtArgs>>): Prisma__BruteClient<$Result.GetResult<Prisma.$BrutePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    logs<T extends Fight$logsArgs<ExtArgs> = {}>(args?: Subset<T, Fight$logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    tournament<T extends Fight$tournamentArgs<ExtArgs> = {}>(args?: Subset<T, Fight$tournamentArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    favoritedBy<T extends Fight$favoritedByArgs<ExtArgs> = {}>(args?: Subset<T, Fight$favoritedByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    clanWar<T extends Fight$clanWarArgs<ExtArgs> = {}>(args?: Subset<T, Fight$clanWarArgs<ExtArgs>>): Prisma__ClanWarClient<$Result.GetResult<Prisma.$ClanWarPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Fight model
   */ 
  interface FightFieldRefs {
    readonly id: FieldRef<"Fight", 'String'>
    readonly date: FieldRef<"Fight", 'DateTime'>
    readonly brute1Id: FieldRef<"Fight", 'String'>
    readonly brute2Id: FieldRef<"Fight", 'String'>
    readonly winner: FieldRef<"Fight", 'String'>
    readonly loser: FieldRef<"Fight", 'String'>
    readonly steps: FieldRef<"Fight", 'String'>
    readonly fighters: FieldRef<"Fight", 'String'>
    readonly tournamentId: FieldRef<"Fight", 'String'>
    readonly tournamentStep: FieldRef<"Fight", 'Int'>
    readonly modifiers: FieldRef<"Fight", 'FightModifier[]'>
    readonly background: FieldRef<"Fight", 'String'>
    readonly clanWarId: FieldRef<"Fight", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Fight findUnique
   */
  export type FightFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fight
     */
    select?: FightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Fight
     */
    omit?: FightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FightInclude<ExtArgs> | null
    /**
     * Filter, which Fight to fetch.
     */
    where: FightWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Fight findUniqueOrThrow
   */
  export type FightFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fight
     */
    select?: FightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Fight
     */
    omit?: FightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FightInclude<ExtArgs> | null
    /**
     * Filter, which Fight to fetch.
     */
    where: FightWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Fight findFirst
   */
  export type FightFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fight
     */
    select?: FightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Fight
     */
    omit?: FightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FightInclude<ExtArgs> | null
    /**
     * Filter, which Fight to fetch.
     */
    where?: FightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fights to fetch.
     */
    orderBy?: FightOrderByWithRelationInput | FightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fights.
     */
    cursor?: FightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fights.
     */
    distinct?: FightScalarFieldEnum | FightScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Fight findFirstOrThrow
   */
  export type FightFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fight
     */
    select?: FightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Fight
     */
    omit?: FightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FightInclude<ExtArgs> | null
    /**
     * Filter, which Fight to fetch.
     */
    where?: FightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fights to fetch.
     */
    orderBy?: FightOrderByWithRelationInput | FightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fights.
     */
    cursor?: FightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fights.
     */
    distinct?: FightScalarFieldEnum | FightScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Fight findMany
   */
  export type FightFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fight
     */
    select?: FightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Fight
     */
    omit?: FightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FightInclude<ExtArgs> | null
    /**
     * Filter, which Fights to fetch.
     */
    where?: FightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fights to fetch.
     */
    orderBy?: FightOrderByWithRelationInput | FightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Fights.
     */
    cursor?: FightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fights.
     */
    skip?: number
    distinct?: FightScalarFieldEnum | FightScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Fight create
   */
  export type FightCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fight
     */
    select?: FightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Fight
     */
    omit?: FightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FightInclude<ExtArgs> | null
    /**
     * The data needed to create a Fight.
     */
    data: XOR<FightCreateInput, FightUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Fight createMany
   */
  export type FightCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Fights.
     */
    data: FightCreateManyInput | FightCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Fight createManyAndReturn
   */
  export type FightCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fight
     */
    select?: FightSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Fight
     */
    omit?: FightOmit<ExtArgs> | null
    /**
     * The data used to create many Fights.
     */
    data: FightCreateManyInput | FightCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FightIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Fight update
   */
  export type FightUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fight
     */
    select?: FightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Fight
     */
    omit?: FightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FightInclude<ExtArgs> | null
    /**
     * The data needed to update a Fight.
     */
    data: XOR<FightUpdateInput, FightUncheckedUpdateInput>
    /**
     * Choose, which Fight to update.
     */
    where: FightWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Fight updateMany
   */
  export type FightUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Fights.
     */
    data: XOR<FightUpdateManyMutationInput, FightUncheckedUpdateManyInput>
    /**
     * Filter which Fights to update
     */
    where?: FightWhereInput
  }

  /**
   * Fight upsert
   */
  export type FightUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fight
     */
    select?: FightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Fight
     */
    omit?: FightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FightInclude<ExtArgs> | null
    /**
     * The filter to search for the Fight to update in case it exists.
     */
    where: FightWhereUniqueInput
    /**
     * In case the Fight found by the `where` argument doesn't exist, create a new Fight with this data.
     */
    create: XOR<FightCreateInput, FightUncheckedCreateInput>
    /**
     * In case the Fight was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FightUpdateInput, FightUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Fight delete
   */
  export type FightDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fight
     */
    select?: FightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Fight
     */
    omit?: FightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FightInclude<ExtArgs> | null
    /**
     * Filter which Fight to delete.
     */
    where: FightWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Fight deleteMany
   */
  export type FightDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Fights to delete
     */
    where?: FightWhereInput
  }

  /**
   * Fight.brute2
   */
  export type Fight$brute2Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brute
     */
    omit?: BruteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteInclude<ExtArgs> | null
    where?: BruteWhereInput
  }

  /**
   * Fight.logs
   */
  export type Fight$logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    where?: LogWhereInput
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    cursor?: LogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * Fight.tournament
   */
  export type Fight$tournamentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    where?: TournamentWhereInput
  }

  /**
   * Fight.favoritedBy
   */
  export type Fight$favoritedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Fight.clanWar
   */
  export type Fight$clanWarArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanWar
     */
    select?: ClanWarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanWar
     */
    omit?: ClanWarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanWarInclude<ExtArgs> | null
    where?: ClanWarWhereInput
  }

  /**
   * Fight without action
   */
  export type FightDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fight
     */
    select?: FightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Fight
     */
    omit?: FightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FightInclude<ExtArgs> | null
  }


  /**
   * Model Log
   */

  export type AggregateLog = {
    _count: LogCountAggregateOutputType | null
    _avg: LogAvgAggregateOutputType | null
    _sum: LogSumAggregateOutputType | null
    _min: LogMinAggregateOutputType | null
    _max: LogMaxAggregateOutputType | null
  }

  export type LogAvgAggregateOutputType = {
    level: number | null
    xp: number | null
    gold: number | null
  }

  export type LogSumAggregateOutputType = {
    level: number | null
    xp: number | null
    gold: number | null
  }

  export type LogMinAggregateOutputType = {
    id: string | null
    date: Date | null
    currentBruteId: string | null
    type: $Enums.LogType | null
    level: number | null
    brute: string | null
    fightId: string | null
    xp: number | null
    gold: number | null
    template: string | null
    destinyChoiceId: string | null
  }

  export type LogMaxAggregateOutputType = {
    id: string | null
    date: Date | null
    currentBruteId: string | null
    type: $Enums.LogType | null
    level: number | null
    brute: string | null
    fightId: string | null
    xp: number | null
    gold: number | null
    template: string | null
    destinyChoiceId: string | null
  }

  export type LogCountAggregateOutputType = {
    id: number
    date: number
    currentBruteId: number
    type: number
    level: number
    brute: number
    fightId: number
    xp: number
    gold: number
    template: number
    destinyChoiceId: number
    _all: number
  }


  export type LogAvgAggregateInputType = {
    level?: true
    xp?: true
    gold?: true
  }

  export type LogSumAggregateInputType = {
    level?: true
    xp?: true
    gold?: true
  }

  export type LogMinAggregateInputType = {
    id?: true
    date?: true
    currentBruteId?: true
    type?: true
    level?: true
    brute?: true
    fightId?: true
    xp?: true
    gold?: true
    template?: true
    destinyChoiceId?: true
  }

  export type LogMaxAggregateInputType = {
    id?: true
    date?: true
    currentBruteId?: true
    type?: true
    level?: true
    brute?: true
    fightId?: true
    xp?: true
    gold?: true
    template?: true
    destinyChoiceId?: true
  }

  export type LogCountAggregateInputType = {
    id?: true
    date?: true
    currentBruteId?: true
    type?: true
    level?: true
    brute?: true
    fightId?: true
    xp?: true
    gold?: true
    template?: true
    destinyChoiceId?: true
    _all?: true
  }

  export type LogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Log to aggregate.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Logs
    **/
    _count?: true | LogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LogMaxAggregateInputType
  }

  export type GetLogAggregateType<T extends LogAggregateArgs> = {
        [P in keyof T & keyof AggregateLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLog[P]>
      : GetScalarType<T[P], AggregateLog[P]>
  }




  export type LogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogWhereInput
    orderBy?: LogOrderByWithAggregationInput | LogOrderByWithAggregationInput[]
    by: LogScalarFieldEnum[] | LogScalarFieldEnum
    having?: LogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LogCountAggregateInputType | true
    _avg?: LogAvgAggregateInputType
    _sum?: LogSumAggregateInputType
    _min?: LogMinAggregateInputType
    _max?: LogMaxAggregateInputType
  }

  export type LogGroupByOutputType = {
    id: string
    date: Date
    currentBruteId: string
    type: $Enums.LogType
    level: number | null
    brute: string | null
    fightId: string | null
    xp: number | null
    gold: number | null
    template: string | null
    destinyChoiceId: string | null
    _count: LogCountAggregateOutputType | null
    _avg: LogAvgAggregateOutputType | null
    _sum: LogSumAggregateOutputType | null
    _min: LogMinAggregateOutputType | null
    _max: LogMaxAggregateOutputType | null
  }

  type GetLogGroupByPayload<T extends LogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LogGroupByOutputType[P]>
            : GetScalarType<T[P], LogGroupByOutputType[P]>
        }
      >
    >


  export type LogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    currentBruteId?: boolean
    type?: boolean
    level?: boolean
    brute?: boolean
    fightId?: boolean
    xp?: boolean
    gold?: boolean
    template?: boolean
    destinyChoiceId?: boolean
    currentBrute?: boolean | BruteDefaultArgs<ExtArgs>
    fight?: boolean | Log$fightArgs<ExtArgs>
    destinyChoice?: boolean | Log$destinyChoiceArgs<ExtArgs>
  }, ExtArgs["result"]["log"]>

  export type LogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    currentBruteId?: boolean
    type?: boolean
    level?: boolean
    brute?: boolean
    fightId?: boolean
    xp?: boolean
    gold?: boolean
    template?: boolean
    destinyChoiceId?: boolean
    currentBrute?: boolean | BruteDefaultArgs<ExtArgs>
    fight?: boolean | Log$fightArgs<ExtArgs>
    destinyChoice?: boolean | Log$destinyChoiceArgs<ExtArgs>
  }, ExtArgs["result"]["log"]>

  export type LogSelectScalar = {
    id?: boolean
    date?: boolean
    currentBruteId?: boolean
    type?: boolean
    level?: boolean
    brute?: boolean
    fightId?: boolean
    xp?: boolean
    gold?: boolean
    template?: boolean
    destinyChoiceId?: boolean
  }

  export type LogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "date" | "currentBruteId" | "type" | "level" | "brute" | "fightId" | "xp" | "gold" | "template" | "destinyChoiceId", ExtArgs["result"]["log"]>
  export type LogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    currentBrute?: boolean | BruteDefaultArgs<ExtArgs>
    fight?: boolean | Log$fightArgs<ExtArgs>
    destinyChoice?: boolean | Log$destinyChoiceArgs<ExtArgs>
  }
  export type LogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    currentBrute?: boolean | BruteDefaultArgs<ExtArgs>
    fight?: boolean | Log$fightArgs<ExtArgs>
    destinyChoice?: boolean | Log$destinyChoiceArgs<ExtArgs>
  }

  export type $LogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Log"
    objects: {
      currentBrute: Prisma.$BrutePayload<ExtArgs>
      fight: Prisma.$FightPayload<ExtArgs> | null
      destinyChoice: Prisma.$DestinyChoicePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      date: Date
      currentBruteId: string
      type: $Enums.LogType
      level: number | null
      brute: string | null
      fightId: string | null
      xp: number | null
      gold: number | null
      template: string | null
      destinyChoiceId: string | null
    }, ExtArgs["result"]["log"]>
    composites: {}
  }

  type LogGetPayload<S extends boolean | null | undefined | LogDefaultArgs> = $Result.GetResult<Prisma.$LogPayload, S>

  type LogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: LogCountAggregateInputType | true
    }

  export interface LogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Log'], meta: { name: 'Log' } }
    /**
     * Find zero or one Log that matches the filter.
     * @param {LogFindUniqueArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LogFindUniqueArgs>(args: SelectSubset<T, LogFindUniqueArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Log that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LogFindUniqueOrThrowArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LogFindUniqueOrThrowArgs>(args: SelectSubset<T, LogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Log that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogFindFirstArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LogFindFirstArgs>(args?: SelectSubset<T, LogFindFirstArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Log that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogFindFirstOrThrowArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LogFindFirstOrThrowArgs>(args?: SelectSubset<T, LogFindFirstOrThrowArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Logs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Logs
     * const logs = await prisma.log.findMany()
     * 
     * // Get first 10 Logs
     * const logs = await prisma.log.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const logWithIdOnly = await prisma.log.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LogFindManyArgs>(args?: SelectSubset<T, LogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Log.
     * @param {LogCreateArgs} args - Arguments to create a Log.
     * @example
     * // Create one Log
     * const Log = await prisma.log.create({
     *   data: {
     *     // ... data to create a Log
     *   }
     * })
     * 
     */
    create<T extends LogCreateArgs>(args: SelectSubset<T, LogCreateArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Logs.
     * @param {LogCreateManyArgs} args - Arguments to create many Logs.
     * @example
     * // Create many Logs
     * const log = await prisma.log.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LogCreateManyArgs>(args?: SelectSubset<T, LogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Logs and returns the data saved in the database.
     * @param {LogCreateManyAndReturnArgs} args - Arguments to create many Logs.
     * @example
     * // Create many Logs
     * const log = await prisma.log.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Logs and only return the `id`
     * const logWithIdOnly = await prisma.log.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LogCreateManyAndReturnArgs>(args?: SelectSubset<T, LogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Log.
     * @param {LogDeleteArgs} args - Arguments to delete one Log.
     * @example
     * // Delete one Log
     * const Log = await prisma.log.delete({
     *   where: {
     *     // ... filter to delete one Log
     *   }
     * })
     * 
     */
    delete<T extends LogDeleteArgs>(args: SelectSubset<T, LogDeleteArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Log.
     * @param {LogUpdateArgs} args - Arguments to update one Log.
     * @example
     * // Update one Log
     * const log = await prisma.log.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LogUpdateArgs>(args: SelectSubset<T, LogUpdateArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Logs.
     * @param {LogDeleteManyArgs} args - Arguments to filter Logs to delete.
     * @example
     * // Delete a few Logs
     * const { count } = await prisma.log.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LogDeleteManyArgs>(args?: SelectSubset<T, LogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Logs
     * const log = await prisma.log.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LogUpdateManyArgs>(args: SelectSubset<T, LogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Log.
     * @param {LogUpsertArgs} args - Arguments to update or create a Log.
     * @example
     * // Update or create a Log
     * const log = await prisma.log.upsert({
     *   create: {
     *     // ... data to create a Log
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Log we want to update
     *   }
     * })
     */
    upsert<T extends LogUpsertArgs>(args: SelectSubset<T, LogUpsertArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogCountArgs} args - Arguments to filter Logs to count.
     * @example
     * // Count the number of Logs
     * const count = await prisma.log.count({
     *   where: {
     *     // ... the filter for the Logs we want to count
     *   }
     * })
    **/
    count<T extends LogCountArgs>(
      args?: Subset<T, LogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Log.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LogAggregateArgs>(args: Subset<T, LogAggregateArgs>): Prisma.PrismaPromise<GetLogAggregateType<T>>

    /**
     * Group by Log.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LogGroupByArgs['orderBy'] }
        : { orderBy?: LogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Log model
   */
  readonly fields: LogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Log.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    currentBrute<T extends BruteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BruteDefaultArgs<ExtArgs>>): Prisma__BruteClient<$Result.GetResult<Prisma.$BrutePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    fight<T extends Log$fightArgs<ExtArgs> = {}>(args?: Subset<T, Log$fightArgs<ExtArgs>>): Prisma__FightClient<$Result.GetResult<Prisma.$FightPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    destinyChoice<T extends Log$destinyChoiceArgs<ExtArgs> = {}>(args?: Subset<T, Log$destinyChoiceArgs<ExtArgs>>): Prisma__DestinyChoiceClient<$Result.GetResult<Prisma.$DestinyChoicePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Log model
   */ 
  interface LogFieldRefs {
    readonly id: FieldRef<"Log", 'String'>
    readonly date: FieldRef<"Log", 'DateTime'>
    readonly currentBruteId: FieldRef<"Log", 'String'>
    readonly type: FieldRef<"Log", 'LogType'>
    readonly level: FieldRef<"Log", 'Int'>
    readonly brute: FieldRef<"Log", 'String'>
    readonly fightId: FieldRef<"Log", 'String'>
    readonly xp: FieldRef<"Log", 'Int'>
    readonly gold: FieldRef<"Log", 'Int'>
    readonly template: FieldRef<"Log", 'String'>
    readonly destinyChoiceId: FieldRef<"Log", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Log findUnique
   */
  export type LogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where: LogWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Log findUniqueOrThrow
   */
  export type LogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where: LogWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Log findFirst
   */
  export type LogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Logs.
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Logs.
     */
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Log findFirstOrThrow
   */
  export type LogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Logs.
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Logs.
     */
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Log findMany
   */
  export type LogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter, which Logs to fetch.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Logs.
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Log create
   */
  export type LogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * The data needed to create a Log.
     */
    data: XOR<LogCreateInput, LogUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Log createMany
   */
  export type LogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Logs.
     */
    data: LogCreateManyInput | LogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Log createManyAndReturn
   */
  export type LogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * The data used to create many Logs.
     */
    data: LogCreateManyInput | LogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Log update
   */
  export type LogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * The data needed to update a Log.
     */
    data: XOR<LogUpdateInput, LogUncheckedUpdateInput>
    /**
     * Choose, which Log to update.
     */
    where: LogWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Log updateMany
   */
  export type LogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Logs.
     */
    data: XOR<LogUpdateManyMutationInput, LogUncheckedUpdateManyInput>
    /**
     * Filter which Logs to update
     */
    where?: LogWhereInput
  }

  /**
   * Log upsert
   */
  export type LogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * The filter to search for the Log to update in case it exists.
     */
    where: LogWhereUniqueInput
    /**
     * In case the Log found by the `where` argument doesn't exist, create a new Log with this data.
     */
    create: XOR<LogCreateInput, LogUncheckedCreateInput>
    /**
     * In case the Log was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LogUpdateInput, LogUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Log delete
   */
  export type LogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter which Log to delete.
     */
    where: LogWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Log deleteMany
   */
  export type LogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Logs to delete
     */
    where?: LogWhereInput
  }

  /**
   * Log.fight
   */
  export type Log$fightArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fight
     */
    select?: FightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Fight
     */
    omit?: FightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FightInclude<ExtArgs> | null
    where?: FightWhereInput
  }

  /**
   * Log.destinyChoice
   */
  export type Log$destinyChoiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DestinyChoice
     */
    select?: DestinyChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DestinyChoice
     */
    omit?: DestinyChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DestinyChoiceInclude<ExtArgs> | null
    where?: DestinyChoiceWhereInput
  }

  /**
   * Log without action
   */
  export type LogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
  }


  /**
   * Model DestinyChoice
   */

  export type AggregateDestinyChoice = {
    _count: DestinyChoiceCountAggregateOutputType | null
    _avg: DestinyChoiceAvgAggregateOutputType | null
    _sum: DestinyChoiceSumAggregateOutputType | null
    _min: DestinyChoiceMinAggregateOutputType | null
    _max: DestinyChoiceMaxAggregateOutputType | null
  }

  export type DestinyChoiceAvgAggregateOutputType = {
    stat1Value: number | null
    stat2Value: number | null
  }

  export type DestinyChoiceSumAggregateOutputType = {
    stat1Value: number | null
    stat2Value: number | null
  }

  export type DestinyChoiceMinAggregateOutputType = {
    id: string | null
    bruteId: string | null
    type: $Enums.DestinyChoiceType | null
    skill: $Enums.SkillName | null
    weapon: $Enums.WeaponName | null
    pet: $Enums.PetName | null
    originalSkill: $Enums.SkillName | null
    originalWeapon: $Enums.WeaponName | null
    originalPet: $Enums.PetName | null
    stat1: $Enums.BruteStat | null
    stat1Value: number | null
    stat2: $Enums.BruteStat | null
    stat2Value: number | null
  }

  export type DestinyChoiceMaxAggregateOutputType = {
    id: string | null
    bruteId: string | null
    type: $Enums.DestinyChoiceType | null
    skill: $Enums.SkillName | null
    weapon: $Enums.WeaponName | null
    pet: $Enums.PetName | null
    originalSkill: $Enums.SkillName | null
    originalWeapon: $Enums.WeaponName | null
    originalPet: $Enums.PetName | null
    stat1: $Enums.BruteStat | null
    stat1Value: number | null
    stat2: $Enums.BruteStat | null
    stat2Value: number | null
  }

  export type DestinyChoiceCountAggregateOutputType = {
    id: number
    bruteId: number
    path: number
    type: number
    skill: number
    weapon: number
    pet: number
    originalSkill: number
    originalWeapon: number
    originalPet: number
    stat1: number
    stat1Value: number
    stat2: number
    stat2Value: number
    _all: number
  }


  export type DestinyChoiceAvgAggregateInputType = {
    stat1Value?: true
    stat2Value?: true
  }

  export type DestinyChoiceSumAggregateInputType = {
    stat1Value?: true
    stat2Value?: true
  }

  export type DestinyChoiceMinAggregateInputType = {
    id?: true
    bruteId?: true
    type?: true
    skill?: true
    weapon?: true
    pet?: true
    originalSkill?: true
    originalWeapon?: true
    originalPet?: true
    stat1?: true
    stat1Value?: true
    stat2?: true
    stat2Value?: true
  }

  export type DestinyChoiceMaxAggregateInputType = {
    id?: true
    bruteId?: true
    type?: true
    skill?: true
    weapon?: true
    pet?: true
    originalSkill?: true
    originalWeapon?: true
    originalPet?: true
    stat1?: true
    stat1Value?: true
    stat2?: true
    stat2Value?: true
  }

  export type DestinyChoiceCountAggregateInputType = {
    id?: true
    bruteId?: true
    path?: true
    type?: true
    skill?: true
    weapon?: true
    pet?: true
    originalSkill?: true
    originalWeapon?: true
    originalPet?: true
    stat1?: true
    stat1Value?: true
    stat2?: true
    stat2Value?: true
    _all?: true
  }

  export type DestinyChoiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DestinyChoice to aggregate.
     */
    where?: DestinyChoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DestinyChoices to fetch.
     */
    orderBy?: DestinyChoiceOrderByWithRelationInput | DestinyChoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DestinyChoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DestinyChoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DestinyChoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DestinyChoices
    **/
    _count?: true | DestinyChoiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DestinyChoiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DestinyChoiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DestinyChoiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DestinyChoiceMaxAggregateInputType
  }

  export type GetDestinyChoiceAggregateType<T extends DestinyChoiceAggregateArgs> = {
        [P in keyof T & keyof AggregateDestinyChoice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDestinyChoice[P]>
      : GetScalarType<T[P], AggregateDestinyChoice[P]>
  }




  export type DestinyChoiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DestinyChoiceWhereInput
    orderBy?: DestinyChoiceOrderByWithAggregationInput | DestinyChoiceOrderByWithAggregationInput[]
    by: DestinyChoiceScalarFieldEnum[] | DestinyChoiceScalarFieldEnum
    having?: DestinyChoiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DestinyChoiceCountAggregateInputType | true
    _avg?: DestinyChoiceAvgAggregateInputType
    _sum?: DestinyChoiceSumAggregateInputType
    _min?: DestinyChoiceMinAggregateInputType
    _max?: DestinyChoiceMaxAggregateInputType
  }

  export type DestinyChoiceGroupByOutputType = {
    id: string
    bruteId: string
    path: $Enums.DestinyChoiceSide[]
    type: $Enums.DestinyChoiceType
    skill: $Enums.SkillName | null
    weapon: $Enums.WeaponName | null
    pet: $Enums.PetName | null
    originalSkill: $Enums.SkillName | null
    originalWeapon: $Enums.WeaponName | null
    originalPet: $Enums.PetName | null
    stat1: $Enums.BruteStat | null
    stat1Value: number | null
    stat2: $Enums.BruteStat | null
    stat2Value: number | null
    _count: DestinyChoiceCountAggregateOutputType | null
    _avg: DestinyChoiceAvgAggregateOutputType | null
    _sum: DestinyChoiceSumAggregateOutputType | null
    _min: DestinyChoiceMinAggregateOutputType | null
    _max: DestinyChoiceMaxAggregateOutputType | null
  }

  type GetDestinyChoiceGroupByPayload<T extends DestinyChoiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DestinyChoiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DestinyChoiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DestinyChoiceGroupByOutputType[P]>
            : GetScalarType<T[P], DestinyChoiceGroupByOutputType[P]>
        }
      >
    >


  export type DestinyChoiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bruteId?: boolean
    path?: boolean
    type?: boolean
    skill?: boolean
    weapon?: boolean
    pet?: boolean
    originalSkill?: boolean
    originalWeapon?: boolean
    originalPet?: boolean
    stat1?: boolean
    stat1Value?: boolean
    stat2?: boolean
    stat2Value?: boolean
    brute?: boolean | BruteDefaultArgs<ExtArgs>
    logs?: boolean | DestinyChoice$logsArgs<ExtArgs>
    _count?: boolean | DestinyChoiceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["destinyChoice"]>

  export type DestinyChoiceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bruteId?: boolean
    path?: boolean
    type?: boolean
    skill?: boolean
    weapon?: boolean
    pet?: boolean
    originalSkill?: boolean
    originalWeapon?: boolean
    originalPet?: boolean
    stat1?: boolean
    stat1Value?: boolean
    stat2?: boolean
    stat2Value?: boolean
    brute?: boolean | BruteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["destinyChoice"]>

  export type DestinyChoiceSelectScalar = {
    id?: boolean
    bruteId?: boolean
    path?: boolean
    type?: boolean
    skill?: boolean
    weapon?: boolean
    pet?: boolean
    originalSkill?: boolean
    originalWeapon?: boolean
    originalPet?: boolean
    stat1?: boolean
    stat1Value?: boolean
    stat2?: boolean
    stat2Value?: boolean
  }

  export type DestinyChoiceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "bruteId" | "path" | "type" | "skill" | "weapon" | "pet" | "originalSkill" | "originalWeapon" | "originalPet" | "stat1" | "stat1Value" | "stat2" | "stat2Value", ExtArgs["result"]["destinyChoice"]>
  export type DestinyChoiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brute?: boolean | BruteDefaultArgs<ExtArgs>
    logs?: boolean | DestinyChoice$logsArgs<ExtArgs>
    _count?: boolean | DestinyChoiceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DestinyChoiceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brute?: boolean | BruteDefaultArgs<ExtArgs>
  }

  export type $DestinyChoicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DestinyChoice"
    objects: {
      brute: Prisma.$BrutePayload<ExtArgs>
      logs: Prisma.$LogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      bruteId: string
      path: $Enums.DestinyChoiceSide[]
      type: $Enums.DestinyChoiceType
      skill: $Enums.SkillName | null
      weapon: $Enums.WeaponName | null
      pet: $Enums.PetName | null
      originalSkill: $Enums.SkillName | null
      originalWeapon: $Enums.WeaponName | null
      originalPet: $Enums.PetName | null
      stat1: $Enums.BruteStat | null
      stat1Value: number | null
      stat2: $Enums.BruteStat | null
      stat2Value: number | null
    }, ExtArgs["result"]["destinyChoice"]>
    composites: {}
  }

  type DestinyChoiceGetPayload<S extends boolean | null | undefined | DestinyChoiceDefaultArgs> = $Result.GetResult<Prisma.$DestinyChoicePayload, S>

  type DestinyChoiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DestinyChoiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: DestinyChoiceCountAggregateInputType | true
    }

  export interface DestinyChoiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DestinyChoice'], meta: { name: 'DestinyChoice' } }
    /**
     * Find zero or one DestinyChoice that matches the filter.
     * @param {DestinyChoiceFindUniqueArgs} args - Arguments to find a DestinyChoice
     * @example
     * // Get one DestinyChoice
     * const destinyChoice = await prisma.destinyChoice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DestinyChoiceFindUniqueArgs>(args: SelectSubset<T, DestinyChoiceFindUniqueArgs<ExtArgs>>): Prisma__DestinyChoiceClient<$Result.GetResult<Prisma.$DestinyChoicePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one DestinyChoice that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DestinyChoiceFindUniqueOrThrowArgs} args - Arguments to find a DestinyChoice
     * @example
     * // Get one DestinyChoice
     * const destinyChoice = await prisma.destinyChoice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DestinyChoiceFindUniqueOrThrowArgs>(args: SelectSubset<T, DestinyChoiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DestinyChoiceClient<$Result.GetResult<Prisma.$DestinyChoicePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first DestinyChoice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DestinyChoiceFindFirstArgs} args - Arguments to find a DestinyChoice
     * @example
     * // Get one DestinyChoice
     * const destinyChoice = await prisma.destinyChoice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DestinyChoiceFindFirstArgs>(args?: SelectSubset<T, DestinyChoiceFindFirstArgs<ExtArgs>>): Prisma__DestinyChoiceClient<$Result.GetResult<Prisma.$DestinyChoicePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first DestinyChoice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DestinyChoiceFindFirstOrThrowArgs} args - Arguments to find a DestinyChoice
     * @example
     * // Get one DestinyChoice
     * const destinyChoice = await prisma.destinyChoice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DestinyChoiceFindFirstOrThrowArgs>(args?: SelectSubset<T, DestinyChoiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__DestinyChoiceClient<$Result.GetResult<Prisma.$DestinyChoicePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more DestinyChoices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DestinyChoiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DestinyChoices
     * const destinyChoices = await prisma.destinyChoice.findMany()
     * 
     * // Get first 10 DestinyChoices
     * const destinyChoices = await prisma.destinyChoice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const destinyChoiceWithIdOnly = await prisma.destinyChoice.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DestinyChoiceFindManyArgs>(args?: SelectSubset<T, DestinyChoiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DestinyChoicePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a DestinyChoice.
     * @param {DestinyChoiceCreateArgs} args - Arguments to create a DestinyChoice.
     * @example
     * // Create one DestinyChoice
     * const DestinyChoice = await prisma.destinyChoice.create({
     *   data: {
     *     // ... data to create a DestinyChoice
     *   }
     * })
     * 
     */
    create<T extends DestinyChoiceCreateArgs>(args: SelectSubset<T, DestinyChoiceCreateArgs<ExtArgs>>): Prisma__DestinyChoiceClient<$Result.GetResult<Prisma.$DestinyChoicePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many DestinyChoices.
     * @param {DestinyChoiceCreateManyArgs} args - Arguments to create many DestinyChoices.
     * @example
     * // Create many DestinyChoices
     * const destinyChoice = await prisma.destinyChoice.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DestinyChoiceCreateManyArgs>(args?: SelectSubset<T, DestinyChoiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DestinyChoices and returns the data saved in the database.
     * @param {DestinyChoiceCreateManyAndReturnArgs} args - Arguments to create many DestinyChoices.
     * @example
     * // Create many DestinyChoices
     * const destinyChoice = await prisma.destinyChoice.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DestinyChoices and only return the `id`
     * const destinyChoiceWithIdOnly = await prisma.destinyChoice.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DestinyChoiceCreateManyAndReturnArgs>(args?: SelectSubset<T, DestinyChoiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DestinyChoicePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a DestinyChoice.
     * @param {DestinyChoiceDeleteArgs} args - Arguments to delete one DestinyChoice.
     * @example
     * // Delete one DestinyChoice
     * const DestinyChoice = await prisma.destinyChoice.delete({
     *   where: {
     *     // ... filter to delete one DestinyChoice
     *   }
     * })
     * 
     */
    delete<T extends DestinyChoiceDeleteArgs>(args: SelectSubset<T, DestinyChoiceDeleteArgs<ExtArgs>>): Prisma__DestinyChoiceClient<$Result.GetResult<Prisma.$DestinyChoicePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one DestinyChoice.
     * @param {DestinyChoiceUpdateArgs} args - Arguments to update one DestinyChoice.
     * @example
     * // Update one DestinyChoice
     * const destinyChoice = await prisma.destinyChoice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DestinyChoiceUpdateArgs>(args: SelectSubset<T, DestinyChoiceUpdateArgs<ExtArgs>>): Prisma__DestinyChoiceClient<$Result.GetResult<Prisma.$DestinyChoicePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more DestinyChoices.
     * @param {DestinyChoiceDeleteManyArgs} args - Arguments to filter DestinyChoices to delete.
     * @example
     * // Delete a few DestinyChoices
     * const { count } = await prisma.destinyChoice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DestinyChoiceDeleteManyArgs>(args?: SelectSubset<T, DestinyChoiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DestinyChoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DestinyChoiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DestinyChoices
     * const destinyChoice = await prisma.destinyChoice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DestinyChoiceUpdateManyArgs>(args: SelectSubset<T, DestinyChoiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DestinyChoice.
     * @param {DestinyChoiceUpsertArgs} args - Arguments to update or create a DestinyChoice.
     * @example
     * // Update or create a DestinyChoice
     * const destinyChoice = await prisma.destinyChoice.upsert({
     *   create: {
     *     // ... data to create a DestinyChoice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DestinyChoice we want to update
     *   }
     * })
     */
    upsert<T extends DestinyChoiceUpsertArgs>(args: SelectSubset<T, DestinyChoiceUpsertArgs<ExtArgs>>): Prisma__DestinyChoiceClient<$Result.GetResult<Prisma.$DestinyChoicePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of DestinyChoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DestinyChoiceCountArgs} args - Arguments to filter DestinyChoices to count.
     * @example
     * // Count the number of DestinyChoices
     * const count = await prisma.destinyChoice.count({
     *   where: {
     *     // ... the filter for the DestinyChoices we want to count
     *   }
     * })
    **/
    count<T extends DestinyChoiceCountArgs>(
      args?: Subset<T, DestinyChoiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DestinyChoiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DestinyChoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DestinyChoiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DestinyChoiceAggregateArgs>(args: Subset<T, DestinyChoiceAggregateArgs>): Prisma.PrismaPromise<GetDestinyChoiceAggregateType<T>>

    /**
     * Group by DestinyChoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DestinyChoiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DestinyChoiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DestinyChoiceGroupByArgs['orderBy'] }
        : { orderBy?: DestinyChoiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DestinyChoiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDestinyChoiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DestinyChoice model
   */
  readonly fields: DestinyChoiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DestinyChoice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DestinyChoiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    brute<T extends BruteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BruteDefaultArgs<ExtArgs>>): Prisma__BruteClient<$Result.GetResult<Prisma.$BrutePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    logs<T extends DestinyChoice$logsArgs<ExtArgs> = {}>(args?: Subset<T, DestinyChoice$logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DestinyChoice model
   */ 
  interface DestinyChoiceFieldRefs {
    readonly id: FieldRef<"DestinyChoice", 'String'>
    readonly bruteId: FieldRef<"DestinyChoice", 'String'>
    readonly path: FieldRef<"DestinyChoice", 'DestinyChoiceSide[]'>
    readonly type: FieldRef<"DestinyChoice", 'DestinyChoiceType'>
    readonly skill: FieldRef<"DestinyChoice", 'SkillName'>
    readonly weapon: FieldRef<"DestinyChoice", 'WeaponName'>
    readonly pet: FieldRef<"DestinyChoice", 'PetName'>
    readonly originalSkill: FieldRef<"DestinyChoice", 'SkillName'>
    readonly originalWeapon: FieldRef<"DestinyChoice", 'WeaponName'>
    readonly originalPet: FieldRef<"DestinyChoice", 'PetName'>
    readonly stat1: FieldRef<"DestinyChoice", 'BruteStat'>
    readonly stat1Value: FieldRef<"DestinyChoice", 'Int'>
    readonly stat2: FieldRef<"DestinyChoice", 'BruteStat'>
    readonly stat2Value: FieldRef<"DestinyChoice", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * DestinyChoice findUnique
   */
  export type DestinyChoiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DestinyChoice
     */
    select?: DestinyChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DestinyChoice
     */
    omit?: DestinyChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DestinyChoiceInclude<ExtArgs> | null
    /**
     * Filter, which DestinyChoice to fetch.
     */
    where: DestinyChoiceWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * DestinyChoice findUniqueOrThrow
   */
  export type DestinyChoiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DestinyChoice
     */
    select?: DestinyChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DestinyChoice
     */
    omit?: DestinyChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DestinyChoiceInclude<ExtArgs> | null
    /**
     * Filter, which DestinyChoice to fetch.
     */
    where: DestinyChoiceWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * DestinyChoice findFirst
   */
  export type DestinyChoiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DestinyChoice
     */
    select?: DestinyChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DestinyChoice
     */
    omit?: DestinyChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DestinyChoiceInclude<ExtArgs> | null
    /**
     * Filter, which DestinyChoice to fetch.
     */
    where?: DestinyChoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DestinyChoices to fetch.
     */
    orderBy?: DestinyChoiceOrderByWithRelationInput | DestinyChoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DestinyChoices.
     */
    cursor?: DestinyChoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DestinyChoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DestinyChoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DestinyChoices.
     */
    distinct?: DestinyChoiceScalarFieldEnum | DestinyChoiceScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * DestinyChoice findFirstOrThrow
   */
  export type DestinyChoiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DestinyChoice
     */
    select?: DestinyChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DestinyChoice
     */
    omit?: DestinyChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DestinyChoiceInclude<ExtArgs> | null
    /**
     * Filter, which DestinyChoice to fetch.
     */
    where?: DestinyChoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DestinyChoices to fetch.
     */
    orderBy?: DestinyChoiceOrderByWithRelationInput | DestinyChoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DestinyChoices.
     */
    cursor?: DestinyChoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DestinyChoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DestinyChoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DestinyChoices.
     */
    distinct?: DestinyChoiceScalarFieldEnum | DestinyChoiceScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * DestinyChoice findMany
   */
  export type DestinyChoiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DestinyChoice
     */
    select?: DestinyChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DestinyChoice
     */
    omit?: DestinyChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DestinyChoiceInclude<ExtArgs> | null
    /**
     * Filter, which DestinyChoices to fetch.
     */
    where?: DestinyChoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DestinyChoices to fetch.
     */
    orderBy?: DestinyChoiceOrderByWithRelationInput | DestinyChoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DestinyChoices.
     */
    cursor?: DestinyChoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DestinyChoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DestinyChoices.
     */
    skip?: number
    distinct?: DestinyChoiceScalarFieldEnum | DestinyChoiceScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * DestinyChoice create
   */
  export type DestinyChoiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DestinyChoice
     */
    select?: DestinyChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DestinyChoice
     */
    omit?: DestinyChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DestinyChoiceInclude<ExtArgs> | null
    /**
     * The data needed to create a DestinyChoice.
     */
    data: XOR<DestinyChoiceCreateInput, DestinyChoiceUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * DestinyChoice createMany
   */
  export type DestinyChoiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DestinyChoices.
     */
    data: DestinyChoiceCreateManyInput | DestinyChoiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DestinyChoice createManyAndReturn
   */
  export type DestinyChoiceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DestinyChoice
     */
    select?: DestinyChoiceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DestinyChoice
     */
    omit?: DestinyChoiceOmit<ExtArgs> | null
    /**
     * The data used to create many DestinyChoices.
     */
    data: DestinyChoiceCreateManyInput | DestinyChoiceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DestinyChoiceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DestinyChoice update
   */
  export type DestinyChoiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DestinyChoice
     */
    select?: DestinyChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DestinyChoice
     */
    omit?: DestinyChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DestinyChoiceInclude<ExtArgs> | null
    /**
     * The data needed to update a DestinyChoice.
     */
    data: XOR<DestinyChoiceUpdateInput, DestinyChoiceUncheckedUpdateInput>
    /**
     * Choose, which DestinyChoice to update.
     */
    where: DestinyChoiceWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * DestinyChoice updateMany
   */
  export type DestinyChoiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DestinyChoices.
     */
    data: XOR<DestinyChoiceUpdateManyMutationInput, DestinyChoiceUncheckedUpdateManyInput>
    /**
     * Filter which DestinyChoices to update
     */
    where?: DestinyChoiceWhereInput
  }

  /**
   * DestinyChoice upsert
   */
  export type DestinyChoiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DestinyChoice
     */
    select?: DestinyChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DestinyChoice
     */
    omit?: DestinyChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DestinyChoiceInclude<ExtArgs> | null
    /**
     * The filter to search for the DestinyChoice to update in case it exists.
     */
    where: DestinyChoiceWhereUniqueInput
    /**
     * In case the DestinyChoice found by the `where` argument doesn't exist, create a new DestinyChoice with this data.
     */
    create: XOR<DestinyChoiceCreateInput, DestinyChoiceUncheckedCreateInput>
    /**
     * In case the DestinyChoice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DestinyChoiceUpdateInput, DestinyChoiceUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * DestinyChoice delete
   */
  export type DestinyChoiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DestinyChoice
     */
    select?: DestinyChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DestinyChoice
     */
    omit?: DestinyChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DestinyChoiceInclude<ExtArgs> | null
    /**
     * Filter which DestinyChoice to delete.
     */
    where: DestinyChoiceWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * DestinyChoice deleteMany
   */
  export type DestinyChoiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DestinyChoices to delete
     */
    where?: DestinyChoiceWhereInput
  }

  /**
   * DestinyChoice.logs
   */
  export type DestinyChoice$logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    where?: LogWhereInput
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    cursor?: LogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * DestinyChoice without action
   */
  export type DestinyChoiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DestinyChoice
     */
    select?: DestinyChoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DestinyChoice
     */
    omit?: DestinyChoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DestinyChoiceInclude<ExtArgs> | null
  }


  /**
   * Model Tournament
   */

  export type AggregateTournament = {
    _count: TournamentCountAggregateOutputType | null
    _avg: TournamentAvgAggregateOutputType | null
    _sum: TournamentSumAggregateOutputType | null
    _min: TournamentMinAggregateOutputType | null
    _max: TournamentMaxAggregateOutputType | null
  }

  export type TournamentAvgAggregateOutputType = {
    rounds: number | null
  }

  export type TournamentSumAggregateOutputType = {
    rounds: number | null
  }

  export type TournamentMinAggregateOutputType = {
    id: string | null
    date: Date | null
    type: $Enums.TournamentType | null
    rounds: number | null
    eventId: string | null
  }

  export type TournamentMaxAggregateOutputType = {
    id: string | null
    date: Date | null
    type: $Enums.TournamentType | null
    rounds: number | null
    eventId: string | null
  }

  export type TournamentCountAggregateOutputType = {
    id: number
    date: number
    type: number
    rounds: number
    eventId: number
    _all: number
  }


  export type TournamentAvgAggregateInputType = {
    rounds?: true
  }

  export type TournamentSumAggregateInputType = {
    rounds?: true
  }

  export type TournamentMinAggregateInputType = {
    id?: true
    date?: true
    type?: true
    rounds?: true
    eventId?: true
  }

  export type TournamentMaxAggregateInputType = {
    id?: true
    date?: true
    type?: true
    rounds?: true
    eventId?: true
  }

  export type TournamentCountAggregateInputType = {
    id?: true
    date?: true
    type?: true
    rounds?: true
    eventId?: true
    _all?: true
  }

  export type TournamentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tournament to aggregate.
     */
    where?: TournamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tournaments to fetch.
     */
    orderBy?: TournamentOrderByWithRelationInput | TournamentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TournamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tournaments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tournaments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tournaments
    **/
    _count?: true | TournamentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TournamentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TournamentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TournamentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TournamentMaxAggregateInputType
  }

  export type GetTournamentAggregateType<T extends TournamentAggregateArgs> = {
        [P in keyof T & keyof AggregateTournament]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTournament[P]>
      : GetScalarType<T[P], AggregateTournament[P]>
  }




  export type TournamentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TournamentWhereInput
    orderBy?: TournamentOrderByWithAggregationInput | TournamentOrderByWithAggregationInput[]
    by: TournamentScalarFieldEnum[] | TournamentScalarFieldEnum
    having?: TournamentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TournamentCountAggregateInputType | true
    _avg?: TournamentAvgAggregateInputType
    _sum?: TournamentSumAggregateInputType
    _min?: TournamentMinAggregateInputType
    _max?: TournamentMaxAggregateInputType
  }

  export type TournamentGroupByOutputType = {
    id: string
    date: Date
    type: $Enums.TournamentType
    rounds: number
    eventId: string | null
    _count: TournamentCountAggregateOutputType | null
    _avg: TournamentAvgAggregateOutputType | null
    _sum: TournamentSumAggregateOutputType | null
    _min: TournamentMinAggregateOutputType | null
    _max: TournamentMaxAggregateOutputType | null
  }

  type GetTournamentGroupByPayload<T extends TournamentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TournamentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TournamentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TournamentGroupByOutputType[P]>
            : GetScalarType<T[P], TournamentGroupByOutputType[P]>
        }
      >
    >


  export type TournamentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    type?: boolean
    rounds?: boolean
    eventId?: boolean
    participants?: boolean | Tournament$participantsArgs<ExtArgs>
    fights?: boolean | Tournament$fightsArgs<ExtArgs>
    event?: boolean | Tournament$eventArgs<ExtArgs>
    _count?: boolean | TournamentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tournament"]>

  export type TournamentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    type?: boolean
    rounds?: boolean
    eventId?: boolean
    event?: boolean | Tournament$eventArgs<ExtArgs>
  }, ExtArgs["result"]["tournament"]>

  export type TournamentSelectScalar = {
    id?: boolean
    date?: boolean
    type?: boolean
    rounds?: boolean
    eventId?: boolean
  }

  export type TournamentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "date" | "type" | "rounds" | "eventId", ExtArgs["result"]["tournament"]>
  export type TournamentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participants?: boolean | Tournament$participantsArgs<ExtArgs>
    fights?: boolean | Tournament$fightsArgs<ExtArgs>
    event?: boolean | Tournament$eventArgs<ExtArgs>
    _count?: boolean | TournamentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TournamentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | Tournament$eventArgs<ExtArgs>
  }

  export type $TournamentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tournament"
    objects: {
      participants: Prisma.$BrutePayload<ExtArgs>[]
      fights: Prisma.$FightPayload<ExtArgs>[]
      event: Prisma.$EventPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      date: Date
      type: $Enums.TournamentType
      rounds: number
      eventId: string | null
    }, ExtArgs["result"]["tournament"]>
    composites: {}
  }

  type TournamentGetPayload<S extends boolean | null | undefined | TournamentDefaultArgs> = $Result.GetResult<Prisma.$TournamentPayload, S>

  type TournamentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TournamentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: TournamentCountAggregateInputType | true
    }

  export interface TournamentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tournament'], meta: { name: 'Tournament' } }
    /**
     * Find zero or one Tournament that matches the filter.
     * @param {TournamentFindUniqueArgs} args - Arguments to find a Tournament
     * @example
     * // Get one Tournament
     * const tournament = await prisma.tournament.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TournamentFindUniqueArgs>(args: SelectSubset<T, TournamentFindUniqueArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Tournament that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TournamentFindUniqueOrThrowArgs} args - Arguments to find a Tournament
     * @example
     * // Get one Tournament
     * const tournament = await prisma.tournament.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TournamentFindUniqueOrThrowArgs>(args: SelectSubset<T, TournamentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Tournament that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentFindFirstArgs} args - Arguments to find a Tournament
     * @example
     * // Get one Tournament
     * const tournament = await prisma.tournament.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TournamentFindFirstArgs>(args?: SelectSubset<T, TournamentFindFirstArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Tournament that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentFindFirstOrThrowArgs} args - Arguments to find a Tournament
     * @example
     * // Get one Tournament
     * const tournament = await prisma.tournament.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TournamentFindFirstOrThrowArgs>(args?: SelectSubset<T, TournamentFindFirstOrThrowArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Tournaments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tournaments
     * const tournaments = await prisma.tournament.findMany()
     * 
     * // Get first 10 Tournaments
     * const tournaments = await prisma.tournament.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tournamentWithIdOnly = await prisma.tournament.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TournamentFindManyArgs>(args?: SelectSubset<T, TournamentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Tournament.
     * @param {TournamentCreateArgs} args - Arguments to create a Tournament.
     * @example
     * // Create one Tournament
     * const Tournament = await prisma.tournament.create({
     *   data: {
     *     // ... data to create a Tournament
     *   }
     * })
     * 
     */
    create<T extends TournamentCreateArgs>(args: SelectSubset<T, TournamentCreateArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Tournaments.
     * @param {TournamentCreateManyArgs} args - Arguments to create many Tournaments.
     * @example
     * // Create many Tournaments
     * const tournament = await prisma.tournament.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TournamentCreateManyArgs>(args?: SelectSubset<T, TournamentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tournaments and returns the data saved in the database.
     * @param {TournamentCreateManyAndReturnArgs} args - Arguments to create many Tournaments.
     * @example
     * // Create many Tournaments
     * const tournament = await prisma.tournament.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tournaments and only return the `id`
     * const tournamentWithIdOnly = await prisma.tournament.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TournamentCreateManyAndReturnArgs>(args?: SelectSubset<T, TournamentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Tournament.
     * @param {TournamentDeleteArgs} args - Arguments to delete one Tournament.
     * @example
     * // Delete one Tournament
     * const Tournament = await prisma.tournament.delete({
     *   where: {
     *     // ... filter to delete one Tournament
     *   }
     * })
     * 
     */
    delete<T extends TournamentDeleteArgs>(args: SelectSubset<T, TournamentDeleteArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Tournament.
     * @param {TournamentUpdateArgs} args - Arguments to update one Tournament.
     * @example
     * // Update one Tournament
     * const tournament = await prisma.tournament.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TournamentUpdateArgs>(args: SelectSubset<T, TournamentUpdateArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Tournaments.
     * @param {TournamentDeleteManyArgs} args - Arguments to filter Tournaments to delete.
     * @example
     * // Delete a few Tournaments
     * const { count } = await prisma.tournament.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TournamentDeleteManyArgs>(args?: SelectSubset<T, TournamentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tournaments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tournaments
     * const tournament = await prisma.tournament.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TournamentUpdateManyArgs>(args: SelectSubset<T, TournamentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tournament.
     * @param {TournamentUpsertArgs} args - Arguments to update or create a Tournament.
     * @example
     * // Update or create a Tournament
     * const tournament = await prisma.tournament.upsert({
     *   create: {
     *     // ... data to create a Tournament
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tournament we want to update
     *   }
     * })
     */
    upsert<T extends TournamentUpsertArgs>(args: SelectSubset<T, TournamentUpsertArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Tournaments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentCountArgs} args - Arguments to filter Tournaments to count.
     * @example
     * // Count the number of Tournaments
     * const count = await prisma.tournament.count({
     *   where: {
     *     // ... the filter for the Tournaments we want to count
     *   }
     * })
    **/
    count<T extends TournamentCountArgs>(
      args?: Subset<T, TournamentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TournamentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tournament.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TournamentAggregateArgs>(args: Subset<T, TournamentAggregateArgs>): Prisma.PrismaPromise<GetTournamentAggregateType<T>>

    /**
     * Group by Tournament.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TournamentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TournamentGroupByArgs['orderBy'] }
        : { orderBy?: TournamentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TournamentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTournamentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tournament model
   */
  readonly fields: TournamentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tournament.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TournamentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    participants<T extends Tournament$participantsArgs<ExtArgs> = {}>(args?: Subset<T, Tournament$participantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrutePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    fights<T extends Tournament$fightsArgs<ExtArgs> = {}>(args?: Subset<T, Tournament$fightsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FightPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    event<T extends Tournament$eventArgs<ExtArgs> = {}>(args?: Subset<T, Tournament$eventArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tournament model
   */ 
  interface TournamentFieldRefs {
    readonly id: FieldRef<"Tournament", 'String'>
    readonly date: FieldRef<"Tournament", 'DateTime'>
    readonly type: FieldRef<"Tournament", 'TournamentType'>
    readonly rounds: FieldRef<"Tournament", 'Int'>
    readonly eventId: FieldRef<"Tournament", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Tournament findUnique
   */
  export type TournamentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * Filter, which Tournament to fetch.
     */
    where: TournamentWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Tournament findUniqueOrThrow
   */
  export type TournamentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * Filter, which Tournament to fetch.
     */
    where: TournamentWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Tournament findFirst
   */
  export type TournamentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * Filter, which Tournament to fetch.
     */
    where?: TournamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tournaments to fetch.
     */
    orderBy?: TournamentOrderByWithRelationInput | TournamentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tournaments.
     */
    cursor?: TournamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tournaments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tournaments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tournaments.
     */
    distinct?: TournamentScalarFieldEnum | TournamentScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Tournament findFirstOrThrow
   */
  export type TournamentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * Filter, which Tournament to fetch.
     */
    where?: TournamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tournaments to fetch.
     */
    orderBy?: TournamentOrderByWithRelationInput | TournamentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tournaments.
     */
    cursor?: TournamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tournaments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tournaments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tournaments.
     */
    distinct?: TournamentScalarFieldEnum | TournamentScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Tournament findMany
   */
  export type TournamentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * Filter, which Tournaments to fetch.
     */
    where?: TournamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tournaments to fetch.
     */
    orderBy?: TournamentOrderByWithRelationInput | TournamentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tournaments.
     */
    cursor?: TournamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tournaments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tournaments.
     */
    skip?: number
    distinct?: TournamentScalarFieldEnum | TournamentScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Tournament create
   */
  export type TournamentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * The data needed to create a Tournament.
     */
    data: XOR<TournamentCreateInput, TournamentUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Tournament createMany
   */
  export type TournamentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tournaments.
     */
    data: TournamentCreateManyInput | TournamentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tournament createManyAndReturn
   */
  export type TournamentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * The data used to create many Tournaments.
     */
    data: TournamentCreateManyInput | TournamentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tournament update
   */
  export type TournamentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * The data needed to update a Tournament.
     */
    data: XOR<TournamentUpdateInput, TournamentUncheckedUpdateInput>
    /**
     * Choose, which Tournament to update.
     */
    where: TournamentWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Tournament updateMany
   */
  export type TournamentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tournaments.
     */
    data: XOR<TournamentUpdateManyMutationInput, TournamentUncheckedUpdateManyInput>
    /**
     * Filter which Tournaments to update
     */
    where?: TournamentWhereInput
  }

  /**
   * Tournament upsert
   */
  export type TournamentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * The filter to search for the Tournament to update in case it exists.
     */
    where: TournamentWhereUniqueInput
    /**
     * In case the Tournament found by the `where` argument doesn't exist, create a new Tournament with this data.
     */
    create: XOR<TournamentCreateInput, TournamentUncheckedCreateInput>
    /**
     * In case the Tournament was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TournamentUpdateInput, TournamentUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Tournament delete
   */
  export type TournamentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * Filter which Tournament to delete.
     */
    where: TournamentWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Tournament deleteMany
   */
  export type TournamentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tournaments to delete
     */
    where?: TournamentWhereInput
  }

  /**
   * Tournament.participants
   */
  export type Tournament$participantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brute
     */
    omit?: BruteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteInclude<ExtArgs> | null
    where?: BruteWhereInput
    orderBy?: BruteOrderByWithRelationInput | BruteOrderByWithRelationInput[]
    cursor?: BruteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BruteScalarFieldEnum | BruteScalarFieldEnum[]
  }

  /**
   * Tournament.fights
   */
  export type Tournament$fightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fight
     */
    select?: FightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Fight
     */
    omit?: FightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FightInclude<ExtArgs> | null
    where?: FightWhereInput
    orderBy?: FightOrderByWithRelationInput | FightOrderByWithRelationInput[]
    cursor?: FightWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FightScalarFieldEnum | FightScalarFieldEnum[]
  }

  /**
   * Tournament.event
   */
  export type Tournament$eventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
  }

  /**
   * Tournament without action
   */
  export type TournamentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
  }


  /**
   * Model TournamentAchievement
   */

  export type AggregateTournamentAchievement = {
    _count: TournamentAchievementCountAggregateOutputType | null
    _avg: TournamentAchievementAvgAggregateOutputType | null
    _sum: TournamentAchievementSumAggregateOutputType | null
    _min: TournamentAchievementMinAggregateOutputType | null
    _max: TournamentAchievementMaxAggregateOutputType | null
  }

  export type TournamentAchievementAvgAggregateOutputType = {
    achievementCount: number | null
  }

  export type TournamentAchievementSumAggregateOutputType = {
    achievementCount: number | null
  }

  export type TournamentAchievementMinAggregateOutputType = {
    id: string | null
    bruteId: string | null
    date: Date | null
    achievement: $Enums.AchievementName | null
    achievementCount: number | null
  }

  export type TournamentAchievementMaxAggregateOutputType = {
    id: string | null
    bruteId: string | null
    date: Date | null
    achievement: $Enums.AchievementName | null
    achievementCount: number | null
  }

  export type TournamentAchievementCountAggregateOutputType = {
    id: number
    bruteId: number
    date: number
    achievement: number
    achievementCount: number
    _all: number
  }


  export type TournamentAchievementAvgAggregateInputType = {
    achievementCount?: true
  }

  export type TournamentAchievementSumAggregateInputType = {
    achievementCount?: true
  }

  export type TournamentAchievementMinAggregateInputType = {
    id?: true
    bruteId?: true
    date?: true
    achievement?: true
    achievementCount?: true
  }

  export type TournamentAchievementMaxAggregateInputType = {
    id?: true
    bruteId?: true
    date?: true
    achievement?: true
    achievementCount?: true
  }

  export type TournamentAchievementCountAggregateInputType = {
    id?: true
    bruteId?: true
    date?: true
    achievement?: true
    achievementCount?: true
    _all?: true
  }

  export type TournamentAchievementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TournamentAchievement to aggregate.
     */
    where?: TournamentAchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentAchievements to fetch.
     */
    orderBy?: TournamentAchievementOrderByWithRelationInput | TournamentAchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TournamentAchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentAchievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentAchievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TournamentAchievements
    **/
    _count?: true | TournamentAchievementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TournamentAchievementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TournamentAchievementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TournamentAchievementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TournamentAchievementMaxAggregateInputType
  }

  export type GetTournamentAchievementAggregateType<T extends TournamentAchievementAggregateArgs> = {
        [P in keyof T & keyof AggregateTournamentAchievement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTournamentAchievement[P]>
      : GetScalarType<T[P], AggregateTournamentAchievement[P]>
  }




  export type TournamentAchievementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TournamentAchievementWhereInput
    orderBy?: TournamentAchievementOrderByWithAggregationInput | TournamentAchievementOrderByWithAggregationInput[]
    by: TournamentAchievementScalarFieldEnum[] | TournamentAchievementScalarFieldEnum
    having?: TournamentAchievementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TournamentAchievementCountAggregateInputType | true
    _avg?: TournamentAchievementAvgAggregateInputType
    _sum?: TournamentAchievementSumAggregateInputType
    _min?: TournamentAchievementMinAggregateInputType
    _max?: TournamentAchievementMaxAggregateInputType
  }

  export type TournamentAchievementGroupByOutputType = {
    id: string
    bruteId: string
    date: Date
    achievement: $Enums.AchievementName
    achievementCount: number
    _count: TournamentAchievementCountAggregateOutputType | null
    _avg: TournamentAchievementAvgAggregateOutputType | null
    _sum: TournamentAchievementSumAggregateOutputType | null
    _min: TournamentAchievementMinAggregateOutputType | null
    _max: TournamentAchievementMaxAggregateOutputType | null
  }

  type GetTournamentAchievementGroupByPayload<T extends TournamentAchievementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TournamentAchievementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TournamentAchievementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TournamentAchievementGroupByOutputType[P]>
            : GetScalarType<T[P], TournamentAchievementGroupByOutputType[P]>
        }
      >
    >


  export type TournamentAchievementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bruteId?: boolean
    date?: boolean
    achievement?: boolean
    achievementCount?: boolean
    brute?: boolean | BruteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tournamentAchievement"]>

  export type TournamentAchievementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bruteId?: boolean
    date?: boolean
    achievement?: boolean
    achievementCount?: boolean
    brute?: boolean | BruteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tournamentAchievement"]>

  export type TournamentAchievementSelectScalar = {
    id?: boolean
    bruteId?: boolean
    date?: boolean
    achievement?: boolean
    achievementCount?: boolean
  }

  export type TournamentAchievementOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "bruteId" | "date" | "achievement" | "achievementCount", ExtArgs["result"]["tournamentAchievement"]>
  export type TournamentAchievementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brute?: boolean | BruteDefaultArgs<ExtArgs>
  }
  export type TournamentAchievementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brute?: boolean | BruteDefaultArgs<ExtArgs>
  }

  export type $TournamentAchievementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TournamentAchievement"
    objects: {
      brute: Prisma.$BrutePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      bruteId: string
      date: Date
      achievement: $Enums.AchievementName
      achievementCount: number
    }, ExtArgs["result"]["tournamentAchievement"]>
    composites: {}
  }

  type TournamentAchievementGetPayload<S extends boolean | null | undefined | TournamentAchievementDefaultArgs> = $Result.GetResult<Prisma.$TournamentAchievementPayload, S>

  type TournamentAchievementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TournamentAchievementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: TournamentAchievementCountAggregateInputType | true
    }

  export interface TournamentAchievementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TournamentAchievement'], meta: { name: 'TournamentAchievement' } }
    /**
     * Find zero or one TournamentAchievement that matches the filter.
     * @param {TournamentAchievementFindUniqueArgs} args - Arguments to find a TournamentAchievement
     * @example
     * // Get one TournamentAchievement
     * const tournamentAchievement = await prisma.tournamentAchievement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TournamentAchievementFindUniqueArgs>(args: SelectSubset<T, TournamentAchievementFindUniqueArgs<ExtArgs>>): Prisma__TournamentAchievementClient<$Result.GetResult<Prisma.$TournamentAchievementPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one TournamentAchievement that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TournamentAchievementFindUniqueOrThrowArgs} args - Arguments to find a TournamentAchievement
     * @example
     * // Get one TournamentAchievement
     * const tournamentAchievement = await prisma.tournamentAchievement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TournamentAchievementFindUniqueOrThrowArgs>(args: SelectSubset<T, TournamentAchievementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TournamentAchievementClient<$Result.GetResult<Prisma.$TournamentAchievementPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first TournamentAchievement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentAchievementFindFirstArgs} args - Arguments to find a TournamentAchievement
     * @example
     * // Get one TournamentAchievement
     * const tournamentAchievement = await prisma.tournamentAchievement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TournamentAchievementFindFirstArgs>(args?: SelectSubset<T, TournamentAchievementFindFirstArgs<ExtArgs>>): Prisma__TournamentAchievementClient<$Result.GetResult<Prisma.$TournamentAchievementPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first TournamentAchievement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentAchievementFindFirstOrThrowArgs} args - Arguments to find a TournamentAchievement
     * @example
     * // Get one TournamentAchievement
     * const tournamentAchievement = await prisma.tournamentAchievement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TournamentAchievementFindFirstOrThrowArgs>(args?: SelectSubset<T, TournamentAchievementFindFirstOrThrowArgs<ExtArgs>>): Prisma__TournamentAchievementClient<$Result.GetResult<Prisma.$TournamentAchievementPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more TournamentAchievements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentAchievementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TournamentAchievements
     * const tournamentAchievements = await prisma.tournamentAchievement.findMany()
     * 
     * // Get first 10 TournamentAchievements
     * const tournamentAchievements = await prisma.tournamentAchievement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tournamentAchievementWithIdOnly = await prisma.tournamentAchievement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TournamentAchievementFindManyArgs>(args?: SelectSubset<T, TournamentAchievementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentAchievementPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a TournamentAchievement.
     * @param {TournamentAchievementCreateArgs} args - Arguments to create a TournamentAchievement.
     * @example
     * // Create one TournamentAchievement
     * const TournamentAchievement = await prisma.tournamentAchievement.create({
     *   data: {
     *     // ... data to create a TournamentAchievement
     *   }
     * })
     * 
     */
    create<T extends TournamentAchievementCreateArgs>(args: SelectSubset<T, TournamentAchievementCreateArgs<ExtArgs>>): Prisma__TournamentAchievementClient<$Result.GetResult<Prisma.$TournamentAchievementPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many TournamentAchievements.
     * @param {TournamentAchievementCreateManyArgs} args - Arguments to create many TournamentAchievements.
     * @example
     * // Create many TournamentAchievements
     * const tournamentAchievement = await prisma.tournamentAchievement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TournamentAchievementCreateManyArgs>(args?: SelectSubset<T, TournamentAchievementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TournamentAchievements and returns the data saved in the database.
     * @param {TournamentAchievementCreateManyAndReturnArgs} args - Arguments to create many TournamentAchievements.
     * @example
     * // Create many TournamentAchievements
     * const tournamentAchievement = await prisma.tournamentAchievement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TournamentAchievements and only return the `id`
     * const tournamentAchievementWithIdOnly = await prisma.tournamentAchievement.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TournamentAchievementCreateManyAndReturnArgs>(args?: SelectSubset<T, TournamentAchievementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentAchievementPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a TournamentAchievement.
     * @param {TournamentAchievementDeleteArgs} args - Arguments to delete one TournamentAchievement.
     * @example
     * // Delete one TournamentAchievement
     * const TournamentAchievement = await prisma.tournamentAchievement.delete({
     *   where: {
     *     // ... filter to delete one TournamentAchievement
     *   }
     * })
     * 
     */
    delete<T extends TournamentAchievementDeleteArgs>(args: SelectSubset<T, TournamentAchievementDeleteArgs<ExtArgs>>): Prisma__TournamentAchievementClient<$Result.GetResult<Prisma.$TournamentAchievementPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one TournamentAchievement.
     * @param {TournamentAchievementUpdateArgs} args - Arguments to update one TournamentAchievement.
     * @example
     * // Update one TournamentAchievement
     * const tournamentAchievement = await prisma.tournamentAchievement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TournamentAchievementUpdateArgs>(args: SelectSubset<T, TournamentAchievementUpdateArgs<ExtArgs>>): Prisma__TournamentAchievementClient<$Result.GetResult<Prisma.$TournamentAchievementPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more TournamentAchievements.
     * @param {TournamentAchievementDeleteManyArgs} args - Arguments to filter TournamentAchievements to delete.
     * @example
     * // Delete a few TournamentAchievements
     * const { count } = await prisma.tournamentAchievement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TournamentAchievementDeleteManyArgs>(args?: SelectSubset<T, TournamentAchievementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TournamentAchievements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentAchievementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TournamentAchievements
     * const tournamentAchievement = await prisma.tournamentAchievement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TournamentAchievementUpdateManyArgs>(args: SelectSubset<T, TournamentAchievementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TournamentAchievement.
     * @param {TournamentAchievementUpsertArgs} args - Arguments to update or create a TournamentAchievement.
     * @example
     * // Update or create a TournamentAchievement
     * const tournamentAchievement = await prisma.tournamentAchievement.upsert({
     *   create: {
     *     // ... data to create a TournamentAchievement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TournamentAchievement we want to update
     *   }
     * })
     */
    upsert<T extends TournamentAchievementUpsertArgs>(args: SelectSubset<T, TournamentAchievementUpsertArgs<ExtArgs>>): Prisma__TournamentAchievementClient<$Result.GetResult<Prisma.$TournamentAchievementPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of TournamentAchievements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentAchievementCountArgs} args - Arguments to filter TournamentAchievements to count.
     * @example
     * // Count the number of TournamentAchievements
     * const count = await prisma.tournamentAchievement.count({
     *   where: {
     *     // ... the filter for the TournamentAchievements we want to count
     *   }
     * })
    **/
    count<T extends TournamentAchievementCountArgs>(
      args?: Subset<T, TournamentAchievementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TournamentAchievementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TournamentAchievement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentAchievementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TournamentAchievementAggregateArgs>(args: Subset<T, TournamentAchievementAggregateArgs>): Prisma.PrismaPromise<GetTournamentAchievementAggregateType<T>>

    /**
     * Group by TournamentAchievement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentAchievementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TournamentAchievementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TournamentAchievementGroupByArgs['orderBy'] }
        : { orderBy?: TournamentAchievementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TournamentAchievementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTournamentAchievementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TournamentAchievement model
   */
  readonly fields: TournamentAchievementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TournamentAchievement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TournamentAchievementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    brute<T extends BruteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BruteDefaultArgs<ExtArgs>>): Prisma__BruteClient<$Result.GetResult<Prisma.$BrutePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TournamentAchievement model
   */ 
  interface TournamentAchievementFieldRefs {
    readonly id: FieldRef<"TournamentAchievement", 'String'>
    readonly bruteId: FieldRef<"TournamentAchievement", 'String'>
    readonly date: FieldRef<"TournamentAchievement", 'DateTime'>
    readonly achievement: FieldRef<"TournamentAchievement", 'AchievementName'>
    readonly achievementCount: FieldRef<"TournamentAchievement", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * TournamentAchievement findUnique
   */
  export type TournamentAchievementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentAchievement
     */
    select?: TournamentAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentAchievement
     */
    omit?: TournamentAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentAchievementInclude<ExtArgs> | null
    /**
     * Filter, which TournamentAchievement to fetch.
     */
    where: TournamentAchievementWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * TournamentAchievement findUniqueOrThrow
   */
  export type TournamentAchievementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentAchievement
     */
    select?: TournamentAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentAchievement
     */
    omit?: TournamentAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentAchievementInclude<ExtArgs> | null
    /**
     * Filter, which TournamentAchievement to fetch.
     */
    where: TournamentAchievementWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * TournamentAchievement findFirst
   */
  export type TournamentAchievementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentAchievement
     */
    select?: TournamentAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentAchievement
     */
    omit?: TournamentAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentAchievementInclude<ExtArgs> | null
    /**
     * Filter, which TournamentAchievement to fetch.
     */
    where?: TournamentAchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentAchievements to fetch.
     */
    orderBy?: TournamentAchievementOrderByWithRelationInput | TournamentAchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TournamentAchievements.
     */
    cursor?: TournamentAchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentAchievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentAchievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TournamentAchievements.
     */
    distinct?: TournamentAchievementScalarFieldEnum | TournamentAchievementScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * TournamentAchievement findFirstOrThrow
   */
  export type TournamentAchievementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentAchievement
     */
    select?: TournamentAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentAchievement
     */
    omit?: TournamentAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentAchievementInclude<ExtArgs> | null
    /**
     * Filter, which TournamentAchievement to fetch.
     */
    where?: TournamentAchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentAchievements to fetch.
     */
    orderBy?: TournamentAchievementOrderByWithRelationInput | TournamentAchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TournamentAchievements.
     */
    cursor?: TournamentAchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentAchievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentAchievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TournamentAchievements.
     */
    distinct?: TournamentAchievementScalarFieldEnum | TournamentAchievementScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * TournamentAchievement findMany
   */
  export type TournamentAchievementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentAchievement
     */
    select?: TournamentAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentAchievement
     */
    omit?: TournamentAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentAchievementInclude<ExtArgs> | null
    /**
     * Filter, which TournamentAchievements to fetch.
     */
    where?: TournamentAchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentAchievements to fetch.
     */
    orderBy?: TournamentAchievementOrderByWithRelationInput | TournamentAchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TournamentAchievements.
     */
    cursor?: TournamentAchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentAchievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentAchievements.
     */
    skip?: number
    distinct?: TournamentAchievementScalarFieldEnum | TournamentAchievementScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * TournamentAchievement create
   */
  export type TournamentAchievementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentAchievement
     */
    select?: TournamentAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentAchievement
     */
    omit?: TournamentAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentAchievementInclude<ExtArgs> | null
    /**
     * The data needed to create a TournamentAchievement.
     */
    data: XOR<TournamentAchievementCreateInput, TournamentAchievementUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * TournamentAchievement createMany
   */
  export type TournamentAchievementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TournamentAchievements.
     */
    data: TournamentAchievementCreateManyInput | TournamentAchievementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TournamentAchievement createManyAndReturn
   */
  export type TournamentAchievementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentAchievement
     */
    select?: TournamentAchievementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentAchievement
     */
    omit?: TournamentAchievementOmit<ExtArgs> | null
    /**
     * The data used to create many TournamentAchievements.
     */
    data: TournamentAchievementCreateManyInput | TournamentAchievementCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentAchievementIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TournamentAchievement update
   */
  export type TournamentAchievementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentAchievement
     */
    select?: TournamentAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentAchievement
     */
    omit?: TournamentAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentAchievementInclude<ExtArgs> | null
    /**
     * The data needed to update a TournamentAchievement.
     */
    data: XOR<TournamentAchievementUpdateInput, TournamentAchievementUncheckedUpdateInput>
    /**
     * Choose, which TournamentAchievement to update.
     */
    where: TournamentAchievementWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * TournamentAchievement updateMany
   */
  export type TournamentAchievementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TournamentAchievements.
     */
    data: XOR<TournamentAchievementUpdateManyMutationInput, TournamentAchievementUncheckedUpdateManyInput>
    /**
     * Filter which TournamentAchievements to update
     */
    where?: TournamentAchievementWhereInput
  }

  /**
   * TournamentAchievement upsert
   */
  export type TournamentAchievementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentAchievement
     */
    select?: TournamentAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentAchievement
     */
    omit?: TournamentAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentAchievementInclude<ExtArgs> | null
    /**
     * The filter to search for the TournamentAchievement to update in case it exists.
     */
    where: TournamentAchievementWhereUniqueInput
    /**
     * In case the TournamentAchievement found by the `where` argument doesn't exist, create a new TournamentAchievement with this data.
     */
    create: XOR<TournamentAchievementCreateInput, TournamentAchievementUncheckedCreateInput>
    /**
     * In case the TournamentAchievement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TournamentAchievementUpdateInput, TournamentAchievementUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * TournamentAchievement delete
   */
  export type TournamentAchievementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentAchievement
     */
    select?: TournamentAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentAchievement
     */
    omit?: TournamentAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentAchievementInclude<ExtArgs> | null
    /**
     * Filter which TournamentAchievement to delete.
     */
    where: TournamentAchievementWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * TournamentAchievement deleteMany
   */
  export type TournamentAchievementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TournamentAchievements to delete
     */
    where?: TournamentAchievementWhereInput
  }

  /**
   * TournamentAchievement without action
   */
  export type TournamentAchievementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentAchievement
     */
    select?: TournamentAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentAchievement
     */
    omit?: TournamentAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentAchievementInclude<ExtArgs> | null
  }


  /**
   * Model TournamentGold
   */

  export type AggregateTournamentGold = {
    _count: TournamentGoldCountAggregateOutputType | null
    _avg: TournamentGoldAvgAggregateOutputType | null
    _sum: TournamentGoldSumAggregateOutputType | null
    _min: TournamentGoldMinAggregateOutputType | null
    _max: TournamentGoldMaxAggregateOutputType | null
  }

  export type TournamentGoldAvgAggregateOutputType = {
    gold: number | null
  }

  export type TournamentGoldSumAggregateOutputType = {
    gold: number | null
  }

  export type TournamentGoldMinAggregateOutputType = {
    id: string | null
    date: Date | null
    userId: string | null
    gold: number | null
  }

  export type TournamentGoldMaxAggregateOutputType = {
    id: string | null
    date: Date | null
    userId: string | null
    gold: number | null
  }

  export type TournamentGoldCountAggregateOutputType = {
    id: number
    date: number
    userId: number
    gold: number
    _all: number
  }


  export type TournamentGoldAvgAggregateInputType = {
    gold?: true
  }

  export type TournamentGoldSumAggregateInputType = {
    gold?: true
  }

  export type TournamentGoldMinAggregateInputType = {
    id?: true
    date?: true
    userId?: true
    gold?: true
  }

  export type TournamentGoldMaxAggregateInputType = {
    id?: true
    date?: true
    userId?: true
    gold?: true
  }

  export type TournamentGoldCountAggregateInputType = {
    id?: true
    date?: true
    userId?: true
    gold?: true
    _all?: true
  }

  export type TournamentGoldAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TournamentGold to aggregate.
     */
    where?: TournamentGoldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentGolds to fetch.
     */
    orderBy?: TournamentGoldOrderByWithRelationInput | TournamentGoldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TournamentGoldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentGolds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentGolds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TournamentGolds
    **/
    _count?: true | TournamentGoldCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TournamentGoldAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TournamentGoldSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TournamentGoldMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TournamentGoldMaxAggregateInputType
  }

  export type GetTournamentGoldAggregateType<T extends TournamentGoldAggregateArgs> = {
        [P in keyof T & keyof AggregateTournamentGold]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTournamentGold[P]>
      : GetScalarType<T[P], AggregateTournamentGold[P]>
  }




  export type TournamentGoldGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TournamentGoldWhereInput
    orderBy?: TournamentGoldOrderByWithAggregationInput | TournamentGoldOrderByWithAggregationInput[]
    by: TournamentGoldScalarFieldEnum[] | TournamentGoldScalarFieldEnum
    having?: TournamentGoldScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TournamentGoldCountAggregateInputType | true
    _avg?: TournamentGoldAvgAggregateInputType
    _sum?: TournamentGoldSumAggregateInputType
    _min?: TournamentGoldMinAggregateInputType
    _max?: TournamentGoldMaxAggregateInputType
  }

  export type TournamentGoldGroupByOutputType = {
    id: string
    date: Date
    userId: string
    gold: number
    _count: TournamentGoldCountAggregateOutputType | null
    _avg: TournamentGoldAvgAggregateOutputType | null
    _sum: TournamentGoldSumAggregateOutputType | null
    _min: TournamentGoldMinAggregateOutputType | null
    _max: TournamentGoldMaxAggregateOutputType | null
  }

  type GetTournamentGoldGroupByPayload<T extends TournamentGoldGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TournamentGoldGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TournamentGoldGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TournamentGoldGroupByOutputType[P]>
            : GetScalarType<T[P], TournamentGoldGroupByOutputType[P]>
        }
      >
    >


  export type TournamentGoldSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    userId?: boolean
    gold?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tournamentGold"]>

  export type TournamentGoldSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    userId?: boolean
    gold?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tournamentGold"]>

  export type TournamentGoldSelectScalar = {
    id?: boolean
    date?: boolean
    userId?: boolean
    gold?: boolean
  }

  export type TournamentGoldOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "date" | "userId" | "gold", ExtArgs["result"]["tournamentGold"]>
  export type TournamentGoldInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TournamentGoldIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TournamentGoldPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TournamentGold"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      date: Date
      userId: string
      gold: number
    }, ExtArgs["result"]["tournamentGold"]>
    composites: {}
  }

  type TournamentGoldGetPayload<S extends boolean | null | undefined | TournamentGoldDefaultArgs> = $Result.GetResult<Prisma.$TournamentGoldPayload, S>

  type TournamentGoldCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TournamentGoldFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: TournamentGoldCountAggregateInputType | true
    }

  export interface TournamentGoldDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TournamentGold'], meta: { name: 'TournamentGold' } }
    /**
     * Find zero or one TournamentGold that matches the filter.
     * @param {TournamentGoldFindUniqueArgs} args - Arguments to find a TournamentGold
     * @example
     * // Get one TournamentGold
     * const tournamentGold = await prisma.tournamentGold.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TournamentGoldFindUniqueArgs>(args: SelectSubset<T, TournamentGoldFindUniqueArgs<ExtArgs>>): Prisma__TournamentGoldClient<$Result.GetResult<Prisma.$TournamentGoldPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one TournamentGold that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TournamentGoldFindUniqueOrThrowArgs} args - Arguments to find a TournamentGold
     * @example
     * // Get one TournamentGold
     * const tournamentGold = await prisma.tournamentGold.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TournamentGoldFindUniqueOrThrowArgs>(args: SelectSubset<T, TournamentGoldFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TournamentGoldClient<$Result.GetResult<Prisma.$TournamentGoldPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first TournamentGold that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentGoldFindFirstArgs} args - Arguments to find a TournamentGold
     * @example
     * // Get one TournamentGold
     * const tournamentGold = await prisma.tournamentGold.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TournamentGoldFindFirstArgs>(args?: SelectSubset<T, TournamentGoldFindFirstArgs<ExtArgs>>): Prisma__TournamentGoldClient<$Result.GetResult<Prisma.$TournamentGoldPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first TournamentGold that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentGoldFindFirstOrThrowArgs} args - Arguments to find a TournamentGold
     * @example
     * // Get one TournamentGold
     * const tournamentGold = await prisma.tournamentGold.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TournamentGoldFindFirstOrThrowArgs>(args?: SelectSubset<T, TournamentGoldFindFirstOrThrowArgs<ExtArgs>>): Prisma__TournamentGoldClient<$Result.GetResult<Prisma.$TournamentGoldPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more TournamentGolds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentGoldFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TournamentGolds
     * const tournamentGolds = await prisma.tournamentGold.findMany()
     * 
     * // Get first 10 TournamentGolds
     * const tournamentGolds = await prisma.tournamentGold.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tournamentGoldWithIdOnly = await prisma.tournamentGold.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TournamentGoldFindManyArgs>(args?: SelectSubset<T, TournamentGoldFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentGoldPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a TournamentGold.
     * @param {TournamentGoldCreateArgs} args - Arguments to create a TournamentGold.
     * @example
     * // Create one TournamentGold
     * const TournamentGold = await prisma.tournamentGold.create({
     *   data: {
     *     // ... data to create a TournamentGold
     *   }
     * })
     * 
     */
    create<T extends TournamentGoldCreateArgs>(args: SelectSubset<T, TournamentGoldCreateArgs<ExtArgs>>): Prisma__TournamentGoldClient<$Result.GetResult<Prisma.$TournamentGoldPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many TournamentGolds.
     * @param {TournamentGoldCreateManyArgs} args - Arguments to create many TournamentGolds.
     * @example
     * // Create many TournamentGolds
     * const tournamentGold = await prisma.tournamentGold.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TournamentGoldCreateManyArgs>(args?: SelectSubset<T, TournamentGoldCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TournamentGolds and returns the data saved in the database.
     * @param {TournamentGoldCreateManyAndReturnArgs} args - Arguments to create many TournamentGolds.
     * @example
     * // Create many TournamentGolds
     * const tournamentGold = await prisma.tournamentGold.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TournamentGolds and only return the `id`
     * const tournamentGoldWithIdOnly = await prisma.tournamentGold.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TournamentGoldCreateManyAndReturnArgs>(args?: SelectSubset<T, TournamentGoldCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentGoldPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a TournamentGold.
     * @param {TournamentGoldDeleteArgs} args - Arguments to delete one TournamentGold.
     * @example
     * // Delete one TournamentGold
     * const TournamentGold = await prisma.tournamentGold.delete({
     *   where: {
     *     // ... filter to delete one TournamentGold
     *   }
     * })
     * 
     */
    delete<T extends TournamentGoldDeleteArgs>(args: SelectSubset<T, TournamentGoldDeleteArgs<ExtArgs>>): Prisma__TournamentGoldClient<$Result.GetResult<Prisma.$TournamentGoldPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one TournamentGold.
     * @param {TournamentGoldUpdateArgs} args - Arguments to update one TournamentGold.
     * @example
     * // Update one TournamentGold
     * const tournamentGold = await prisma.tournamentGold.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TournamentGoldUpdateArgs>(args: SelectSubset<T, TournamentGoldUpdateArgs<ExtArgs>>): Prisma__TournamentGoldClient<$Result.GetResult<Prisma.$TournamentGoldPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more TournamentGolds.
     * @param {TournamentGoldDeleteManyArgs} args - Arguments to filter TournamentGolds to delete.
     * @example
     * // Delete a few TournamentGolds
     * const { count } = await prisma.tournamentGold.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TournamentGoldDeleteManyArgs>(args?: SelectSubset<T, TournamentGoldDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TournamentGolds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentGoldUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TournamentGolds
     * const tournamentGold = await prisma.tournamentGold.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TournamentGoldUpdateManyArgs>(args: SelectSubset<T, TournamentGoldUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TournamentGold.
     * @param {TournamentGoldUpsertArgs} args - Arguments to update or create a TournamentGold.
     * @example
     * // Update or create a TournamentGold
     * const tournamentGold = await prisma.tournamentGold.upsert({
     *   create: {
     *     // ... data to create a TournamentGold
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TournamentGold we want to update
     *   }
     * })
     */
    upsert<T extends TournamentGoldUpsertArgs>(args: SelectSubset<T, TournamentGoldUpsertArgs<ExtArgs>>): Prisma__TournamentGoldClient<$Result.GetResult<Prisma.$TournamentGoldPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of TournamentGolds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentGoldCountArgs} args - Arguments to filter TournamentGolds to count.
     * @example
     * // Count the number of TournamentGolds
     * const count = await prisma.tournamentGold.count({
     *   where: {
     *     // ... the filter for the TournamentGolds we want to count
     *   }
     * })
    **/
    count<T extends TournamentGoldCountArgs>(
      args?: Subset<T, TournamentGoldCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TournamentGoldCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TournamentGold.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentGoldAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TournamentGoldAggregateArgs>(args: Subset<T, TournamentGoldAggregateArgs>): Prisma.PrismaPromise<GetTournamentGoldAggregateType<T>>

    /**
     * Group by TournamentGold.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentGoldGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TournamentGoldGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TournamentGoldGroupByArgs['orderBy'] }
        : { orderBy?: TournamentGoldGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TournamentGoldGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTournamentGoldGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TournamentGold model
   */
  readonly fields: TournamentGoldFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TournamentGold.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TournamentGoldClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TournamentGold model
   */ 
  interface TournamentGoldFieldRefs {
    readonly id: FieldRef<"TournamentGold", 'String'>
    readonly date: FieldRef<"TournamentGold", 'DateTime'>
    readonly userId: FieldRef<"TournamentGold", 'String'>
    readonly gold: FieldRef<"TournamentGold", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * TournamentGold findUnique
   */
  export type TournamentGoldFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentGold
     */
    select?: TournamentGoldSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentGold
     */
    omit?: TournamentGoldOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentGoldInclude<ExtArgs> | null
    /**
     * Filter, which TournamentGold to fetch.
     */
    where: TournamentGoldWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * TournamentGold findUniqueOrThrow
   */
  export type TournamentGoldFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentGold
     */
    select?: TournamentGoldSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentGold
     */
    omit?: TournamentGoldOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentGoldInclude<ExtArgs> | null
    /**
     * Filter, which TournamentGold to fetch.
     */
    where: TournamentGoldWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * TournamentGold findFirst
   */
  export type TournamentGoldFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentGold
     */
    select?: TournamentGoldSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentGold
     */
    omit?: TournamentGoldOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentGoldInclude<ExtArgs> | null
    /**
     * Filter, which TournamentGold to fetch.
     */
    where?: TournamentGoldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentGolds to fetch.
     */
    orderBy?: TournamentGoldOrderByWithRelationInput | TournamentGoldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TournamentGolds.
     */
    cursor?: TournamentGoldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentGolds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentGolds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TournamentGolds.
     */
    distinct?: TournamentGoldScalarFieldEnum | TournamentGoldScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * TournamentGold findFirstOrThrow
   */
  export type TournamentGoldFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentGold
     */
    select?: TournamentGoldSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentGold
     */
    omit?: TournamentGoldOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentGoldInclude<ExtArgs> | null
    /**
     * Filter, which TournamentGold to fetch.
     */
    where?: TournamentGoldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentGolds to fetch.
     */
    orderBy?: TournamentGoldOrderByWithRelationInput | TournamentGoldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TournamentGolds.
     */
    cursor?: TournamentGoldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentGolds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentGolds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TournamentGolds.
     */
    distinct?: TournamentGoldScalarFieldEnum | TournamentGoldScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * TournamentGold findMany
   */
  export type TournamentGoldFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentGold
     */
    select?: TournamentGoldSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentGold
     */
    omit?: TournamentGoldOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentGoldInclude<ExtArgs> | null
    /**
     * Filter, which TournamentGolds to fetch.
     */
    where?: TournamentGoldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentGolds to fetch.
     */
    orderBy?: TournamentGoldOrderByWithRelationInput | TournamentGoldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TournamentGolds.
     */
    cursor?: TournamentGoldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentGolds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentGolds.
     */
    skip?: number
    distinct?: TournamentGoldScalarFieldEnum | TournamentGoldScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * TournamentGold create
   */
  export type TournamentGoldCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentGold
     */
    select?: TournamentGoldSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentGold
     */
    omit?: TournamentGoldOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentGoldInclude<ExtArgs> | null
    /**
     * The data needed to create a TournamentGold.
     */
    data: XOR<TournamentGoldCreateInput, TournamentGoldUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * TournamentGold createMany
   */
  export type TournamentGoldCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TournamentGolds.
     */
    data: TournamentGoldCreateManyInput | TournamentGoldCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TournamentGold createManyAndReturn
   */
  export type TournamentGoldCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentGold
     */
    select?: TournamentGoldSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentGold
     */
    omit?: TournamentGoldOmit<ExtArgs> | null
    /**
     * The data used to create many TournamentGolds.
     */
    data: TournamentGoldCreateManyInput | TournamentGoldCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentGoldIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TournamentGold update
   */
  export type TournamentGoldUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentGold
     */
    select?: TournamentGoldSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentGold
     */
    omit?: TournamentGoldOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentGoldInclude<ExtArgs> | null
    /**
     * The data needed to update a TournamentGold.
     */
    data: XOR<TournamentGoldUpdateInput, TournamentGoldUncheckedUpdateInput>
    /**
     * Choose, which TournamentGold to update.
     */
    where: TournamentGoldWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * TournamentGold updateMany
   */
  export type TournamentGoldUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TournamentGolds.
     */
    data: XOR<TournamentGoldUpdateManyMutationInput, TournamentGoldUncheckedUpdateManyInput>
    /**
     * Filter which TournamentGolds to update
     */
    where?: TournamentGoldWhereInput
  }

  /**
   * TournamentGold upsert
   */
  export type TournamentGoldUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentGold
     */
    select?: TournamentGoldSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentGold
     */
    omit?: TournamentGoldOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentGoldInclude<ExtArgs> | null
    /**
     * The filter to search for the TournamentGold to update in case it exists.
     */
    where: TournamentGoldWhereUniqueInput
    /**
     * In case the TournamentGold found by the `where` argument doesn't exist, create a new TournamentGold with this data.
     */
    create: XOR<TournamentGoldCreateInput, TournamentGoldUncheckedCreateInput>
    /**
     * In case the TournamentGold was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TournamentGoldUpdateInput, TournamentGoldUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * TournamentGold delete
   */
  export type TournamentGoldDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentGold
     */
    select?: TournamentGoldSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentGold
     */
    omit?: TournamentGoldOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentGoldInclude<ExtArgs> | null
    /**
     * Filter which TournamentGold to delete.
     */
    where: TournamentGoldWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * TournamentGold deleteMany
   */
  export type TournamentGoldDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TournamentGolds to delete
     */
    where?: TournamentGoldWhereInput
  }

  /**
   * TournamentGold without action
   */
  export type TournamentGoldDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentGold
     */
    select?: TournamentGoldSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentGold
     */
    omit?: TournamentGoldOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentGoldInclude<ExtArgs> | null
  }


  /**
   * Model TournamentXp
   */

  export type AggregateTournamentXp = {
    _count: TournamentXpCountAggregateOutputType | null
    _avg: TournamentXpAvgAggregateOutputType | null
    _sum: TournamentXpSumAggregateOutputType | null
    _min: TournamentXpMinAggregateOutputType | null
    _max: TournamentXpMaxAggregateOutputType | null
  }

  export type TournamentXpAvgAggregateOutputType = {
    xp: number | null
  }

  export type TournamentXpSumAggregateOutputType = {
    xp: number | null
  }

  export type TournamentXpMinAggregateOutputType = {
    id: string | null
    date: Date | null
    bruteId: string | null
    xp: number | null
  }

  export type TournamentXpMaxAggregateOutputType = {
    id: string | null
    date: Date | null
    bruteId: string | null
    xp: number | null
  }

  export type TournamentXpCountAggregateOutputType = {
    id: number
    date: number
    bruteId: number
    xp: number
    _all: number
  }


  export type TournamentXpAvgAggregateInputType = {
    xp?: true
  }

  export type TournamentXpSumAggregateInputType = {
    xp?: true
  }

  export type TournamentXpMinAggregateInputType = {
    id?: true
    date?: true
    bruteId?: true
    xp?: true
  }

  export type TournamentXpMaxAggregateInputType = {
    id?: true
    date?: true
    bruteId?: true
    xp?: true
  }

  export type TournamentXpCountAggregateInputType = {
    id?: true
    date?: true
    bruteId?: true
    xp?: true
    _all?: true
  }

  export type TournamentXpAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TournamentXp to aggregate.
     */
    where?: TournamentXpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentXps to fetch.
     */
    orderBy?: TournamentXpOrderByWithRelationInput | TournamentXpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TournamentXpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentXps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentXps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TournamentXps
    **/
    _count?: true | TournamentXpCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TournamentXpAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TournamentXpSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TournamentXpMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TournamentXpMaxAggregateInputType
  }

  export type GetTournamentXpAggregateType<T extends TournamentXpAggregateArgs> = {
        [P in keyof T & keyof AggregateTournamentXp]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTournamentXp[P]>
      : GetScalarType<T[P], AggregateTournamentXp[P]>
  }




  export type TournamentXpGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TournamentXpWhereInput
    orderBy?: TournamentXpOrderByWithAggregationInput | TournamentXpOrderByWithAggregationInput[]
    by: TournamentXpScalarFieldEnum[] | TournamentXpScalarFieldEnum
    having?: TournamentXpScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TournamentXpCountAggregateInputType | true
    _avg?: TournamentXpAvgAggregateInputType
    _sum?: TournamentXpSumAggregateInputType
    _min?: TournamentXpMinAggregateInputType
    _max?: TournamentXpMaxAggregateInputType
  }

  export type TournamentXpGroupByOutputType = {
    id: string
    date: Date
    bruteId: string
    xp: number
    _count: TournamentXpCountAggregateOutputType | null
    _avg: TournamentXpAvgAggregateOutputType | null
    _sum: TournamentXpSumAggregateOutputType | null
    _min: TournamentXpMinAggregateOutputType | null
    _max: TournamentXpMaxAggregateOutputType | null
  }

  type GetTournamentXpGroupByPayload<T extends TournamentXpGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TournamentXpGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TournamentXpGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TournamentXpGroupByOutputType[P]>
            : GetScalarType<T[P], TournamentXpGroupByOutputType[P]>
        }
      >
    >


  export type TournamentXpSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    bruteId?: boolean
    xp?: boolean
    brute?: boolean | BruteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tournamentXp"]>

  export type TournamentXpSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    bruteId?: boolean
    xp?: boolean
    brute?: boolean | BruteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tournamentXp"]>

  export type TournamentXpSelectScalar = {
    id?: boolean
    date?: boolean
    bruteId?: boolean
    xp?: boolean
  }

  export type TournamentXpOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "date" | "bruteId" | "xp", ExtArgs["result"]["tournamentXp"]>
  export type TournamentXpInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brute?: boolean | BruteDefaultArgs<ExtArgs>
  }
  export type TournamentXpIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brute?: boolean | BruteDefaultArgs<ExtArgs>
  }

  export type $TournamentXpPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TournamentXp"
    objects: {
      brute: Prisma.$BrutePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      date: Date
      bruteId: string
      xp: number
    }, ExtArgs["result"]["tournamentXp"]>
    composites: {}
  }

  type TournamentXpGetPayload<S extends boolean | null | undefined | TournamentXpDefaultArgs> = $Result.GetResult<Prisma.$TournamentXpPayload, S>

  type TournamentXpCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TournamentXpFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: TournamentXpCountAggregateInputType | true
    }

  export interface TournamentXpDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TournamentXp'], meta: { name: 'TournamentXp' } }
    /**
     * Find zero or one TournamentXp that matches the filter.
     * @param {TournamentXpFindUniqueArgs} args - Arguments to find a TournamentXp
     * @example
     * // Get one TournamentXp
     * const tournamentXp = await prisma.tournamentXp.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TournamentXpFindUniqueArgs>(args: SelectSubset<T, TournamentXpFindUniqueArgs<ExtArgs>>): Prisma__TournamentXpClient<$Result.GetResult<Prisma.$TournamentXpPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one TournamentXp that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TournamentXpFindUniqueOrThrowArgs} args - Arguments to find a TournamentXp
     * @example
     * // Get one TournamentXp
     * const tournamentXp = await prisma.tournamentXp.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TournamentXpFindUniqueOrThrowArgs>(args: SelectSubset<T, TournamentXpFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TournamentXpClient<$Result.GetResult<Prisma.$TournamentXpPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first TournamentXp that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentXpFindFirstArgs} args - Arguments to find a TournamentXp
     * @example
     * // Get one TournamentXp
     * const tournamentXp = await prisma.tournamentXp.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TournamentXpFindFirstArgs>(args?: SelectSubset<T, TournamentXpFindFirstArgs<ExtArgs>>): Prisma__TournamentXpClient<$Result.GetResult<Prisma.$TournamentXpPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first TournamentXp that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentXpFindFirstOrThrowArgs} args - Arguments to find a TournamentXp
     * @example
     * // Get one TournamentXp
     * const tournamentXp = await prisma.tournamentXp.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TournamentXpFindFirstOrThrowArgs>(args?: SelectSubset<T, TournamentXpFindFirstOrThrowArgs<ExtArgs>>): Prisma__TournamentXpClient<$Result.GetResult<Prisma.$TournamentXpPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more TournamentXps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentXpFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TournamentXps
     * const tournamentXps = await prisma.tournamentXp.findMany()
     * 
     * // Get first 10 TournamentXps
     * const tournamentXps = await prisma.tournamentXp.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tournamentXpWithIdOnly = await prisma.tournamentXp.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TournamentXpFindManyArgs>(args?: SelectSubset<T, TournamentXpFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentXpPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a TournamentXp.
     * @param {TournamentXpCreateArgs} args - Arguments to create a TournamentXp.
     * @example
     * // Create one TournamentXp
     * const TournamentXp = await prisma.tournamentXp.create({
     *   data: {
     *     // ... data to create a TournamentXp
     *   }
     * })
     * 
     */
    create<T extends TournamentXpCreateArgs>(args: SelectSubset<T, TournamentXpCreateArgs<ExtArgs>>): Prisma__TournamentXpClient<$Result.GetResult<Prisma.$TournamentXpPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many TournamentXps.
     * @param {TournamentXpCreateManyArgs} args - Arguments to create many TournamentXps.
     * @example
     * // Create many TournamentXps
     * const tournamentXp = await prisma.tournamentXp.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TournamentXpCreateManyArgs>(args?: SelectSubset<T, TournamentXpCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TournamentXps and returns the data saved in the database.
     * @param {TournamentXpCreateManyAndReturnArgs} args - Arguments to create many TournamentXps.
     * @example
     * // Create many TournamentXps
     * const tournamentXp = await prisma.tournamentXp.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TournamentXps and only return the `id`
     * const tournamentXpWithIdOnly = await prisma.tournamentXp.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TournamentXpCreateManyAndReturnArgs>(args?: SelectSubset<T, TournamentXpCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentXpPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a TournamentXp.
     * @param {TournamentXpDeleteArgs} args - Arguments to delete one TournamentXp.
     * @example
     * // Delete one TournamentXp
     * const TournamentXp = await prisma.tournamentXp.delete({
     *   where: {
     *     // ... filter to delete one TournamentXp
     *   }
     * })
     * 
     */
    delete<T extends TournamentXpDeleteArgs>(args: SelectSubset<T, TournamentXpDeleteArgs<ExtArgs>>): Prisma__TournamentXpClient<$Result.GetResult<Prisma.$TournamentXpPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one TournamentXp.
     * @param {TournamentXpUpdateArgs} args - Arguments to update one TournamentXp.
     * @example
     * // Update one TournamentXp
     * const tournamentXp = await prisma.tournamentXp.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TournamentXpUpdateArgs>(args: SelectSubset<T, TournamentXpUpdateArgs<ExtArgs>>): Prisma__TournamentXpClient<$Result.GetResult<Prisma.$TournamentXpPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more TournamentXps.
     * @param {TournamentXpDeleteManyArgs} args - Arguments to filter TournamentXps to delete.
     * @example
     * // Delete a few TournamentXps
     * const { count } = await prisma.tournamentXp.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TournamentXpDeleteManyArgs>(args?: SelectSubset<T, TournamentXpDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TournamentXps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentXpUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TournamentXps
     * const tournamentXp = await prisma.tournamentXp.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TournamentXpUpdateManyArgs>(args: SelectSubset<T, TournamentXpUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TournamentXp.
     * @param {TournamentXpUpsertArgs} args - Arguments to update or create a TournamentXp.
     * @example
     * // Update or create a TournamentXp
     * const tournamentXp = await prisma.tournamentXp.upsert({
     *   create: {
     *     // ... data to create a TournamentXp
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TournamentXp we want to update
     *   }
     * })
     */
    upsert<T extends TournamentXpUpsertArgs>(args: SelectSubset<T, TournamentXpUpsertArgs<ExtArgs>>): Prisma__TournamentXpClient<$Result.GetResult<Prisma.$TournamentXpPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of TournamentXps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentXpCountArgs} args - Arguments to filter TournamentXps to count.
     * @example
     * // Count the number of TournamentXps
     * const count = await prisma.tournamentXp.count({
     *   where: {
     *     // ... the filter for the TournamentXps we want to count
     *   }
     * })
    **/
    count<T extends TournamentXpCountArgs>(
      args?: Subset<T, TournamentXpCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TournamentXpCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TournamentXp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentXpAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TournamentXpAggregateArgs>(args: Subset<T, TournamentXpAggregateArgs>): Prisma.PrismaPromise<GetTournamentXpAggregateType<T>>

    /**
     * Group by TournamentXp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentXpGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TournamentXpGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TournamentXpGroupByArgs['orderBy'] }
        : { orderBy?: TournamentXpGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TournamentXpGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTournamentXpGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TournamentXp model
   */
  readonly fields: TournamentXpFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TournamentXp.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TournamentXpClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    brute<T extends BruteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BruteDefaultArgs<ExtArgs>>): Prisma__BruteClient<$Result.GetResult<Prisma.$BrutePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TournamentXp model
   */ 
  interface TournamentXpFieldRefs {
    readonly id: FieldRef<"TournamentXp", 'String'>
    readonly date: FieldRef<"TournamentXp", 'DateTime'>
    readonly bruteId: FieldRef<"TournamentXp", 'String'>
    readonly xp: FieldRef<"TournamentXp", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * TournamentXp findUnique
   */
  export type TournamentXpFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentXp
     */
    select?: TournamentXpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentXp
     */
    omit?: TournamentXpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentXpInclude<ExtArgs> | null
    /**
     * Filter, which TournamentXp to fetch.
     */
    where: TournamentXpWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * TournamentXp findUniqueOrThrow
   */
  export type TournamentXpFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentXp
     */
    select?: TournamentXpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentXp
     */
    omit?: TournamentXpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentXpInclude<ExtArgs> | null
    /**
     * Filter, which TournamentXp to fetch.
     */
    where: TournamentXpWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * TournamentXp findFirst
   */
  export type TournamentXpFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentXp
     */
    select?: TournamentXpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentXp
     */
    omit?: TournamentXpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentXpInclude<ExtArgs> | null
    /**
     * Filter, which TournamentXp to fetch.
     */
    where?: TournamentXpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentXps to fetch.
     */
    orderBy?: TournamentXpOrderByWithRelationInput | TournamentXpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TournamentXps.
     */
    cursor?: TournamentXpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentXps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentXps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TournamentXps.
     */
    distinct?: TournamentXpScalarFieldEnum | TournamentXpScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * TournamentXp findFirstOrThrow
   */
  export type TournamentXpFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentXp
     */
    select?: TournamentXpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentXp
     */
    omit?: TournamentXpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentXpInclude<ExtArgs> | null
    /**
     * Filter, which TournamentXp to fetch.
     */
    where?: TournamentXpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentXps to fetch.
     */
    orderBy?: TournamentXpOrderByWithRelationInput | TournamentXpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TournamentXps.
     */
    cursor?: TournamentXpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentXps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentXps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TournamentXps.
     */
    distinct?: TournamentXpScalarFieldEnum | TournamentXpScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * TournamentXp findMany
   */
  export type TournamentXpFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentXp
     */
    select?: TournamentXpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentXp
     */
    omit?: TournamentXpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentXpInclude<ExtArgs> | null
    /**
     * Filter, which TournamentXps to fetch.
     */
    where?: TournamentXpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TournamentXps to fetch.
     */
    orderBy?: TournamentXpOrderByWithRelationInput | TournamentXpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TournamentXps.
     */
    cursor?: TournamentXpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TournamentXps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TournamentXps.
     */
    skip?: number
    distinct?: TournamentXpScalarFieldEnum | TournamentXpScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * TournamentXp create
   */
  export type TournamentXpCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentXp
     */
    select?: TournamentXpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentXp
     */
    omit?: TournamentXpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentXpInclude<ExtArgs> | null
    /**
     * The data needed to create a TournamentXp.
     */
    data: XOR<TournamentXpCreateInput, TournamentXpUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * TournamentXp createMany
   */
  export type TournamentXpCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TournamentXps.
     */
    data: TournamentXpCreateManyInput | TournamentXpCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TournamentXp createManyAndReturn
   */
  export type TournamentXpCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentXp
     */
    select?: TournamentXpSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentXp
     */
    omit?: TournamentXpOmit<ExtArgs> | null
    /**
     * The data used to create many TournamentXps.
     */
    data: TournamentXpCreateManyInput | TournamentXpCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentXpIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TournamentXp update
   */
  export type TournamentXpUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentXp
     */
    select?: TournamentXpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentXp
     */
    omit?: TournamentXpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentXpInclude<ExtArgs> | null
    /**
     * The data needed to update a TournamentXp.
     */
    data: XOR<TournamentXpUpdateInput, TournamentXpUncheckedUpdateInput>
    /**
     * Choose, which TournamentXp to update.
     */
    where: TournamentXpWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * TournamentXp updateMany
   */
  export type TournamentXpUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TournamentXps.
     */
    data: XOR<TournamentXpUpdateManyMutationInput, TournamentXpUncheckedUpdateManyInput>
    /**
     * Filter which TournamentXps to update
     */
    where?: TournamentXpWhereInput
  }

  /**
   * TournamentXp upsert
   */
  export type TournamentXpUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentXp
     */
    select?: TournamentXpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentXp
     */
    omit?: TournamentXpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentXpInclude<ExtArgs> | null
    /**
     * The filter to search for the TournamentXp to update in case it exists.
     */
    where: TournamentXpWhereUniqueInput
    /**
     * In case the TournamentXp found by the `where` argument doesn't exist, create a new TournamentXp with this data.
     */
    create: XOR<TournamentXpCreateInput, TournamentXpUncheckedCreateInput>
    /**
     * In case the TournamentXp was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TournamentXpUpdateInput, TournamentXpUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * TournamentXp delete
   */
  export type TournamentXpDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentXp
     */
    select?: TournamentXpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentXp
     */
    omit?: TournamentXpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentXpInclude<ExtArgs> | null
    /**
     * Filter which TournamentXp to delete.
     */
    where: TournamentXpWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * TournamentXp deleteMany
   */
  export type TournamentXpDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TournamentXps to delete
     */
    where?: TournamentXpWhereInput
  }

  /**
   * TournamentXp without action
   */
  export type TournamentXpDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentXp
     */
    select?: TournamentXpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TournamentXp
     */
    omit?: TournamentXpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentXpInclude<ExtArgs> | null
  }


  /**
   * Model Achievement
   */

  export type AggregateAchievement = {
    _count: AchievementCountAggregateOutputType | null
    _avg: AchievementAvgAggregateOutputType | null
    _sum: AchievementSumAggregateOutputType | null
    _min: AchievementMinAggregateOutputType | null
    _max: AchievementMaxAggregateOutputType | null
  }

  export type AchievementAvgAggregateOutputType = {
    count: number | null
  }

  export type AchievementSumAggregateOutputType = {
    count: number | null
  }

  export type AchievementMinAggregateOutputType = {
    id: string | null
    name: $Enums.AchievementName | null
    count: number | null
    bruteId: string | null
    userId: string | null
  }

  export type AchievementMaxAggregateOutputType = {
    id: string | null
    name: $Enums.AchievementName | null
    count: number | null
    bruteId: string | null
    userId: string | null
  }

  export type AchievementCountAggregateOutputType = {
    id: number
    name: number
    count: number
    bruteId: number
    userId: number
    _all: number
  }


  export type AchievementAvgAggregateInputType = {
    count?: true
  }

  export type AchievementSumAggregateInputType = {
    count?: true
  }

  export type AchievementMinAggregateInputType = {
    id?: true
    name?: true
    count?: true
    bruteId?: true
    userId?: true
  }

  export type AchievementMaxAggregateInputType = {
    id?: true
    name?: true
    count?: true
    bruteId?: true
    userId?: true
  }

  export type AchievementCountAggregateInputType = {
    id?: true
    name?: true
    count?: true
    bruteId?: true
    userId?: true
    _all?: true
  }

  export type AchievementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Achievement to aggregate.
     */
    where?: AchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     */
    orderBy?: AchievementOrderByWithRelationInput | AchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Achievements
    **/
    _count?: true | AchievementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AchievementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AchievementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AchievementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AchievementMaxAggregateInputType
  }

  export type GetAchievementAggregateType<T extends AchievementAggregateArgs> = {
        [P in keyof T & keyof AggregateAchievement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAchievement[P]>
      : GetScalarType<T[P], AggregateAchievement[P]>
  }




  export type AchievementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AchievementWhereInput
    orderBy?: AchievementOrderByWithAggregationInput | AchievementOrderByWithAggregationInput[]
    by: AchievementScalarFieldEnum[] | AchievementScalarFieldEnum
    having?: AchievementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AchievementCountAggregateInputType | true
    _avg?: AchievementAvgAggregateInputType
    _sum?: AchievementSumAggregateInputType
    _min?: AchievementMinAggregateInputType
    _max?: AchievementMaxAggregateInputType
  }

  export type AchievementGroupByOutputType = {
    id: string
    name: $Enums.AchievementName
    count: number
    bruteId: string | null
    userId: string | null
    _count: AchievementCountAggregateOutputType | null
    _avg: AchievementAvgAggregateOutputType | null
    _sum: AchievementSumAggregateOutputType | null
    _min: AchievementMinAggregateOutputType | null
    _max: AchievementMaxAggregateOutputType | null
  }

  type GetAchievementGroupByPayload<T extends AchievementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AchievementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AchievementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AchievementGroupByOutputType[P]>
            : GetScalarType<T[P], AchievementGroupByOutputType[P]>
        }
      >
    >


  export type AchievementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    count?: boolean
    bruteId?: boolean
    userId?: boolean
    brute?: boolean | Achievement$bruteArgs<ExtArgs>
    user?: boolean | Achievement$userArgs<ExtArgs>
  }, ExtArgs["result"]["achievement"]>

  export type AchievementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    count?: boolean
    bruteId?: boolean
    userId?: boolean
    brute?: boolean | Achievement$bruteArgs<ExtArgs>
    user?: boolean | Achievement$userArgs<ExtArgs>
  }, ExtArgs["result"]["achievement"]>

  export type AchievementSelectScalar = {
    id?: boolean
    name?: boolean
    count?: boolean
    bruteId?: boolean
    userId?: boolean
  }

  export type AchievementOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "count" | "bruteId" | "userId", ExtArgs["result"]["achievement"]>
  export type AchievementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brute?: boolean | Achievement$bruteArgs<ExtArgs>
    user?: boolean | Achievement$userArgs<ExtArgs>
  }
  export type AchievementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brute?: boolean | Achievement$bruteArgs<ExtArgs>
    user?: boolean | Achievement$userArgs<ExtArgs>
  }

  export type $AchievementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Achievement"
    objects: {
      brute: Prisma.$BrutePayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: $Enums.AchievementName
      count: number
      bruteId: string | null
      userId: string | null
    }, ExtArgs["result"]["achievement"]>
    composites: {}
  }

  type AchievementGetPayload<S extends boolean | null | undefined | AchievementDefaultArgs> = $Result.GetResult<Prisma.$AchievementPayload, S>

  type AchievementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AchievementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: AchievementCountAggregateInputType | true
    }

  export interface AchievementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Achievement'], meta: { name: 'Achievement' } }
    /**
     * Find zero or one Achievement that matches the filter.
     * @param {AchievementFindUniqueArgs} args - Arguments to find a Achievement
     * @example
     * // Get one Achievement
     * const achievement = await prisma.achievement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AchievementFindUniqueArgs>(args: SelectSubset<T, AchievementFindUniqueArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Achievement that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AchievementFindUniqueOrThrowArgs} args - Arguments to find a Achievement
     * @example
     * // Get one Achievement
     * const achievement = await prisma.achievement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AchievementFindUniqueOrThrowArgs>(args: SelectSubset<T, AchievementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Achievement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementFindFirstArgs} args - Arguments to find a Achievement
     * @example
     * // Get one Achievement
     * const achievement = await prisma.achievement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AchievementFindFirstArgs>(args?: SelectSubset<T, AchievementFindFirstArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Achievement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementFindFirstOrThrowArgs} args - Arguments to find a Achievement
     * @example
     * // Get one Achievement
     * const achievement = await prisma.achievement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AchievementFindFirstOrThrowArgs>(args?: SelectSubset<T, AchievementFindFirstOrThrowArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Achievements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Achievements
     * const achievements = await prisma.achievement.findMany()
     * 
     * // Get first 10 Achievements
     * const achievements = await prisma.achievement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const achievementWithIdOnly = await prisma.achievement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AchievementFindManyArgs>(args?: SelectSubset<T, AchievementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Achievement.
     * @param {AchievementCreateArgs} args - Arguments to create a Achievement.
     * @example
     * // Create one Achievement
     * const Achievement = await prisma.achievement.create({
     *   data: {
     *     // ... data to create a Achievement
     *   }
     * })
     * 
     */
    create<T extends AchievementCreateArgs>(args: SelectSubset<T, AchievementCreateArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Achievements.
     * @param {AchievementCreateManyArgs} args - Arguments to create many Achievements.
     * @example
     * // Create many Achievements
     * const achievement = await prisma.achievement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AchievementCreateManyArgs>(args?: SelectSubset<T, AchievementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Achievements and returns the data saved in the database.
     * @param {AchievementCreateManyAndReturnArgs} args - Arguments to create many Achievements.
     * @example
     * // Create many Achievements
     * const achievement = await prisma.achievement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Achievements and only return the `id`
     * const achievementWithIdOnly = await prisma.achievement.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AchievementCreateManyAndReturnArgs>(args?: SelectSubset<T, AchievementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Achievement.
     * @param {AchievementDeleteArgs} args - Arguments to delete one Achievement.
     * @example
     * // Delete one Achievement
     * const Achievement = await prisma.achievement.delete({
     *   where: {
     *     // ... filter to delete one Achievement
     *   }
     * })
     * 
     */
    delete<T extends AchievementDeleteArgs>(args: SelectSubset<T, AchievementDeleteArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Achievement.
     * @param {AchievementUpdateArgs} args - Arguments to update one Achievement.
     * @example
     * // Update one Achievement
     * const achievement = await prisma.achievement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AchievementUpdateArgs>(args: SelectSubset<T, AchievementUpdateArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Achievements.
     * @param {AchievementDeleteManyArgs} args - Arguments to filter Achievements to delete.
     * @example
     * // Delete a few Achievements
     * const { count } = await prisma.achievement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AchievementDeleteManyArgs>(args?: SelectSubset<T, AchievementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Achievements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Achievements
     * const achievement = await prisma.achievement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AchievementUpdateManyArgs>(args: SelectSubset<T, AchievementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Achievement.
     * @param {AchievementUpsertArgs} args - Arguments to update or create a Achievement.
     * @example
     * // Update or create a Achievement
     * const achievement = await prisma.achievement.upsert({
     *   create: {
     *     // ... data to create a Achievement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Achievement we want to update
     *   }
     * })
     */
    upsert<T extends AchievementUpsertArgs>(args: SelectSubset<T, AchievementUpsertArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Achievements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementCountArgs} args - Arguments to filter Achievements to count.
     * @example
     * // Count the number of Achievements
     * const count = await prisma.achievement.count({
     *   where: {
     *     // ... the filter for the Achievements we want to count
     *   }
     * })
    **/
    count<T extends AchievementCountArgs>(
      args?: Subset<T, AchievementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AchievementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Achievement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AchievementAggregateArgs>(args: Subset<T, AchievementAggregateArgs>): Prisma.PrismaPromise<GetAchievementAggregateType<T>>

    /**
     * Group by Achievement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AchievementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AchievementGroupByArgs['orderBy'] }
        : { orderBy?: AchievementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AchievementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAchievementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Achievement model
   */
  readonly fields: AchievementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Achievement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AchievementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    brute<T extends Achievement$bruteArgs<ExtArgs> = {}>(args?: Subset<T, Achievement$bruteArgs<ExtArgs>>): Prisma__BruteClient<$Result.GetResult<Prisma.$BrutePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    user<T extends Achievement$userArgs<ExtArgs> = {}>(args?: Subset<T, Achievement$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Achievement model
   */ 
  interface AchievementFieldRefs {
    readonly id: FieldRef<"Achievement", 'String'>
    readonly name: FieldRef<"Achievement", 'AchievementName'>
    readonly count: FieldRef<"Achievement", 'Int'>
    readonly bruteId: FieldRef<"Achievement", 'String'>
    readonly userId: FieldRef<"Achievement", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Achievement findUnique
   */
  export type AchievementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievement to fetch.
     */
    where: AchievementWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Achievement findUniqueOrThrow
   */
  export type AchievementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievement to fetch.
     */
    where: AchievementWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Achievement findFirst
   */
  export type AchievementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievement to fetch.
     */
    where?: AchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     */
    orderBy?: AchievementOrderByWithRelationInput | AchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Achievements.
     */
    cursor?: AchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Achievements.
     */
    distinct?: AchievementScalarFieldEnum | AchievementScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Achievement findFirstOrThrow
   */
  export type AchievementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievement to fetch.
     */
    where?: AchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     */
    orderBy?: AchievementOrderByWithRelationInput | AchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Achievements.
     */
    cursor?: AchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Achievements.
     */
    distinct?: AchievementScalarFieldEnum | AchievementScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Achievement findMany
   */
  export type AchievementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievements to fetch.
     */
    where?: AchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     */
    orderBy?: AchievementOrderByWithRelationInput | AchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Achievements.
     */
    cursor?: AchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     */
    skip?: number
    distinct?: AchievementScalarFieldEnum | AchievementScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Achievement create
   */
  export type AchievementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * The data needed to create a Achievement.
     */
    data: XOR<AchievementCreateInput, AchievementUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Achievement createMany
   */
  export type AchievementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Achievements.
     */
    data: AchievementCreateManyInput | AchievementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Achievement createManyAndReturn
   */
  export type AchievementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * The data used to create many Achievements.
     */
    data: AchievementCreateManyInput | AchievementCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Achievement update
   */
  export type AchievementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * The data needed to update a Achievement.
     */
    data: XOR<AchievementUpdateInput, AchievementUncheckedUpdateInput>
    /**
     * Choose, which Achievement to update.
     */
    where: AchievementWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Achievement updateMany
   */
  export type AchievementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Achievements.
     */
    data: XOR<AchievementUpdateManyMutationInput, AchievementUncheckedUpdateManyInput>
    /**
     * Filter which Achievements to update
     */
    where?: AchievementWhereInput
  }

  /**
   * Achievement upsert
   */
  export type AchievementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * The filter to search for the Achievement to update in case it exists.
     */
    where: AchievementWhereUniqueInput
    /**
     * In case the Achievement found by the `where` argument doesn't exist, create a new Achievement with this data.
     */
    create: XOR<AchievementCreateInput, AchievementUncheckedCreateInput>
    /**
     * In case the Achievement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AchievementUpdateInput, AchievementUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Achievement delete
   */
  export type AchievementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter which Achievement to delete.
     */
    where: AchievementWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Achievement deleteMany
   */
  export type AchievementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Achievements to delete
     */
    where?: AchievementWhereInput
  }

  /**
   * Achievement.brute
   */
  export type Achievement$bruteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brute
     */
    omit?: BruteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteInclude<ExtArgs> | null
    where?: BruteWhereInput
  }

  /**
   * Achievement.user
   */
  export type Achievement$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Achievement without action
   */
  export type AchievementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
  }


  /**
   * Model Title
   */

  export type AggregateTitle = {
    _count: TitleCountAggregateOutputType | null
    _avg: TitleAvgAggregateOutputType | null
    _sum: TitleSumAggregateOutputType | null
    _min: TitleMinAggregateOutputType | null
    _max: TitleMaxAggregateOutputType | null
  }

  export type TitleAvgAggregateOutputType = {
    count: number | null
  }

  export type TitleSumAggregateOutputType = {
    count: number | null
  }

  export type TitleMinAggregateOutputType = {
    id: string | null
    name: $Enums.AchievementName | null
    count: number | null
  }

  export type TitleMaxAggregateOutputType = {
    id: string | null
    name: $Enums.AchievementName | null
    count: number | null
  }

  export type TitleCountAggregateOutputType = {
    id: number
    name: number
    count: number
    _all: number
  }


  export type TitleAvgAggregateInputType = {
    count?: true
  }

  export type TitleSumAggregateInputType = {
    count?: true
  }

  export type TitleMinAggregateInputType = {
    id?: true
    name?: true
    count?: true
  }

  export type TitleMaxAggregateInputType = {
    id?: true
    name?: true
    count?: true
  }

  export type TitleCountAggregateInputType = {
    id?: true
    name?: true
    count?: true
    _all?: true
  }

  export type TitleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Title to aggregate.
     */
    where?: TitleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Titles to fetch.
     */
    orderBy?: TitleOrderByWithRelationInput | TitleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TitleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Titles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Titles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Titles
    **/
    _count?: true | TitleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TitleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TitleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TitleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TitleMaxAggregateInputType
  }

  export type GetTitleAggregateType<T extends TitleAggregateArgs> = {
        [P in keyof T & keyof AggregateTitle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTitle[P]>
      : GetScalarType<T[P], AggregateTitle[P]>
  }




  export type TitleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TitleWhereInput
    orderBy?: TitleOrderByWithAggregationInput | TitleOrderByWithAggregationInput[]
    by: TitleScalarFieldEnum[] | TitleScalarFieldEnum
    having?: TitleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TitleCountAggregateInputType | true
    _avg?: TitleAvgAggregateInputType
    _sum?: TitleSumAggregateInputType
    _min?: TitleMinAggregateInputType
    _max?: TitleMaxAggregateInputType
  }

  export type TitleGroupByOutputType = {
    id: string
    name: $Enums.AchievementName
    count: number
    _count: TitleCountAggregateOutputType | null
    _avg: TitleAvgAggregateOutputType | null
    _sum: TitleSumAggregateOutputType | null
    _min: TitleMinAggregateOutputType | null
    _max: TitleMaxAggregateOutputType | null
  }

  type GetTitleGroupByPayload<T extends TitleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TitleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TitleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TitleGroupByOutputType[P]>
            : GetScalarType<T[P], TitleGroupByOutputType[P]>
        }
      >
    >


  export type TitleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    count?: boolean
    brutes?: boolean | Title$brutesArgs<ExtArgs>
    _count?: boolean | TitleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["title"]>

  export type TitleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    count?: boolean
  }, ExtArgs["result"]["title"]>

  export type TitleSelectScalar = {
    id?: boolean
    name?: boolean
    count?: boolean
  }

  export type TitleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "count", ExtArgs["result"]["title"]>
  export type TitleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brutes?: boolean | Title$brutesArgs<ExtArgs>
    _count?: boolean | TitleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TitleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TitlePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Title"
    objects: {
      brutes: Prisma.$BrutePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: $Enums.AchievementName
      count: number
    }, ExtArgs["result"]["title"]>
    composites: {}
  }

  type TitleGetPayload<S extends boolean | null | undefined | TitleDefaultArgs> = $Result.GetResult<Prisma.$TitlePayload, S>

  type TitleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TitleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: TitleCountAggregateInputType | true
    }

  export interface TitleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Title'], meta: { name: 'Title' } }
    /**
     * Find zero or one Title that matches the filter.
     * @param {TitleFindUniqueArgs} args - Arguments to find a Title
     * @example
     * // Get one Title
     * const title = await prisma.title.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TitleFindUniqueArgs>(args: SelectSubset<T, TitleFindUniqueArgs<ExtArgs>>): Prisma__TitleClient<$Result.GetResult<Prisma.$TitlePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Title that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TitleFindUniqueOrThrowArgs} args - Arguments to find a Title
     * @example
     * // Get one Title
     * const title = await prisma.title.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TitleFindUniqueOrThrowArgs>(args: SelectSubset<T, TitleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TitleClient<$Result.GetResult<Prisma.$TitlePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Title that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TitleFindFirstArgs} args - Arguments to find a Title
     * @example
     * // Get one Title
     * const title = await prisma.title.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TitleFindFirstArgs>(args?: SelectSubset<T, TitleFindFirstArgs<ExtArgs>>): Prisma__TitleClient<$Result.GetResult<Prisma.$TitlePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Title that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TitleFindFirstOrThrowArgs} args - Arguments to find a Title
     * @example
     * // Get one Title
     * const title = await prisma.title.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TitleFindFirstOrThrowArgs>(args?: SelectSubset<T, TitleFindFirstOrThrowArgs<ExtArgs>>): Prisma__TitleClient<$Result.GetResult<Prisma.$TitlePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Titles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TitleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Titles
     * const titles = await prisma.title.findMany()
     * 
     * // Get first 10 Titles
     * const titles = await prisma.title.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const titleWithIdOnly = await prisma.title.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TitleFindManyArgs>(args?: SelectSubset<T, TitleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TitlePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Title.
     * @param {TitleCreateArgs} args - Arguments to create a Title.
     * @example
     * // Create one Title
     * const Title = await prisma.title.create({
     *   data: {
     *     // ... data to create a Title
     *   }
     * })
     * 
     */
    create<T extends TitleCreateArgs>(args: SelectSubset<T, TitleCreateArgs<ExtArgs>>): Prisma__TitleClient<$Result.GetResult<Prisma.$TitlePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Titles.
     * @param {TitleCreateManyArgs} args - Arguments to create many Titles.
     * @example
     * // Create many Titles
     * const title = await prisma.title.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TitleCreateManyArgs>(args?: SelectSubset<T, TitleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Titles and returns the data saved in the database.
     * @param {TitleCreateManyAndReturnArgs} args - Arguments to create many Titles.
     * @example
     * // Create many Titles
     * const title = await prisma.title.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Titles and only return the `id`
     * const titleWithIdOnly = await prisma.title.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TitleCreateManyAndReturnArgs>(args?: SelectSubset<T, TitleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TitlePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Title.
     * @param {TitleDeleteArgs} args - Arguments to delete one Title.
     * @example
     * // Delete one Title
     * const Title = await prisma.title.delete({
     *   where: {
     *     // ... filter to delete one Title
     *   }
     * })
     * 
     */
    delete<T extends TitleDeleteArgs>(args: SelectSubset<T, TitleDeleteArgs<ExtArgs>>): Prisma__TitleClient<$Result.GetResult<Prisma.$TitlePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Title.
     * @param {TitleUpdateArgs} args - Arguments to update one Title.
     * @example
     * // Update one Title
     * const title = await prisma.title.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TitleUpdateArgs>(args: SelectSubset<T, TitleUpdateArgs<ExtArgs>>): Prisma__TitleClient<$Result.GetResult<Prisma.$TitlePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Titles.
     * @param {TitleDeleteManyArgs} args - Arguments to filter Titles to delete.
     * @example
     * // Delete a few Titles
     * const { count } = await prisma.title.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TitleDeleteManyArgs>(args?: SelectSubset<T, TitleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Titles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TitleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Titles
     * const title = await prisma.title.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TitleUpdateManyArgs>(args: SelectSubset<T, TitleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Title.
     * @param {TitleUpsertArgs} args - Arguments to update or create a Title.
     * @example
     * // Update or create a Title
     * const title = await prisma.title.upsert({
     *   create: {
     *     // ... data to create a Title
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Title we want to update
     *   }
     * })
     */
    upsert<T extends TitleUpsertArgs>(args: SelectSubset<T, TitleUpsertArgs<ExtArgs>>): Prisma__TitleClient<$Result.GetResult<Prisma.$TitlePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Titles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TitleCountArgs} args - Arguments to filter Titles to count.
     * @example
     * // Count the number of Titles
     * const count = await prisma.title.count({
     *   where: {
     *     // ... the filter for the Titles we want to count
     *   }
     * })
    **/
    count<T extends TitleCountArgs>(
      args?: Subset<T, TitleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TitleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Title.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TitleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TitleAggregateArgs>(args: Subset<T, TitleAggregateArgs>): Prisma.PrismaPromise<GetTitleAggregateType<T>>

    /**
     * Group by Title.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TitleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TitleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TitleGroupByArgs['orderBy'] }
        : { orderBy?: TitleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TitleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTitleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Title model
   */
  readonly fields: TitleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Title.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TitleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    brutes<T extends Title$brutesArgs<ExtArgs> = {}>(args?: Subset<T, Title$brutesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrutePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Title model
   */ 
  interface TitleFieldRefs {
    readonly id: FieldRef<"Title", 'String'>
    readonly name: FieldRef<"Title", 'AchievementName'>
    readonly count: FieldRef<"Title", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Title findUnique
   */
  export type TitleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Title
     */
    select?: TitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Title
     */
    omit?: TitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TitleInclude<ExtArgs> | null
    /**
     * Filter, which Title to fetch.
     */
    where: TitleWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Title findUniqueOrThrow
   */
  export type TitleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Title
     */
    select?: TitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Title
     */
    omit?: TitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TitleInclude<ExtArgs> | null
    /**
     * Filter, which Title to fetch.
     */
    where: TitleWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Title findFirst
   */
  export type TitleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Title
     */
    select?: TitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Title
     */
    omit?: TitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TitleInclude<ExtArgs> | null
    /**
     * Filter, which Title to fetch.
     */
    where?: TitleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Titles to fetch.
     */
    orderBy?: TitleOrderByWithRelationInput | TitleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Titles.
     */
    cursor?: TitleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Titles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Titles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Titles.
     */
    distinct?: TitleScalarFieldEnum | TitleScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Title findFirstOrThrow
   */
  export type TitleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Title
     */
    select?: TitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Title
     */
    omit?: TitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TitleInclude<ExtArgs> | null
    /**
     * Filter, which Title to fetch.
     */
    where?: TitleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Titles to fetch.
     */
    orderBy?: TitleOrderByWithRelationInput | TitleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Titles.
     */
    cursor?: TitleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Titles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Titles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Titles.
     */
    distinct?: TitleScalarFieldEnum | TitleScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Title findMany
   */
  export type TitleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Title
     */
    select?: TitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Title
     */
    omit?: TitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TitleInclude<ExtArgs> | null
    /**
     * Filter, which Titles to fetch.
     */
    where?: TitleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Titles to fetch.
     */
    orderBy?: TitleOrderByWithRelationInput | TitleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Titles.
     */
    cursor?: TitleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Titles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Titles.
     */
    skip?: number
    distinct?: TitleScalarFieldEnum | TitleScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Title create
   */
  export type TitleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Title
     */
    select?: TitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Title
     */
    omit?: TitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TitleInclude<ExtArgs> | null
    /**
     * The data needed to create a Title.
     */
    data: XOR<TitleCreateInput, TitleUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Title createMany
   */
  export type TitleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Titles.
     */
    data: TitleCreateManyInput | TitleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Title createManyAndReturn
   */
  export type TitleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Title
     */
    select?: TitleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Title
     */
    omit?: TitleOmit<ExtArgs> | null
    /**
     * The data used to create many Titles.
     */
    data: TitleCreateManyInput | TitleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Title update
   */
  export type TitleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Title
     */
    select?: TitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Title
     */
    omit?: TitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TitleInclude<ExtArgs> | null
    /**
     * The data needed to update a Title.
     */
    data: XOR<TitleUpdateInput, TitleUncheckedUpdateInput>
    /**
     * Choose, which Title to update.
     */
    where: TitleWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Title updateMany
   */
  export type TitleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Titles.
     */
    data: XOR<TitleUpdateManyMutationInput, TitleUncheckedUpdateManyInput>
    /**
     * Filter which Titles to update
     */
    where?: TitleWhereInput
  }

  /**
   * Title upsert
   */
  export type TitleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Title
     */
    select?: TitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Title
     */
    omit?: TitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TitleInclude<ExtArgs> | null
    /**
     * The filter to search for the Title to update in case it exists.
     */
    where: TitleWhereUniqueInput
    /**
     * In case the Title found by the `where` argument doesn't exist, create a new Title with this data.
     */
    create: XOR<TitleCreateInput, TitleUncheckedCreateInput>
    /**
     * In case the Title was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TitleUpdateInput, TitleUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Title delete
   */
  export type TitleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Title
     */
    select?: TitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Title
     */
    omit?: TitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TitleInclude<ExtArgs> | null
    /**
     * Filter which Title to delete.
     */
    where: TitleWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Title deleteMany
   */
  export type TitleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Titles to delete
     */
    where?: TitleWhereInput
  }

  /**
   * Title.brutes
   */
  export type Title$brutesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brute
     */
    omit?: BruteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteInclude<ExtArgs> | null
    where?: BruteWhereInput
    orderBy?: BruteOrderByWithRelationInput | BruteOrderByWithRelationInput[]
    cursor?: BruteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BruteScalarFieldEnum | BruteScalarFieldEnum[]
  }

  /**
   * Title without action
   */
  export type TitleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Title
     */
    select?: TitleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Title
     */
    omit?: TitleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TitleInclude<ExtArgs> | null
  }


  /**
   * Model BruteReport
   */

  export type AggregateBruteReport = {
    _count: BruteReportCountAggregateOutputType | null
    _avg: BruteReportAvgAggregateOutputType | null
    _sum: BruteReportSumAggregateOutputType | null
    _min: BruteReportMinAggregateOutputType | null
    _max: BruteReportMaxAggregateOutputType | null
  }

  export type BruteReportAvgAggregateOutputType = {
    count: number | null
  }

  export type BruteReportSumAggregateOutputType = {
    count: number | null
  }

  export type BruteReportMinAggregateOutputType = {
    id: string | null
    bruteId: string | null
    reason: $Enums.BruteReportReason | null
    count: number | null
    date: Date | null
    status: $Enums.BruteReportStatus | null
  }

  export type BruteReportMaxAggregateOutputType = {
    id: string | null
    bruteId: string | null
    reason: $Enums.BruteReportReason | null
    count: number | null
    date: Date | null
    status: $Enums.BruteReportStatus | null
  }

  export type BruteReportCountAggregateOutputType = {
    id: number
    bruteId: number
    reason: number
    count: number
    date: number
    status: number
    _all: number
  }


  export type BruteReportAvgAggregateInputType = {
    count?: true
  }

  export type BruteReportSumAggregateInputType = {
    count?: true
  }

  export type BruteReportMinAggregateInputType = {
    id?: true
    bruteId?: true
    reason?: true
    count?: true
    date?: true
    status?: true
  }

  export type BruteReportMaxAggregateInputType = {
    id?: true
    bruteId?: true
    reason?: true
    count?: true
    date?: true
    status?: true
  }

  export type BruteReportCountAggregateInputType = {
    id?: true
    bruteId?: true
    reason?: true
    count?: true
    date?: true
    status?: true
    _all?: true
  }

  export type BruteReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BruteReport to aggregate.
     */
    where?: BruteReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BruteReports to fetch.
     */
    orderBy?: BruteReportOrderByWithRelationInput | BruteReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BruteReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BruteReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BruteReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BruteReports
    **/
    _count?: true | BruteReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BruteReportAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BruteReportSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BruteReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BruteReportMaxAggregateInputType
  }

  export type GetBruteReportAggregateType<T extends BruteReportAggregateArgs> = {
        [P in keyof T & keyof AggregateBruteReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBruteReport[P]>
      : GetScalarType<T[P], AggregateBruteReport[P]>
  }




  export type BruteReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BruteReportWhereInput
    orderBy?: BruteReportOrderByWithAggregationInput | BruteReportOrderByWithAggregationInput[]
    by: BruteReportScalarFieldEnum[] | BruteReportScalarFieldEnum
    having?: BruteReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BruteReportCountAggregateInputType | true
    _avg?: BruteReportAvgAggregateInputType
    _sum?: BruteReportSumAggregateInputType
    _min?: BruteReportMinAggregateInputType
    _max?: BruteReportMaxAggregateInputType
  }

  export type BruteReportGroupByOutputType = {
    id: string
    bruteId: string
    reason: $Enums.BruteReportReason
    count: number
    date: Date
    status: $Enums.BruteReportStatus
    _count: BruteReportCountAggregateOutputType | null
    _avg: BruteReportAvgAggregateOutputType | null
    _sum: BruteReportSumAggregateOutputType | null
    _min: BruteReportMinAggregateOutputType | null
    _max: BruteReportMaxAggregateOutputType | null
  }

  type GetBruteReportGroupByPayload<T extends BruteReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BruteReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BruteReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BruteReportGroupByOutputType[P]>
            : GetScalarType<T[P], BruteReportGroupByOutputType[P]>
        }
      >
    >


  export type BruteReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bruteId?: boolean
    reason?: boolean
    count?: boolean
    date?: boolean
    status?: boolean
    brute?: boolean | BruteDefaultArgs<ExtArgs>
    users?: boolean | BruteReport$usersArgs<ExtArgs>
    _count?: boolean | BruteReportCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bruteReport"]>

  export type BruteReportSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bruteId?: boolean
    reason?: boolean
    count?: boolean
    date?: boolean
    status?: boolean
    brute?: boolean | BruteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bruteReport"]>

  export type BruteReportSelectScalar = {
    id?: boolean
    bruteId?: boolean
    reason?: boolean
    count?: boolean
    date?: boolean
    status?: boolean
  }

  export type BruteReportOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "bruteId" | "reason" | "count" | "date" | "status", ExtArgs["result"]["bruteReport"]>
  export type BruteReportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brute?: boolean | BruteDefaultArgs<ExtArgs>
    users?: boolean | BruteReport$usersArgs<ExtArgs>
    _count?: boolean | BruteReportCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BruteReportIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brute?: boolean | BruteDefaultArgs<ExtArgs>
  }

  export type $BruteReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BruteReport"
    objects: {
      brute: Prisma.$BrutePayload<ExtArgs>
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      bruteId: string
      reason: $Enums.BruteReportReason
      count: number
      date: Date
      status: $Enums.BruteReportStatus
    }, ExtArgs["result"]["bruteReport"]>
    composites: {}
  }

  type BruteReportGetPayload<S extends boolean | null | undefined | BruteReportDefaultArgs> = $Result.GetResult<Prisma.$BruteReportPayload, S>

  type BruteReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BruteReportFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: BruteReportCountAggregateInputType | true
    }

  export interface BruteReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BruteReport'], meta: { name: 'BruteReport' } }
    /**
     * Find zero or one BruteReport that matches the filter.
     * @param {BruteReportFindUniqueArgs} args - Arguments to find a BruteReport
     * @example
     * // Get one BruteReport
     * const bruteReport = await prisma.bruteReport.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BruteReportFindUniqueArgs>(args: SelectSubset<T, BruteReportFindUniqueArgs<ExtArgs>>): Prisma__BruteReportClient<$Result.GetResult<Prisma.$BruteReportPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one BruteReport that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BruteReportFindUniqueOrThrowArgs} args - Arguments to find a BruteReport
     * @example
     * // Get one BruteReport
     * const bruteReport = await prisma.bruteReport.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BruteReportFindUniqueOrThrowArgs>(args: SelectSubset<T, BruteReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BruteReportClient<$Result.GetResult<Prisma.$BruteReportPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first BruteReport that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BruteReportFindFirstArgs} args - Arguments to find a BruteReport
     * @example
     * // Get one BruteReport
     * const bruteReport = await prisma.bruteReport.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BruteReportFindFirstArgs>(args?: SelectSubset<T, BruteReportFindFirstArgs<ExtArgs>>): Prisma__BruteReportClient<$Result.GetResult<Prisma.$BruteReportPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first BruteReport that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BruteReportFindFirstOrThrowArgs} args - Arguments to find a BruteReport
     * @example
     * // Get one BruteReport
     * const bruteReport = await prisma.bruteReport.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BruteReportFindFirstOrThrowArgs>(args?: SelectSubset<T, BruteReportFindFirstOrThrowArgs<ExtArgs>>): Prisma__BruteReportClient<$Result.GetResult<Prisma.$BruteReportPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more BruteReports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BruteReportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BruteReports
     * const bruteReports = await prisma.bruteReport.findMany()
     * 
     * // Get first 10 BruteReports
     * const bruteReports = await prisma.bruteReport.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bruteReportWithIdOnly = await prisma.bruteReport.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BruteReportFindManyArgs>(args?: SelectSubset<T, BruteReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BruteReportPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a BruteReport.
     * @param {BruteReportCreateArgs} args - Arguments to create a BruteReport.
     * @example
     * // Create one BruteReport
     * const BruteReport = await prisma.bruteReport.create({
     *   data: {
     *     // ... data to create a BruteReport
     *   }
     * })
     * 
     */
    create<T extends BruteReportCreateArgs>(args: SelectSubset<T, BruteReportCreateArgs<ExtArgs>>): Prisma__BruteReportClient<$Result.GetResult<Prisma.$BruteReportPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many BruteReports.
     * @param {BruteReportCreateManyArgs} args - Arguments to create many BruteReports.
     * @example
     * // Create many BruteReports
     * const bruteReport = await prisma.bruteReport.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BruteReportCreateManyArgs>(args?: SelectSubset<T, BruteReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BruteReports and returns the data saved in the database.
     * @param {BruteReportCreateManyAndReturnArgs} args - Arguments to create many BruteReports.
     * @example
     * // Create many BruteReports
     * const bruteReport = await prisma.bruteReport.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BruteReports and only return the `id`
     * const bruteReportWithIdOnly = await prisma.bruteReport.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BruteReportCreateManyAndReturnArgs>(args?: SelectSubset<T, BruteReportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BruteReportPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a BruteReport.
     * @param {BruteReportDeleteArgs} args - Arguments to delete one BruteReport.
     * @example
     * // Delete one BruteReport
     * const BruteReport = await prisma.bruteReport.delete({
     *   where: {
     *     // ... filter to delete one BruteReport
     *   }
     * })
     * 
     */
    delete<T extends BruteReportDeleteArgs>(args: SelectSubset<T, BruteReportDeleteArgs<ExtArgs>>): Prisma__BruteReportClient<$Result.GetResult<Prisma.$BruteReportPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one BruteReport.
     * @param {BruteReportUpdateArgs} args - Arguments to update one BruteReport.
     * @example
     * // Update one BruteReport
     * const bruteReport = await prisma.bruteReport.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BruteReportUpdateArgs>(args: SelectSubset<T, BruteReportUpdateArgs<ExtArgs>>): Prisma__BruteReportClient<$Result.GetResult<Prisma.$BruteReportPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more BruteReports.
     * @param {BruteReportDeleteManyArgs} args - Arguments to filter BruteReports to delete.
     * @example
     * // Delete a few BruteReports
     * const { count } = await prisma.bruteReport.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BruteReportDeleteManyArgs>(args?: SelectSubset<T, BruteReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BruteReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BruteReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BruteReports
     * const bruteReport = await prisma.bruteReport.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BruteReportUpdateManyArgs>(args: SelectSubset<T, BruteReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BruteReport.
     * @param {BruteReportUpsertArgs} args - Arguments to update or create a BruteReport.
     * @example
     * // Update or create a BruteReport
     * const bruteReport = await prisma.bruteReport.upsert({
     *   create: {
     *     // ... data to create a BruteReport
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BruteReport we want to update
     *   }
     * })
     */
    upsert<T extends BruteReportUpsertArgs>(args: SelectSubset<T, BruteReportUpsertArgs<ExtArgs>>): Prisma__BruteReportClient<$Result.GetResult<Prisma.$BruteReportPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of BruteReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BruteReportCountArgs} args - Arguments to filter BruteReports to count.
     * @example
     * // Count the number of BruteReports
     * const count = await prisma.bruteReport.count({
     *   where: {
     *     // ... the filter for the BruteReports we want to count
     *   }
     * })
    **/
    count<T extends BruteReportCountArgs>(
      args?: Subset<T, BruteReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BruteReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BruteReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BruteReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BruteReportAggregateArgs>(args: Subset<T, BruteReportAggregateArgs>): Prisma.PrismaPromise<GetBruteReportAggregateType<T>>

    /**
     * Group by BruteReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BruteReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BruteReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BruteReportGroupByArgs['orderBy'] }
        : { orderBy?: BruteReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BruteReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBruteReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BruteReport model
   */
  readonly fields: BruteReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BruteReport.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BruteReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    brute<T extends BruteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BruteDefaultArgs<ExtArgs>>): Prisma__BruteClient<$Result.GetResult<Prisma.$BrutePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    users<T extends BruteReport$usersArgs<ExtArgs> = {}>(args?: Subset<T, BruteReport$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BruteReport model
   */ 
  interface BruteReportFieldRefs {
    readonly id: FieldRef<"BruteReport", 'String'>
    readonly bruteId: FieldRef<"BruteReport", 'String'>
    readonly reason: FieldRef<"BruteReport", 'BruteReportReason'>
    readonly count: FieldRef<"BruteReport", 'Int'>
    readonly date: FieldRef<"BruteReport", 'DateTime'>
    readonly status: FieldRef<"BruteReport", 'BruteReportStatus'>
  }
    

  // Custom InputTypes
  /**
   * BruteReport findUnique
   */
  export type BruteReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BruteReport
     */
    select?: BruteReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BruteReport
     */
    omit?: BruteReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteReportInclude<ExtArgs> | null
    /**
     * Filter, which BruteReport to fetch.
     */
    where: BruteReportWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BruteReport findUniqueOrThrow
   */
  export type BruteReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BruteReport
     */
    select?: BruteReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BruteReport
     */
    omit?: BruteReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteReportInclude<ExtArgs> | null
    /**
     * Filter, which BruteReport to fetch.
     */
    where: BruteReportWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BruteReport findFirst
   */
  export type BruteReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BruteReport
     */
    select?: BruteReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BruteReport
     */
    omit?: BruteReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteReportInclude<ExtArgs> | null
    /**
     * Filter, which BruteReport to fetch.
     */
    where?: BruteReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BruteReports to fetch.
     */
    orderBy?: BruteReportOrderByWithRelationInput | BruteReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BruteReports.
     */
    cursor?: BruteReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BruteReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BruteReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BruteReports.
     */
    distinct?: BruteReportScalarFieldEnum | BruteReportScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BruteReport findFirstOrThrow
   */
  export type BruteReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BruteReport
     */
    select?: BruteReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BruteReport
     */
    omit?: BruteReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteReportInclude<ExtArgs> | null
    /**
     * Filter, which BruteReport to fetch.
     */
    where?: BruteReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BruteReports to fetch.
     */
    orderBy?: BruteReportOrderByWithRelationInput | BruteReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BruteReports.
     */
    cursor?: BruteReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BruteReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BruteReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BruteReports.
     */
    distinct?: BruteReportScalarFieldEnum | BruteReportScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BruteReport findMany
   */
  export type BruteReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BruteReport
     */
    select?: BruteReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BruteReport
     */
    omit?: BruteReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteReportInclude<ExtArgs> | null
    /**
     * Filter, which BruteReports to fetch.
     */
    where?: BruteReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BruteReports to fetch.
     */
    orderBy?: BruteReportOrderByWithRelationInput | BruteReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BruteReports.
     */
    cursor?: BruteReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BruteReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BruteReports.
     */
    skip?: number
    distinct?: BruteReportScalarFieldEnum | BruteReportScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BruteReport create
   */
  export type BruteReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BruteReport
     */
    select?: BruteReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BruteReport
     */
    omit?: BruteReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteReportInclude<ExtArgs> | null
    /**
     * The data needed to create a BruteReport.
     */
    data: XOR<BruteReportCreateInput, BruteReportUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BruteReport createMany
   */
  export type BruteReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BruteReports.
     */
    data: BruteReportCreateManyInput | BruteReportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BruteReport createManyAndReturn
   */
  export type BruteReportCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BruteReport
     */
    select?: BruteReportSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BruteReport
     */
    omit?: BruteReportOmit<ExtArgs> | null
    /**
     * The data used to create many BruteReports.
     */
    data: BruteReportCreateManyInput | BruteReportCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteReportIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BruteReport update
   */
  export type BruteReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BruteReport
     */
    select?: BruteReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BruteReport
     */
    omit?: BruteReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteReportInclude<ExtArgs> | null
    /**
     * The data needed to update a BruteReport.
     */
    data: XOR<BruteReportUpdateInput, BruteReportUncheckedUpdateInput>
    /**
     * Choose, which BruteReport to update.
     */
    where: BruteReportWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BruteReport updateMany
   */
  export type BruteReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BruteReports.
     */
    data: XOR<BruteReportUpdateManyMutationInput, BruteReportUncheckedUpdateManyInput>
    /**
     * Filter which BruteReports to update
     */
    where?: BruteReportWhereInput
  }

  /**
   * BruteReport upsert
   */
  export type BruteReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BruteReport
     */
    select?: BruteReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BruteReport
     */
    omit?: BruteReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteReportInclude<ExtArgs> | null
    /**
     * The filter to search for the BruteReport to update in case it exists.
     */
    where: BruteReportWhereUniqueInput
    /**
     * In case the BruteReport found by the `where` argument doesn't exist, create a new BruteReport with this data.
     */
    create: XOR<BruteReportCreateInput, BruteReportUncheckedCreateInput>
    /**
     * In case the BruteReport was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BruteReportUpdateInput, BruteReportUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BruteReport delete
   */
  export type BruteReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BruteReport
     */
    select?: BruteReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BruteReport
     */
    omit?: BruteReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteReportInclude<ExtArgs> | null
    /**
     * Filter which BruteReport to delete.
     */
    where: BruteReportWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BruteReport deleteMany
   */
  export type BruteReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BruteReports to delete
     */
    where?: BruteReportWhereInput
  }

  /**
   * BruteReport.users
   */
  export type BruteReport$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * BruteReport without action
   */
  export type BruteReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BruteReport
     */
    select?: BruteReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BruteReport
     */
    omit?: BruteReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteReportInclude<ExtArgs> | null
  }


  /**
   * Model ServerState
   */

  export type AggregateServerState = {
    _count: ServerStateCountAggregateOutputType | null
    _min: ServerStateMinAggregateOutputType | null
    _max: ServerStateMaxAggregateOutputType | null
  }

  export type ServerStateMinAggregateOutputType = {
    id: string | null
    globalTournamentValid: boolean | null
    modifiersEndAt: Date | null
  }

  export type ServerStateMaxAggregateOutputType = {
    id: string | null
    globalTournamentValid: boolean | null
    modifiersEndAt: Date | null
  }

  export type ServerStateCountAggregateOutputType = {
    id: number
    globalTournamentValid: number
    activeModifiers: number
    modifiersEndAt: number
    nextModifiers: number
    _all: number
  }


  export type ServerStateMinAggregateInputType = {
    id?: true
    globalTournamentValid?: true
    modifiersEndAt?: true
  }

  export type ServerStateMaxAggregateInputType = {
    id?: true
    globalTournamentValid?: true
    modifiersEndAt?: true
  }

  export type ServerStateCountAggregateInputType = {
    id?: true
    globalTournamentValid?: true
    activeModifiers?: true
    modifiersEndAt?: true
    nextModifiers?: true
    _all?: true
  }

  export type ServerStateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServerState to aggregate.
     */
    where?: ServerStateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServerStates to fetch.
     */
    orderBy?: ServerStateOrderByWithRelationInput | ServerStateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServerStateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServerStates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServerStates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ServerStates
    **/
    _count?: true | ServerStateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServerStateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServerStateMaxAggregateInputType
  }

  export type GetServerStateAggregateType<T extends ServerStateAggregateArgs> = {
        [P in keyof T & keyof AggregateServerState]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServerState[P]>
      : GetScalarType<T[P], AggregateServerState[P]>
  }




  export type ServerStateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServerStateWhereInput
    orderBy?: ServerStateOrderByWithAggregationInput | ServerStateOrderByWithAggregationInput[]
    by: ServerStateScalarFieldEnum[] | ServerStateScalarFieldEnum
    having?: ServerStateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServerStateCountAggregateInputType | true
    _min?: ServerStateMinAggregateInputType
    _max?: ServerStateMaxAggregateInputType
  }

  export type ServerStateGroupByOutputType = {
    id: string
    globalTournamentValid: boolean
    activeModifiers: $Enums.FightModifier[]
    modifiersEndAt: Date | null
    nextModifiers: $Enums.FightModifier[]
    _count: ServerStateCountAggregateOutputType | null
    _min: ServerStateMinAggregateOutputType | null
    _max: ServerStateMaxAggregateOutputType | null
  }

  type GetServerStateGroupByPayload<T extends ServerStateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServerStateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServerStateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServerStateGroupByOutputType[P]>
            : GetScalarType<T[P], ServerStateGroupByOutputType[P]>
        }
      >
    >


  export type ServerStateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    globalTournamentValid?: boolean
    activeModifiers?: boolean
    modifiersEndAt?: boolean
    nextModifiers?: boolean
  }, ExtArgs["result"]["serverState"]>

  export type ServerStateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    globalTournamentValid?: boolean
    activeModifiers?: boolean
    modifiersEndAt?: boolean
    nextModifiers?: boolean
  }, ExtArgs["result"]["serverState"]>

  export type ServerStateSelectScalar = {
    id?: boolean
    globalTournamentValid?: boolean
    activeModifiers?: boolean
    modifiersEndAt?: boolean
    nextModifiers?: boolean
  }

  export type ServerStateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "globalTournamentValid" | "activeModifiers" | "modifiersEndAt" | "nextModifiers", ExtArgs["result"]["serverState"]>

  export type $ServerStatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ServerState"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      globalTournamentValid: boolean
      activeModifiers: $Enums.FightModifier[]
      modifiersEndAt: Date | null
      nextModifiers: $Enums.FightModifier[]
    }, ExtArgs["result"]["serverState"]>
    composites: {}
  }

  type ServerStateGetPayload<S extends boolean | null | undefined | ServerStateDefaultArgs> = $Result.GetResult<Prisma.$ServerStatePayload, S>

  type ServerStateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ServerStateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: ServerStateCountAggregateInputType | true
    }

  export interface ServerStateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ServerState'], meta: { name: 'ServerState' } }
    /**
     * Find zero or one ServerState that matches the filter.
     * @param {ServerStateFindUniqueArgs} args - Arguments to find a ServerState
     * @example
     * // Get one ServerState
     * const serverState = await prisma.serverState.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ServerStateFindUniqueArgs>(args: SelectSubset<T, ServerStateFindUniqueArgs<ExtArgs>>): Prisma__ServerStateClient<$Result.GetResult<Prisma.$ServerStatePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one ServerState that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ServerStateFindUniqueOrThrowArgs} args - Arguments to find a ServerState
     * @example
     * // Get one ServerState
     * const serverState = await prisma.serverState.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ServerStateFindUniqueOrThrowArgs>(args: SelectSubset<T, ServerStateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ServerStateClient<$Result.GetResult<Prisma.$ServerStatePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first ServerState that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServerStateFindFirstArgs} args - Arguments to find a ServerState
     * @example
     * // Get one ServerState
     * const serverState = await prisma.serverState.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ServerStateFindFirstArgs>(args?: SelectSubset<T, ServerStateFindFirstArgs<ExtArgs>>): Prisma__ServerStateClient<$Result.GetResult<Prisma.$ServerStatePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first ServerState that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServerStateFindFirstOrThrowArgs} args - Arguments to find a ServerState
     * @example
     * // Get one ServerState
     * const serverState = await prisma.serverState.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ServerStateFindFirstOrThrowArgs>(args?: SelectSubset<T, ServerStateFindFirstOrThrowArgs<ExtArgs>>): Prisma__ServerStateClient<$Result.GetResult<Prisma.$ServerStatePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more ServerStates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServerStateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ServerStates
     * const serverStates = await prisma.serverState.findMany()
     * 
     * // Get first 10 ServerStates
     * const serverStates = await prisma.serverState.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serverStateWithIdOnly = await prisma.serverState.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ServerStateFindManyArgs>(args?: SelectSubset<T, ServerStateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServerStatePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a ServerState.
     * @param {ServerStateCreateArgs} args - Arguments to create a ServerState.
     * @example
     * // Create one ServerState
     * const ServerState = await prisma.serverState.create({
     *   data: {
     *     // ... data to create a ServerState
     *   }
     * })
     * 
     */
    create<T extends ServerStateCreateArgs>(args: SelectSubset<T, ServerStateCreateArgs<ExtArgs>>): Prisma__ServerStateClient<$Result.GetResult<Prisma.$ServerStatePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many ServerStates.
     * @param {ServerStateCreateManyArgs} args - Arguments to create many ServerStates.
     * @example
     * // Create many ServerStates
     * const serverState = await prisma.serverState.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ServerStateCreateManyArgs>(args?: SelectSubset<T, ServerStateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ServerStates and returns the data saved in the database.
     * @param {ServerStateCreateManyAndReturnArgs} args - Arguments to create many ServerStates.
     * @example
     * // Create many ServerStates
     * const serverState = await prisma.serverState.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ServerStates and only return the `id`
     * const serverStateWithIdOnly = await prisma.serverState.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ServerStateCreateManyAndReturnArgs>(args?: SelectSubset<T, ServerStateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServerStatePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a ServerState.
     * @param {ServerStateDeleteArgs} args - Arguments to delete one ServerState.
     * @example
     * // Delete one ServerState
     * const ServerState = await prisma.serverState.delete({
     *   where: {
     *     // ... filter to delete one ServerState
     *   }
     * })
     * 
     */
    delete<T extends ServerStateDeleteArgs>(args: SelectSubset<T, ServerStateDeleteArgs<ExtArgs>>): Prisma__ServerStateClient<$Result.GetResult<Prisma.$ServerStatePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one ServerState.
     * @param {ServerStateUpdateArgs} args - Arguments to update one ServerState.
     * @example
     * // Update one ServerState
     * const serverState = await prisma.serverState.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ServerStateUpdateArgs>(args: SelectSubset<T, ServerStateUpdateArgs<ExtArgs>>): Prisma__ServerStateClient<$Result.GetResult<Prisma.$ServerStatePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more ServerStates.
     * @param {ServerStateDeleteManyArgs} args - Arguments to filter ServerStates to delete.
     * @example
     * // Delete a few ServerStates
     * const { count } = await prisma.serverState.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ServerStateDeleteManyArgs>(args?: SelectSubset<T, ServerStateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServerStates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServerStateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ServerStates
     * const serverState = await prisma.serverState.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ServerStateUpdateManyArgs>(args: SelectSubset<T, ServerStateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ServerState.
     * @param {ServerStateUpsertArgs} args - Arguments to update or create a ServerState.
     * @example
     * // Update or create a ServerState
     * const serverState = await prisma.serverState.upsert({
     *   create: {
     *     // ... data to create a ServerState
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ServerState we want to update
     *   }
     * })
     */
    upsert<T extends ServerStateUpsertArgs>(args: SelectSubset<T, ServerStateUpsertArgs<ExtArgs>>): Prisma__ServerStateClient<$Result.GetResult<Prisma.$ServerStatePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of ServerStates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServerStateCountArgs} args - Arguments to filter ServerStates to count.
     * @example
     * // Count the number of ServerStates
     * const count = await prisma.serverState.count({
     *   where: {
     *     // ... the filter for the ServerStates we want to count
     *   }
     * })
    **/
    count<T extends ServerStateCountArgs>(
      args?: Subset<T, ServerStateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServerStateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ServerState.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServerStateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServerStateAggregateArgs>(args: Subset<T, ServerStateAggregateArgs>): Prisma.PrismaPromise<GetServerStateAggregateType<T>>

    /**
     * Group by ServerState.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServerStateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServerStateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServerStateGroupByArgs['orderBy'] }
        : { orderBy?: ServerStateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServerStateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServerStateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ServerState model
   */
  readonly fields: ServerStateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ServerState.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServerStateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ServerState model
   */ 
  interface ServerStateFieldRefs {
    readonly id: FieldRef<"ServerState", 'String'>
    readonly globalTournamentValid: FieldRef<"ServerState", 'Boolean'>
    readonly activeModifiers: FieldRef<"ServerState", 'FightModifier[]'>
    readonly modifiersEndAt: FieldRef<"ServerState", 'DateTime'>
    readonly nextModifiers: FieldRef<"ServerState", 'FightModifier[]'>
  }
    

  // Custom InputTypes
  /**
   * ServerState findUnique
   */
  export type ServerStateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServerState
     */
    select?: ServerStateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServerState
     */
    omit?: ServerStateOmit<ExtArgs> | null
    /**
     * Filter, which ServerState to fetch.
     */
    where: ServerStateWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ServerState findUniqueOrThrow
   */
  export type ServerStateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServerState
     */
    select?: ServerStateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServerState
     */
    omit?: ServerStateOmit<ExtArgs> | null
    /**
     * Filter, which ServerState to fetch.
     */
    where: ServerStateWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ServerState findFirst
   */
  export type ServerStateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServerState
     */
    select?: ServerStateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServerState
     */
    omit?: ServerStateOmit<ExtArgs> | null
    /**
     * Filter, which ServerState to fetch.
     */
    where?: ServerStateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServerStates to fetch.
     */
    orderBy?: ServerStateOrderByWithRelationInput | ServerStateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServerStates.
     */
    cursor?: ServerStateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServerStates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServerStates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServerStates.
     */
    distinct?: ServerStateScalarFieldEnum | ServerStateScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ServerState findFirstOrThrow
   */
  export type ServerStateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServerState
     */
    select?: ServerStateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServerState
     */
    omit?: ServerStateOmit<ExtArgs> | null
    /**
     * Filter, which ServerState to fetch.
     */
    where?: ServerStateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServerStates to fetch.
     */
    orderBy?: ServerStateOrderByWithRelationInput | ServerStateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServerStates.
     */
    cursor?: ServerStateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServerStates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServerStates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServerStates.
     */
    distinct?: ServerStateScalarFieldEnum | ServerStateScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ServerState findMany
   */
  export type ServerStateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServerState
     */
    select?: ServerStateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServerState
     */
    omit?: ServerStateOmit<ExtArgs> | null
    /**
     * Filter, which ServerStates to fetch.
     */
    where?: ServerStateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServerStates to fetch.
     */
    orderBy?: ServerStateOrderByWithRelationInput | ServerStateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ServerStates.
     */
    cursor?: ServerStateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServerStates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServerStates.
     */
    skip?: number
    distinct?: ServerStateScalarFieldEnum | ServerStateScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ServerState create
   */
  export type ServerStateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServerState
     */
    select?: ServerStateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServerState
     */
    omit?: ServerStateOmit<ExtArgs> | null
    /**
     * The data needed to create a ServerState.
     */
    data?: XOR<ServerStateCreateInput, ServerStateUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ServerState createMany
   */
  export type ServerStateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ServerStates.
     */
    data: ServerStateCreateManyInput | ServerStateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ServerState createManyAndReturn
   */
  export type ServerStateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServerState
     */
    select?: ServerStateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ServerState
     */
    omit?: ServerStateOmit<ExtArgs> | null
    /**
     * The data used to create many ServerStates.
     */
    data: ServerStateCreateManyInput | ServerStateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ServerState update
   */
  export type ServerStateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServerState
     */
    select?: ServerStateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServerState
     */
    omit?: ServerStateOmit<ExtArgs> | null
    /**
     * The data needed to update a ServerState.
     */
    data: XOR<ServerStateUpdateInput, ServerStateUncheckedUpdateInput>
    /**
     * Choose, which ServerState to update.
     */
    where: ServerStateWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ServerState updateMany
   */
  export type ServerStateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ServerStates.
     */
    data: XOR<ServerStateUpdateManyMutationInput, ServerStateUncheckedUpdateManyInput>
    /**
     * Filter which ServerStates to update
     */
    where?: ServerStateWhereInput
  }

  /**
   * ServerState upsert
   */
  export type ServerStateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServerState
     */
    select?: ServerStateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServerState
     */
    omit?: ServerStateOmit<ExtArgs> | null
    /**
     * The filter to search for the ServerState to update in case it exists.
     */
    where: ServerStateWhereUniqueInput
    /**
     * In case the ServerState found by the `where` argument doesn't exist, create a new ServerState with this data.
     */
    create: XOR<ServerStateCreateInput, ServerStateUncheckedCreateInput>
    /**
     * In case the ServerState was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServerStateUpdateInput, ServerStateUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ServerState delete
   */
  export type ServerStateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServerState
     */
    select?: ServerStateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServerState
     */
    omit?: ServerStateOmit<ExtArgs> | null
    /**
     * Filter which ServerState to delete.
     */
    where: ServerStateWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ServerState deleteMany
   */
  export type ServerStateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServerStates to delete
     */
    where?: ServerStateWhereInput
  }

  /**
   * ServerState without action
   */
  export type ServerStateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServerState
     */
    select?: ServerStateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServerState
     */
    omit?: ServerStateOmit<ExtArgs> | null
  }


  /**
   * Model BannedWord
   */

  export type AggregateBannedWord = {
    _count: BannedWordCountAggregateOutputType | null
    _min: BannedWordMinAggregateOutputType | null
    _max: BannedWordMaxAggregateOutputType | null
  }

  export type BannedWordMinAggregateOutputType = {
    id: string | null
    word: string | null
  }

  export type BannedWordMaxAggregateOutputType = {
    id: string | null
    word: string | null
  }

  export type BannedWordCountAggregateOutputType = {
    id: number
    word: number
    _all: number
  }


  export type BannedWordMinAggregateInputType = {
    id?: true
    word?: true
  }

  export type BannedWordMaxAggregateInputType = {
    id?: true
    word?: true
  }

  export type BannedWordCountAggregateInputType = {
    id?: true
    word?: true
    _all?: true
  }

  export type BannedWordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BannedWord to aggregate.
     */
    where?: BannedWordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BannedWords to fetch.
     */
    orderBy?: BannedWordOrderByWithRelationInput | BannedWordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BannedWordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BannedWords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BannedWords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BannedWords
    **/
    _count?: true | BannedWordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BannedWordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BannedWordMaxAggregateInputType
  }

  export type GetBannedWordAggregateType<T extends BannedWordAggregateArgs> = {
        [P in keyof T & keyof AggregateBannedWord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBannedWord[P]>
      : GetScalarType<T[P], AggregateBannedWord[P]>
  }




  export type BannedWordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BannedWordWhereInput
    orderBy?: BannedWordOrderByWithAggregationInput | BannedWordOrderByWithAggregationInput[]
    by: BannedWordScalarFieldEnum[] | BannedWordScalarFieldEnum
    having?: BannedWordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BannedWordCountAggregateInputType | true
    _min?: BannedWordMinAggregateInputType
    _max?: BannedWordMaxAggregateInputType
  }

  export type BannedWordGroupByOutputType = {
    id: string
    word: string
    _count: BannedWordCountAggregateOutputType | null
    _min: BannedWordMinAggregateOutputType | null
    _max: BannedWordMaxAggregateOutputType | null
  }

  type GetBannedWordGroupByPayload<T extends BannedWordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BannedWordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BannedWordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BannedWordGroupByOutputType[P]>
            : GetScalarType<T[P], BannedWordGroupByOutputType[P]>
        }
      >
    >


  export type BannedWordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    word?: boolean
  }, ExtArgs["result"]["bannedWord"]>

  export type BannedWordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    word?: boolean
  }, ExtArgs["result"]["bannedWord"]>

  export type BannedWordSelectScalar = {
    id?: boolean
    word?: boolean
  }

  export type BannedWordOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "word", ExtArgs["result"]["bannedWord"]>

  export type $BannedWordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BannedWord"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      word: string
    }, ExtArgs["result"]["bannedWord"]>
    composites: {}
  }

  type BannedWordGetPayload<S extends boolean | null | undefined | BannedWordDefaultArgs> = $Result.GetResult<Prisma.$BannedWordPayload, S>

  type BannedWordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BannedWordFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: BannedWordCountAggregateInputType | true
    }

  export interface BannedWordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BannedWord'], meta: { name: 'BannedWord' } }
    /**
     * Find zero or one BannedWord that matches the filter.
     * @param {BannedWordFindUniqueArgs} args - Arguments to find a BannedWord
     * @example
     * // Get one BannedWord
     * const bannedWord = await prisma.bannedWord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BannedWordFindUniqueArgs>(args: SelectSubset<T, BannedWordFindUniqueArgs<ExtArgs>>): Prisma__BannedWordClient<$Result.GetResult<Prisma.$BannedWordPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one BannedWord that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BannedWordFindUniqueOrThrowArgs} args - Arguments to find a BannedWord
     * @example
     * // Get one BannedWord
     * const bannedWord = await prisma.bannedWord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BannedWordFindUniqueOrThrowArgs>(args: SelectSubset<T, BannedWordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BannedWordClient<$Result.GetResult<Prisma.$BannedWordPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first BannedWord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannedWordFindFirstArgs} args - Arguments to find a BannedWord
     * @example
     * // Get one BannedWord
     * const bannedWord = await prisma.bannedWord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BannedWordFindFirstArgs>(args?: SelectSubset<T, BannedWordFindFirstArgs<ExtArgs>>): Prisma__BannedWordClient<$Result.GetResult<Prisma.$BannedWordPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first BannedWord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannedWordFindFirstOrThrowArgs} args - Arguments to find a BannedWord
     * @example
     * // Get one BannedWord
     * const bannedWord = await prisma.bannedWord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BannedWordFindFirstOrThrowArgs>(args?: SelectSubset<T, BannedWordFindFirstOrThrowArgs<ExtArgs>>): Prisma__BannedWordClient<$Result.GetResult<Prisma.$BannedWordPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more BannedWords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannedWordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BannedWords
     * const bannedWords = await prisma.bannedWord.findMany()
     * 
     * // Get first 10 BannedWords
     * const bannedWords = await prisma.bannedWord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bannedWordWithIdOnly = await prisma.bannedWord.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BannedWordFindManyArgs>(args?: SelectSubset<T, BannedWordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BannedWordPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a BannedWord.
     * @param {BannedWordCreateArgs} args - Arguments to create a BannedWord.
     * @example
     * // Create one BannedWord
     * const BannedWord = await prisma.bannedWord.create({
     *   data: {
     *     // ... data to create a BannedWord
     *   }
     * })
     * 
     */
    create<T extends BannedWordCreateArgs>(args: SelectSubset<T, BannedWordCreateArgs<ExtArgs>>): Prisma__BannedWordClient<$Result.GetResult<Prisma.$BannedWordPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many BannedWords.
     * @param {BannedWordCreateManyArgs} args - Arguments to create many BannedWords.
     * @example
     * // Create many BannedWords
     * const bannedWord = await prisma.bannedWord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BannedWordCreateManyArgs>(args?: SelectSubset<T, BannedWordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BannedWords and returns the data saved in the database.
     * @param {BannedWordCreateManyAndReturnArgs} args - Arguments to create many BannedWords.
     * @example
     * // Create many BannedWords
     * const bannedWord = await prisma.bannedWord.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BannedWords and only return the `id`
     * const bannedWordWithIdOnly = await prisma.bannedWord.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BannedWordCreateManyAndReturnArgs>(args?: SelectSubset<T, BannedWordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BannedWordPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a BannedWord.
     * @param {BannedWordDeleteArgs} args - Arguments to delete one BannedWord.
     * @example
     * // Delete one BannedWord
     * const BannedWord = await prisma.bannedWord.delete({
     *   where: {
     *     // ... filter to delete one BannedWord
     *   }
     * })
     * 
     */
    delete<T extends BannedWordDeleteArgs>(args: SelectSubset<T, BannedWordDeleteArgs<ExtArgs>>): Prisma__BannedWordClient<$Result.GetResult<Prisma.$BannedWordPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one BannedWord.
     * @param {BannedWordUpdateArgs} args - Arguments to update one BannedWord.
     * @example
     * // Update one BannedWord
     * const bannedWord = await prisma.bannedWord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BannedWordUpdateArgs>(args: SelectSubset<T, BannedWordUpdateArgs<ExtArgs>>): Prisma__BannedWordClient<$Result.GetResult<Prisma.$BannedWordPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more BannedWords.
     * @param {BannedWordDeleteManyArgs} args - Arguments to filter BannedWords to delete.
     * @example
     * // Delete a few BannedWords
     * const { count } = await prisma.bannedWord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BannedWordDeleteManyArgs>(args?: SelectSubset<T, BannedWordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BannedWords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannedWordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BannedWords
     * const bannedWord = await prisma.bannedWord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BannedWordUpdateManyArgs>(args: SelectSubset<T, BannedWordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BannedWord.
     * @param {BannedWordUpsertArgs} args - Arguments to update or create a BannedWord.
     * @example
     * // Update or create a BannedWord
     * const bannedWord = await prisma.bannedWord.upsert({
     *   create: {
     *     // ... data to create a BannedWord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BannedWord we want to update
     *   }
     * })
     */
    upsert<T extends BannedWordUpsertArgs>(args: SelectSubset<T, BannedWordUpsertArgs<ExtArgs>>): Prisma__BannedWordClient<$Result.GetResult<Prisma.$BannedWordPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of BannedWords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannedWordCountArgs} args - Arguments to filter BannedWords to count.
     * @example
     * // Count the number of BannedWords
     * const count = await prisma.bannedWord.count({
     *   where: {
     *     // ... the filter for the BannedWords we want to count
     *   }
     * })
    **/
    count<T extends BannedWordCountArgs>(
      args?: Subset<T, BannedWordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BannedWordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BannedWord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannedWordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BannedWordAggregateArgs>(args: Subset<T, BannedWordAggregateArgs>): Prisma.PrismaPromise<GetBannedWordAggregateType<T>>

    /**
     * Group by BannedWord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannedWordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BannedWordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BannedWordGroupByArgs['orderBy'] }
        : { orderBy?: BannedWordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BannedWordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBannedWordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BannedWord model
   */
  readonly fields: BannedWordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BannedWord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BannedWordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BannedWord model
   */ 
  interface BannedWordFieldRefs {
    readonly id: FieldRef<"BannedWord", 'String'>
    readonly word: FieldRef<"BannedWord", 'String'>
  }
    

  // Custom InputTypes
  /**
   * BannedWord findUnique
   */
  export type BannedWordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BannedWord
     */
    select?: BannedWordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BannedWord
     */
    omit?: BannedWordOmit<ExtArgs> | null
    /**
     * Filter, which BannedWord to fetch.
     */
    where: BannedWordWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BannedWord findUniqueOrThrow
   */
  export type BannedWordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BannedWord
     */
    select?: BannedWordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BannedWord
     */
    omit?: BannedWordOmit<ExtArgs> | null
    /**
     * Filter, which BannedWord to fetch.
     */
    where: BannedWordWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BannedWord findFirst
   */
  export type BannedWordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BannedWord
     */
    select?: BannedWordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BannedWord
     */
    omit?: BannedWordOmit<ExtArgs> | null
    /**
     * Filter, which BannedWord to fetch.
     */
    where?: BannedWordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BannedWords to fetch.
     */
    orderBy?: BannedWordOrderByWithRelationInput | BannedWordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BannedWords.
     */
    cursor?: BannedWordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BannedWords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BannedWords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BannedWords.
     */
    distinct?: BannedWordScalarFieldEnum | BannedWordScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BannedWord findFirstOrThrow
   */
  export type BannedWordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BannedWord
     */
    select?: BannedWordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BannedWord
     */
    omit?: BannedWordOmit<ExtArgs> | null
    /**
     * Filter, which BannedWord to fetch.
     */
    where?: BannedWordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BannedWords to fetch.
     */
    orderBy?: BannedWordOrderByWithRelationInput | BannedWordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BannedWords.
     */
    cursor?: BannedWordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BannedWords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BannedWords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BannedWords.
     */
    distinct?: BannedWordScalarFieldEnum | BannedWordScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BannedWord findMany
   */
  export type BannedWordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BannedWord
     */
    select?: BannedWordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BannedWord
     */
    omit?: BannedWordOmit<ExtArgs> | null
    /**
     * Filter, which BannedWords to fetch.
     */
    where?: BannedWordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BannedWords to fetch.
     */
    orderBy?: BannedWordOrderByWithRelationInput | BannedWordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BannedWords.
     */
    cursor?: BannedWordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BannedWords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BannedWords.
     */
    skip?: number
    distinct?: BannedWordScalarFieldEnum | BannedWordScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BannedWord create
   */
  export type BannedWordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BannedWord
     */
    select?: BannedWordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BannedWord
     */
    omit?: BannedWordOmit<ExtArgs> | null
    /**
     * The data needed to create a BannedWord.
     */
    data: XOR<BannedWordCreateInput, BannedWordUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BannedWord createMany
   */
  export type BannedWordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BannedWords.
     */
    data: BannedWordCreateManyInput | BannedWordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BannedWord createManyAndReturn
   */
  export type BannedWordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BannedWord
     */
    select?: BannedWordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BannedWord
     */
    omit?: BannedWordOmit<ExtArgs> | null
    /**
     * The data used to create many BannedWords.
     */
    data: BannedWordCreateManyInput | BannedWordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BannedWord update
   */
  export type BannedWordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BannedWord
     */
    select?: BannedWordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BannedWord
     */
    omit?: BannedWordOmit<ExtArgs> | null
    /**
     * The data needed to update a BannedWord.
     */
    data: XOR<BannedWordUpdateInput, BannedWordUncheckedUpdateInput>
    /**
     * Choose, which BannedWord to update.
     */
    where: BannedWordWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BannedWord updateMany
   */
  export type BannedWordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BannedWords.
     */
    data: XOR<BannedWordUpdateManyMutationInput, BannedWordUncheckedUpdateManyInput>
    /**
     * Filter which BannedWords to update
     */
    where?: BannedWordWhereInput
  }

  /**
   * BannedWord upsert
   */
  export type BannedWordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BannedWord
     */
    select?: BannedWordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BannedWord
     */
    omit?: BannedWordOmit<ExtArgs> | null
    /**
     * The filter to search for the BannedWord to update in case it exists.
     */
    where: BannedWordWhereUniqueInput
    /**
     * In case the BannedWord found by the `where` argument doesn't exist, create a new BannedWord with this data.
     */
    create: XOR<BannedWordCreateInput, BannedWordUncheckedCreateInput>
    /**
     * In case the BannedWord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BannedWordUpdateInput, BannedWordUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BannedWord delete
   */
  export type BannedWordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BannedWord
     */
    select?: BannedWordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BannedWord
     */
    omit?: BannedWordOmit<ExtArgs> | null
    /**
     * Filter which BannedWord to delete.
     */
    where: BannedWordWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BannedWord deleteMany
   */
  export type BannedWordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BannedWords to delete
     */
    where?: BannedWordWhereInput
  }

  /**
   * BannedWord without action
   */
  export type BannedWordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BannedWord
     */
    select?: BannedWordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BannedWord
     */
    omit?: BannedWordOmit<ExtArgs> | null
  }


  /**
   * Model BannedIp
   */

  export type AggregateBannedIp = {
    _count: BannedIpCountAggregateOutputType | null
    _min: BannedIpMinAggregateOutputType | null
    _max: BannedIpMaxAggregateOutputType | null
  }

  export type BannedIpMinAggregateOutputType = {
    id: string | null
  }

  export type BannedIpMaxAggregateOutputType = {
    id: string | null
  }

  export type BannedIpCountAggregateOutputType = {
    id: number
    _all: number
  }


  export type BannedIpMinAggregateInputType = {
    id?: true
  }

  export type BannedIpMaxAggregateInputType = {
    id?: true
  }

  export type BannedIpCountAggregateInputType = {
    id?: true
    _all?: true
  }

  export type BannedIpAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BannedIp to aggregate.
     */
    where?: BannedIpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BannedIps to fetch.
     */
    orderBy?: BannedIpOrderByWithRelationInput | BannedIpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BannedIpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BannedIps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BannedIps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BannedIps
    **/
    _count?: true | BannedIpCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BannedIpMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BannedIpMaxAggregateInputType
  }

  export type GetBannedIpAggregateType<T extends BannedIpAggregateArgs> = {
        [P in keyof T & keyof AggregateBannedIp]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBannedIp[P]>
      : GetScalarType<T[P], AggregateBannedIp[P]>
  }




  export type BannedIpGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BannedIpWhereInput
    orderBy?: BannedIpOrderByWithAggregationInput | BannedIpOrderByWithAggregationInput[]
    by: BannedIpScalarFieldEnum[] | BannedIpScalarFieldEnum
    having?: BannedIpScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BannedIpCountAggregateInputType | true
    _min?: BannedIpMinAggregateInputType
    _max?: BannedIpMaxAggregateInputType
  }

  export type BannedIpGroupByOutputType = {
    id: string
    _count: BannedIpCountAggregateOutputType | null
    _min: BannedIpMinAggregateOutputType | null
    _max: BannedIpMaxAggregateOutputType | null
  }

  type GetBannedIpGroupByPayload<T extends BannedIpGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BannedIpGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BannedIpGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BannedIpGroupByOutputType[P]>
            : GetScalarType<T[P], BannedIpGroupByOutputType[P]>
        }
      >
    >


  export type BannedIpSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
  }, ExtArgs["result"]["bannedIp"]>

  export type BannedIpSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
  }, ExtArgs["result"]["bannedIp"]>

  export type BannedIpSelectScalar = {
    id?: boolean
  }

  export type BannedIpOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id", ExtArgs["result"]["bannedIp"]>

  export type $BannedIpPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BannedIp"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
    }, ExtArgs["result"]["bannedIp"]>
    composites: {}
  }

  type BannedIpGetPayload<S extends boolean | null | undefined | BannedIpDefaultArgs> = $Result.GetResult<Prisma.$BannedIpPayload, S>

  type BannedIpCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BannedIpFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: BannedIpCountAggregateInputType | true
    }

  export interface BannedIpDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BannedIp'], meta: { name: 'BannedIp' } }
    /**
     * Find zero or one BannedIp that matches the filter.
     * @param {BannedIpFindUniqueArgs} args - Arguments to find a BannedIp
     * @example
     * // Get one BannedIp
     * const bannedIp = await prisma.bannedIp.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BannedIpFindUniqueArgs>(args: SelectSubset<T, BannedIpFindUniqueArgs<ExtArgs>>): Prisma__BannedIpClient<$Result.GetResult<Prisma.$BannedIpPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one BannedIp that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BannedIpFindUniqueOrThrowArgs} args - Arguments to find a BannedIp
     * @example
     * // Get one BannedIp
     * const bannedIp = await prisma.bannedIp.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BannedIpFindUniqueOrThrowArgs>(args: SelectSubset<T, BannedIpFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BannedIpClient<$Result.GetResult<Prisma.$BannedIpPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first BannedIp that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannedIpFindFirstArgs} args - Arguments to find a BannedIp
     * @example
     * // Get one BannedIp
     * const bannedIp = await prisma.bannedIp.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BannedIpFindFirstArgs>(args?: SelectSubset<T, BannedIpFindFirstArgs<ExtArgs>>): Prisma__BannedIpClient<$Result.GetResult<Prisma.$BannedIpPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first BannedIp that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannedIpFindFirstOrThrowArgs} args - Arguments to find a BannedIp
     * @example
     * // Get one BannedIp
     * const bannedIp = await prisma.bannedIp.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BannedIpFindFirstOrThrowArgs>(args?: SelectSubset<T, BannedIpFindFirstOrThrowArgs<ExtArgs>>): Prisma__BannedIpClient<$Result.GetResult<Prisma.$BannedIpPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more BannedIps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannedIpFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BannedIps
     * const bannedIps = await prisma.bannedIp.findMany()
     * 
     * // Get first 10 BannedIps
     * const bannedIps = await prisma.bannedIp.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bannedIpWithIdOnly = await prisma.bannedIp.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BannedIpFindManyArgs>(args?: SelectSubset<T, BannedIpFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BannedIpPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a BannedIp.
     * @param {BannedIpCreateArgs} args - Arguments to create a BannedIp.
     * @example
     * // Create one BannedIp
     * const BannedIp = await prisma.bannedIp.create({
     *   data: {
     *     // ... data to create a BannedIp
     *   }
     * })
     * 
     */
    create<T extends BannedIpCreateArgs>(args: SelectSubset<T, BannedIpCreateArgs<ExtArgs>>): Prisma__BannedIpClient<$Result.GetResult<Prisma.$BannedIpPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many BannedIps.
     * @param {BannedIpCreateManyArgs} args - Arguments to create many BannedIps.
     * @example
     * // Create many BannedIps
     * const bannedIp = await prisma.bannedIp.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BannedIpCreateManyArgs>(args?: SelectSubset<T, BannedIpCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BannedIps and returns the data saved in the database.
     * @param {BannedIpCreateManyAndReturnArgs} args - Arguments to create many BannedIps.
     * @example
     * // Create many BannedIps
     * const bannedIp = await prisma.bannedIp.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BannedIps and only return the `id`
     * const bannedIpWithIdOnly = await prisma.bannedIp.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BannedIpCreateManyAndReturnArgs>(args?: SelectSubset<T, BannedIpCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BannedIpPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a BannedIp.
     * @param {BannedIpDeleteArgs} args - Arguments to delete one BannedIp.
     * @example
     * // Delete one BannedIp
     * const BannedIp = await prisma.bannedIp.delete({
     *   where: {
     *     // ... filter to delete one BannedIp
     *   }
     * })
     * 
     */
    delete<T extends BannedIpDeleteArgs>(args: SelectSubset<T, BannedIpDeleteArgs<ExtArgs>>): Prisma__BannedIpClient<$Result.GetResult<Prisma.$BannedIpPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one BannedIp.
     * @param {BannedIpUpdateArgs} args - Arguments to update one BannedIp.
     * @example
     * // Update one BannedIp
     * const bannedIp = await prisma.bannedIp.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BannedIpUpdateArgs>(args: SelectSubset<T, BannedIpUpdateArgs<ExtArgs>>): Prisma__BannedIpClient<$Result.GetResult<Prisma.$BannedIpPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more BannedIps.
     * @param {BannedIpDeleteManyArgs} args - Arguments to filter BannedIps to delete.
     * @example
     * // Delete a few BannedIps
     * const { count } = await prisma.bannedIp.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BannedIpDeleteManyArgs>(args?: SelectSubset<T, BannedIpDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BannedIps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannedIpUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BannedIps
     * const bannedIp = await prisma.bannedIp.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BannedIpUpdateManyArgs>(args: SelectSubset<T, BannedIpUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BannedIp.
     * @param {BannedIpUpsertArgs} args - Arguments to update or create a BannedIp.
     * @example
     * // Update or create a BannedIp
     * const bannedIp = await prisma.bannedIp.upsert({
     *   create: {
     *     // ... data to create a BannedIp
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BannedIp we want to update
     *   }
     * })
     */
    upsert<T extends BannedIpUpsertArgs>(args: SelectSubset<T, BannedIpUpsertArgs<ExtArgs>>): Prisma__BannedIpClient<$Result.GetResult<Prisma.$BannedIpPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of BannedIps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannedIpCountArgs} args - Arguments to filter BannedIps to count.
     * @example
     * // Count the number of BannedIps
     * const count = await prisma.bannedIp.count({
     *   where: {
     *     // ... the filter for the BannedIps we want to count
     *   }
     * })
    **/
    count<T extends BannedIpCountArgs>(
      args?: Subset<T, BannedIpCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BannedIpCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BannedIp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannedIpAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BannedIpAggregateArgs>(args: Subset<T, BannedIpAggregateArgs>): Prisma.PrismaPromise<GetBannedIpAggregateType<T>>

    /**
     * Group by BannedIp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannedIpGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BannedIpGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BannedIpGroupByArgs['orderBy'] }
        : { orderBy?: BannedIpGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BannedIpGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBannedIpGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BannedIp model
   */
  readonly fields: BannedIpFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BannedIp.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BannedIpClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BannedIp model
   */ 
  interface BannedIpFieldRefs {
    readonly id: FieldRef<"BannedIp", 'String'>
  }
    

  // Custom InputTypes
  /**
   * BannedIp findUnique
   */
  export type BannedIpFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BannedIp
     */
    select?: BannedIpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BannedIp
     */
    omit?: BannedIpOmit<ExtArgs> | null
    /**
     * Filter, which BannedIp to fetch.
     */
    where: BannedIpWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BannedIp findUniqueOrThrow
   */
  export type BannedIpFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BannedIp
     */
    select?: BannedIpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BannedIp
     */
    omit?: BannedIpOmit<ExtArgs> | null
    /**
     * Filter, which BannedIp to fetch.
     */
    where: BannedIpWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BannedIp findFirst
   */
  export type BannedIpFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BannedIp
     */
    select?: BannedIpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BannedIp
     */
    omit?: BannedIpOmit<ExtArgs> | null
    /**
     * Filter, which BannedIp to fetch.
     */
    where?: BannedIpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BannedIps to fetch.
     */
    orderBy?: BannedIpOrderByWithRelationInput | BannedIpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BannedIps.
     */
    cursor?: BannedIpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BannedIps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BannedIps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BannedIps.
     */
    distinct?: BannedIpScalarFieldEnum | BannedIpScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BannedIp findFirstOrThrow
   */
  export type BannedIpFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BannedIp
     */
    select?: BannedIpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BannedIp
     */
    omit?: BannedIpOmit<ExtArgs> | null
    /**
     * Filter, which BannedIp to fetch.
     */
    where?: BannedIpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BannedIps to fetch.
     */
    orderBy?: BannedIpOrderByWithRelationInput | BannedIpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BannedIps.
     */
    cursor?: BannedIpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BannedIps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BannedIps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BannedIps.
     */
    distinct?: BannedIpScalarFieldEnum | BannedIpScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BannedIp findMany
   */
  export type BannedIpFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BannedIp
     */
    select?: BannedIpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BannedIp
     */
    omit?: BannedIpOmit<ExtArgs> | null
    /**
     * Filter, which BannedIps to fetch.
     */
    where?: BannedIpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BannedIps to fetch.
     */
    orderBy?: BannedIpOrderByWithRelationInput | BannedIpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BannedIps.
     */
    cursor?: BannedIpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BannedIps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BannedIps.
     */
    skip?: number
    distinct?: BannedIpScalarFieldEnum | BannedIpScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BannedIp create
   */
  export type BannedIpCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BannedIp
     */
    select?: BannedIpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BannedIp
     */
    omit?: BannedIpOmit<ExtArgs> | null
    /**
     * The data needed to create a BannedIp.
     */
    data: XOR<BannedIpCreateInput, BannedIpUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BannedIp createMany
   */
  export type BannedIpCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BannedIps.
     */
    data: BannedIpCreateManyInput | BannedIpCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BannedIp createManyAndReturn
   */
  export type BannedIpCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BannedIp
     */
    select?: BannedIpSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BannedIp
     */
    omit?: BannedIpOmit<ExtArgs> | null
    /**
     * The data used to create many BannedIps.
     */
    data: BannedIpCreateManyInput | BannedIpCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BannedIp update
   */
  export type BannedIpUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BannedIp
     */
    select?: BannedIpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BannedIp
     */
    omit?: BannedIpOmit<ExtArgs> | null
    /**
     * The data needed to update a BannedIp.
     */
    data: XOR<BannedIpUpdateInput, BannedIpUncheckedUpdateInput>
    /**
     * Choose, which BannedIp to update.
     */
    where: BannedIpWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BannedIp updateMany
   */
  export type BannedIpUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BannedIps.
     */
    data: XOR<BannedIpUpdateManyMutationInput, BannedIpUncheckedUpdateManyInput>
    /**
     * Filter which BannedIps to update
     */
    where?: BannedIpWhereInput
  }

  /**
   * BannedIp upsert
   */
  export type BannedIpUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BannedIp
     */
    select?: BannedIpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BannedIp
     */
    omit?: BannedIpOmit<ExtArgs> | null
    /**
     * The filter to search for the BannedIp to update in case it exists.
     */
    where: BannedIpWhereUniqueInput
    /**
     * In case the BannedIp found by the `where` argument doesn't exist, create a new BannedIp with this data.
     */
    create: XOR<BannedIpCreateInput, BannedIpUncheckedCreateInput>
    /**
     * In case the BannedIp was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BannedIpUpdateInput, BannedIpUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BannedIp delete
   */
  export type BannedIpDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BannedIp
     */
    select?: BannedIpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BannedIp
     */
    omit?: BannedIpOmit<ExtArgs> | null
    /**
     * Filter which BannedIp to delete.
     */
    where: BannedIpWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BannedIp deleteMany
   */
  export type BannedIpDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BannedIps to delete
     */
    where?: BannedIpWhereInput
  }

  /**
   * BannedIp without action
   */
  export type BannedIpDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BannedIp
     */
    select?: BannedIpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BannedIp
     */
    omit?: BannedIpOmit<ExtArgs> | null
  }


  /**
   * Model Clan
   */

  export type AggregateClan = {
    _count: ClanCountAggregateOutputType | null
    _avg: ClanAvgAggregateOutputType | null
    _sum: ClanSumAggregateOutputType | null
    _min: ClanMinAggregateOutputType | null
    _max: ClanMaxAggregateOutputType | null
  }

  export type ClanAvgAggregateOutputType = {
    limit: number | null
    points: number | null
    elo: number | null
    damageOnBoss: number | null
  }

  export type ClanSumAggregateOutputType = {
    limit: number | null
    points: number | null
    elo: number | null
    damageOnBoss: number | null
  }

  export type ClanMinAggregateOutputType = {
    id: string | null
    name: string | null
    deletedAt: Date | null
    limit: number | null
    points: number | null
    elo: number | null
    boss: $Enums.BossName | null
    damageOnBoss: number | null
    masterId: string | null
    participateInClanWar: boolean | null
  }

  export type ClanMaxAggregateOutputType = {
    id: string | null
    name: string | null
    deletedAt: Date | null
    limit: number | null
    points: number | null
    elo: number | null
    boss: $Enums.BossName | null
    damageOnBoss: number | null
    masterId: string | null
    participateInClanWar: boolean | null
  }

  export type ClanCountAggregateOutputType = {
    id: number
    name: number
    deletedAt: number
    limit: number
    points: number
    elo: number
    boss: number
    damageOnBoss: number
    masterId: number
    participateInClanWar: number
    _all: number
  }


  export type ClanAvgAggregateInputType = {
    limit?: true
    points?: true
    elo?: true
    damageOnBoss?: true
  }

  export type ClanSumAggregateInputType = {
    limit?: true
    points?: true
    elo?: true
    damageOnBoss?: true
  }

  export type ClanMinAggregateInputType = {
    id?: true
    name?: true
    deletedAt?: true
    limit?: true
    points?: true
    elo?: true
    boss?: true
    damageOnBoss?: true
    masterId?: true
    participateInClanWar?: true
  }

  export type ClanMaxAggregateInputType = {
    id?: true
    name?: true
    deletedAt?: true
    limit?: true
    points?: true
    elo?: true
    boss?: true
    damageOnBoss?: true
    masterId?: true
    participateInClanWar?: true
  }

  export type ClanCountAggregateInputType = {
    id?: true
    name?: true
    deletedAt?: true
    limit?: true
    points?: true
    elo?: true
    boss?: true
    damageOnBoss?: true
    masterId?: true
    participateInClanWar?: true
    _all?: true
  }

  export type ClanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clan to aggregate.
     */
    where?: ClanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clans to fetch.
     */
    orderBy?: ClanOrderByWithRelationInput | ClanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clans
    **/
    _count?: true | ClanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClanMaxAggregateInputType
  }

  export type GetClanAggregateType<T extends ClanAggregateArgs> = {
        [P in keyof T & keyof AggregateClan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClan[P]>
      : GetScalarType<T[P], AggregateClan[P]>
  }




  export type ClanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClanWhereInput
    orderBy?: ClanOrderByWithAggregationInput | ClanOrderByWithAggregationInput[]
    by: ClanScalarFieldEnum[] | ClanScalarFieldEnum
    having?: ClanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClanCountAggregateInputType | true
    _avg?: ClanAvgAggregateInputType
    _sum?: ClanSumAggregateInputType
    _min?: ClanMinAggregateInputType
    _max?: ClanMaxAggregateInputType
  }

  export type ClanGroupByOutputType = {
    id: string
    name: string
    deletedAt: Date | null
    limit: number
    points: number
    elo: number
    boss: $Enums.BossName
    damageOnBoss: number
    masterId: string | null
    participateInClanWar: boolean
    _count: ClanCountAggregateOutputType | null
    _avg: ClanAvgAggregateOutputType | null
    _sum: ClanSumAggregateOutputType | null
    _min: ClanMinAggregateOutputType | null
    _max: ClanMaxAggregateOutputType | null
  }

  type GetClanGroupByPayload<T extends ClanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClanGroupByOutputType[P]>
            : GetScalarType<T[P], ClanGroupByOutputType[P]>
        }
      >
    >


  export type ClanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    deletedAt?: boolean
    limit?: boolean
    points?: boolean
    elo?: boolean
    boss?: boolean
    damageOnBoss?: boolean
    masterId?: boolean
    participateInClanWar?: boolean
    master?: boolean | Clan$masterArgs<ExtArgs>
    brutes?: boolean | Clan$brutesArgs<ExtArgs>
    joinRequests?: boolean | Clan$joinRequestsArgs<ExtArgs>
    threads?: boolean | Clan$threadsArgs<ExtArgs>
    bossDamages?: boolean | Clan$bossDamagesArgs<ExtArgs>
    attacks?: boolean | Clan$attacksArgs<ExtArgs>
    defenses?: boolean | Clan$defensesArgs<ExtArgs>
    wins?: boolean | Clan$winsArgs<ExtArgs>
    _count?: boolean | ClanCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clan"]>

  export type ClanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    deletedAt?: boolean
    limit?: boolean
    points?: boolean
    elo?: boolean
    boss?: boolean
    damageOnBoss?: boolean
    masterId?: boolean
    participateInClanWar?: boolean
    master?: boolean | Clan$masterArgs<ExtArgs>
  }, ExtArgs["result"]["clan"]>

  export type ClanSelectScalar = {
    id?: boolean
    name?: boolean
    deletedAt?: boolean
    limit?: boolean
    points?: boolean
    elo?: boolean
    boss?: boolean
    damageOnBoss?: boolean
    masterId?: boolean
    participateInClanWar?: boolean
  }

  export type ClanOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "deletedAt" | "limit" | "points" | "elo" | "boss" | "damageOnBoss" | "masterId" | "participateInClanWar", ExtArgs["result"]["clan"]>
  export type ClanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    master?: boolean | Clan$masterArgs<ExtArgs>
    brutes?: boolean | Clan$brutesArgs<ExtArgs>
    joinRequests?: boolean | Clan$joinRequestsArgs<ExtArgs>
    threads?: boolean | Clan$threadsArgs<ExtArgs>
    bossDamages?: boolean | Clan$bossDamagesArgs<ExtArgs>
    attacks?: boolean | Clan$attacksArgs<ExtArgs>
    defenses?: boolean | Clan$defensesArgs<ExtArgs>
    wins?: boolean | Clan$winsArgs<ExtArgs>
    _count?: boolean | ClanCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    master?: boolean | Clan$masterArgs<ExtArgs>
  }

  export type $ClanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Clan"
    objects: {
      master: Prisma.$BrutePayload<ExtArgs> | null
      brutes: Prisma.$BrutePayload<ExtArgs>[]
      joinRequests: Prisma.$BrutePayload<ExtArgs>[]
      threads: Prisma.$ClanThreadPayload<ExtArgs>[]
      bossDamages: Prisma.$BossDamagePayload<ExtArgs>[]
      attacks: Prisma.$ClanWarPayload<ExtArgs>[]
      defenses: Prisma.$ClanWarPayload<ExtArgs>[]
      wins: Prisma.$ClanWarPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      deletedAt: Date | null
      limit: number
      points: number
      elo: number
      boss: $Enums.BossName
      damageOnBoss: number
      masterId: string | null
      participateInClanWar: boolean
    }, ExtArgs["result"]["clan"]>
    composites: {}
  }

  type ClanGetPayload<S extends boolean | null | undefined | ClanDefaultArgs> = $Result.GetResult<Prisma.$ClanPayload, S>

  type ClanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClanFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: ClanCountAggregateInputType | true
    }

  export interface ClanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Clan'], meta: { name: 'Clan' } }
    /**
     * Find zero or one Clan that matches the filter.
     * @param {ClanFindUniqueArgs} args - Arguments to find a Clan
     * @example
     * // Get one Clan
     * const clan = await prisma.clan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClanFindUniqueArgs>(args: SelectSubset<T, ClanFindUniqueArgs<ExtArgs>>): Prisma__ClanClient<$Result.GetResult<Prisma.$ClanPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Clan that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ClanFindUniqueOrThrowArgs} args - Arguments to find a Clan
     * @example
     * // Get one Clan
     * const clan = await prisma.clan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClanFindUniqueOrThrowArgs>(args: SelectSubset<T, ClanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClanClient<$Result.GetResult<Prisma.$ClanPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Clan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClanFindFirstArgs} args - Arguments to find a Clan
     * @example
     * // Get one Clan
     * const clan = await prisma.clan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClanFindFirstArgs>(args?: SelectSubset<T, ClanFindFirstArgs<ExtArgs>>): Prisma__ClanClient<$Result.GetResult<Prisma.$ClanPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Clan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClanFindFirstOrThrowArgs} args - Arguments to find a Clan
     * @example
     * // Get one Clan
     * const clan = await prisma.clan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClanFindFirstOrThrowArgs>(args?: SelectSubset<T, ClanFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClanClient<$Result.GetResult<Prisma.$ClanPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Clans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clans
     * const clans = await prisma.clan.findMany()
     * 
     * // Get first 10 Clans
     * const clans = await prisma.clan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clanWithIdOnly = await prisma.clan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClanFindManyArgs>(args?: SelectSubset<T, ClanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClanPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Clan.
     * @param {ClanCreateArgs} args - Arguments to create a Clan.
     * @example
     * // Create one Clan
     * const Clan = await prisma.clan.create({
     *   data: {
     *     // ... data to create a Clan
     *   }
     * })
     * 
     */
    create<T extends ClanCreateArgs>(args: SelectSubset<T, ClanCreateArgs<ExtArgs>>): Prisma__ClanClient<$Result.GetResult<Prisma.$ClanPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Clans.
     * @param {ClanCreateManyArgs} args - Arguments to create many Clans.
     * @example
     * // Create many Clans
     * const clan = await prisma.clan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClanCreateManyArgs>(args?: SelectSubset<T, ClanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Clans and returns the data saved in the database.
     * @param {ClanCreateManyAndReturnArgs} args - Arguments to create many Clans.
     * @example
     * // Create many Clans
     * const clan = await prisma.clan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Clans and only return the `id`
     * const clanWithIdOnly = await prisma.clan.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClanCreateManyAndReturnArgs>(args?: SelectSubset<T, ClanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClanPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Clan.
     * @param {ClanDeleteArgs} args - Arguments to delete one Clan.
     * @example
     * // Delete one Clan
     * const Clan = await prisma.clan.delete({
     *   where: {
     *     // ... filter to delete one Clan
     *   }
     * })
     * 
     */
    delete<T extends ClanDeleteArgs>(args: SelectSubset<T, ClanDeleteArgs<ExtArgs>>): Prisma__ClanClient<$Result.GetResult<Prisma.$ClanPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Clan.
     * @param {ClanUpdateArgs} args - Arguments to update one Clan.
     * @example
     * // Update one Clan
     * const clan = await prisma.clan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClanUpdateArgs>(args: SelectSubset<T, ClanUpdateArgs<ExtArgs>>): Prisma__ClanClient<$Result.GetResult<Prisma.$ClanPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Clans.
     * @param {ClanDeleteManyArgs} args - Arguments to filter Clans to delete.
     * @example
     * // Delete a few Clans
     * const { count } = await prisma.clan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClanDeleteManyArgs>(args?: SelectSubset<T, ClanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clans
     * const clan = await prisma.clan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClanUpdateManyArgs>(args: SelectSubset<T, ClanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Clan.
     * @param {ClanUpsertArgs} args - Arguments to update or create a Clan.
     * @example
     * // Update or create a Clan
     * const clan = await prisma.clan.upsert({
     *   create: {
     *     // ... data to create a Clan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Clan we want to update
     *   }
     * })
     */
    upsert<T extends ClanUpsertArgs>(args: SelectSubset<T, ClanUpsertArgs<ExtArgs>>): Prisma__ClanClient<$Result.GetResult<Prisma.$ClanPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Clans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClanCountArgs} args - Arguments to filter Clans to count.
     * @example
     * // Count the number of Clans
     * const count = await prisma.clan.count({
     *   where: {
     *     // ... the filter for the Clans we want to count
     *   }
     * })
    **/
    count<T extends ClanCountArgs>(
      args?: Subset<T, ClanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Clan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClanAggregateArgs>(args: Subset<T, ClanAggregateArgs>): Prisma.PrismaPromise<GetClanAggregateType<T>>

    /**
     * Group by Clan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClanGroupByArgs['orderBy'] }
        : { orderBy?: ClanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Clan model
   */
  readonly fields: ClanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Clan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    master<T extends Clan$masterArgs<ExtArgs> = {}>(args?: Subset<T, Clan$masterArgs<ExtArgs>>): Prisma__BruteClient<$Result.GetResult<Prisma.$BrutePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    brutes<T extends Clan$brutesArgs<ExtArgs> = {}>(args?: Subset<T, Clan$brutesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrutePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    joinRequests<T extends Clan$joinRequestsArgs<ExtArgs> = {}>(args?: Subset<T, Clan$joinRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrutePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    threads<T extends Clan$threadsArgs<ExtArgs> = {}>(args?: Subset<T, Clan$threadsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClanThreadPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    bossDamages<T extends Clan$bossDamagesArgs<ExtArgs> = {}>(args?: Subset<T, Clan$bossDamagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BossDamagePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    attacks<T extends Clan$attacksArgs<ExtArgs> = {}>(args?: Subset<T, Clan$attacksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClanWarPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    defenses<T extends Clan$defensesArgs<ExtArgs> = {}>(args?: Subset<T, Clan$defensesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClanWarPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    wins<T extends Clan$winsArgs<ExtArgs> = {}>(args?: Subset<T, Clan$winsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClanWarPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Clan model
   */ 
  interface ClanFieldRefs {
    readonly id: FieldRef<"Clan", 'String'>
    readonly name: FieldRef<"Clan", 'String'>
    readonly deletedAt: FieldRef<"Clan", 'DateTime'>
    readonly limit: FieldRef<"Clan", 'Int'>
    readonly points: FieldRef<"Clan", 'Int'>
    readonly elo: FieldRef<"Clan", 'Int'>
    readonly boss: FieldRef<"Clan", 'BossName'>
    readonly damageOnBoss: FieldRef<"Clan", 'Int'>
    readonly masterId: FieldRef<"Clan", 'String'>
    readonly participateInClanWar: FieldRef<"Clan", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Clan findUnique
   */
  export type ClanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clan
     */
    select?: ClanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clan
     */
    omit?: ClanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanInclude<ExtArgs> | null
    /**
     * Filter, which Clan to fetch.
     */
    where: ClanWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Clan findUniqueOrThrow
   */
  export type ClanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clan
     */
    select?: ClanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clan
     */
    omit?: ClanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanInclude<ExtArgs> | null
    /**
     * Filter, which Clan to fetch.
     */
    where: ClanWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Clan findFirst
   */
  export type ClanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clan
     */
    select?: ClanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clan
     */
    omit?: ClanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanInclude<ExtArgs> | null
    /**
     * Filter, which Clan to fetch.
     */
    where?: ClanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clans to fetch.
     */
    orderBy?: ClanOrderByWithRelationInput | ClanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clans.
     */
    cursor?: ClanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clans.
     */
    distinct?: ClanScalarFieldEnum | ClanScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Clan findFirstOrThrow
   */
  export type ClanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clan
     */
    select?: ClanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clan
     */
    omit?: ClanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanInclude<ExtArgs> | null
    /**
     * Filter, which Clan to fetch.
     */
    where?: ClanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clans to fetch.
     */
    orderBy?: ClanOrderByWithRelationInput | ClanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clans.
     */
    cursor?: ClanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clans.
     */
    distinct?: ClanScalarFieldEnum | ClanScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Clan findMany
   */
  export type ClanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clan
     */
    select?: ClanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clan
     */
    omit?: ClanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanInclude<ExtArgs> | null
    /**
     * Filter, which Clans to fetch.
     */
    where?: ClanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clans to fetch.
     */
    orderBy?: ClanOrderByWithRelationInput | ClanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clans.
     */
    cursor?: ClanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clans.
     */
    skip?: number
    distinct?: ClanScalarFieldEnum | ClanScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Clan create
   */
  export type ClanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clan
     */
    select?: ClanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clan
     */
    omit?: ClanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanInclude<ExtArgs> | null
    /**
     * The data needed to create a Clan.
     */
    data: XOR<ClanCreateInput, ClanUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Clan createMany
   */
  export type ClanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clans.
     */
    data: ClanCreateManyInput | ClanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Clan createManyAndReturn
   */
  export type ClanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clan
     */
    select?: ClanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Clan
     */
    omit?: ClanOmit<ExtArgs> | null
    /**
     * The data used to create many Clans.
     */
    data: ClanCreateManyInput | ClanCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Clan update
   */
  export type ClanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clan
     */
    select?: ClanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clan
     */
    omit?: ClanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanInclude<ExtArgs> | null
    /**
     * The data needed to update a Clan.
     */
    data: XOR<ClanUpdateInput, ClanUncheckedUpdateInput>
    /**
     * Choose, which Clan to update.
     */
    where: ClanWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Clan updateMany
   */
  export type ClanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clans.
     */
    data: XOR<ClanUpdateManyMutationInput, ClanUncheckedUpdateManyInput>
    /**
     * Filter which Clans to update
     */
    where?: ClanWhereInput
  }

  /**
   * Clan upsert
   */
  export type ClanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clan
     */
    select?: ClanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clan
     */
    omit?: ClanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanInclude<ExtArgs> | null
    /**
     * The filter to search for the Clan to update in case it exists.
     */
    where: ClanWhereUniqueInput
    /**
     * In case the Clan found by the `where` argument doesn't exist, create a new Clan with this data.
     */
    create: XOR<ClanCreateInput, ClanUncheckedCreateInput>
    /**
     * In case the Clan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClanUpdateInput, ClanUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Clan delete
   */
  export type ClanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clan
     */
    select?: ClanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clan
     */
    omit?: ClanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanInclude<ExtArgs> | null
    /**
     * Filter which Clan to delete.
     */
    where: ClanWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Clan deleteMany
   */
  export type ClanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clans to delete
     */
    where?: ClanWhereInput
  }

  /**
   * Clan.master
   */
  export type Clan$masterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brute
     */
    omit?: BruteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteInclude<ExtArgs> | null
    where?: BruteWhereInput
  }

  /**
   * Clan.brutes
   */
  export type Clan$brutesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brute
     */
    omit?: BruteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteInclude<ExtArgs> | null
    where?: BruteWhereInput
    orderBy?: BruteOrderByWithRelationInput | BruteOrderByWithRelationInput[]
    cursor?: BruteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BruteScalarFieldEnum | BruteScalarFieldEnum[]
  }

  /**
   * Clan.joinRequests
   */
  export type Clan$joinRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brute
     */
    omit?: BruteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteInclude<ExtArgs> | null
    where?: BruteWhereInput
    orderBy?: BruteOrderByWithRelationInput | BruteOrderByWithRelationInput[]
    cursor?: BruteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BruteScalarFieldEnum | BruteScalarFieldEnum[]
  }

  /**
   * Clan.threads
   */
  export type Clan$threadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanThread
     */
    select?: ClanThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanThread
     */
    omit?: ClanThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanThreadInclude<ExtArgs> | null
    where?: ClanThreadWhereInput
    orderBy?: ClanThreadOrderByWithRelationInput | ClanThreadOrderByWithRelationInput[]
    cursor?: ClanThreadWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClanThreadScalarFieldEnum | ClanThreadScalarFieldEnum[]
  }

  /**
   * Clan.bossDamages
   */
  export type Clan$bossDamagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BossDamage
     */
    select?: BossDamageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BossDamage
     */
    omit?: BossDamageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BossDamageInclude<ExtArgs> | null
    where?: BossDamageWhereInput
    orderBy?: BossDamageOrderByWithRelationInput | BossDamageOrderByWithRelationInput[]
    cursor?: BossDamageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BossDamageScalarFieldEnum | BossDamageScalarFieldEnum[]
  }

  /**
   * Clan.attacks
   */
  export type Clan$attacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanWar
     */
    select?: ClanWarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanWar
     */
    omit?: ClanWarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanWarInclude<ExtArgs> | null
    where?: ClanWarWhereInput
    orderBy?: ClanWarOrderByWithRelationInput | ClanWarOrderByWithRelationInput[]
    cursor?: ClanWarWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClanWarScalarFieldEnum | ClanWarScalarFieldEnum[]
  }

  /**
   * Clan.defenses
   */
  export type Clan$defensesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanWar
     */
    select?: ClanWarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanWar
     */
    omit?: ClanWarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanWarInclude<ExtArgs> | null
    where?: ClanWarWhereInput
    orderBy?: ClanWarOrderByWithRelationInput | ClanWarOrderByWithRelationInput[]
    cursor?: ClanWarWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClanWarScalarFieldEnum | ClanWarScalarFieldEnum[]
  }

  /**
   * Clan.wins
   */
  export type Clan$winsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanWar
     */
    select?: ClanWarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanWar
     */
    omit?: ClanWarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanWarInclude<ExtArgs> | null
    where?: ClanWarWhereInput
    orderBy?: ClanWarOrderByWithRelationInput | ClanWarOrderByWithRelationInput[]
    cursor?: ClanWarWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClanWarScalarFieldEnum | ClanWarScalarFieldEnum[]
  }

  /**
   * Clan without action
   */
  export type ClanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clan
     */
    select?: ClanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clan
     */
    omit?: ClanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanInclude<ExtArgs> | null
  }


  /**
   * Model ClanThread
   */

  export type AggregateClanThread = {
    _count: ClanThreadCountAggregateOutputType | null
    _avg: ClanThreadAvgAggregateOutputType | null
    _sum: ClanThreadSumAggregateOutputType | null
    _min: ClanThreadMinAggregateOutputType | null
    _max: ClanThreadMaxAggregateOutputType | null
  }

  export type ClanThreadAvgAggregateOutputType = {
    postCount: number | null
  }

  export type ClanThreadSumAggregateOutputType = {
    postCount: number | null
  }

  export type ClanThreadMinAggregateOutputType = {
    id: string | null
    clanId: string | null
    creatorId: string | null
    title: string | null
    locked: boolean | null
    pinned: boolean | null
    postCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClanThreadMaxAggregateOutputType = {
    id: string | null
    clanId: string | null
    creatorId: string | null
    title: string | null
    locked: boolean | null
    pinned: boolean | null
    postCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClanThreadCountAggregateOutputType = {
    id: number
    clanId: number
    creatorId: number
    title: number
    locked: number
    pinned: number
    postCount: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ClanThreadAvgAggregateInputType = {
    postCount?: true
  }

  export type ClanThreadSumAggregateInputType = {
    postCount?: true
  }

  export type ClanThreadMinAggregateInputType = {
    id?: true
    clanId?: true
    creatorId?: true
    title?: true
    locked?: true
    pinned?: true
    postCount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClanThreadMaxAggregateInputType = {
    id?: true
    clanId?: true
    creatorId?: true
    title?: true
    locked?: true
    pinned?: true
    postCount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClanThreadCountAggregateInputType = {
    id?: true
    clanId?: true
    creatorId?: true
    title?: true
    locked?: true
    pinned?: true
    postCount?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ClanThreadAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClanThread to aggregate.
     */
    where?: ClanThreadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClanThreads to fetch.
     */
    orderBy?: ClanThreadOrderByWithRelationInput | ClanThreadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClanThreadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClanThreads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClanThreads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClanThreads
    **/
    _count?: true | ClanThreadCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClanThreadAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClanThreadSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClanThreadMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClanThreadMaxAggregateInputType
  }

  export type GetClanThreadAggregateType<T extends ClanThreadAggregateArgs> = {
        [P in keyof T & keyof AggregateClanThread]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClanThread[P]>
      : GetScalarType<T[P], AggregateClanThread[P]>
  }




  export type ClanThreadGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClanThreadWhereInput
    orderBy?: ClanThreadOrderByWithAggregationInput | ClanThreadOrderByWithAggregationInput[]
    by: ClanThreadScalarFieldEnum[] | ClanThreadScalarFieldEnum
    having?: ClanThreadScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClanThreadCountAggregateInputType | true
    _avg?: ClanThreadAvgAggregateInputType
    _sum?: ClanThreadSumAggregateInputType
    _min?: ClanThreadMinAggregateInputType
    _max?: ClanThreadMaxAggregateInputType
  }

  export type ClanThreadGroupByOutputType = {
    id: string
    clanId: string
    creatorId: string
    title: string
    locked: boolean
    pinned: boolean
    postCount: number
    createdAt: Date
    updatedAt: Date
    _count: ClanThreadCountAggregateOutputType | null
    _avg: ClanThreadAvgAggregateOutputType | null
    _sum: ClanThreadSumAggregateOutputType | null
    _min: ClanThreadMinAggregateOutputType | null
    _max: ClanThreadMaxAggregateOutputType | null
  }

  type GetClanThreadGroupByPayload<T extends ClanThreadGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClanThreadGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClanThreadGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClanThreadGroupByOutputType[P]>
            : GetScalarType<T[P], ClanThreadGroupByOutputType[P]>
        }
      >
    >


  export type ClanThreadSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clanId?: boolean
    creatorId?: boolean
    title?: boolean
    locked?: boolean
    pinned?: boolean
    postCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clan?: boolean | ClanDefaultArgs<ExtArgs>
    creator?: boolean | BruteDefaultArgs<ExtArgs>
    posts?: boolean | ClanThread$postsArgs<ExtArgs>
    _count?: boolean | ClanThreadCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clanThread"]>

  export type ClanThreadSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clanId?: boolean
    creatorId?: boolean
    title?: boolean
    locked?: boolean
    pinned?: boolean
    postCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clan?: boolean | ClanDefaultArgs<ExtArgs>
    creator?: boolean | BruteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clanThread"]>

  export type ClanThreadSelectScalar = {
    id?: boolean
    clanId?: boolean
    creatorId?: boolean
    title?: boolean
    locked?: boolean
    pinned?: boolean
    postCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ClanThreadOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clanId" | "creatorId" | "title" | "locked" | "pinned" | "postCount" | "createdAt" | "updatedAt", ExtArgs["result"]["clanThread"]>
  export type ClanThreadInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clan?: boolean | ClanDefaultArgs<ExtArgs>
    creator?: boolean | BruteDefaultArgs<ExtArgs>
    posts?: boolean | ClanThread$postsArgs<ExtArgs>
    _count?: boolean | ClanThreadCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClanThreadIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clan?: boolean | ClanDefaultArgs<ExtArgs>
    creator?: boolean | BruteDefaultArgs<ExtArgs>
  }

  export type $ClanThreadPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ClanThread"
    objects: {
      clan: Prisma.$ClanPayload<ExtArgs>
      creator: Prisma.$BrutePayload<ExtArgs>
      posts: Prisma.$ClanPostPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clanId: string
      creatorId: string
      title: string
      locked: boolean
      pinned: boolean
      postCount: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["clanThread"]>
    composites: {}
  }

  type ClanThreadGetPayload<S extends boolean | null | undefined | ClanThreadDefaultArgs> = $Result.GetResult<Prisma.$ClanThreadPayload, S>

  type ClanThreadCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClanThreadFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: ClanThreadCountAggregateInputType | true
    }

  export interface ClanThreadDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClanThread'], meta: { name: 'ClanThread' } }
    /**
     * Find zero or one ClanThread that matches the filter.
     * @param {ClanThreadFindUniqueArgs} args - Arguments to find a ClanThread
     * @example
     * // Get one ClanThread
     * const clanThread = await prisma.clanThread.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClanThreadFindUniqueArgs>(args: SelectSubset<T, ClanThreadFindUniqueArgs<ExtArgs>>): Prisma__ClanThreadClient<$Result.GetResult<Prisma.$ClanThreadPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one ClanThread that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ClanThreadFindUniqueOrThrowArgs} args - Arguments to find a ClanThread
     * @example
     * // Get one ClanThread
     * const clanThread = await prisma.clanThread.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClanThreadFindUniqueOrThrowArgs>(args: SelectSubset<T, ClanThreadFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClanThreadClient<$Result.GetResult<Prisma.$ClanThreadPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first ClanThread that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClanThreadFindFirstArgs} args - Arguments to find a ClanThread
     * @example
     * // Get one ClanThread
     * const clanThread = await prisma.clanThread.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClanThreadFindFirstArgs>(args?: SelectSubset<T, ClanThreadFindFirstArgs<ExtArgs>>): Prisma__ClanThreadClient<$Result.GetResult<Prisma.$ClanThreadPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first ClanThread that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClanThreadFindFirstOrThrowArgs} args - Arguments to find a ClanThread
     * @example
     * // Get one ClanThread
     * const clanThread = await prisma.clanThread.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClanThreadFindFirstOrThrowArgs>(args?: SelectSubset<T, ClanThreadFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClanThreadClient<$Result.GetResult<Prisma.$ClanThreadPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more ClanThreads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClanThreadFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClanThreads
     * const clanThreads = await prisma.clanThread.findMany()
     * 
     * // Get first 10 ClanThreads
     * const clanThreads = await prisma.clanThread.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clanThreadWithIdOnly = await prisma.clanThread.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClanThreadFindManyArgs>(args?: SelectSubset<T, ClanThreadFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClanThreadPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a ClanThread.
     * @param {ClanThreadCreateArgs} args - Arguments to create a ClanThread.
     * @example
     * // Create one ClanThread
     * const ClanThread = await prisma.clanThread.create({
     *   data: {
     *     // ... data to create a ClanThread
     *   }
     * })
     * 
     */
    create<T extends ClanThreadCreateArgs>(args: SelectSubset<T, ClanThreadCreateArgs<ExtArgs>>): Prisma__ClanThreadClient<$Result.GetResult<Prisma.$ClanThreadPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many ClanThreads.
     * @param {ClanThreadCreateManyArgs} args - Arguments to create many ClanThreads.
     * @example
     * // Create many ClanThreads
     * const clanThread = await prisma.clanThread.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClanThreadCreateManyArgs>(args?: SelectSubset<T, ClanThreadCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ClanThreads and returns the data saved in the database.
     * @param {ClanThreadCreateManyAndReturnArgs} args - Arguments to create many ClanThreads.
     * @example
     * // Create many ClanThreads
     * const clanThread = await prisma.clanThread.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ClanThreads and only return the `id`
     * const clanThreadWithIdOnly = await prisma.clanThread.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClanThreadCreateManyAndReturnArgs>(args?: SelectSubset<T, ClanThreadCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClanThreadPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a ClanThread.
     * @param {ClanThreadDeleteArgs} args - Arguments to delete one ClanThread.
     * @example
     * // Delete one ClanThread
     * const ClanThread = await prisma.clanThread.delete({
     *   where: {
     *     // ... filter to delete one ClanThread
     *   }
     * })
     * 
     */
    delete<T extends ClanThreadDeleteArgs>(args: SelectSubset<T, ClanThreadDeleteArgs<ExtArgs>>): Prisma__ClanThreadClient<$Result.GetResult<Prisma.$ClanThreadPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one ClanThread.
     * @param {ClanThreadUpdateArgs} args - Arguments to update one ClanThread.
     * @example
     * // Update one ClanThread
     * const clanThread = await prisma.clanThread.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClanThreadUpdateArgs>(args: SelectSubset<T, ClanThreadUpdateArgs<ExtArgs>>): Prisma__ClanThreadClient<$Result.GetResult<Prisma.$ClanThreadPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more ClanThreads.
     * @param {ClanThreadDeleteManyArgs} args - Arguments to filter ClanThreads to delete.
     * @example
     * // Delete a few ClanThreads
     * const { count } = await prisma.clanThread.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClanThreadDeleteManyArgs>(args?: SelectSubset<T, ClanThreadDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClanThreads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClanThreadUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClanThreads
     * const clanThread = await prisma.clanThread.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClanThreadUpdateManyArgs>(args: SelectSubset<T, ClanThreadUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ClanThread.
     * @param {ClanThreadUpsertArgs} args - Arguments to update or create a ClanThread.
     * @example
     * // Update or create a ClanThread
     * const clanThread = await prisma.clanThread.upsert({
     *   create: {
     *     // ... data to create a ClanThread
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClanThread we want to update
     *   }
     * })
     */
    upsert<T extends ClanThreadUpsertArgs>(args: SelectSubset<T, ClanThreadUpsertArgs<ExtArgs>>): Prisma__ClanThreadClient<$Result.GetResult<Prisma.$ClanThreadPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of ClanThreads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClanThreadCountArgs} args - Arguments to filter ClanThreads to count.
     * @example
     * // Count the number of ClanThreads
     * const count = await prisma.clanThread.count({
     *   where: {
     *     // ... the filter for the ClanThreads we want to count
     *   }
     * })
    **/
    count<T extends ClanThreadCountArgs>(
      args?: Subset<T, ClanThreadCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClanThreadCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClanThread.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClanThreadAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClanThreadAggregateArgs>(args: Subset<T, ClanThreadAggregateArgs>): Prisma.PrismaPromise<GetClanThreadAggregateType<T>>

    /**
     * Group by ClanThread.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClanThreadGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClanThreadGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClanThreadGroupByArgs['orderBy'] }
        : { orderBy?: ClanThreadGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClanThreadGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClanThreadGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClanThread model
   */
  readonly fields: ClanThreadFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClanThread.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClanThreadClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    clan<T extends ClanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClanDefaultArgs<ExtArgs>>): Prisma__ClanClient<$Result.GetResult<Prisma.$ClanPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    creator<T extends BruteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BruteDefaultArgs<ExtArgs>>): Prisma__BruteClient<$Result.GetResult<Prisma.$BrutePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    posts<T extends ClanThread$postsArgs<ExtArgs> = {}>(args?: Subset<T, ClanThread$postsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClanPostPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ClanThread model
   */ 
  interface ClanThreadFieldRefs {
    readonly id: FieldRef<"ClanThread", 'String'>
    readonly clanId: FieldRef<"ClanThread", 'String'>
    readonly creatorId: FieldRef<"ClanThread", 'String'>
    readonly title: FieldRef<"ClanThread", 'String'>
    readonly locked: FieldRef<"ClanThread", 'Boolean'>
    readonly pinned: FieldRef<"ClanThread", 'Boolean'>
    readonly postCount: FieldRef<"ClanThread", 'Int'>
    readonly createdAt: FieldRef<"ClanThread", 'DateTime'>
    readonly updatedAt: FieldRef<"ClanThread", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ClanThread findUnique
   */
  export type ClanThreadFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanThread
     */
    select?: ClanThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanThread
     */
    omit?: ClanThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanThreadInclude<ExtArgs> | null
    /**
     * Filter, which ClanThread to fetch.
     */
    where: ClanThreadWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ClanThread findUniqueOrThrow
   */
  export type ClanThreadFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanThread
     */
    select?: ClanThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanThread
     */
    omit?: ClanThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanThreadInclude<ExtArgs> | null
    /**
     * Filter, which ClanThread to fetch.
     */
    where: ClanThreadWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ClanThread findFirst
   */
  export type ClanThreadFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanThread
     */
    select?: ClanThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanThread
     */
    omit?: ClanThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanThreadInclude<ExtArgs> | null
    /**
     * Filter, which ClanThread to fetch.
     */
    where?: ClanThreadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClanThreads to fetch.
     */
    orderBy?: ClanThreadOrderByWithRelationInput | ClanThreadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClanThreads.
     */
    cursor?: ClanThreadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClanThreads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClanThreads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClanThreads.
     */
    distinct?: ClanThreadScalarFieldEnum | ClanThreadScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ClanThread findFirstOrThrow
   */
  export type ClanThreadFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanThread
     */
    select?: ClanThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanThread
     */
    omit?: ClanThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanThreadInclude<ExtArgs> | null
    /**
     * Filter, which ClanThread to fetch.
     */
    where?: ClanThreadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClanThreads to fetch.
     */
    orderBy?: ClanThreadOrderByWithRelationInput | ClanThreadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClanThreads.
     */
    cursor?: ClanThreadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClanThreads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClanThreads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClanThreads.
     */
    distinct?: ClanThreadScalarFieldEnum | ClanThreadScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ClanThread findMany
   */
  export type ClanThreadFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanThread
     */
    select?: ClanThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanThread
     */
    omit?: ClanThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanThreadInclude<ExtArgs> | null
    /**
     * Filter, which ClanThreads to fetch.
     */
    where?: ClanThreadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClanThreads to fetch.
     */
    orderBy?: ClanThreadOrderByWithRelationInput | ClanThreadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClanThreads.
     */
    cursor?: ClanThreadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClanThreads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClanThreads.
     */
    skip?: number
    distinct?: ClanThreadScalarFieldEnum | ClanThreadScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ClanThread create
   */
  export type ClanThreadCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanThread
     */
    select?: ClanThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanThread
     */
    omit?: ClanThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanThreadInclude<ExtArgs> | null
    /**
     * The data needed to create a ClanThread.
     */
    data: XOR<ClanThreadCreateInput, ClanThreadUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ClanThread createMany
   */
  export type ClanThreadCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClanThreads.
     */
    data: ClanThreadCreateManyInput | ClanThreadCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ClanThread createManyAndReturn
   */
  export type ClanThreadCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanThread
     */
    select?: ClanThreadSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ClanThread
     */
    omit?: ClanThreadOmit<ExtArgs> | null
    /**
     * The data used to create many ClanThreads.
     */
    data: ClanThreadCreateManyInput | ClanThreadCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanThreadIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ClanThread update
   */
  export type ClanThreadUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanThread
     */
    select?: ClanThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanThread
     */
    omit?: ClanThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanThreadInclude<ExtArgs> | null
    /**
     * The data needed to update a ClanThread.
     */
    data: XOR<ClanThreadUpdateInput, ClanThreadUncheckedUpdateInput>
    /**
     * Choose, which ClanThread to update.
     */
    where: ClanThreadWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ClanThread updateMany
   */
  export type ClanThreadUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClanThreads.
     */
    data: XOR<ClanThreadUpdateManyMutationInput, ClanThreadUncheckedUpdateManyInput>
    /**
     * Filter which ClanThreads to update
     */
    where?: ClanThreadWhereInput
  }

  /**
   * ClanThread upsert
   */
  export type ClanThreadUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanThread
     */
    select?: ClanThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanThread
     */
    omit?: ClanThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanThreadInclude<ExtArgs> | null
    /**
     * The filter to search for the ClanThread to update in case it exists.
     */
    where: ClanThreadWhereUniqueInput
    /**
     * In case the ClanThread found by the `where` argument doesn't exist, create a new ClanThread with this data.
     */
    create: XOR<ClanThreadCreateInput, ClanThreadUncheckedCreateInput>
    /**
     * In case the ClanThread was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClanThreadUpdateInput, ClanThreadUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ClanThread delete
   */
  export type ClanThreadDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanThread
     */
    select?: ClanThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanThread
     */
    omit?: ClanThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanThreadInclude<ExtArgs> | null
    /**
     * Filter which ClanThread to delete.
     */
    where: ClanThreadWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ClanThread deleteMany
   */
  export type ClanThreadDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClanThreads to delete
     */
    where?: ClanThreadWhereInput
  }

  /**
   * ClanThread.posts
   */
  export type ClanThread$postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanPost
     */
    select?: ClanPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanPost
     */
    omit?: ClanPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanPostInclude<ExtArgs> | null
    where?: ClanPostWhereInput
    orderBy?: ClanPostOrderByWithRelationInput | ClanPostOrderByWithRelationInput[]
    cursor?: ClanPostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClanPostScalarFieldEnum | ClanPostScalarFieldEnum[]
  }

  /**
   * ClanThread without action
   */
  export type ClanThreadDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanThread
     */
    select?: ClanThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanThread
     */
    omit?: ClanThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanThreadInclude<ExtArgs> | null
  }


  /**
   * Model ClanPost
   */

  export type AggregateClanPost = {
    _count: ClanPostCountAggregateOutputType | null
    _min: ClanPostMinAggregateOutputType | null
    _max: ClanPostMaxAggregateOutputType | null
  }

  export type ClanPostMinAggregateOutputType = {
    id: string | null
    threadId: string | null
    authorId: string | null
    date: Date | null
    message: string | null
  }

  export type ClanPostMaxAggregateOutputType = {
    id: string | null
    threadId: string | null
    authorId: string | null
    date: Date | null
    message: string | null
  }

  export type ClanPostCountAggregateOutputType = {
    id: number
    threadId: number
    authorId: number
    date: number
    message: number
    _all: number
  }


  export type ClanPostMinAggregateInputType = {
    id?: true
    threadId?: true
    authorId?: true
    date?: true
    message?: true
  }

  export type ClanPostMaxAggregateInputType = {
    id?: true
    threadId?: true
    authorId?: true
    date?: true
    message?: true
  }

  export type ClanPostCountAggregateInputType = {
    id?: true
    threadId?: true
    authorId?: true
    date?: true
    message?: true
    _all?: true
  }

  export type ClanPostAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClanPost to aggregate.
     */
    where?: ClanPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClanPosts to fetch.
     */
    orderBy?: ClanPostOrderByWithRelationInput | ClanPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClanPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClanPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClanPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClanPosts
    **/
    _count?: true | ClanPostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClanPostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClanPostMaxAggregateInputType
  }

  export type GetClanPostAggregateType<T extends ClanPostAggregateArgs> = {
        [P in keyof T & keyof AggregateClanPost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClanPost[P]>
      : GetScalarType<T[P], AggregateClanPost[P]>
  }




  export type ClanPostGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClanPostWhereInput
    orderBy?: ClanPostOrderByWithAggregationInput | ClanPostOrderByWithAggregationInput[]
    by: ClanPostScalarFieldEnum[] | ClanPostScalarFieldEnum
    having?: ClanPostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClanPostCountAggregateInputType | true
    _min?: ClanPostMinAggregateInputType
    _max?: ClanPostMaxAggregateInputType
  }

  export type ClanPostGroupByOutputType = {
    id: string
    threadId: string
    authorId: string
    date: Date
    message: string
    _count: ClanPostCountAggregateOutputType | null
    _min: ClanPostMinAggregateOutputType | null
    _max: ClanPostMaxAggregateOutputType | null
  }

  type GetClanPostGroupByPayload<T extends ClanPostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClanPostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClanPostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClanPostGroupByOutputType[P]>
            : GetScalarType<T[P], ClanPostGroupByOutputType[P]>
        }
      >
    >


  export type ClanPostSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    threadId?: boolean
    authorId?: boolean
    date?: boolean
    message?: boolean
    thread?: boolean | ClanThreadDefaultArgs<ExtArgs>
    author?: boolean | BruteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clanPost"]>

  export type ClanPostSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    threadId?: boolean
    authorId?: boolean
    date?: boolean
    message?: boolean
    thread?: boolean | ClanThreadDefaultArgs<ExtArgs>
    author?: boolean | BruteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clanPost"]>

  export type ClanPostSelectScalar = {
    id?: boolean
    threadId?: boolean
    authorId?: boolean
    date?: boolean
    message?: boolean
  }

  export type ClanPostOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "threadId" | "authorId" | "date" | "message", ExtArgs["result"]["clanPost"]>
  export type ClanPostInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    thread?: boolean | ClanThreadDefaultArgs<ExtArgs>
    author?: boolean | BruteDefaultArgs<ExtArgs>
  }
  export type ClanPostIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    thread?: boolean | ClanThreadDefaultArgs<ExtArgs>
    author?: boolean | BruteDefaultArgs<ExtArgs>
  }

  export type $ClanPostPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ClanPost"
    objects: {
      thread: Prisma.$ClanThreadPayload<ExtArgs>
      author: Prisma.$BrutePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      threadId: string
      authorId: string
      date: Date
      message: string
    }, ExtArgs["result"]["clanPost"]>
    composites: {}
  }

  type ClanPostGetPayload<S extends boolean | null | undefined | ClanPostDefaultArgs> = $Result.GetResult<Prisma.$ClanPostPayload, S>

  type ClanPostCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClanPostFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: ClanPostCountAggregateInputType | true
    }

  export interface ClanPostDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClanPost'], meta: { name: 'ClanPost' } }
    /**
     * Find zero or one ClanPost that matches the filter.
     * @param {ClanPostFindUniqueArgs} args - Arguments to find a ClanPost
     * @example
     * // Get one ClanPost
     * const clanPost = await prisma.clanPost.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClanPostFindUniqueArgs>(args: SelectSubset<T, ClanPostFindUniqueArgs<ExtArgs>>): Prisma__ClanPostClient<$Result.GetResult<Prisma.$ClanPostPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one ClanPost that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ClanPostFindUniqueOrThrowArgs} args - Arguments to find a ClanPost
     * @example
     * // Get one ClanPost
     * const clanPost = await prisma.clanPost.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClanPostFindUniqueOrThrowArgs>(args: SelectSubset<T, ClanPostFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClanPostClient<$Result.GetResult<Prisma.$ClanPostPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first ClanPost that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClanPostFindFirstArgs} args - Arguments to find a ClanPost
     * @example
     * // Get one ClanPost
     * const clanPost = await prisma.clanPost.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClanPostFindFirstArgs>(args?: SelectSubset<T, ClanPostFindFirstArgs<ExtArgs>>): Prisma__ClanPostClient<$Result.GetResult<Prisma.$ClanPostPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first ClanPost that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClanPostFindFirstOrThrowArgs} args - Arguments to find a ClanPost
     * @example
     * // Get one ClanPost
     * const clanPost = await prisma.clanPost.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClanPostFindFirstOrThrowArgs>(args?: SelectSubset<T, ClanPostFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClanPostClient<$Result.GetResult<Prisma.$ClanPostPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more ClanPosts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClanPostFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClanPosts
     * const clanPosts = await prisma.clanPost.findMany()
     * 
     * // Get first 10 ClanPosts
     * const clanPosts = await prisma.clanPost.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clanPostWithIdOnly = await prisma.clanPost.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClanPostFindManyArgs>(args?: SelectSubset<T, ClanPostFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClanPostPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a ClanPost.
     * @param {ClanPostCreateArgs} args - Arguments to create a ClanPost.
     * @example
     * // Create one ClanPost
     * const ClanPost = await prisma.clanPost.create({
     *   data: {
     *     // ... data to create a ClanPost
     *   }
     * })
     * 
     */
    create<T extends ClanPostCreateArgs>(args: SelectSubset<T, ClanPostCreateArgs<ExtArgs>>): Prisma__ClanPostClient<$Result.GetResult<Prisma.$ClanPostPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many ClanPosts.
     * @param {ClanPostCreateManyArgs} args - Arguments to create many ClanPosts.
     * @example
     * // Create many ClanPosts
     * const clanPost = await prisma.clanPost.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClanPostCreateManyArgs>(args?: SelectSubset<T, ClanPostCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ClanPosts and returns the data saved in the database.
     * @param {ClanPostCreateManyAndReturnArgs} args - Arguments to create many ClanPosts.
     * @example
     * // Create many ClanPosts
     * const clanPost = await prisma.clanPost.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ClanPosts and only return the `id`
     * const clanPostWithIdOnly = await prisma.clanPost.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClanPostCreateManyAndReturnArgs>(args?: SelectSubset<T, ClanPostCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClanPostPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a ClanPost.
     * @param {ClanPostDeleteArgs} args - Arguments to delete one ClanPost.
     * @example
     * // Delete one ClanPost
     * const ClanPost = await prisma.clanPost.delete({
     *   where: {
     *     // ... filter to delete one ClanPost
     *   }
     * })
     * 
     */
    delete<T extends ClanPostDeleteArgs>(args: SelectSubset<T, ClanPostDeleteArgs<ExtArgs>>): Prisma__ClanPostClient<$Result.GetResult<Prisma.$ClanPostPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one ClanPost.
     * @param {ClanPostUpdateArgs} args - Arguments to update one ClanPost.
     * @example
     * // Update one ClanPost
     * const clanPost = await prisma.clanPost.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClanPostUpdateArgs>(args: SelectSubset<T, ClanPostUpdateArgs<ExtArgs>>): Prisma__ClanPostClient<$Result.GetResult<Prisma.$ClanPostPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more ClanPosts.
     * @param {ClanPostDeleteManyArgs} args - Arguments to filter ClanPosts to delete.
     * @example
     * // Delete a few ClanPosts
     * const { count } = await prisma.clanPost.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClanPostDeleteManyArgs>(args?: SelectSubset<T, ClanPostDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClanPosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClanPostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClanPosts
     * const clanPost = await prisma.clanPost.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClanPostUpdateManyArgs>(args: SelectSubset<T, ClanPostUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ClanPost.
     * @param {ClanPostUpsertArgs} args - Arguments to update or create a ClanPost.
     * @example
     * // Update or create a ClanPost
     * const clanPost = await prisma.clanPost.upsert({
     *   create: {
     *     // ... data to create a ClanPost
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClanPost we want to update
     *   }
     * })
     */
    upsert<T extends ClanPostUpsertArgs>(args: SelectSubset<T, ClanPostUpsertArgs<ExtArgs>>): Prisma__ClanPostClient<$Result.GetResult<Prisma.$ClanPostPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of ClanPosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClanPostCountArgs} args - Arguments to filter ClanPosts to count.
     * @example
     * // Count the number of ClanPosts
     * const count = await prisma.clanPost.count({
     *   where: {
     *     // ... the filter for the ClanPosts we want to count
     *   }
     * })
    **/
    count<T extends ClanPostCountArgs>(
      args?: Subset<T, ClanPostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClanPostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClanPost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClanPostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClanPostAggregateArgs>(args: Subset<T, ClanPostAggregateArgs>): Prisma.PrismaPromise<GetClanPostAggregateType<T>>

    /**
     * Group by ClanPost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClanPostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClanPostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClanPostGroupByArgs['orderBy'] }
        : { orderBy?: ClanPostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClanPostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClanPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClanPost model
   */
  readonly fields: ClanPostFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClanPost.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClanPostClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    thread<T extends ClanThreadDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClanThreadDefaultArgs<ExtArgs>>): Prisma__ClanThreadClient<$Result.GetResult<Prisma.$ClanThreadPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    author<T extends BruteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BruteDefaultArgs<ExtArgs>>): Prisma__BruteClient<$Result.GetResult<Prisma.$BrutePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ClanPost model
   */ 
  interface ClanPostFieldRefs {
    readonly id: FieldRef<"ClanPost", 'String'>
    readonly threadId: FieldRef<"ClanPost", 'String'>
    readonly authorId: FieldRef<"ClanPost", 'String'>
    readonly date: FieldRef<"ClanPost", 'DateTime'>
    readonly message: FieldRef<"ClanPost", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ClanPost findUnique
   */
  export type ClanPostFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanPost
     */
    select?: ClanPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanPost
     */
    omit?: ClanPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanPostInclude<ExtArgs> | null
    /**
     * Filter, which ClanPost to fetch.
     */
    where: ClanPostWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ClanPost findUniqueOrThrow
   */
  export type ClanPostFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanPost
     */
    select?: ClanPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanPost
     */
    omit?: ClanPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanPostInclude<ExtArgs> | null
    /**
     * Filter, which ClanPost to fetch.
     */
    where: ClanPostWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ClanPost findFirst
   */
  export type ClanPostFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanPost
     */
    select?: ClanPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanPost
     */
    omit?: ClanPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanPostInclude<ExtArgs> | null
    /**
     * Filter, which ClanPost to fetch.
     */
    where?: ClanPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClanPosts to fetch.
     */
    orderBy?: ClanPostOrderByWithRelationInput | ClanPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClanPosts.
     */
    cursor?: ClanPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClanPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClanPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClanPosts.
     */
    distinct?: ClanPostScalarFieldEnum | ClanPostScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ClanPost findFirstOrThrow
   */
  export type ClanPostFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanPost
     */
    select?: ClanPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanPost
     */
    omit?: ClanPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanPostInclude<ExtArgs> | null
    /**
     * Filter, which ClanPost to fetch.
     */
    where?: ClanPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClanPosts to fetch.
     */
    orderBy?: ClanPostOrderByWithRelationInput | ClanPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClanPosts.
     */
    cursor?: ClanPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClanPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClanPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClanPosts.
     */
    distinct?: ClanPostScalarFieldEnum | ClanPostScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ClanPost findMany
   */
  export type ClanPostFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanPost
     */
    select?: ClanPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanPost
     */
    omit?: ClanPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanPostInclude<ExtArgs> | null
    /**
     * Filter, which ClanPosts to fetch.
     */
    where?: ClanPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClanPosts to fetch.
     */
    orderBy?: ClanPostOrderByWithRelationInput | ClanPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClanPosts.
     */
    cursor?: ClanPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClanPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClanPosts.
     */
    skip?: number
    distinct?: ClanPostScalarFieldEnum | ClanPostScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ClanPost create
   */
  export type ClanPostCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanPost
     */
    select?: ClanPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanPost
     */
    omit?: ClanPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanPostInclude<ExtArgs> | null
    /**
     * The data needed to create a ClanPost.
     */
    data: XOR<ClanPostCreateInput, ClanPostUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ClanPost createMany
   */
  export type ClanPostCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClanPosts.
     */
    data: ClanPostCreateManyInput | ClanPostCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ClanPost createManyAndReturn
   */
  export type ClanPostCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanPost
     */
    select?: ClanPostSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ClanPost
     */
    omit?: ClanPostOmit<ExtArgs> | null
    /**
     * The data used to create many ClanPosts.
     */
    data: ClanPostCreateManyInput | ClanPostCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanPostIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ClanPost update
   */
  export type ClanPostUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanPost
     */
    select?: ClanPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanPost
     */
    omit?: ClanPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanPostInclude<ExtArgs> | null
    /**
     * The data needed to update a ClanPost.
     */
    data: XOR<ClanPostUpdateInput, ClanPostUncheckedUpdateInput>
    /**
     * Choose, which ClanPost to update.
     */
    where: ClanPostWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ClanPost updateMany
   */
  export type ClanPostUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClanPosts.
     */
    data: XOR<ClanPostUpdateManyMutationInput, ClanPostUncheckedUpdateManyInput>
    /**
     * Filter which ClanPosts to update
     */
    where?: ClanPostWhereInput
  }

  /**
   * ClanPost upsert
   */
  export type ClanPostUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanPost
     */
    select?: ClanPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanPost
     */
    omit?: ClanPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanPostInclude<ExtArgs> | null
    /**
     * The filter to search for the ClanPost to update in case it exists.
     */
    where: ClanPostWhereUniqueInput
    /**
     * In case the ClanPost found by the `where` argument doesn't exist, create a new ClanPost with this data.
     */
    create: XOR<ClanPostCreateInput, ClanPostUncheckedCreateInput>
    /**
     * In case the ClanPost was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClanPostUpdateInput, ClanPostUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ClanPost delete
   */
  export type ClanPostDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanPost
     */
    select?: ClanPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanPost
     */
    omit?: ClanPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanPostInclude<ExtArgs> | null
    /**
     * Filter which ClanPost to delete.
     */
    where: ClanPostWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ClanPost deleteMany
   */
  export type ClanPostDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClanPosts to delete
     */
    where?: ClanPostWhereInput
  }

  /**
   * ClanPost without action
   */
  export type ClanPostDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanPost
     */
    select?: ClanPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanPost
     */
    omit?: ClanPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanPostInclude<ExtArgs> | null
  }


  /**
   * Model BossDamage
   */

  export type AggregateBossDamage = {
    _count: BossDamageCountAggregateOutputType | null
    _avg: BossDamageAvgAggregateOutputType | null
    _sum: BossDamageSumAggregateOutputType | null
    _min: BossDamageMinAggregateOutputType | null
    _max: BossDamageMaxAggregateOutputType | null
  }

  export type BossDamageAvgAggregateOutputType = {
    damage: number | null
  }

  export type BossDamageSumAggregateOutputType = {
    damage: number | null
  }

  export type BossDamageMinAggregateOutputType = {
    id: string | null
    bruteId: string | null
    clanId: string | null
    damage: number | null
  }

  export type BossDamageMaxAggregateOutputType = {
    id: string | null
    bruteId: string | null
    clanId: string | null
    damage: number | null
  }

  export type BossDamageCountAggregateOutputType = {
    id: number
    bruteId: number
    clanId: number
    damage: number
    _all: number
  }


  export type BossDamageAvgAggregateInputType = {
    damage?: true
  }

  export type BossDamageSumAggregateInputType = {
    damage?: true
  }

  export type BossDamageMinAggregateInputType = {
    id?: true
    bruteId?: true
    clanId?: true
    damage?: true
  }

  export type BossDamageMaxAggregateInputType = {
    id?: true
    bruteId?: true
    clanId?: true
    damage?: true
  }

  export type BossDamageCountAggregateInputType = {
    id?: true
    bruteId?: true
    clanId?: true
    damage?: true
    _all?: true
  }

  export type BossDamageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BossDamage to aggregate.
     */
    where?: BossDamageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BossDamages to fetch.
     */
    orderBy?: BossDamageOrderByWithRelationInput | BossDamageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BossDamageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BossDamages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BossDamages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BossDamages
    **/
    _count?: true | BossDamageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BossDamageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BossDamageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BossDamageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BossDamageMaxAggregateInputType
  }

  export type GetBossDamageAggregateType<T extends BossDamageAggregateArgs> = {
        [P in keyof T & keyof AggregateBossDamage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBossDamage[P]>
      : GetScalarType<T[P], AggregateBossDamage[P]>
  }




  export type BossDamageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BossDamageWhereInput
    orderBy?: BossDamageOrderByWithAggregationInput | BossDamageOrderByWithAggregationInput[]
    by: BossDamageScalarFieldEnum[] | BossDamageScalarFieldEnum
    having?: BossDamageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BossDamageCountAggregateInputType | true
    _avg?: BossDamageAvgAggregateInputType
    _sum?: BossDamageSumAggregateInputType
    _min?: BossDamageMinAggregateInputType
    _max?: BossDamageMaxAggregateInputType
  }

  export type BossDamageGroupByOutputType = {
    id: string
    bruteId: string
    clanId: string
    damage: number
    _count: BossDamageCountAggregateOutputType | null
    _avg: BossDamageAvgAggregateOutputType | null
    _sum: BossDamageSumAggregateOutputType | null
    _min: BossDamageMinAggregateOutputType | null
    _max: BossDamageMaxAggregateOutputType | null
  }

  type GetBossDamageGroupByPayload<T extends BossDamageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BossDamageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BossDamageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BossDamageGroupByOutputType[P]>
            : GetScalarType<T[P], BossDamageGroupByOutputType[P]>
        }
      >
    >


  export type BossDamageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bruteId?: boolean
    clanId?: boolean
    damage?: boolean
    brute?: boolean | BruteDefaultArgs<ExtArgs>
    clan?: boolean | ClanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bossDamage"]>

  export type BossDamageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bruteId?: boolean
    clanId?: boolean
    damage?: boolean
    brute?: boolean | BruteDefaultArgs<ExtArgs>
    clan?: boolean | ClanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bossDamage"]>

  export type BossDamageSelectScalar = {
    id?: boolean
    bruteId?: boolean
    clanId?: boolean
    damage?: boolean
  }

  export type BossDamageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "bruteId" | "clanId" | "damage", ExtArgs["result"]["bossDamage"]>
  export type BossDamageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brute?: boolean | BruteDefaultArgs<ExtArgs>
    clan?: boolean | ClanDefaultArgs<ExtArgs>
  }
  export type BossDamageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brute?: boolean | BruteDefaultArgs<ExtArgs>
    clan?: boolean | ClanDefaultArgs<ExtArgs>
  }

  export type $BossDamagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BossDamage"
    objects: {
      brute: Prisma.$BrutePayload<ExtArgs>
      clan: Prisma.$ClanPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      bruteId: string
      clanId: string
      damage: number
    }, ExtArgs["result"]["bossDamage"]>
    composites: {}
  }

  type BossDamageGetPayload<S extends boolean | null | undefined | BossDamageDefaultArgs> = $Result.GetResult<Prisma.$BossDamagePayload, S>

  type BossDamageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BossDamageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: BossDamageCountAggregateInputType | true
    }

  export interface BossDamageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BossDamage'], meta: { name: 'BossDamage' } }
    /**
     * Find zero or one BossDamage that matches the filter.
     * @param {BossDamageFindUniqueArgs} args - Arguments to find a BossDamage
     * @example
     * // Get one BossDamage
     * const bossDamage = await prisma.bossDamage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BossDamageFindUniqueArgs>(args: SelectSubset<T, BossDamageFindUniqueArgs<ExtArgs>>): Prisma__BossDamageClient<$Result.GetResult<Prisma.$BossDamagePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one BossDamage that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BossDamageFindUniqueOrThrowArgs} args - Arguments to find a BossDamage
     * @example
     * // Get one BossDamage
     * const bossDamage = await prisma.bossDamage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BossDamageFindUniqueOrThrowArgs>(args: SelectSubset<T, BossDamageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BossDamageClient<$Result.GetResult<Prisma.$BossDamagePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first BossDamage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BossDamageFindFirstArgs} args - Arguments to find a BossDamage
     * @example
     * // Get one BossDamage
     * const bossDamage = await prisma.bossDamage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BossDamageFindFirstArgs>(args?: SelectSubset<T, BossDamageFindFirstArgs<ExtArgs>>): Prisma__BossDamageClient<$Result.GetResult<Prisma.$BossDamagePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first BossDamage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BossDamageFindFirstOrThrowArgs} args - Arguments to find a BossDamage
     * @example
     * // Get one BossDamage
     * const bossDamage = await prisma.bossDamage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BossDamageFindFirstOrThrowArgs>(args?: SelectSubset<T, BossDamageFindFirstOrThrowArgs<ExtArgs>>): Prisma__BossDamageClient<$Result.GetResult<Prisma.$BossDamagePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more BossDamages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BossDamageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BossDamages
     * const bossDamages = await prisma.bossDamage.findMany()
     * 
     * // Get first 10 BossDamages
     * const bossDamages = await prisma.bossDamage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bossDamageWithIdOnly = await prisma.bossDamage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BossDamageFindManyArgs>(args?: SelectSubset<T, BossDamageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BossDamagePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a BossDamage.
     * @param {BossDamageCreateArgs} args - Arguments to create a BossDamage.
     * @example
     * // Create one BossDamage
     * const BossDamage = await prisma.bossDamage.create({
     *   data: {
     *     // ... data to create a BossDamage
     *   }
     * })
     * 
     */
    create<T extends BossDamageCreateArgs>(args: SelectSubset<T, BossDamageCreateArgs<ExtArgs>>): Prisma__BossDamageClient<$Result.GetResult<Prisma.$BossDamagePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many BossDamages.
     * @param {BossDamageCreateManyArgs} args - Arguments to create many BossDamages.
     * @example
     * // Create many BossDamages
     * const bossDamage = await prisma.bossDamage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BossDamageCreateManyArgs>(args?: SelectSubset<T, BossDamageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BossDamages and returns the data saved in the database.
     * @param {BossDamageCreateManyAndReturnArgs} args - Arguments to create many BossDamages.
     * @example
     * // Create many BossDamages
     * const bossDamage = await prisma.bossDamage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BossDamages and only return the `id`
     * const bossDamageWithIdOnly = await prisma.bossDamage.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BossDamageCreateManyAndReturnArgs>(args?: SelectSubset<T, BossDamageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BossDamagePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a BossDamage.
     * @param {BossDamageDeleteArgs} args - Arguments to delete one BossDamage.
     * @example
     * // Delete one BossDamage
     * const BossDamage = await prisma.bossDamage.delete({
     *   where: {
     *     // ... filter to delete one BossDamage
     *   }
     * })
     * 
     */
    delete<T extends BossDamageDeleteArgs>(args: SelectSubset<T, BossDamageDeleteArgs<ExtArgs>>): Prisma__BossDamageClient<$Result.GetResult<Prisma.$BossDamagePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one BossDamage.
     * @param {BossDamageUpdateArgs} args - Arguments to update one BossDamage.
     * @example
     * // Update one BossDamage
     * const bossDamage = await prisma.bossDamage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BossDamageUpdateArgs>(args: SelectSubset<T, BossDamageUpdateArgs<ExtArgs>>): Prisma__BossDamageClient<$Result.GetResult<Prisma.$BossDamagePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more BossDamages.
     * @param {BossDamageDeleteManyArgs} args - Arguments to filter BossDamages to delete.
     * @example
     * // Delete a few BossDamages
     * const { count } = await prisma.bossDamage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BossDamageDeleteManyArgs>(args?: SelectSubset<T, BossDamageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BossDamages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BossDamageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BossDamages
     * const bossDamage = await prisma.bossDamage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BossDamageUpdateManyArgs>(args: SelectSubset<T, BossDamageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BossDamage.
     * @param {BossDamageUpsertArgs} args - Arguments to update or create a BossDamage.
     * @example
     * // Update or create a BossDamage
     * const bossDamage = await prisma.bossDamage.upsert({
     *   create: {
     *     // ... data to create a BossDamage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BossDamage we want to update
     *   }
     * })
     */
    upsert<T extends BossDamageUpsertArgs>(args: SelectSubset<T, BossDamageUpsertArgs<ExtArgs>>): Prisma__BossDamageClient<$Result.GetResult<Prisma.$BossDamagePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of BossDamages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BossDamageCountArgs} args - Arguments to filter BossDamages to count.
     * @example
     * // Count the number of BossDamages
     * const count = await prisma.bossDamage.count({
     *   where: {
     *     // ... the filter for the BossDamages we want to count
     *   }
     * })
    **/
    count<T extends BossDamageCountArgs>(
      args?: Subset<T, BossDamageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BossDamageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BossDamage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BossDamageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BossDamageAggregateArgs>(args: Subset<T, BossDamageAggregateArgs>): Prisma.PrismaPromise<GetBossDamageAggregateType<T>>

    /**
     * Group by BossDamage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BossDamageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BossDamageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BossDamageGroupByArgs['orderBy'] }
        : { orderBy?: BossDamageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BossDamageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBossDamageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BossDamage model
   */
  readonly fields: BossDamageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BossDamage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BossDamageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    brute<T extends BruteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BruteDefaultArgs<ExtArgs>>): Prisma__BruteClient<$Result.GetResult<Prisma.$BrutePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    clan<T extends ClanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClanDefaultArgs<ExtArgs>>): Prisma__ClanClient<$Result.GetResult<Prisma.$ClanPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BossDamage model
   */ 
  interface BossDamageFieldRefs {
    readonly id: FieldRef<"BossDamage", 'String'>
    readonly bruteId: FieldRef<"BossDamage", 'String'>
    readonly clanId: FieldRef<"BossDamage", 'String'>
    readonly damage: FieldRef<"BossDamage", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * BossDamage findUnique
   */
  export type BossDamageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BossDamage
     */
    select?: BossDamageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BossDamage
     */
    omit?: BossDamageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BossDamageInclude<ExtArgs> | null
    /**
     * Filter, which BossDamage to fetch.
     */
    where: BossDamageWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BossDamage findUniqueOrThrow
   */
  export type BossDamageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BossDamage
     */
    select?: BossDamageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BossDamage
     */
    omit?: BossDamageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BossDamageInclude<ExtArgs> | null
    /**
     * Filter, which BossDamage to fetch.
     */
    where: BossDamageWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BossDamage findFirst
   */
  export type BossDamageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BossDamage
     */
    select?: BossDamageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BossDamage
     */
    omit?: BossDamageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BossDamageInclude<ExtArgs> | null
    /**
     * Filter, which BossDamage to fetch.
     */
    where?: BossDamageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BossDamages to fetch.
     */
    orderBy?: BossDamageOrderByWithRelationInput | BossDamageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BossDamages.
     */
    cursor?: BossDamageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BossDamages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BossDamages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BossDamages.
     */
    distinct?: BossDamageScalarFieldEnum | BossDamageScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BossDamage findFirstOrThrow
   */
  export type BossDamageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BossDamage
     */
    select?: BossDamageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BossDamage
     */
    omit?: BossDamageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BossDamageInclude<ExtArgs> | null
    /**
     * Filter, which BossDamage to fetch.
     */
    where?: BossDamageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BossDamages to fetch.
     */
    orderBy?: BossDamageOrderByWithRelationInput | BossDamageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BossDamages.
     */
    cursor?: BossDamageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BossDamages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BossDamages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BossDamages.
     */
    distinct?: BossDamageScalarFieldEnum | BossDamageScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BossDamage findMany
   */
  export type BossDamageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BossDamage
     */
    select?: BossDamageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BossDamage
     */
    omit?: BossDamageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BossDamageInclude<ExtArgs> | null
    /**
     * Filter, which BossDamages to fetch.
     */
    where?: BossDamageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BossDamages to fetch.
     */
    orderBy?: BossDamageOrderByWithRelationInput | BossDamageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BossDamages.
     */
    cursor?: BossDamageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BossDamages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BossDamages.
     */
    skip?: number
    distinct?: BossDamageScalarFieldEnum | BossDamageScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BossDamage create
   */
  export type BossDamageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BossDamage
     */
    select?: BossDamageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BossDamage
     */
    omit?: BossDamageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BossDamageInclude<ExtArgs> | null
    /**
     * The data needed to create a BossDamage.
     */
    data: XOR<BossDamageCreateInput, BossDamageUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BossDamage createMany
   */
  export type BossDamageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BossDamages.
     */
    data: BossDamageCreateManyInput | BossDamageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BossDamage createManyAndReturn
   */
  export type BossDamageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BossDamage
     */
    select?: BossDamageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BossDamage
     */
    omit?: BossDamageOmit<ExtArgs> | null
    /**
     * The data used to create many BossDamages.
     */
    data: BossDamageCreateManyInput | BossDamageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BossDamageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BossDamage update
   */
  export type BossDamageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BossDamage
     */
    select?: BossDamageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BossDamage
     */
    omit?: BossDamageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BossDamageInclude<ExtArgs> | null
    /**
     * The data needed to update a BossDamage.
     */
    data: XOR<BossDamageUpdateInput, BossDamageUncheckedUpdateInput>
    /**
     * Choose, which BossDamage to update.
     */
    where: BossDamageWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BossDamage updateMany
   */
  export type BossDamageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BossDamages.
     */
    data: XOR<BossDamageUpdateManyMutationInput, BossDamageUncheckedUpdateManyInput>
    /**
     * Filter which BossDamages to update
     */
    where?: BossDamageWhereInput
  }

  /**
   * BossDamage upsert
   */
  export type BossDamageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BossDamage
     */
    select?: BossDamageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BossDamage
     */
    omit?: BossDamageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BossDamageInclude<ExtArgs> | null
    /**
     * The filter to search for the BossDamage to update in case it exists.
     */
    where: BossDamageWhereUniqueInput
    /**
     * In case the BossDamage found by the `where` argument doesn't exist, create a new BossDamage with this data.
     */
    create: XOR<BossDamageCreateInput, BossDamageUncheckedCreateInput>
    /**
     * In case the BossDamage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BossDamageUpdateInput, BossDamageUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BossDamage delete
   */
  export type BossDamageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BossDamage
     */
    select?: BossDamageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BossDamage
     */
    omit?: BossDamageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BossDamageInclude<ExtArgs> | null
    /**
     * Filter which BossDamage to delete.
     */
    where: BossDamageWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * BossDamage deleteMany
   */
  export type BossDamageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BossDamages to delete
     */
    where?: BossDamageWhereInput
  }

  /**
   * BossDamage without action
   */
  export type BossDamageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BossDamage
     */
    select?: BossDamageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BossDamage
     */
    omit?: BossDamageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BossDamageInclude<ExtArgs> | null
  }


  /**
   * Model ClanWar
   */

  export type AggregateClanWar = {
    _count: ClanWarCountAggregateOutputType | null
    _avg: ClanWarAvgAggregateOutputType | null
    _sum: ClanWarSumAggregateOutputType | null
    _min: ClanWarMinAggregateOutputType | null
    _max: ClanWarMaxAggregateOutputType | null
  }

  export type ClanWarAvgAggregateOutputType = {
    duration: number | null
    attackerEloChange: number | null
    attackerWins: number | null
    defenderEloChange: number | null
    defenderWins: number | null
  }

  export type ClanWarSumAggregateOutputType = {
    duration: number | null
    attackerEloChange: number | null
    attackerWins: number | null
    defenderEloChange: number | null
    defenderWins: number | null
  }

  export type ClanWarMinAggregateOutputType = {
    id: string | null
    duration: number | null
    type: $Enums.ClanWarType | null
    date: Date | null
    status: $Enums.ClanWarStatus | null
    attackerId: string | null
    attackerEloChange: number | null
    attackerWins: number | null
    defenderId: string | null
    defenderEloChange: number | null
    defenderWins: number | null
    winnerId: string | null
  }

  export type ClanWarMaxAggregateOutputType = {
    id: string | null
    duration: number | null
    type: $Enums.ClanWarType | null
    date: Date | null
    status: $Enums.ClanWarStatus | null
    attackerId: string | null
    attackerEloChange: number | null
    attackerWins: number | null
    defenderId: string | null
    defenderEloChange: number | null
    defenderWins: number | null
    winnerId: string | null
  }

  export type ClanWarCountAggregateOutputType = {
    id: number
    duration: number
    type: number
    date: number
    status: number
    attackerId: number
    attackerEloChange: number
    attackerWins: number
    defenderId: number
    defenderEloChange: number
    defenderWins: number
    winnerId: number
    _all: number
  }


  export type ClanWarAvgAggregateInputType = {
    duration?: true
    attackerEloChange?: true
    attackerWins?: true
    defenderEloChange?: true
    defenderWins?: true
  }

  export type ClanWarSumAggregateInputType = {
    duration?: true
    attackerEloChange?: true
    attackerWins?: true
    defenderEloChange?: true
    defenderWins?: true
  }

  export type ClanWarMinAggregateInputType = {
    id?: true
    duration?: true
    type?: true
    date?: true
    status?: true
    attackerId?: true
    attackerEloChange?: true
    attackerWins?: true
    defenderId?: true
    defenderEloChange?: true
    defenderWins?: true
    winnerId?: true
  }

  export type ClanWarMaxAggregateInputType = {
    id?: true
    duration?: true
    type?: true
    date?: true
    status?: true
    attackerId?: true
    attackerEloChange?: true
    attackerWins?: true
    defenderId?: true
    defenderEloChange?: true
    defenderWins?: true
    winnerId?: true
  }

  export type ClanWarCountAggregateInputType = {
    id?: true
    duration?: true
    type?: true
    date?: true
    status?: true
    attackerId?: true
    attackerEloChange?: true
    attackerWins?: true
    defenderId?: true
    defenderEloChange?: true
    defenderWins?: true
    winnerId?: true
    _all?: true
  }

  export type ClanWarAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClanWar to aggregate.
     */
    where?: ClanWarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClanWars to fetch.
     */
    orderBy?: ClanWarOrderByWithRelationInput | ClanWarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClanWarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClanWars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClanWars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClanWars
    **/
    _count?: true | ClanWarCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClanWarAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClanWarSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClanWarMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClanWarMaxAggregateInputType
  }

  export type GetClanWarAggregateType<T extends ClanWarAggregateArgs> = {
        [P in keyof T & keyof AggregateClanWar]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClanWar[P]>
      : GetScalarType<T[P], AggregateClanWar[P]>
  }




  export type ClanWarGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClanWarWhereInput
    orderBy?: ClanWarOrderByWithAggregationInput | ClanWarOrderByWithAggregationInput[]
    by: ClanWarScalarFieldEnum[] | ClanWarScalarFieldEnum
    having?: ClanWarScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClanWarCountAggregateInputType | true
    _avg?: ClanWarAvgAggregateInputType
    _sum?: ClanWarSumAggregateInputType
    _min?: ClanWarMinAggregateInputType
    _max?: ClanWarMaxAggregateInputType
  }

  export type ClanWarGroupByOutputType = {
    id: string
    duration: number
    type: $Enums.ClanWarType
    date: Date
    status: $Enums.ClanWarStatus
    attackerId: string
    attackerEloChange: number
    attackerWins: number
    defenderId: string
    defenderEloChange: number
    defenderWins: number
    winnerId: string | null
    _count: ClanWarCountAggregateOutputType | null
    _avg: ClanWarAvgAggregateOutputType | null
    _sum: ClanWarSumAggregateOutputType | null
    _min: ClanWarMinAggregateOutputType | null
    _max: ClanWarMaxAggregateOutputType | null
  }

  type GetClanWarGroupByPayload<T extends ClanWarGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClanWarGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClanWarGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClanWarGroupByOutputType[P]>
            : GetScalarType<T[P], ClanWarGroupByOutputType[P]>
        }
      >
    >


  export type ClanWarSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    duration?: boolean
    type?: boolean
    date?: boolean
    status?: boolean
    attackerId?: boolean
    attackerEloChange?: boolean
    attackerWins?: boolean
    defenderId?: boolean
    defenderEloChange?: boolean
    defenderWins?: boolean
    winnerId?: boolean
    attacker?: boolean | ClanDefaultArgs<ExtArgs>
    defender?: boolean | ClanDefaultArgs<ExtArgs>
    winner?: boolean | ClanWar$winnerArgs<ExtArgs>
    fights?: boolean | ClanWar$fightsArgs<ExtArgs>
    fighters?: boolean | ClanWar$fightersArgs<ExtArgs>
    _count?: boolean | ClanWarCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clanWar"]>

  export type ClanWarSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    duration?: boolean
    type?: boolean
    date?: boolean
    status?: boolean
    attackerId?: boolean
    attackerEloChange?: boolean
    attackerWins?: boolean
    defenderId?: boolean
    defenderEloChange?: boolean
    defenderWins?: boolean
    winnerId?: boolean
    attacker?: boolean | ClanDefaultArgs<ExtArgs>
    defender?: boolean | ClanDefaultArgs<ExtArgs>
    winner?: boolean | ClanWar$winnerArgs<ExtArgs>
  }, ExtArgs["result"]["clanWar"]>

  export type ClanWarSelectScalar = {
    id?: boolean
    duration?: boolean
    type?: boolean
    date?: boolean
    status?: boolean
    attackerId?: boolean
    attackerEloChange?: boolean
    attackerWins?: boolean
    defenderId?: boolean
    defenderEloChange?: boolean
    defenderWins?: boolean
    winnerId?: boolean
  }

  export type ClanWarOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "duration" | "type" | "date" | "status" | "attackerId" | "attackerEloChange" | "attackerWins" | "defenderId" | "defenderEloChange" | "defenderWins" | "winnerId", ExtArgs["result"]["clanWar"]>
  export type ClanWarInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attacker?: boolean | ClanDefaultArgs<ExtArgs>
    defender?: boolean | ClanDefaultArgs<ExtArgs>
    winner?: boolean | ClanWar$winnerArgs<ExtArgs>
    fights?: boolean | ClanWar$fightsArgs<ExtArgs>
    fighters?: boolean | ClanWar$fightersArgs<ExtArgs>
    _count?: boolean | ClanWarCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClanWarIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attacker?: boolean | ClanDefaultArgs<ExtArgs>
    defender?: boolean | ClanDefaultArgs<ExtArgs>
    winner?: boolean | ClanWar$winnerArgs<ExtArgs>
  }

  export type $ClanWarPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ClanWar"
    objects: {
      attacker: Prisma.$ClanPayload<ExtArgs>
      defender: Prisma.$ClanPayload<ExtArgs>
      winner: Prisma.$ClanPayload<ExtArgs> | null
      fights: Prisma.$FightPayload<ExtArgs>[]
      fighters: Prisma.$ClanWarFightersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      duration: number
      type: $Enums.ClanWarType
      date: Date
      status: $Enums.ClanWarStatus
      attackerId: string
      attackerEloChange: number
      attackerWins: number
      defenderId: string
      defenderEloChange: number
      defenderWins: number
      winnerId: string | null
    }, ExtArgs["result"]["clanWar"]>
    composites: {}
  }

  type ClanWarGetPayload<S extends boolean | null | undefined | ClanWarDefaultArgs> = $Result.GetResult<Prisma.$ClanWarPayload, S>

  type ClanWarCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClanWarFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: ClanWarCountAggregateInputType | true
    }

  export interface ClanWarDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClanWar'], meta: { name: 'ClanWar' } }
    /**
     * Find zero or one ClanWar that matches the filter.
     * @param {ClanWarFindUniqueArgs} args - Arguments to find a ClanWar
     * @example
     * // Get one ClanWar
     * const clanWar = await prisma.clanWar.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClanWarFindUniqueArgs>(args: SelectSubset<T, ClanWarFindUniqueArgs<ExtArgs>>): Prisma__ClanWarClient<$Result.GetResult<Prisma.$ClanWarPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one ClanWar that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ClanWarFindUniqueOrThrowArgs} args - Arguments to find a ClanWar
     * @example
     * // Get one ClanWar
     * const clanWar = await prisma.clanWar.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClanWarFindUniqueOrThrowArgs>(args: SelectSubset<T, ClanWarFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClanWarClient<$Result.GetResult<Prisma.$ClanWarPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first ClanWar that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClanWarFindFirstArgs} args - Arguments to find a ClanWar
     * @example
     * // Get one ClanWar
     * const clanWar = await prisma.clanWar.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClanWarFindFirstArgs>(args?: SelectSubset<T, ClanWarFindFirstArgs<ExtArgs>>): Prisma__ClanWarClient<$Result.GetResult<Prisma.$ClanWarPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first ClanWar that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClanWarFindFirstOrThrowArgs} args - Arguments to find a ClanWar
     * @example
     * // Get one ClanWar
     * const clanWar = await prisma.clanWar.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClanWarFindFirstOrThrowArgs>(args?: SelectSubset<T, ClanWarFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClanWarClient<$Result.GetResult<Prisma.$ClanWarPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more ClanWars that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClanWarFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClanWars
     * const clanWars = await prisma.clanWar.findMany()
     * 
     * // Get first 10 ClanWars
     * const clanWars = await prisma.clanWar.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clanWarWithIdOnly = await prisma.clanWar.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClanWarFindManyArgs>(args?: SelectSubset<T, ClanWarFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClanWarPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a ClanWar.
     * @param {ClanWarCreateArgs} args - Arguments to create a ClanWar.
     * @example
     * // Create one ClanWar
     * const ClanWar = await prisma.clanWar.create({
     *   data: {
     *     // ... data to create a ClanWar
     *   }
     * })
     * 
     */
    create<T extends ClanWarCreateArgs>(args: SelectSubset<T, ClanWarCreateArgs<ExtArgs>>): Prisma__ClanWarClient<$Result.GetResult<Prisma.$ClanWarPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many ClanWars.
     * @param {ClanWarCreateManyArgs} args - Arguments to create many ClanWars.
     * @example
     * // Create many ClanWars
     * const clanWar = await prisma.clanWar.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClanWarCreateManyArgs>(args?: SelectSubset<T, ClanWarCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ClanWars and returns the data saved in the database.
     * @param {ClanWarCreateManyAndReturnArgs} args - Arguments to create many ClanWars.
     * @example
     * // Create many ClanWars
     * const clanWar = await prisma.clanWar.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ClanWars and only return the `id`
     * const clanWarWithIdOnly = await prisma.clanWar.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClanWarCreateManyAndReturnArgs>(args?: SelectSubset<T, ClanWarCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClanWarPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a ClanWar.
     * @param {ClanWarDeleteArgs} args - Arguments to delete one ClanWar.
     * @example
     * // Delete one ClanWar
     * const ClanWar = await prisma.clanWar.delete({
     *   where: {
     *     // ... filter to delete one ClanWar
     *   }
     * })
     * 
     */
    delete<T extends ClanWarDeleteArgs>(args: SelectSubset<T, ClanWarDeleteArgs<ExtArgs>>): Prisma__ClanWarClient<$Result.GetResult<Prisma.$ClanWarPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one ClanWar.
     * @param {ClanWarUpdateArgs} args - Arguments to update one ClanWar.
     * @example
     * // Update one ClanWar
     * const clanWar = await prisma.clanWar.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClanWarUpdateArgs>(args: SelectSubset<T, ClanWarUpdateArgs<ExtArgs>>): Prisma__ClanWarClient<$Result.GetResult<Prisma.$ClanWarPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more ClanWars.
     * @param {ClanWarDeleteManyArgs} args - Arguments to filter ClanWars to delete.
     * @example
     * // Delete a few ClanWars
     * const { count } = await prisma.clanWar.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClanWarDeleteManyArgs>(args?: SelectSubset<T, ClanWarDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClanWars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClanWarUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClanWars
     * const clanWar = await prisma.clanWar.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClanWarUpdateManyArgs>(args: SelectSubset<T, ClanWarUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ClanWar.
     * @param {ClanWarUpsertArgs} args - Arguments to update or create a ClanWar.
     * @example
     * // Update or create a ClanWar
     * const clanWar = await prisma.clanWar.upsert({
     *   create: {
     *     // ... data to create a ClanWar
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClanWar we want to update
     *   }
     * })
     */
    upsert<T extends ClanWarUpsertArgs>(args: SelectSubset<T, ClanWarUpsertArgs<ExtArgs>>): Prisma__ClanWarClient<$Result.GetResult<Prisma.$ClanWarPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of ClanWars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClanWarCountArgs} args - Arguments to filter ClanWars to count.
     * @example
     * // Count the number of ClanWars
     * const count = await prisma.clanWar.count({
     *   where: {
     *     // ... the filter for the ClanWars we want to count
     *   }
     * })
    **/
    count<T extends ClanWarCountArgs>(
      args?: Subset<T, ClanWarCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClanWarCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClanWar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClanWarAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClanWarAggregateArgs>(args: Subset<T, ClanWarAggregateArgs>): Prisma.PrismaPromise<GetClanWarAggregateType<T>>

    /**
     * Group by ClanWar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClanWarGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClanWarGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClanWarGroupByArgs['orderBy'] }
        : { orderBy?: ClanWarGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClanWarGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClanWarGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClanWar model
   */
  readonly fields: ClanWarFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClanWar.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClanWarClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    attacker<T extends ClanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClanDefaultArgs<ExtArgs>>): Prisma__ClanClient<$Result.GetResult<Prisma.$ClanPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    defender<T extends ClanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClanDefaultArgs<ExtArgs>>): Prisma__ClanClient<$Result.GetResult<Prisma.$ClanPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    winner<T extends ClanWar$winnerArgs<ExtArgs> = {}>(args?: Subset<T, ClanWar$winnerArgs<ExtArgs>>): Prisma__ClanClient<$Result.GetResult<Prisma.$ClanPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    fights<T extends ClanWar$fightsArgs<ExtArgs> = {}>(args?: Subset<T, ClanWar$fightsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FightPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    fighters<T extends ClanWar$fightersArgs<ExtArgs> = {}>(args?: Subset<T, ClanWar$fightersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClanWarFightersPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ClanWar model
   */ 
  interface ClanWarFieldRefs {
    readonly id: FieldRef<"ClanWar", 'String'>
    readonly duration: FieldRef<"ClanWar", 'Int'>
    readonly type: FieldRef<"ClanWar", 'ClanWarType'>
    readonly date: FieldRef<"ClanWar", 'DateTime'>
    readonly status: FieldRef<"ClanWar", 'ClanWarStatus'>
    readonly attackerId: FieldRef<"ClanWar", 'String'>
    readonly attackerEloChange: FieldRef<"ClanWar", 'Int'>
    readonly attackerWins: FieldRef<"ClanWar", 'Int'>
    readonly defenderId: FieldRef<"ClanWar", 'String'>
    readonly defenderEloChange: FieldRef<"ClanWar", 'Int'>
    readonly defenderWins: FieldRef<"ClanWar", 'Int'>
    readonly winnerId: FieldRef<"ClanWar", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ClanWar findUnique
   */
  export type ClanWarFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanWar
     */
    select?: ClanWarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanWar
     */
    omit?: ClanWarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanWarInclude<ExtArgs> | null
    /**
     * Filter, which ClanWar to fetch.
     */
    where: ClanWarWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ClanWar findUniqueOrThrow
   */
  export type ClanWarFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanWar
     */
    select?: ClanWarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanWar
     */
    omit?: ClanWarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanWarInclude<ExtArgs> | null
    /**
     * Filter, which ClanWar to fetch.
     */
    where: ClanWarWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ClanWar findFirst
   */
  export type ClanWarFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanWar
     */
    select?: ClanWarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanWar
     */
    omit?: ClanWarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanWarInclude<ExtArgs> | null
    /**
     * Filter, which ClanWar to fetch.
     */
    where?: ClanWarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClanWars to fetch.
     */
    orderBy?: ClanWarOrderByWithRelationInput | ClanWarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClanWars.
     */
    cursor?: ClanWarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClanWars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClanWars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClanWars.
     */
    distinct?: ClanWarScalarFieldEnum | ClanWarScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ClanWar findFirstOrThrow
   */
  export type ClanWarFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanWar
     */
    select?: ClanWarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanWar
     */
    omit?: ClanWarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanWarInclude<ExtArgs> | null
    /**
     * Filter, which ClanWar to fetch.
     */
    where?: ClanWarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClanWars to fetch.
     */
    orderBy?: ClanWarOrderByWithRelationInput | ClanWarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClanWars.
     */
    cursor?: ClanWarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClanWars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClanWars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClanWars.
     */
    distinct?: ClanWarScalarFieldEnum | ClanWarScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ClanWar findMany
   */
  export type ClanWarFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanWar
     */
    select?: ClanWarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanWar
     */
    omit?: ClanWarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanWarInclude<ExtArgs> | null
    /**
     * Filter, which ClanWars to fetch.
     */
    where?: ClanWarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClanWars to fetch.
     */
    orderBy?: ClanWarOrderByWithRelationInput | ClanWarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClanWars.
     */
    cursor?: ClanWarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClanWars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClanWars.
     */
    skip?: number
    distinct?: ClanWarScalarFieldEnum | ClanWarScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ClanWar create
   */
  export type ClanWarCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanWar
     */
    select?: ClanWarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanWar
     */
    omit?: ClanWarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanWarInclude<ExtArgs> | null
    /**
     * The data needed to create a ClanWar.
     */
    data: XOR<ClanWarCreateInput, ClanWarUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ClanWar createMany
   */
  export type ClanWarCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClanWars.
     */
    data: ClanWarCreateManyInput | ClanWarCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ClanWar createManyAndReturn
   */
  export type ClanWarCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanWar
     */
    select?: ClanWarSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ClanWar
     */
    omit?: ClanWarOmit<ExtArgs> | null
    /**
     * The data used to create many ClanWars.
     */
    data: ClanWarCreateManyInput | ClanWarCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanWarIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ClanWar update
   */
  export type ClanWarUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanWar
     */
    select?: ClanWarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanWar
     */
    omit?: ClanWarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanWarInclude<ExtArgs> | null
    /**
     * The data needed to update a ClanWar.
     */
    data: XOR<ClanWarUpdateInput, ClanWarUncheckedUpdateInput>
    /**
     * Choose, which ClanWar to update.
     */
    where: ClanWarWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ClanWar updateMany
   */
  export type ClanWarUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClanWars.
     */
    data: XOR<ClanWarUpdateManyMutationInput, ClanWarUncheckedUpdateManyInput>
    /**
     * Filter which ClanWars to update
     */
    where?: ClanWarWhereInput
  }

  /**
   * ClanWar upsert
   */
  export type ClanWarUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanWar
     */
    select?: ClanWarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanWar
     */
    omit?: ClanWarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanWarInclude<ExtArgs> | null
    /**
     * The filter to search for the ClanWar to update in case it exists.
     */
    where: ClanWarWhereUniqueInput
    /**
     * In case the ClanWar found by the `where` argument doesn't exist, create a new ClanWar with this data.
     */
    create: XOR<ClanWarCreateInput, ClanWarUncheckedCreateInput>
    /**
     * In case the ClanWar was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClanWarUpdateInput, ClanWarUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ClanWar delete
   */
  export type ClanWarDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanWar
     */
    select?: ClanWarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanWar
     */
    omit?: ClanWarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanWarInclude<ExtArgs> | null
    /**
     * Filter which ClanWar to delete.
     */
    where: ClanWarWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ClanWar deleteMany
   */
  export type ClanWarDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClanWars to delete
     */
    where?: ClanWarWhereInput
  }

  /**
   * ClanWar.winner
   */
  export type ClanWar$winnerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clan
     */
    select?: ClanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clan
     */
    omit?: ClanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanInclude<ExtArgs> | null
    where?: ClanWhereInput
  }

  /**
   * ClanWar.fights
   */
  export type ClanWar$fightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fight
     */
    select?: FightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Fight
     */
    omit?: FightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FightInclude<ExtArgs> | null
    where?: FightWhereInput
    orderBy?: FightOrderByWithRelationInput | FightOrderByWithRelationInput[]
    cursor?: FightWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FightScalarFieldEnum | FightScalarFieldEnum[]
  }

  /**
   * ClanWar.fighters
   */
  export type ClanWar$fightersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanWarFighters
     */
    select?: ClanWarFightersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanWarFighters
     */
    omit?: ClanWarFightersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanWarFightersInclude<ExtArgs> | null
    where?: ClanWarFightersWhereInput
    orderBy?: ClanWarFightersOrderByWithRelationInput | ClanWarFightersOrderByWithRelationInput[]
    cursor?: ClanWarFightersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClanWarFightersScalarFieldEnum | ClanWarFightersScalarFieldEnum[]
  }

  /**
   * ClanWar without action
   */
  export type ClanWarDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanWar
     */
    select?: ClanWarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanWar
     */
    omit?: ClanWarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanWarInclude<ExtArgs> | null
  }


  /**
   * Model ClanWarFighters
   */

  export type AggregateClanWarFighters = {
    _count: ClanWarFightersCountAggregateOutputType | null
    _avg: ClanWarFightersAvgAggregateOutputType | null
    _sum: ClanWarFightersSumAggregateOutputType | null
    _min: ClanWarFightersMinAggregateOutputType | null
    _max: ClanWarFightersMaxAggregateOutputType | null
  }

  export type ClanWarFightersAvgAggregateOutputType = {
    day: number | null
  }

  export type ClanWarFightersSumAggregateOutputType = {
    day: number | null
  }

  export type ClanWarFightersMinAggregateOutputType = {
    id: string | null
    clanWarId: string | null
    day: number | null
  }

  export type ClanWarFightersMaxAggregateOutputType = {
    id: string | null
    clanWarId: string | null
    day: number | null
  }

  export type ClanWarFightersCountAggregateOutputType = {
    id: number
    clanWarId: number
    day: number
    _all: number
  }


  export type ClanWarFightersAvgAggregateInputType = {
    day?: true
  }

  export type ClanWarFightersSumAggregateInputType = {
    day?: true
  }

  export type ClanWarFightersMinAggregateInputType = {
    id?: true
    clanWarId?: true
    day?: true
  }

  export type ClanWarFightersMaxAggregateInputType = {
    id?: true
    clanWarId?: true
    day?: true
  }

  export type ClanWarFightersCountAggregateInputType = {
    id?: true
    clanWarId?: true
    day?: true
    _all?: true
  }

  export type ClanWarFightersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClanWarFighters to aggregate.
     */
    where?: ClanWarFightersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClanWarFighters to fetch.
     */
    orderBy?: ClanWarFightersOrderByWithRelationInput | ClanWarFightersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClanWarFightersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClanWarFighters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClanWarFighters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClanWarFighters
    **/
    _count?: true | ClanWarFightersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClanWarFightersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClanWarFightersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClanWarFightersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClanWarFightersMaxAggregateInputType
  }

  export type GetClanWarFightersAggregateType<T extends ClanWarFightersAggregateArgs> = {
        [P in keyof T & keyof AggregateClanWarFighters]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClanWarFighters[P]>
      : GetScalarType<T[P], AggregateClanWarFighters[P]>
  }




  export type ClanWarFightersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClanWarFightersWhereInput
    orderBy?: ClanWarFightersOrderByWithAggregationInput | ClanWarFightersOrderByWithAggregationInput[]
    by: ClanWarFightersScalarFieldEnum[] | ClanWarFightersScalarFieldEnum
    having?: ClanWarFightersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClanWarFightersCountAggregateInputType | true
    _avg?: ClanWarFightersAvgAggregateInputType
    _sum?: ClanWarFightersSumAggregateInputType
    _min?: ClanWarFightersMinAggregateInputType
    _max?: ClanWarFightersMaxAggregateInputType
  }

  export type ClanWarFightersGroupByOutputType = {
    id: string
    clanWarId: string
    day: number
    _count: ClanWarFightersCountAggregateOutputType | null
    _avg: ClanWarFightersAvgAggregateOutputType | null
    _sum: ClanWarFightersSumAggregateOutputType | null
    _min: ClanWarFightersMinAggregateOutputType | null
    _max: ClanWarFightersMaxAggregateOutputType | null
  }

  type GetClanWarFightersGroupByPayload<T extends ClanWarFightersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClanWarFightersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClanWarFightersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClanWarFightersGroupByOutputType[P]>
            : GetScalarType<T[P], ClanWarFightersGroupByOutputType[P]>
        }
      >
    >


  export type ClanWarFightersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clanWarId?: boolean
    day?: boolean
    clanWar?: boolean | ClanWarDefaultArgs<ExtArgs>
    attackers?: boolean | ClanWarFighters$attackersArgs<ExtArgs>
    defenders?: boolean | ClanWarFighters$defendersArgs<ExtArgs>
    _count?: boolean | ClanWarFightersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clanWarFighters"]>

  export type ClanWarFightersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clanWarId?: boolean
    day?: boolean
    clanWar?: boolean | ClanWarDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clanWarFighters"]>

  export type ClanWarFightersSelectScalar = {
    id?: boolean
    clanWarId?: boolean
    day?: boolean
  }

  export type ClanWarFightersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clanWarId" | "day", ExtArgs["result"]["clanWarFighters"]>
  export type ClanWarFightersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clanWar?: boolean | ClanWarDefaultArgs<ExtArgs>
    attackers?: boolean | ClanWarFighters$attackersArgs<ExtArgs>
    defenders?: boolean | ClanWarFighters$defendersArgs<ExtArgs>
    _count?: boolean | ClanWarFightersCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClanWarFightersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clanWar?: boolean | ClanWarDefaultArgs<ExtArgs>
  }

  export type $ClanWarFightersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ClanWarFighters"
    objects: {
      clanWar: Prisma.$ClanWarPayload<ExtArgs>
      attackers: Prisma.$BrutePayload<ExtArgs>[]
      defenders: Prisma.$BrutePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clanWarId: string
      day: number
    }, ExtArgs["result"]["clanWarFighters"]>
    composites: {}
  }

  type ClanWarFightersGetPayload<S extends boolean | null | undefined | ClanWarFightersDefaultArgs> = $Result.GetResult<Prisma.$ClanWarFightersPayload, S>

  type ClanWarFightersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClanWarFightersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: ClanWarFightersCountAggregateInputType | true
    }

  export interface ClanWarFightersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClanWarFighters'], meta: { name: 'ClanWarFighters' } }
    /**
     * Find zero or one ClanWarFighters that matches the filter.
     * @param {ClanWarFightersFindUniqueArgs} args - Arguments to find a ClanWarFighters
     * @example
     * // Get one ClanWarFighters
     * const clanWarFighters = await prisma.clanWarFighters.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClanWarFightersFindUniqueArgs>(args: SelectSubset<T, ClanWarFightersFindUniqueArgs<ExtArgs>>): Prisma__ClanWarFightersClient<$Result.GetResult<Prisma.$ClanWarFightersPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one ClanWarFighters that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ClanWarFightersFindUniqueOrThrowArgs} args - Arguments to find a ClanWarFighters
     * @example
     * // Get one ClanWarFighters
     * const clanWarFighters = await prisma.clanWarFighters.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClanWarFightersFindUniqueOrThrowArgs>(args: SelectSubset<T, ClanWarFightersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClanWarFightersClient<$Result.GetResult<Prisma.$ClanWarFightersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first ClanWarFighters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClanWarFightersFindFirstArgs} args - Arguments to find a ClanWarFighters
     * @example
     * // Get one ClanWarFighters
     * const clanWarFighters = await prisma.clanWarFighters.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClanWarFightersFindFirstArgs>(args?: SelectSubset<T, ClanWarFightersFindFirstArgs<ExtArgs>>): Prisma__ClanWarFightersClient<$Result.GetResult<Prisma.$ClanWarFightersPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first ClanWarFighters that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClanWarFightersFindFirstOrThrowArgs} args - Arguments to find a ClanWarFighters
     * @example
     * // Get one ClanWarFighters
     * const clanWarFighters = await prisma.clanWarFighters.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClanWarFightersFindFirstOrThrowArgs>(args?: SelectSubset<T, ClanWarFightersFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClanWarFightersClient<$Result.GetResult<Prisma.$ClanWarFightersPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more ClanWarFighters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClanWarFightersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClanWarFighters
     * const clanWarFighters = await prisma.clanWarFighters.findMany()
     * 
     * // Get first 10 ClanWarFighters
     * const clanWarFighters = await prisma.clanWarFighters.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clanWarFightersWithIdOnly = await prisma.clanWarFighters.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClanWarFightersFindManyArgs>(args?: SelectSubset<T, ClanWarFightersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClanWarFightersPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a ClanWarFighters.
     * @param {ClanWarFightersCreateArgs} args - Arguments to create a ClanWarFighters.
     * @example
     * // Create one ClanWarFighters
     * const ClanWarFighters = await prisma.clanWarFighters.create({
     *   data: {
     *     // ... data to create a ClanWarFighters
     *   }
     * })
     * 
     */
    create<T extends ClanWarFightersCreateArgs>(args: SelectSubset<T, ClanWarFightersCreateArgs<ExtArgs>>): Prisma__ClanWarFightersClient<$Result.GetResult<Prisma.$ClanWarFightersPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many ClanWarFighters.
     * @param {ClanWarFightersCreateManyArgs} args - Arguments to create many ClanWarFighters.
     * @example
     * // Create many ClanWarFighters
     * const clanWarFighters = await prisma.clanWarFighters.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClanWarFightersCreateManyArgs>(args?: SelectSubset<T, ClanWarFightersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ClanWarFighters and returns the data saved in the database.
     * @param {ClanWarFightersCreateManyAndReturnArgs} args - Arguments to create many ClanWarFighters.
     * @example
     * // Create many ClanWarFighters
     * const clanWarFighters = await prisma.clanWarFighters.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ClanWarFighters and only return the `id`
     * const clanWarFightersWithIdOnly = await prisma.clanWarFighters.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClanWarFightersCreateManyAndReturnArgs>(args?: SelectSubset<T, ClanWarFightersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClanWarFightersPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a ClanWarFighters.
     * @param {ClanWarFightersDeleteArgs} args - Arguments to delete one ClanWarFighters.
     * @example
     * // Delete one ClanWarFighters
     * const ClanWarFighters = await prisma.clanWarFighters.delete({
     *   where: {
     *     // ... filter to delete one ClanWarFighters
     *   }
     * })
     * 
     */
    delete<T extends ClanWarFightersDeleteArgs>(args: SelectSubset<T, ClanWarFightersDeleteArgs<ExtArgs>>): Prisma__ClanWarFightersClient<$Result.GetResult<Prisma.$ClanWarFightersPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one ClanWarFighters.
     * @param {ClanWarFightersUpdateArgs} args - Arguments to update one ClanWarFighters.
     * @example
     * // Update one ClanWarFighters
     * const clanWarFighters = await prisma.clanWarFighters.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClanWarFightersUpdateArgs>(args: SelectSubset<T, ClanWarFightersUpdateArgs<ExtArgs>>): Prisma__ClanWarFightersClient<$Result.GetResult<Prisma.$ClanWarFightersPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more ClanWarFighters.
     * @param {ClanWarFightersDeleteManyArgs} args - Arguments to filter ClanWarFighters to delete.
     * @example
     * // Delete a few ClanWarFighters
     * const { count } = await prisma.clanWarFighters.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClanWarFightersDeleteManyArgs>(args?: SelectSubset<T, ClanWarFightersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClanWarFighters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClanWarFightersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClanWarFighters
     * const clanWarFighters = await prisma.clanWarFighters.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClanWarFightersUpdateManyArgs>(args: SelectSubset<T, ClanWarFightersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ClanWarFighters.
     * @param {ClanWarFightersUpsertArgs} args - Arguments to update or create a ClanWarFighters.
     * @example
     * // Update or create a ClanWarFighters
     * const clanWarFighters = await prisma.clanWarFighters.upsert({
     *   create: {
     *     // ... data to create a ClanWarFighters
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClanWarFighters we want to update
     *   }
     * })
     */
    upsert<T extends ClanWarFightersUpsertArgs>(args: SelectSubset<T, ClanWarFightersUpsertArgs<ExtArgs>>): Prisma__ClanWarFightersClient<$Result.GetResult<Prisma.$ClanWarFightersPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of ClanWarFighters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClanWarFightersCountArgs} args - Arguments to filter ClanWarFighters to count.
     * @example
     * // Count the number of ClanWarFighters
     * const count = await prisma.clanWarFighters.count({
     *   where: {
     *     // ... the filter for the ClanWarFighters we want to count
     *   }
     * })
    **/
    count<T extends ClanWarFightersCountArgs>(
      args?: Subset<T, ClanWarFightersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClanWarFightersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClanWarFighters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClanWarFightersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClanWarFightersAggregateArgs>(args: Subset<T, ClanWarFightersAggregateArgs>): Prisma.PrismaPromise<GetClanWarFightersAggregateType<T>>

    /**
     * Group by ClanWarFighters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClanWarFightersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClanWarFightersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClanWarFightersGroupByArgs['orderBy'] }
        : { orderBy?: ClanWarFightersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClanWarFightersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClanWarFightersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClanWarFighters model
   */
  readonly fields: ClanWarFightersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClanWarFighters.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClanWarFightersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    clanWar<T extends ClanWarDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClanWarDefaultArgs<ExtArgs>>): Prisma__ClanWarClient<$Result.GetResult<Prisma.$ClanWarPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    attackers<T extends ClanWarFighters$attackersArgs<ExtArgs> = {}>(args?: Subset<T, ClanWarFighters$attackersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrutePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    defenders<T extends ClanWarFighters$defendersArgs<ExtArgs> = {}>(args?: Subset<T, ClanWarFighters$defendersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrutePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ClanWarFighters model
   */ 
  interface ClanWarFightersFieldRefs {
    readonly id: FieldRef<"ClanWarFighters", 'String'>
    readonly clanWarId: FieldRef<"ClanWarFighters", 'String'>
    readonly day: FieldRef<"ClanWarFighters", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ClanWarFighters findUnique
   */
  export type ClanWarFightersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanWarFighters
     */
    select?: ClanWarFightersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanWarFighters
     */
    omit?: ClanWarFightersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanWarFightersInclude<ExtArgs> | null
    /**
     * Filter, which ClanWarFighters to fetch.
     */
    where: ClanWarFightersWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ClanWarFighters findUniqueOrThrow
   */
  export type ClanWarFightersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanWarFighters
     */
    select?: ClanWarFightersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanWarFighters
     */
    omit?: ClanWarFightersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanWarFightersInclude<ExtArgs> | null
    /**
     * Filter, which ClanWarFighters to fetch.
     */
    where: ClanWarFightersWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ClanWarFighters findFirst
   */
  export type ClanWarFightersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanWarFighters
     */
    select?: ClanWarFightersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanWarFighters
     */
    omit?: ClanWarFightersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanWarFightersInclude<ExtArgs> | null
    /**
     * Filter, which ClanWarFighters to fetch.
     */
    where?: ClanWarFightersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClanWarFighters to fetch.
     */
    orderBy?: ClanWarFightersOrderByWithRelationInput | ClanWarFightersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClanWarFighters.
     */
    cursor?: ClanWarFightersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClanWarFighters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClanWarFighters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClanWarFighters.
     */
    distinct?: ClanWarFightersScalarFieldEnum | ClanWarFightersScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ClanWarFighters findFirstOrThrow
   */
  export type ClanWarFightersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanWarFighters
     */
    select?: ClanWarFightersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanWarFighters
     */
    omit?: ClanWarFightersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanWarFightersInclude<ExtArgs> | null
    /**
     * Filter, which ClanWarFighters to fetch.
     */
    where?: ClanWarFightersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClanWarFighters to fetch.
     */
    orderBy?: ClanWarFightersOrderByWithRelationInput | ClanWarFightersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClanWarFighters.
     */
    cursor?: ClanWarFightersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClanWarFighters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClanWarFighters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClanWarFighters.
     */
    distinct?: ClanWarFightersScalarFieldEnum | ClanWarFightersScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ClanWarFighters findMany
   */
  export type ClanWarFightersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanWarFighters
     */
    select?: ClanWarFightersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanWarFighters
     */
    omit?: ClanWarFightersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanWarFightersInclude<ExtArgs> | null
    /**
     * Filter, which ClanWarFighters to fetch.
     */
    where?: ClanWarFightersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClanWarFighters to fetch.
     */
    orderBy?: ClanWarFightersOrderByWithRelationInput | ClanWarFightersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClanWarFighters.
     */
    cursor?: ClanWarFightersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClanWarFighters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClanWarFighters.
     */
    skip?: number
    distinct?: ClanWarFightersScalarFieldEnum | ClanWarFightersScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ClanWarFighters create
   */
  export type ClanWarFightersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanWarFighters
     */
    select?: ClanWarFightersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanWarFighters
     */
    omit?: ClanWarFightersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanWarFightersInclude<ExtArgs> | null
    /**
     * The data needed to create a ClanWarFighters.
     */
    data: XOR<ClanWarFightersCreateInput, ClanWarFightersUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ClanWarFighters createMany
   */
  export type ClanWarFightersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClanWarFighters.
     */
    data: ClanWarFightersCreateManyInput | ClanWarFightersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ClanWarFighters createManyAndReturn
   */
  export type ClanWarFightersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanWarFighters
     */
    select?: ClanWarFightersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ClanWarFighters
     */
    omit?: ClanWarFightersOmit<ExtArgs> | null
    /**
     * The data used to create many ClanWarFighters.
     */
    data: ClanWarFightersCreateManyInput | ClanWarFightersCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanWarFightersIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ClanWarFighters update
   */
  export type ClanWarFightersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanWarFighters
     */
    select?: ClanWarFightersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanWarFighters
     */
    omit?: ClanWarFightersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanWarFightersInclude<ExtArgs> | null
    /**
     * The data needed to update a ClanWarFighters.
     */
    data: XOR<ClanWarFightersUpdateInput, ClanWarFightersUncheckedUpdateInput>
    /**
     * Choose, which ClanWarFighters to update.
     */
    where: ClanWarFightersWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ClanWarFighters updateMany
   */
  export type ClanWarFightersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClanWarFighters.
     */
    data: XOR<ClanWarFightersUpdateManyMutationInput, ClanWarFightersUncheckedUpdateManyInput>
    /**
     * Filter which ClanWarFighters to update
     */
    where?: ClanWarFightersWhereInput
  }

  /**
   * ClanWarFighters upsert
   */
  export type ClanWarFightersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanWarFighters
     */
    select?: ClanWarFightersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanWarFighters
     */
    omit?: ClanWarFightersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanWarFightersInclude<ExtArgs> | null
    /**
     * The filter to search for the ClanWarFighters to update in case it exists.
     */
    where: ClanWarFightersWhereUniqueInput
    /**
     * In case the ClanWarFighters found by the `where` argument doesn't exist, create a new ClanWarFighters with this data.
     */
    create: XOR<ClanWarFightersCreateInput, ClanWarFightersUncheckedCreateInput>
    /**
     * In case the ClanWarFighters was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClanWarFightersUpdateInput, ClanWarFightersUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ClanWarFighters delete
   */
  export type ClanWarFightersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanWarFighters
     */
    select?: ClanWarFightersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanWarFighters
     */
    omit?: ClanWarFightersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanWarFightersInclude<ExtArgs> | null
    /**
     * Filter which ClanWarFighters to delete.
     */
    where: ClanWarFightersWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * ClanWarFighters deleteMany
   */
  export type ClanWarFightersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClanWarFighters to delete
     */
    where?: ClanWarFightersWhereInput
  }

  /**
   * ClanWarFighters.attackers
   */
  export type ClanWarFighters$attackersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brute
     */
    omit?: BruteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteInclude<ExtArgs> | null
    where?: BruteWhereInput
    orderBy?: BruteOrderByWithRelationInput | BruteOrderByWithRelationInput[]
    cursor?: BruteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BruteScalarFieldEnum | BruteScalarFieldEnum[]
  }

  /**
   * ClanWarFighters.defenders
   */
  export type ClanWarFighters$defendersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brute
     */
    omit?: BruteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteInclude<ExtArgs> | null
    where?: BruteWhereInput
    orderBy?: BruteOrderByWithRelationInput | BruteOrderByWithRelationInput[]
    cursor?: BruteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BruteScalarFieldEnum | BruteScalarFieldEnum[]
  }

  /**
   * ClanWarFighters without action
   */
  export type ClanWarFightersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClanWarFighters
     */
    select?: ClanWarFightersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClanWarFighters
     */
    omit?: ClanWarFightersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClanWarFightersInclude<ExtArgs> | null
  }


  /**
   * Model InventoryItem
   */

  export type AggregateInventoryItem = {
    _count: InventoryItemCountAggregateOutputType | null
    _avg: InventoryItemAvgAggregateOutputType | null
    _sum: InventoryItemSumAggregateOutputType | null
    _min: InventoryItemMinAggregateOutputType | null
    _max: InventoryItemMaxAggregateOutputType | null
  }

  export type InventoryItemAvgAggregateOutputType = {
    count: number | null
  }

  export type InventoryItemSumAggregateOutputType = {
    count: number | null
  }

  export type InventoryItemMinAggregateOutputType = {
    id: string | null
    type: $Enums.InventoryItemType | null
    count: number | null
    bruteId: string | null
    userId: string | null
  }

  export type InventoryItemMaxAggregateOutputType = {
    id: string | null
    type: $Enums.InventoryItemType | null
    count: number | null
    bruteId: string | null
    userId: string | null
  }

  export type InventoryItemCountAggregateOutputType = {
    id: number
    type: number
    count: number
    bruteId: number
    userId: number
    _all: number
  }


  export type InventoryItemAvgAggregateInputType = {
    count?: true
  }

  export type InventoryItemSumAggregateInputType = {
    count?: true
  }

  export type InventoryItemMinAggregateInputType = {
    id?: true
    type?: true
    count?: true
    bruteId?: true
    userId?: true
  }

  export type InventoryItemMaxAggregateInputType = {
    id?: true
    type?: true
    count?: true
    bruteId?: true
    userId?: true
  }

  export type InventoryItemCountAggregateInputType = {
    id?: true
    type?: true
    count?: true
    bruteId?: true
    userId?: true
    _all?: true
  }

  export type InventoryItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryItem to aggregate.
     */
    where?: InventoryItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryItems to fetch.
     */
    orderBy?: InventoryItemOrderByWithRelationInput | InventoryItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InventoryItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InventoryItems
    **/
    _count?: true | InventoryItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InventoryItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InventoryItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InventoryItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InventoryItemMaxAggregateInputType
  }

  export type GetInventoryItemAggregateType<T extends InventoryItemAggregateArgs> = {
        [P in keyof T & keyof AggregateInventoryItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInventoryItem[P]>
      : GetScalarType<T[P], AggregateInventoryItem[P]>
  }




  export type InventoryItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryItemWhereInput
    orderBy?: InventoryItemOrderByWithAggregationInput | InventoryItemOrderByWithAggregationInput[]
    by: InventoryItemScalarFieldEnum[] | InventoryItemScalarFieldEnum
    having?: InventoryItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InventoryItemCountAggregateInputType | true
    _avg?: InventoryItemAvgAggregateInputType
    _sum?: InventoryItemSumAggregateInputType
    _min?: InventoryItemMinAggregateInputType
    _max?: InventoryItemMaxAggregateInputType
  }

  export type InventoryItemGroupByOutputType = {
    id: string
    type: $Enums.InventoryItemType
    count: number
    bruteId: string | null
    userId: string | null
    _count: InventoryItemCountAggregateOutputType | null
    _avg: InventoryItemAvgAggregateOutputType | null
    _sum: InventoryItemSumAggregateOutputType | null
    _min: InventoryItemMinAggregateOutputType | null
    _max: InventoryItemMaxAggregateOutputType | null
  }

  type GetInventoryItemGroupByPayload<T extends InventoryItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InventoryItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InventoryItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InventoryItemGroupByOutputType[P]>
            : GetScalarType<T[P], InventoryItemGroupByOutputType[P]>
        }
      >
    >


  export type InventoryItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    count?: boolean
    bruteId?: boolean
    userId?: boolean
    brute?: boolean | InventoryItem$bruteArgs<ExtArgs>
    user?: boolean | InventoryItem$userArgs<ExtArgs>
  }, ExtArgs["result"]["inventoryItem"]>

  export type InventoryItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    count?: boolean
    bruteId?: boolean
    userId?: boolean
    brute?: boolean | InventoryItem$bruteArgs<ExtArgs>
    user?: boolean | InventoryItem$userArgs<ExtArgs>
  }, ExtArgs["result"]["inventoryItem"]>

  export type InventoryItemSelectScalar = {
    id?: boolean
    type?: boolean
    count?: boolean
    bruteId?: boolean
    userId?: boolean
  }

  export type InventoryItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "count" | "bruteId" | "userId", ExtArgs["result"]["inventoryItem"]>
  export type InventoryItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brute?: boolean | InventoryItem$bruteArgs<ExtArgs>
    user?: boolean | InventoryItem$userArgs<ExtArgs>
  }
  export type InventoryItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brute?: boolean | InventoryItem$bruteArgs<ExtArgs>
    user?: boolean | InventoryItem$userArgs<ExtArgs>
  }

  export type $InventoryItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InventoryItem"
    objects: {
      brute: Prisma.$BrutePayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: $Enums.InventoryItemType
      count: number
      bruteId: string | null
      userId: string | null
    }, ExtArgs["result"]["inventoryItem"]>
    composites: {}
  }

  type InventoryItemGetPayload<S extends boolean | null | undefined | InventoryItemDefaultArgs> = $Result.GetResult<Prisma.$InventoryItemPayload, S>

  type InventoryItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InventoryItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: InventoryItemCountAggregateInputType | true
    }

  export interface InventoryItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InventoryItem'], meta: { name: 'InventoryItem' } }
    /**
     * Find zero or one InventoryItem that matches the filter.
     * @param {InventoryItemFindUniqueArgs} args - Arguments to find a InventoryItem
     * @example
     * // Get one InventoryItem
     * const inventoryItem = await prisma.inventoryItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InventoryItemFindUniqueArgs>(args: SelectSubset<T, InventoryItemFindUniqueArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one InventoryItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InventoryItemFindUniqueOrThrowArgs} args - Arguments to find a InventoryItem
     * @example
     * // Get one InventoryItem
     * const inventoryItem = await prisma.inventoryItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InventoryItemFindUniqueOrThrowArgs>(args: SelectSubset<T, InventoryItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first InventoryItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemFindFirstArgs} args - Arguments to find a InventoryItem
     * @example
     * // Get one InventoryItem
     * const inventoryItem = await prisma.inventoryItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InventoryItemFindFirstArgs>(args?: SelectSubset<T, InventoryItemFindFirstArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first InventoryItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemFindFirstOrThrowArgs} args - Arguments to find a InventoryItem
     * @example
     * // Get one InventoryItem
     * const inventoryItem = await prisma.inventoryItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InventoryItemFindFirstOrThrowArgs>(args?: SelectSubset<T, InventoryItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more InventoryItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InventoryItems
     * const inventoryItems = await prisma.inventoryItem.findMany()
     * 
     * // Get first 10 InventoryItems
     * const inventoryItems = await prisma.inventoryItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inventoryItemWithIdOnly = await prisma.inventoryItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InventoryItemFindManyArgs>(args?: SelectSubset<T, InventoryItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a InventoryItem.
     * @param {InventoryItemCreateArgs} args - Arguments to create a InventoryItem.
     * @example
     * // Create one InventoryItem
     * const InventoryItem = await prisma.inventoryItem.create({
     *   data: {
     *     // ... data to create a InventoryItem
     *   }
     * })
     * 
     */
    create<T extends InventoryItemCreateArgs>(args: SelectSubset<T, InventoryItemCreateArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many InventoryItems.
     * @param {InventoryItemCreateManyArgs} args - Arguments to create many InventoryItems.
     * @example
     * // Create many InventoryItems
     * const inventoryItem = await prisma.inventoryItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InventoryItemCreateManyArgs>(args?: SelectSubset<T, InventoryItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InventoryItems and returns the data saved in the database.
     * @param {InventoryItemCreateManyAndReturnArgs} args - Arguments to create many InventoryItems.
     * @example
     * // Create many InventoryItems
     * const inventoryItem = await prisma.inventoryItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InventoryItems and only return the `id`
     * const inventoryItemWithIdOnly = await prisma.inventoryItem.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InventoryItemCreateManyAndReturnArgs>(args?: SelectSubset<T, InventoryItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a InventoryItem.
     * @param {InventoryItemDeleteArgs} args - Arguments to delete one InventoryItem.
     * @example
     * // Delete one InventoryItem
     * const InventoryItem = await prisma.inventoryItem.delete({
     *   where: {
     *     // ... filter to delete one InventoryItem
     *   }
     * })
     * 
     */
    delete<T extends InventoryItemDeleteArgs>(args: SelectSubset<T, InventoryItemDeleteArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one InventoryItem.
     * @param {InventoryItemUpdateArgs} args - Arguments to update one InventoryItem.
     * @example
     * // Update one InventoryItem
     * const inventoryItem = await prisma.inventoryItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InventoryItemUpdateArgs>(args: SelectSubset<T, InventoryItemUpdateArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more InventoryItems.
     * @param {InventoryItemDeleteManyArgs} args - Arguments to filter InventoryItems to delete.
     * @example
     * // Delete a few InventoryItems
     * const { count } = await prisma.inventoryItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InventoryItemDeleteManyArgs>(args?: SelectSubset<T, InventoryItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InventoryItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InventoryItems
     * const inventoryItem = await prisma.inventoryItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InventoryItemUpdateManyArgs>(args: SelectSubset<T, InventoryItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one InventoryItem.
     * @param {InventoryItemUpsertArgs} args - Arguments to update or create a InventoryItem.
     * @example
     * // Update or create a InventoryItem
     * const inventoryItem = await prisma.inventoryItem.upsert({
     *   create: {
     *     // ... data to create a InventoryItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InventoryItem we want to update
     *   }
     * })
     */
    upsert<T extends InventoryItemUpsertArgs>(args: SelectSubset<T, InventoryItemUpsertArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of InventoryItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemCountArgs} args - Arguments to filter InventoryItems to count.
     * @example
     * // Count the number of InventoryItems
     * const count = await prisma.inventoryItem.count({
     *   where: {
     *     // ... the filter for the InventoryItems we want to count
     *   }
     * })
    **/
    count<T extends InventoryItemCountArgs>(
      args?: Subset<T, InventoryItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InventoryItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InventoryItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InventoryItemAggregateArgs>(args: Subset<T, InventoryItemAggregateArgs>): Prisma.PrismaPromise<GetInventoryItemAggregateType<T>>

    /**
     * Group by InventoryItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InventoryItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InventoryItemGroupByArgs['orderBy'] }
        : { orderBy?: InventoryItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InventoryItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInventoryItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InventoryItem model
   */
  readonly fields: InventoryItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InventoryItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InventoryItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    brute<T extends InventoryItem$bruteArgs<ExtArgs> = {}>(args?: Subset<T, InventoryItem$bruteArgs<ExtArgs>>): Prisma__BruteClient<$Result.GetResult<Prisma.$BrutePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    user<T extends InventoryItem$userArgs<ExtArgs> = {}>(args?: Subset<T, InventoryItem$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InventoryItem model
   */ 
  interface InventoryItemFieldRefs {
    readonly id: FieldRef<"InventoryItem", 'String'>
    readonly type: FieldRef<"InventoryItem", 'InventoryItemType'>
    readonly count: FieldRef<"InventoryItem", 'Int'>
    readonly bruteId: FieldRef<"InventoryItem", 'String'>
    readonly userId: FieldRef<"InventoryItem", 'String'>
  }
    

  // Custom InputTypes
  /**
   * InventoryItem findUnique
   */
  export type InventoryItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    /**
     * Filter, which InventoryItem to fetch.
     */
    where: InventoryItemWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * InventoryItem findUniqueOrThrow
   */
  export type InventoryItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    /**
     * Filter, which InventoryItem to fetch.
     */
    where: InventoryItemWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * InventoryItem findFirst
   */
  export type InventoryItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    /**
     * Filter, which InventoryItem to fetch.
     */
    where?: InventoryItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryItems to fetch.
     */
    orderBy?: InventoryItemOrderByWithRelationInput | InventoryItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryItems.
     */
    cursor?: InventoryItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryItems.
     */
    distinct?: InventoryItemScalarFieldEnum | InventoryItemScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * InventoryItem findFirstOrThrow
   */
  export type InventoryItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    /**
     * Filter, which InventoryItem to fetch.
     */
    where?: InventoryItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryItems to fetch.
     */
    orderBy?: InventoryItemOrderByWithRelationInput | InventoryItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryItems.
     */
    cursor?: InventoryItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryItems.
     */
    distinct?: InventoryItemScalarFieldEnum | InventoryItemScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * InventoryItem findMany
   */
  export type InventoryItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    /**
     * Filter, which InventoryItems to fetch.
     */
    where?: InventoryItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryItems to fetch.
     */
    orderBy?: InventoryItemOrderByWithRelationInput | InventoryItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InventoryItems.
     */
    cursor?: InventoryItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryItems.
     */
    skip?: number
    distinct?: InventoryItemScalarFieldEnum | InventoryItemScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * InventoryItem create
   */
  export type InventoryItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    /**
     * The data needed to create a InventoryItem.
     */
    data: XOR<InventoryItemCreateInput, InventoryItemUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * InventoryItem createMany
   */
  export type InventoryItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InventoryItems.
     */
    data: InventoryItemCreateManyInput | InventoryItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InventoryItem createManyAndReturn
   */
  export type InventoryItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
    /**
     * The data used to create many InventoryItems.
     */
    data: InventoryItemCreateManyInput | InventoryItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InventoryItem update
   */
  export type InventoryItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    /**
     * The data needed to update a InventoryItem.
     */
    data: XOR<InventoryItemUpdateInput, InventoryItemUncheckedUpdateInput>
    /**
     * Choose, which InventoryItem to update.
     */
    where: InventoryItemWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * InventoryItem updateMany
   */
  export type InventoryItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InventoryItems.
     */
    data: XOR<InventoryItemUpdateManyMutationInput, InventoryItemUncheckedUpdateManyInput>
    /**
     * Filter which InventoryItems to update
     */
    where?: InventoryItemWhereInput
  }

  /**
   * InventoryItem upsert
   */
  export type InventoryItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    /**
     * The filter to search for the InventoryItem to update in case it exists.
     */
    where: InventoryItemWhereUniqueInput
    /**
     * In case the InventoryItem found by the `where` argument doesn't exist, create a new InventoryItem with this data.
     */
    create: XOR<InventoryItemCreateInput, InventoryItemUncheckedCreateInput>
    /**
     * In case the InventoryItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InventoryItemUpdateInput, InventoryItemUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * InventoryItem delete
   */
  export type InventoryItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    /**
     * Filter which InventoryItem to delete.
     */
    where: InventoryItemWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * InventoryItem deleteMany
   */
  export type InventoryItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryItems to delete
     */
    where?: InventoryItemWhereInput
  }

  /**
   * InventoryItem.brute
   */
  export type InventoryItem$bruteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brute
     */
    omit?: BruteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteInclude<ExtArgs> | null
    where?: BruteWhereInput
  }

  /**
   * InventoryItem.user
   */
  export type InventoryItem$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * InventoryItem without action
   */
  export type InventoryItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryItem
     */
    omit?: InventoryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
  }


  /**
   * Model Release
   */

  export type AggregateRelease = {
    _count: ReleaseCountAggregateOutputType | null
    _min: ReleaseMinAggregateOutputType | null
    _max: ReleaseMaxAggregateOutputType | null
  }

  export type ReleaseMinAggregateOutputType = {
    version: string | null
    date: Date | null
  }

  export type ReleaseMaxAggregateOutputType = {
    version: string | null
    date: Date | null
  }

  export type ReleaseCountAggregateOutputType = {
    version: number
    date: number
    _all: number
  }


  export type ReleaseMinAggregateInputType = {
    version?: true
    date?: true
  }

  export type ReleaseMaxAggregateInputType = {
    version?: true
    date?: true
  }

  export type ReleaseCountAggregateInputType = {
    version?: true
    date?: true
    _all?: true
  }

  export type ReleaseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Release to aggregate.
     */
    where?: ReleaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Releases to fetch.
     */
    orderBy?: ReleaseOrderByWithRelationInput | ReleaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReleaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Releases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Releases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Releases
    **/
    _count?: true | ReleaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReleaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReleaseMaxAggregateInputType
  }

  export type GetReleaseAggregateType<T extends ReleaseAggregateArgs> = {
        [P in keyof T & keyof AggregateRelease]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRelease[P]>
      : GetScalarType<T[P], AggregateRelease[P]>
  }




  export type ReleaseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReleaseWhereInput
    orderBy?: ReleaseOrderByWithAggregationInput | ReleaseOrderByWithAggregationInput[]
    by: ReleaseScalarFieldEnum[] | ReleaseScalarFieldEnum
    having?: ReleaseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReleaseCountAggregateInputType | true
    _min?: ReleaseMinAggregateInputType
    _max?: ReleaseMaxAggregateInputType
  }

  export type ReleaseGroupByOutputType = {
    version: string
    date: Date
    _count: ReleaseCountAggregateOutputType | null
    _min: ReleaseMinAggregateOutputType | null
    _max: ReleaseMaxAggregateOutputType | null
  }

  type GetReleaseGroupByPayload<T extends ReleaseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReleaseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReleaseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReleaseGroupByOutputType[P]>
            : GetScalarType<T[P], ReleaseGroupByOutputType[P]>
        }
      >
    >


  export type ReleaseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    version?: boolean
    date?: boolean
  }, ExtArgs["result"]["release"]>

  export type ReleaseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    version?: boolean
    date?: boolean
  }, ExtArgs["result"]["release"]>

  export type ReleaseSelectScalar = {
    version?: boolean
    date?: boolean
  }

  export type ReleaseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"version" | "date", ExtArgs["result"]["release"]>

  export type $ReleasePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Release"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      version: string
      date: Date
    }, ExtArgs["result"]["release"]>
    composites: {}
  }

  type ReleaseGetPayload<S extends boolean | null | undefined | ReleaseDefaultArgs> = $Result.GetResult<Prisma.$ReleasePayload, S>

  type ReleaseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReleaseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: ReleaseCountAggregateInputType | true
    }

  export interface ReleaseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Release'], meta: { name: 'Release' } }
    /**
     * Find zero or one Release that matches the filter.
     * @param {ReleaseFindUniqueArgs} args - Arguments to find a Release
     * @example
     * // Get one Release
     * const release = await prisma.release.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReleaseFindUniqueArgs>(args: SelectSubset<T, ReleaseFindUniqueArgs<ExtArgs>>): Prisma__ReleaseClient<$Result.GetResult<Prisma.$ReleasePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Release that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ReleaseFindUniqueOrThrowArgs} args - Arguments to find a Release
     * @example
     * // Get one Release
     * const release = await prisma.release.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReleaseFindUniqueOrThrowArgs>(args: SelectSubset<T, ReleaseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReleaseClient<$Result.GetResult<Prisma.$ReleasePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Release that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReleaseFindFirstArgs} args - Arguments to find a Release
     * @example
     * // Get one Release
     * const release = await prisma.release.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReleaseFindFirstArgs>(args?: SelectSubset<T, ReleaseFindFirstArgs<ExtArgs>>): Prisma__ReleaseClient<$Result.GetResult<Prisma.$ReleasePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Release that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReleaseFindFirstOrThrowArgs} args - Arguments to find a Release
     * @example
     * // Get one Release
     * const release = await prisma.release.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReleaseFindFirstOrThrowArgs>(args?: SelectSubset<T, ReleaseFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReleaseClient<$Result.GetResult<Prisma.$ReleasePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Releases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReleaseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Releases
     * const releases = await prisma.release.findMany()
     * 
     * // Get first 10 Releases
     * const releases = await prisma.release.findMany({ take: 10 })
     * 
     * // Only select the `version`
     * const releaseWithVersionOnly = await prisma.release.findMany({ select: { version: true } })
     * 
     */
    findMany<T extends ReleaseFindManyArgs>(args?: SelectSubset<T, ReleaseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReleasePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Release.
     * @param {ReleaseCreateArgs} args - Arguments to create a Release.
     * @example
     * // Create one Release
     * const Release = await prisma.release.create({
     *   data: {
     *     // ... data to create a Release
     *   }
     * })
     * 
     */
    create<T extends ReleaseCreateArgs>(args: SelectSubset<T, ReleaseCreateArgs<ExtArgs>>): Prisma__ReleaseClient<$Result.GetResult<Prisma.$ReleasePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Releases.
     * @param {ReleaseCreateManyArgs} args - Arguments to create many Releases.
     * @example
     * // Create many Releases
     * const release = await prisma.release.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReleaseCreateManyArgs>(args?: SelectSubset<T, ReleaseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Releases and returns the data saved in the database.
     * @param {ReleaseCreateManyAndReturnArgs} args - Arguments to create many Releases.
     * @example
     * // Create many Releases
     * const release = await prisma.release.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Releases and only return the `version`
     * const releaseWithVersionOnly = await prisma.release.createManyAndReturn({ 
     *   select: { version: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReleaseCreateManyAndReturnArgs>(args?: SelectSubset<T, ReleaseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReleasePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Release.
     * @param {ReleaseDeleteArgs} args - Arguments to delete one Release.
     * @example
     * // Delete one Release
     * const Release = await prisma.release.delete({
     *   where: {
     *     // ... filter to delete one Release
     *   }
     * })
     * 
     */
    delete<T extends ReleaseDeleteArgs>(args: SelectSubset<T, ReleaseDeleteArgs<ExtArgs>>): Prisma__ReleaseClient<$Result.GetResult<Prisma.$ReleasePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Release.
     * @param {ReleaseUpdateArgs} args - Arguments to update one Release.
     * @example
     * // Update one Release
     * const release = await prisma.release.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReleaseUpdateArgs>(args: SelectSubset<T, ReleaseUpdateArgs<ExtArgs>>): Prisma__ReleaseClient<$Result.GetResult<Prisma.$ReleasePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Releases.
     * @param {ReleaseDeleteManyArgs} args - Arguments to filter Releases to delete.
     * @example
     * // Delete a few Releases
     * const { count } = await prisma.release.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReleaseDeleteManyArgs>(args?: SelectSubset<T, ReleaseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Releases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReleaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Releases
     * const release = await prisma.release.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReleaseUpdateManyArgs>(args: SelectSubset<T, ReleaseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Release.
     * @param {ReleaseUpsertArgs} args - Arguments to update or create a Release.
     * @example
     * // Update or create a Release
     * const release = await prisma.release.upsert({
     *   create: {
     *     // ... data to create a Release
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Release we want to update
     *   }
     * })
     */
    upsert<T extends ReleaseUpsertArgs>(args: SelectSubset<T, ReleaseUpsertArgs<ExtArgs>>): Prisma__ReleaseClient<$Result.GetResult<Prisma.$ReleasePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Releases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReleaseCountArgs} args - Arguments to filter Releases to count.
     * @example
     * // Count the number of Releases
     * const count = await prisma.release.count({
     *   where: {
     *     // ... the filter for the Releases we want to count
     *   }
     * })
    **/
    count<T extends ReleaseCountArgs>(
      args?: Subset<T, ReleaseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReleaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Release.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReleaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReleaseAggregateArgs>(args: Subset<T, ReleaseAggregateArgs>): Prisma.PrismaPromise<GetReleaseAggregateType<T>>

    /**
     * Group by Release.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReleaseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReleaseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReleaseGroupByArgs['orderBy'] }
        : { orderBy?: ReleaseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReleaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReleaseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Release model
   */
  readonly fields: ReleaseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Release.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReleaseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Release model
   */ 
  interface ReleaseFieldRefs {
    readonly version: FieldRef<"Release", 'String'>
    readonly date: FieldRef<"Release", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Release findUnique
   */
  export type ReleaseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Release
     */
    select?: ReleaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Release
     */
    omit?: ReleaseOmit<ExtArgs> | null
    /**
     * Filter, which Release to fetch.
     */
    where: ReleaseWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Release findUniqueOrThrow
   */
  export type ReleaseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Release
     */
    select?: ReleaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Release
     */
    omit?: ReleaseOmit<ExtArgs> | null
    /**
     * Filter, which Release to fetch.
     */
    where: ReleaseWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Release findFirst
   */
  export type ReleaseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Release
     */
    select?: ReleaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Release
     */
    omit?: ReleaseOmit<ExtArgs> | null
    /**
     * Filter, which Release to fetch.
     */
    where?: ReleaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Releases to fetch.
     */
    orderBy?: ReleaseOrderByWithRelationInput | ReleaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Releases.
     */
    cursor?: ReleaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Releases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Releases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Releases.
     */
    distinct?: ReleaseScalarFieldEnum | ReleaseScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Release findFirstOrThrow
   */
  export type ReleaseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Release
     */
    select?: ReleaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Release
     */
    omit?: ReleaseOmit<ExtArgs> | null
    /**
     * Filter, which Release to fetch.
     */
    where?: ReleaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Releases to fetch.
     */
    orderBy?: ReleaseOrderByWithRelationInput | ReleaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Releases.
     */
    cursor?: ReleaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Releases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Releases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Releases.
     */
    distinct?: ReleaseScalarFieldEnum | ReleaseScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Release findMany
   */
  export type ReleaseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Release
     */
    select?: ReleaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Release
     */
    omit?: ReleaseOmit<ExtArgs> | null
    /**
     * Filter, which Releases to fetch.
     */
    where?: ReleaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Releases to fetch.
     */
    orderBy?: ReleaseOrderByWithRelationInput | ReleaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Releases.
     */
    cursor?: ReleaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Releases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Releases.
     */
    skip?: number
    distinct?: ReleaseScalarFieldEnum | ReleaseScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Release create
   */
  export type ReleaseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Release
     */
    select?: ReleaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Release
     */
    omit?: ReleaseOmit<ExtArgs> | null
    /**
     * The data needed to create a Release.
     */
    data: XOR<ReleaseCreateInput, ReleaseUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Release createMany
   */
  export type ReleaseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Releases.
     */
    data: ReleaseCreateManyInput | ReleaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Release createManyAndReturn
   */
  export type ReleaseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Release
     */
    select?: ReleaseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Release
     */
    omit?: ReleaseOmit<ExtArgs> | null
    /**
     * The data used to create many Releases.
     */
    data: ReleaseCreateManyInput | ReleaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Release update
   */
  export type ReleaseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Release
     */
    select?: ReleaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Release
     */
    omit?: ReleaseOmit<ExtArgs> | null
    /**
     * The data needed to update a Release.
     */
    data: XOR<ReleaseUpdateInput, ReleaseUncheckedUpdateInput>
    /**
     * Choose, which Release to update.
     */
    where: ReleaseWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Release updateMany
   */
  export type ReleaseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Releases.
     */
    data: XOR<ReleaseUpdateManyMutationInput, ReleaseUncheckedUpdateManyInput>
    /**
     * Filter which Releases to update
     */
    where?: ReleaseWhereInput
  }

  /**
   * Release upsert
   */
  export type ReleaseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Release
     */
    select?: ReleaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Release
     */
    omit?: ReleaseOmit<ExtArgs> | null
    /**
     * The filter to search for the Release to update in case it exists.
     */
    where: ReleaseWhereUniqueInput
    /**
     * In case the Release found by the `where` argument doesn't exist, create a new Release with this data.
     */
    create: XOR<ReleaseCreateInput, ReleaseUncheckedCreateInput>
    /**
     * In case the Release was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReleaseUpdateInput, ReleaseUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Release delete
   */
  export type ReleaseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Release
     */
    select?: ReleaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Release
     */
    omit?: ReleaseOmit<ExtArgs> | null
    /**
     * Filter which Release to delete.
     */
    where: ReleaseWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Release deleteMany
   */
  export type ReleaseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Releases to delete
     */
    where?: ReleaseWhereInput
  }

  /**
   * Release without action
   */
  export type ReleaseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Release
     */
    select?: ReleaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Release
     */
    omit?: ReleaseOmit<ExtArgs> | null
  }


  /**
   * Model Event
   */

  export type AggregateEvent = {
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  export type EventAvgAggregateOutputType = {
    maxLevel: number | null
    maxRound: number | null
  }

  export type EventSumAggregateOutputType = {
    maxLevel: number | null
    maxRound: number | null
  }

  export type EventMinAggregateOutputType = {
    id: string | null
    date: Date | null
    type: $Enums.EventType | null
    maxLevel: number | null
    maxRound: number | null
    status: $Enums.EventStatus | null
    winnerId: string | null
    finishedAt: Date | null
  }

  export type EventMaxAggregateOutputType = {
    id: string | null
    date: Date | null
    type: $Enums.EventType | null
    maxLevel: number | null
    maxRound: number | null
    status: $Enums.EventStatus | null
    winnerId: string | null
    finishedAt: Date | null
  }

  export type EventCountAggregateOutputType = {
    id: number
    date: number
    type: number
    maxLevel: number
    maxRound: number
    status: number
    winnerId: number
    finishedAt: number
    sortedBrutes: number
    _all: number
  }


  export type EventAvgAggregateInputType = {
    maxLevel?: true
    maxRound?: true
  }

  export type EventSumAggregateInputType = {
    maxLevel?: true
    maxRound?: true
  }

  export type EventMinAggregateInputType = {
    id?: true
    date?: true
    type?: true
    maxLevel?: true
    maxRound?: true
    status?: true
    winnerId?: true
    finishedAt?: true
  }

  export type EventMaxAggregateInputType = {
    id?: true
    date?: true
    type?: true
    maxLevel?: true
    maxRound?: true
    status?: true
    winnerId?: true
    finishedAt?: true
  }

  export type EventCountAggregateInputType = {
    id?: true
    date?: true
    type?: true
    maxLevel?: true
    maxRound?: true
    status?: true
    winnerId?: true
    finishedAt?: true
    sortedBrutes?: true
    _all?: true
  }

  export type EventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Event to aggregate.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Events
    **/
    _count?: true | EventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventMaxAggregateInputType
  }

  export type GetEventAggregateType<T extends EventAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent[P]>
      : GetScalarType<T[P], AggregateEvent[P]>
  }




  export type EventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
    orderBy?: EventOrderByWithAggregationInput | EventOrderByWithAggregationInput[]
    by: EventScalarFieldEnum[] | EventScalarFieldEnum
    having?: EventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventCountAggregateInputType | true
    _avg?: EventAvgAggregateInputType
    _sum?: EventSumAggregateInputType
    _min?: EventMinAggregateInputType
    _max?: EventMaxAggregateInputType
  }

  export type EventGroupByOutputType = {
    id: string
    date: Date
    type: $Enums.EventType
    maxLevel: number
    maxRound: number
    status: $Enums.EventStatus
    winnerId: string | null
    finishedAt: Date | null
    sortedBrutes: string[]
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  type GetEventGroupByPayload<T extends EventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventGroupByOutputType[P]>
            : GetScalarType<T[P], EventGroupByOutputType[P]>
        }
      >
    >


  export type EventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    type?: boolean
    maxLevel?: boolean
    maxRound?: boolean
    status?: boolean
    winnerId?: boolean
    finishedAt?: boolean
    sortedBrutes?: boolean
    brutes?: boolean | Event$brutesArgs<ExtArgs>
    tournament?: boolean | Event$tournamentArgs<ExtArgs>
    winner?: boolean | Event$winnerArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    type?: boolean
    maxLevel?: boolean
    maxRound?: boolean
    status?: boolean
    winnerId?: boolean
    finishedAt?: boolean
    sortedBrutes?: boolean
    winner?: boolean | Event$winnerArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectScalar = {
    id?: boolean
    date?: boolean
    type?: boolean
    maxLevel?: boolean
    maxRound?: boolean
    status?: boolean
    winnerId?: boolean
    finishedAt?: boolean
    sortedBrutes?: boolean
  }

  export type EventOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "date" | "type" | "maxLevel" | "maxRound" | "status" | "winnerId" | "finishedAt" | "sortedBrutes", ExtArgs["result"]["event"]>
  export type EventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brutes?: boolean | Event$brutesArgs<ExtArgs>
    tournament?: boolean | Event$tournamentArgs<ExtArgs>
    winner?: boolean | Event$winnerArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    winner?: boolean | Event$winnerArgs<ExtArgs>
  }

  export type $EventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Event"
    objects: {
      brutes: Prisma.$BrutePayload<ExtArgs>[]
      tournament: Prisma.$TournamentPayload<ExtArgs> | null
      winner: Prisma.$BrutePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      date: Date
      type: $Enums.EventType
      maxLevel: number
      maxRound: number
      status: $Enums.EventStatus
      winnerId: string | null
      finishedAt: Date | null
      sortedBrutes: string[]
    }, ExtArgs["result"]["event"]>
    composites: {}
  }

  type EventGetPayload<S extends boolean | null | undefined | EventDefaultArgs> = $Result.GetResult<Prisma.$EventPayload, S>

  type EventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EventFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: EventCountAggregateInputType | true
    }

  export interface EventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Event'], meta: { name: 'Event' } }
    /**
     * Find zero or one Event that matches the filter.
     * @param {EventFindUniqueArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventFindUniqueArgs>(args: SelectSubset<T, EventFindUniqueArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Event that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EventFindUniqueOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventFindUniqueOrThrowArgs>(args: SelectSubset<T, EventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Event that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventFindFirstArgs>(args?: SelectSubset<T, EventFindFirstArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Event that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventFindFirstOrThrowArgs>(args?: SelectSubset<T, EventFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.event.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.event.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventWithIdOnly = await prisma.event.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventFindManyArgs>(args?: SelectSubset<T, EventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Event.
     * @param {EventCreateArgs} args - Arguments to create a Event.
     * @example
     * // Create one Event
     * const Event = await prisma.event.create({
     *   data: {
     *     // ... data to create a Event
     *   }
     * })
     * 
     */
    create<T extends EventCreateArgs>(args: SelectSubset<T, EventCreateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Events.
     * @param {EventCreateManyArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventCreateManyArgs>(args?: SelectSubset<T, EventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Events and returns the data saved in the database.
     * @param {EventCreateManyAndReturnArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Events and only return the `id`
     * const eventWithIdOnly = await prisma.event.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventCreateManyAndReturnArgs>(args?: SelectSubset<T, EventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Event.
     * @param {EventDeleteArgs} args - Arguments to delete one Event.
     * @example
     * // Delete one Event
     * const Event = await prisma.event.delete({
     *   where: {
     *     // ... filter to delete one Event
     *   }
     * })
     * 
     */
    delete<T extends EventDeleteArgs>(args: SelectSubset<T, EventDeleteArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Event.
     * @param {EventUpdateArgs} args - Arguments to update one Event.
     * @example
     * // Update one Event
     * const event = await prisma.event.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventUpdateArgs>(args: SelectSubset<T, EventUpdateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Events.
     * @param {EventDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.event.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventDeleteManyArgs>(args?: SelectSubset<T, EventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventUpdateManyArgs>(args: SelectSubset<T, EventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Event.
     * @param {EventUpsertArgs} args - Arguments to update or create a Event.
     * @example
     * // Update or create a Event
     * const event = await prisma.event.upsert({
     *   create: {
     *     // ... data to create a Event
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event we want to update
     *   }
     * })
     */
    upsert<T extends EventUpsertArgs>(args: SelectSubset<T, EventUpsertArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.event.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends EventCountArgs>(
      args?: Subset<T, EventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAggregateArgs>(args: Subset<T, EventAggregateArgs>): Prisma.PrismaPromise<GetEventAggregateType<T>>

    /**
     * Group by Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventGroupByArgs['orderBy'] }
        : { orderBy?: EventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Event model
   */
  readonly fields: EventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Event.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    brutes<T extends Event$brutesArgs<ExtArgs> = {}>(args?: Subset<T, Event$brutesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrutePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    tournament<T extends Event$tournamentArgs<ExtArgs> = {}>(args?: Subset<T, Event$tournamentArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    winner<T extends Event$winnerArgs<ExtArgs> = {}>(args?: Subset<T, Event$winnerArgs<ExtArgs>>): Prisma__BruteClient<$Result.GetResult<Prisma.$BrutePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Event model
   */ 
  interface EventFieldRefs {
    readonly id: FieldRef<"Event", 'String'>
    readonly date: FieldRef<"Event", 'DateTime'>
    readonly type: FieldRef<"Event", 'EventType'>
    readonly maxLevel: FieldRef<"Event", 'Int'>
    readonly maxRound: FieldRef<"Event", 'Int'>
    readonly status: FieldRef<"Event", 'EventStatus'>
    readonly winnerId: FieldRef<"Event", 'String'>
    readonly finishedAt: FieldRef<"Event", 'DateTime'>
    readonly sortedBrutes: FieldRef<"Event", 'String[]'>
  }
    

  // Custom InputTypes
  /**
   * Event findUnique
   */
  export type EventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Event findUniqueOrThrow
   */
  export type EventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Event findFirst
   */
  export type EventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Event findFirstOrThrow
   */
  export type EventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Event findMany
   */
  export type EventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Event create
   */
  export type EventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to create a Event.
     */
    data: XOR<EventCreateInput, EventUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Event createMany
   */
  export type EventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Event createManyAndReturn
   */
  export type EventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Event update
   */
  export type EventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to update a Event.
     */
    data: XOR<EventUpdateInput, EventUncheckedUpdateInput>
    /**
     * Choose, which Event to update.
     */
    where: EventWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Event updateMany
   */
  export type EventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
  }

  /**
   * Event upsert
   */
  export type EventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The filter to search for the Event to update in case it exists.
     */
    where: EventWhereUniqueInput
    /**
     * In case the Event found by the `where` argument doesn't exist, create a new Event with this data.
     */
    create: XOR<EventCreateInput, EventUncheckedCreateInput>
    /**
     * In case the Event was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventUpdateInput, EventUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Event delete
   */
  export type EventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter which Event to delete.
     */
    where: EventWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Event deleteMany
   */
  export type EventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to delete
     */
    where?: EventWhereInput
  }

  /**
   * Event.brutes
   */
  export type Event$brutesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brute
     */
    omit?: BruteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteInclude<ExtArgs> | null
    where?: BruteWhereInput
    orderBy?: BruteOrderByWithRelationInput | BruteOrderByWithRelationInput[]
    cursor?: BruteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BruteScalarFieldEnum | BruteScalarFieldEnum[]
  }

  /**
   * Event.tournament
   */
  export type Event$tournamentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    where?: TournamentWhereInput
  }

  /**
   * Event.winner
   */
  export type Event$winnerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brute
     */
    select?: BruteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brute
     */
    omit?: BruteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BruteInclude<ExtArgs> | null
    where?: BruteWhereInput
  }

  /**
   * Event without action
   */
  export type EventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    lang: 'lang',
    name: 'name',
    admin: 'admin',
    moderator: 'moderator',
    connexionToken: 'connexionToken',
    bruteLimit: 'bruteLimit',
    gold: 'gold',
    fightSpeed: 'fightSpeed',
    backgroundMusic: 'backgroundMusic',
    dinorpgDone: 'dinorpgDone',
    ips: 'ips',
    bannedAt: 'bannedAt',
    banReason: 'banReason',
    lastReleaseSeen: 'lastReleaseSeen',
    displayVersusPage: 'displayVersusPage'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const RelationLoadStrategy: {
    query: 'query',
    join: 'join'
  };

  export type RelationLoadStrategy = (typeof RelationLoadStrategy)[keyof typeof RelationLoadStrategy]


  export const BruteScalarFieldEnum: {
    id: 'id',
    name: 'name',
    deletedAt: 'deletedAt',
    createdAt: 'createdAt',
    willBeDeletedAt: 'willBeDeletedAt',
    deletionReason: 'deletionReason',
    destinyPath: 'destinyPath',
    previousDestinyPath: 'previousDestinyPath',
    level: 'level',
    xp: 'xp',
    hp: 'hp',
    enduranceStat: 'enduranceStat',
    enduranceModifier: 'enduranceModifier',
    enduranceValue: 'enduranceValue',
    strengthStat: 'strengthStat',
    strengthModifier: 'strengthModifier',
    strengthValue: 'strengthValue',
    agilityStat: 'agilityStat',
    agilityModifier: 'agilityModifier',
    agilityValue: 'agilityValue',
    speedStat: 'speedStat',
    speedModifier: 'speedModifier',
    speedValue: 'speedValue',
    ranking: 'ranking',
    gender: 'gender',
    userId: 'userId',
    body: 'body',
    colors: 'colors',
    weapons: 'weapons',
    skills: 'skills',
    pets: 'pets',
    ascensions: 'ascensions',
    ascendedWeapons: 'ascendedWeapons',
    ascendedSkills: 'ascendedSkills',
    ascendedPets: 'ascendedPets',
    masterId: 'masterId',
    pupilsCount: 'pupilsCount',
    clanId: 'clanId',
    registeredForTournament: 'registeredForTournament',
    nextTournamentDate: 'nextTournamentDate',
    currentTournamentDate: 'currentTournamentDate',
    currentTournamentStepWatched: 'currentTournamentStepWatched',
    globalTournamentWatchedDate: 'globalTournamentWatchedDate',
    globalTournamentRoundWatched: 'globalTournamentRoundWatched',
    eventTournamentWatchedDate: 'eventTournamentWatchedDate',
    eventTournamentRoundWatched: 'eventTournamentRoundWatched',
    lastFight: 'lastFight',
    fightsLeft: 'fightsLeft',
    victories: 'victories',
    losses: 'losses',
    opponentsGeneratedAt: 'opponentsGeneratedAt',
    canRankUpSince: 'canRankUpSince',
    favorite: 'favorite',
    wantToJoinClanId: 'wantToJoinClanId',
    tournamentWins: 'tournamentWins',
    eventId: 'eventId',
    resets: 'resets'
  };

  export type BruteScalarFieldEnum = (typeof BruteScalarFieldEnum)[keyof typeof BruteScalarFieldEnum]


  export const BruteStartingStatsScalarFieldEnum: {
    id: 'id',
    endurance: 'endurance',
    strength: 'strength',
    agility: 'agility',
    speed: 'speed',
    bruteId: 'bruteId'
  };

  export type BruteStartingStatsScalarFieldEnum = (typeof BruteStartingStatsScalarFieldEnum)[keyof typeof BruteStartingStatsScalarFieldEnum]


  export const FightScalarFieldEnum: {
    id: 'id',
    date: 'date',
    brute1Id: 'brute1Id',
    brute2Id: 'brute2Id',
    winner: 'winner',
    loser: 'loser',
    steps: 'steps',
    fighters: 'fighters',
    tournamentId: 'tournamentId',
    tournamentStep: 'tournamentStep',
    modifiers: 'modifiers',
    background: 'background',
    clanWarId: 'clanWarId'
  };

  export type FightScalarFieldEnum = (typeof FightScalarFieldEnum)[keyof typeof FightScalarFieldEnum]


  export const LogScalarFieldEnum: {
    id: 'id',
    date: 'date',
    currentBruteId: 'currentBruteId',
    type: 'type',
    level: 'level',
    brute: 'brute',
    fightId: 'fightId',
    xp: 'xp',
    gold: 'gold',
    template: 'template',
    destinyChoiceId: 'destinyChoiceId'
  };

  export type LogScalarFieldEnum = (typeof LogScalarFieldEnum)[keyof typeof LogScalarFieldEnum]


  export const DestinyChoiceScalarFieldEnum: {
    id: 'id',
    bruteId: 'bruteId',
    path: 'path',
    type: 'type',
    skill: 'skill',
    weapon: 'weapon',
    pet: 'pet',
    originalSkill: 'originalSkill',
    originalWeapon: 'originalWeapon',
    originalPet: 'originalPet',
    stat1: 'stat1',
    stat1Value: 'stat1Value',
    stat2: 'stat2',
    stat2Value: 'stat2Value'
  };

  export type DestinyChoiceScalarFieldEnum = (typeof DestinyChoiceScalarFieldEnum)[keyof typeof DestinyChoiceScalarFieldEnum]


  export const TournamentScalarFieldEnum: {
    id: 'id',
    date: 'date',
    type: 'type',
    rounds: 'rounds',
    eventId: 'eventId'
  };

  export type TournamentScalarFieldEnum = (typeof TournamentScalarFieldEnum)[keyof typeof TournamentScalarFieldEnum]


  export const TournamentAchievementScalarFieldEnum: {
    id: 'id',
    bruteId: 'bruteId',
    date: 'date',
    achievement: 'achievement',
    achievementCount: 'achievementCount'
  };

  export type TournamentAchievementScalarFieldEnum = (typeof TournamentAchievementScalarFieldEnum)[keyof typeof TournamentAchievementScalarFieldEnum]


  export const TournamentGoldScalarFieldEnum: {
    id: 'id',
    date: 'date',
    userId: 'userId',
    gold: 'gold'
  };

  export type TournamentGoldScalarFieldEnum = (typeof TournamentGoldScalarFieldEnum)[keyof typeof TournamentGoldScalarFieldEnum]


  export const TournamentXpScalarFieldEnum: {
    id: 'id',
    date: 'date',
    bruteId: 'bruteId',
    xp: 'xp'
  };

  export type TournamentXpScalarFieldEnum = (typeof TournamentXpScalarFieldEnum)[keyof typeof TournamentXpScalarFieldEnum]


  export const AchievementScalarFieldEnum: {
    id: 'id',
    name: 'name',
    count: 'count',
    bruteId: 'bruteId',
    userId: 'userId'
  };

  export type AchievementScalarFieldEnum = (typeof AchievementScalarFieldEnum)[keyof typeof AchievementScalarFieldEnum]


  export const TitleScalarFieldEnum: {
    id: 'id',
    name: 'name',
    count: 'count'
  };

  export type TitleScalarFieldEnum = (typeof TitleScalarFieldEnum)[keyof typeof TitleScalarFieldEnum]


  export const BruteReportScalarFieldEnum: {
    id: 'id',
    bruteId: 'bruteId',
    reason: 'reason',
    count: 'count',
    date: 'date',
    status: 'status'
  };

  export type BruteReportScalarFieldEnum = (typeof BruteReportScalarFieldEnum)[keyof typeof BruteReportScalarFieldEnum]


  export const ServerStateScalarFieldEnum: {
    id: 'id',
    globalTournamentValid: 'globalTournamentValid',
    activeModifiers: 'activeModifiers',
    modifiersEndAt: 'modifiersEndAt',
    nextModifiers: 'nextModifiers'
  };

  export type ServerStateScalarFieldEnum = (typeof ServerStateScalarFieldEnum)[keyof typeof ServerStateScalarFieldEnum]


  export const BannedWordScalarFieldEnum: {
    id: 'id',
    word: 'word'
  };

  export type BannedWordScalarFieldEnum = (typeof BannedWordScalarFieldEnum)[keyof typeof BannedWordScalarFieldEnum]


  export const BannedIpScalarFieldEnum: {
    id: 'id'
  };

  export type BannedIpScalarFieldEnum = (typeof BannedIpScalarFieldEnum)[keyof typeof BannedIpScalarFieldEnum]


  export const ClanScalarFieldEnum: {
    id: 'id',
    name: 'name',
    deletedAt: 'deletedAt',
    limit: 'limit',
    points: 'points',
    elo: 'elo',
    boss: 'boss',
    damageOnBoss: 'damageOnBoss',
    masterId: 'masterId',
    participateInClanWar: 'participateInClanWar'
  };

  export type ClanScalarFieldEnum = (typeof ClanScalarFieldEnum)[keyof typeof ClanScalarFieldEnum]


  export const ClanThreadScalarFieldEnum: {
    id: 'id',
    clanId: 'clanId',
    creatorId: 'creatorId',
    title: 'title',
    locked: 'locked',
    pinned: 'pinned',
    postCount: 'postCount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ClanThreadScalarFieldEnum = (typeof ClanThreadScalarFieldEnum)[keyof typeof ClanThreadScalarFieldEnum]


  export const ClanPostScalarFieldEnum: {
    id: 'id',
    threadId: 'threadId',
    authorId: 'authorId',
    date: 'date',
    message: 'message'
  };

  export type ClanPostScalarFieldEnum = (typeof ClanPostScalarFieldEnum)[keyof typeof ClanPostScalarFieldEnum]


  export const BossDamageScalarFieldEnum: {
    id: 'id',
    bruteId: 'bruteId',
    clanId: 'clanId',
    damage: 'damage'
  };

  export type BossDamageScalarFieldEnum = (typeof BossDamageScalarFieldEnum)[keyof typeof BossDamageScalarFieldEnum]


  export const ClanWarScalarFieldEnum: {
    id: 'id',
    duration: 'duration',
    type: 'type',
    date: 'date',
    status: 'status',
    attackerId: 'attackerId',
    attackerEloChange: 'attackerEloChange',
    attackerWins: 'attackerWins',
    defenderId: 'defenderId',
    defenderEloChange: 'defenderEloChange',
    defenderWins: 'defenderWins',
    winnerId: 'winnerId'
  };

  export type ClanWarScalarFieldEnum = (typeof ClanWarScalarFieldEnum)[keyof typeof ClanWarScalarFieldEnum]


  export const ClanWarFightersScalarFieldEnum: {
    id: 'id',
    clanWarId: 'clanWarId',
    day: 'day'
  };

  export type ClanWarFightersScalarFieldEnum = (typeof ClanWarFightersScalarFieldEnum)[keyof typeof ClanWarFightersScalarFieldEnum]


  export const InventoryItemScalarFieldEnum: {
    id: 'id',
    type: 'type',
    count: 'count',
    bruteId: 'bruteId',
    userId: 'userId'
  };

  export type InventoryItemScalarFieldEnum = (typeof InventoryItemScalarFieldEnum)[keyof typeof InventoryItemScalarFieldEnum]


  export const ReleaseScalarFieldEnum: {
    version: 'version',
    date: 'date'
  };

  export type ReleaseScalarFieldEnum = (typeof ReleaseScalarFieldEnum)[keyof typeof ReleaseScalarFieldEnum]


  export const EventScalarFieldEnum: {
    id: 'id',
    date: 'date',
    type: 'type',
    maxLevel: 'maxLevel',
    maxRound: 'maxRound',
    status: 'status',
    winnerId: 'winnerId',
    finishedAt: 'finishedAt',
    sortedBrutes: 'sortedBrutes'
  };

  export type EventScalarFieldEnum = (typeof EventScalarFieldEnum)[keyof typeof EventScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Lang'
   */
  export type EnumLangFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Lang'>
    


  /**
   * Reference to a field of type 'Lang[]'
   */
  export type ListEnumLangFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Lang[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'DestinyChoiceSide[]'
   */
  export type ListEnumDestinyChoiceSideFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DestinyChoiceSide[]'>
    


  /**
   * Reference to a field of type 'DestinyChoiceSide'
   */
  export type EnumDestinyChoiceSideFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DestinyChoiceSide'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Gender'
   */
  export type EnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender'>
    


  /**
   * Reference to a field of type 'Gender[]'
   */
  export type ListEnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender[]'>
    


  /**
   * Reference to a field of type 'WeaponName[]'
   */
  export type ListEnumWeaponNameFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WeaponName[]'>
    


  /**
   * Reference to a field of type 'WeaponName'
   */
  export type EnumWeaponNameFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WeaponName'>
    


  /**
   * Reference to a field of type 'SkillName[]'
   */
  export type ListEnumSkillNameFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SkillName[]'>
    


  /**
   * Reference to a field of type 'SkillName'
   */
  export type EnumSkillNameFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SkillName'>
    


  /**
   * Reference to a field of type 'PetName[]'
   */
  export type ListEnumPetNameFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PetName[]'>
    


  /**
   * Reference to a field of type 'PetName'
   */
  export type EnumPetNameFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PetName'>
    


  /**
   * Reference to a field of type 'FightModifier[]'
   */
  export type ListEnumFightModifierFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FightModifier[]'>
    


  /**
   * Reference to a field of type 'FightModifier'
   */
  export type EnumFightModifierFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FightModifier'>
    


  /**
   * Reference to a field of type 'LogType'
   */
  export type EnumLogTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LogType'>
    


  /**
   * Reference to a field of type 'LogType[]'
   */
  export type ListEnumLogTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LogType[]'>
    


  /**
   * Reference to a field of type 'DestinyChoiceType'
   */
  export type EnumDestinyChoiceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DestinyChoiceType'>
    


  /**
   * Reference to a field of type 'DestinyChoiceType[]'
   */
  export type ListEnumDestinyChoiceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DestinyChoiceType[]'>
    


  /**
   * Reference to a field of type 'BruteStat'
   */
  export type EnumBruteStatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BruteStat'>
    


  /**
   * Reference to a field of type 'BruteStat[]'
   */
  export type ListEnumBruteStatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BruteStat[]'>
    


  /**
   * Reference to a field of type 'TournamentType'
   */
  export type EnumTournamentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TournamentType'>
    


  /**
   * Reference to a field of type 'TournamentType[]'
   */
  export type ListEnumTournamentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TournamentType[]'>
    


  /**
   * Reference to a field of type 'AchievementName'
   */
  export type EnumAchievementNameFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AchievementName'>
    


  /**
   * Reference to a field of type 'AchievementName[]'
   */
  export type ListEnumAchievementNameFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AchievementName[]'>
    


  /**
   * Reference to a field of type 'BruteReportReason'
   */
  export type EnumBruteReportReasonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BruteReportReason'>
    


  /**
   * Reference to a field of type 'BruteReportReason[]'
   */
  export type ListEnumBruteReportReasonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BruteReportReason[]'>
    


  /**
   * Reference to a field of type 'BruteReportStatus'
   */
  export type EnumBruteReportStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BruteReportStatus'>
    


  /**
   * Reference to a field of type 'BruteReportStatus[]'
   */
  export type ListEnumBruteReportStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BruteReportStatus[]'>
    


  /**
   * Reference to a field of type 'BossName'
   */
  export type EnumBossNameFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BossName'>
    


  /**
   * Reference to a field of type 'BossName[]'
   */
  export type ListEnumBossNameFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BossName[]'>
    


  /**
   * Reference to a field of type 'ClanWarType'
   */
  export type EnumClanWarTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ClanWarType'>
    


  /**
   * Reference to a field of type 'ClanWarType[]'
   */
  export type ListEnumClanWarTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ClanWarType[]'>
    


  /**
   * Reference to a field of type 'ClanWarStatus'
   */
  export type EnumClanWarStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ClanWarStatus'>
    


  /**
   * Reference to a field of type 'ClanWarStatus[]'
   */
  export type ListEnumClanWarStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ClanWarStatus[]'>
    


  /**
   * Reference to a field of type 'InventoryItemType'
   */
  export type EnumInventoryItemTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InventoryItemType'>
    


  /**
   * Reference to a field of type 'InventoryItemType[]'
   */
  export type ListEnumInventoryItemTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InventoryItemType[]'>
    


  /**
   * Reference to a field of type 'EventType'
   */
  export type EnumEventTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EventType'>
    


  /**
   * Reference to a field of type 'EventType[]'
   */
  export type ListEnumEventTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EventType[]'>
    


  /**
   * Reference to a field of type 'EventStatus'
   */
  export type EnumEventStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EventStatus'>
    


  /**
   * Reference to a field of type 'EventStatus[]'
   */
  export type ListEnumEventStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EventStatus[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: UuidFilter<"User"> | string
    lang?: EnumLangFilter<"User"> | $Enums.Lang
    name?: StringFilter<"User"> | string
    admin?: BoolFilter<"User"> | boolean
    moderator?: BoolFilter<"User"> | boolean
    connexionToken?: UuidFilter<"User"> | string
    bruteLimit?: IntFilter<"User"> | number
    gold?: IntFilter<"User"> | number
    fightSpeed?: IntFilter<"User"> | number
    backgroundMusic?: BoolFilter<"User"> | boolean
    dinorpgDone?: DateTimeNullableFilter<"User"> | Date | string | null
    ips?: StringNullableListFilter<"User">
    bannedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    banReason?: StringNullableFilter<"User"> | string | null
    lastReleaseSeen?: StringNullableFilter<"User"> | string | null
    displayVersusPage?: BoolFilter<"User"> | boolean
    brutes?: BruteListRelationFilter
    achievements?: AchievementListRelationFilter
    reports?: BruteReportListRelationFilter
    tournamentGolds?: TournamentGoldListRelationFilter
    inventory?: InventoryItemListRelationFilter
    favoriteFights?: FightListRelationFilter
    following?: BruteListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    lang?: SortOrder
    name?: SortOrder
    admin?: SortOrder
    moderator?: SortOrder
    connexionToken?: SortOrder
    bruteLimit?: SortOrder
    gold?: SortOrder
    fightSpeed?: SortOrder
    backgroundMusic?: SortOrder
    dinorpgDone?: SortOrderInput | SortOrder
    ips?: SortOrder
    bannedAt?: SortOrderInput | SortOrder
    banReason?: SortOrderInput | SortOrder
    lastReleaseSeen?: SortOrderInput | SortOrder
    displayVersusPage?: SortOrder
    brutes?: BruteOrderByRelationAggregateInput
    achievements?: AchievementOrderByRelationAggregateInput
    reports?: BruteReportOrderByRelationAggregateInput
    tournamentGolds?: TournamentGoldOrderByRelationAggregateInput
    inventory?: InventoryItemOrderByRelationAggregateInput
    favoriteFights?: FightOrderByRelationAggregateInput
    following?: BruteOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    lang?: EnumLangFilter<"User"> | $Enums.Lang
    name?: StringFilter<"User"> | string
    admin?: BoolFilter<"User"> | boolean
    moderator?: BoolFilter<"User"> | boolean
    connexionToken?: UuidFilter<"User"> | string
    bruteLimit?: IntFilter<"User"> | number
    gold?: IntFilter<"User"> | number
    fightSpeed?: IntFilter<"User"> | number
    backgroundMusic?: BoolFilter<"User"> | boolean
    dinorpgDone?: DateTimeNullableFilter<"User"> | Date | string | null
    ips?: StringNullableListFilter<"User">
    bannedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    banReason?: StringNullableFilter<"User"> | string | null
    lastReleaseSeen?: StringNullableFilter<"User"> | string | null
    displayVersusPage?: BoolFilter<"User"> | boolean
    brutes?: BruteListRelationFilter
    achievements?: AchievementListRelationFilter
    reports?: BruteReportListRelationFilter
    tournamentGolds?: TournamentGoldListRelationFilter
    inventory?: InventoryItemListRelationFilter
    favoriteFights?: FightListRelationFilter
    following?: BruteListRelationFilter
  }, "id" | "id">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    lang?: SortOrder
    name?: SortOrder
    admin?: SortOrder
    moderator?: SortOrder
    connexionToken?: SortOrder
    bruteLimit?: SortOrder
    gold?: SortOrder
    fightSpeed?: SortOrder
    backgroundMusic?: SortOrder
    dinorpgDone?: SortOrderInput | SortOrder
    ips?: SortOrder
    bannedAt?: SortOrderInput | SortOrder
    banReason?: SortOrderInput | SortOrder
    lastReleaseSeen?: SortOrderInput | SortOrder
    displayVersusPage?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"User"> | string
    lang?: EnumLangWithAggregatesFilter<"User"> | $Enums.Lang
    name?: StringWithAggregatesFilter<"User"> | string
    admin?: BoolWithAggregatesFilter<"User"> | boolean
    moderator?: BoolWithAggregatesFilter<"User"> | boolean
    connexionToken?: UuidWithAggregatesFilter<"User"> | string
    bruteLimit?: IntWithAggregatesFilter<"User"> | number
    gold?: IntWithAggregatesFilter<"User"> | number
    fightSpeed?: IntWithAggregatesFilter<"User"> | number
    backgroundMusic?: BoolWithAggregatesFilter<"User"> | boolean
    dinorpgDone?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    ips?: StringNullableListFilter<"User">
    bannedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    banReason?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastReleaseSeen?: StringNullableWithAggregatesFilter<"User"> | string | null
    displayVersusPage?: BoolWithAggregatesFilter<"User"> | boolean
  }

  export type BruteWhereInput = {
    AND?: BruteWhereInput | BruteWhereInput[]
    OR?: BruteWhereInput[]
    NOT?: BruteWhereInput | BruteWhereInput[]
    id?: UuidFilter<"Brute"> | string
    name?: StringFilter<"Brute"> | string
    deletedAt?: DateTimeNullableFilter<"Brute"> | Date | string | null
    createdAt?: DateTimeFilter<"Brute"> | Date | string
    willBeDeletedAt?: DateTimeNullableFilter<"Brute"> | Date | string | null
    deletionReason?: StringNullableFilter<"Brute"> | string | null
    destinyPath?: EnumDestinyChoiceSideNullableListFilter<"Brute">
    previousDestinyPath?: EnumDestinyChoiceSideNullableListFilter<"Brute">
    level?: IntFilter<"Brute"> | number
    xp?: IntFilter<"Brute"> | number
    hp?: IntFilter<"Brute"> | number
    enduranceStat?: IntFilter<"Brute"> | number
    enduranceModifier?: FloatFilter<"Brute"> | number
    enduranceValue?: IntFilter<"Brute"> | number
    strengthStat?: IntFilter<"Brute"> | number
    strengthModifier?: FloatFilter<"Brute"> | number
    strengthValue?: IntFilter<"Brute"> | number
    agilityStat?: IntFilter<"Brute"> | number
    agilityModifier?: FloatFilter<"Brute"> | number
    agilityValue?: IntFilter<"Brute"> | number
    speedStat?: IntFilter<"Brute"> | number
    speedModifier?: FloatFilter<"Brute"> | number
    speedValue?: IntFilter<"Brute"> | number
    ranking?: IntFilter<"Brute"> | number
    gender?: EnumGenderFilter<"Brute"> | $Enums.Gender
    userId?: UuidNullableFilter<"Brute"> | string | null
    body?: StringFilter<"Brute"> | string
    colors?: StringFilter<"Brute"> | string
    weapons?: EnumWeaponNameNullableListFilter<"Brute">
    skills?: EnumSkillNameNullableListFilter<"Brute">
    pets?: EnumPetNameNullableListFilter<"Brute">
    ascensions?: IntFilter<"Brute"> | number
    ascendedWeapons?: EnumWeaponNameNullableListFilter<"Brute">
    ascendedSkills?: EnumSkillNameNullableListFilter<"Brute">
    ascendedPets?: EnumPetNameNullableListFilter<"Brute">
    masterId?: UuidNullableFilter<"Brute"> | string | null
    pupilsCount?: IntFilter<"Brute"> | number
    clanId?: UuidNullableFilter<"Brute"> | string | null
    registeredForTournament?: BoolFilter<"Brute"> | boolean
    nextTournamentDate?: DateTimeNullableFilter<"Brute"> | Date | string | null
    currentTournamentDate?: DateTimeNullableFilter<"Brute"> | Date | string | null
    currentTournamentStepWatched?: IntNullableFilter<"Brute"> | number | null
    globalTournamentWatchedDate?: DateTimeNullableFilter<"Brute"> | Date | string | null
    globalTournamentRoundWatched?: IntNullableFilter<"Brute"> | number | null
    eventTournamentWatchedDate?: DateTimeNullableFilter<"Brute"> | Date | string | null
    eventTournamentRoundWatched?: IntNullableFilter<"Brute"> | number | null
    lastFight?: DateTimeNullableFilter<"Brute"> | Date | string | null
    fightsLeft?: IntFilter<"Brute"> | number
    victories?: IntFilter<"Brute"> | number
    losses?: IntFilter<"Brute"> | number
    opponentsGeneratedAt?: DateTimeNullableFilter<"Brute"> | Date | string | null
    canRankUpSince?: DateTimeNullableFilter<"Brute"> | Date | string | null
    favorite?: BoolFilter<"Brute"> | boolean
    wantToJoinClanId?: UuidNullableFilter<"Brute"> | string | null
    tournamentWins?: IntFilter<"Brute"> | number
    eventId?: UuidNullableFilter<"Brute"> | string | null
    resets?: IntFilter<"Brute"> | number
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    master?: XOR<BruteNullableRelationFilter, BruteWhereInput> | null
    pupils?: BruteListRelationFilter
    clan?: XOR<ClanNullableRelationFilter, ClanWhereInput> | null
    fights?: FightListRelationFilter
    fightsAsAdversary?: FightListRelationFilter
    logs?: LogListRelationFilter
    destinyChoices?: DestinyChoiceListRelationFilter
    tournaments?: TournamentListRelationFilter
    opponents?: BruteListRelationFilter
    opponentOf?: BruteListRelationFilter
    achievements?: AchievementListRelationFilter
    reports?: BruteReportListRelationFilter
    titles?: TitleListRelationFilter
    masterOfClan?: XOR<ClanNullableRelationFilter, ClanWhereInput> | null
    clanPosts?: ClanPostListRelationFilter
    wantToJoinClan?: XOR<ClanNullableRelationFilter, ClanWhereInput> | null
    threads?: ClanThreadListRelationFilter
    inventory?: InventoryItemListRelationFilter
    tournamentAchievements?: TournamentAchievementListRelationFilter
    tournamentXps?: TournamentXpListRelationFilter
    startingStats?: XOR<BruteStartingStatsNullableRelationFilter, BruteStartingStatsWhereInput> | null
    damageOnBosses?: BossDamageListRelationFilter
    followers?: UserListRelationFilter
    inClanWarAttackerFighters?: ClanWarFightersListRelationFilter
    inClanWarDefenderFighters?: ClanWarFightersListRelationFilter
    event?: XOR<EventNullableRelationFilter, EventWhereInput> | null
    wonEvents?: EventListRelationFilter
  }

  export type BruteOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    willBeDeletedAt?: SortOrderInput | SortOrder
    deletionReason?: SortOrderInput | SortOrder
    destinyPath?: SortOrder
    previousDestinyPath?: SortOrder
    level?: SortOrder
    xp?: SortOrder
    hp?: SortOrder
    enduranceStat?: SortOrder
    enduranceModifier?: SortOrder
    enduranceValue?: SortOrder
    strengthStat?: SortOrder
    strengthModifier?: SortOrder
    strengthValue?: SortOrder
    agilityStat?: SortOrder
    agilityModifier?: SortOrder
    agilityValue?: SortOrder
    speedStat?: SortOrder
    speedModifier?: SortOrder
    speedValue?: SortOrder
    ranking?: SortOrder
    gender?: SortOrder
    userId?: SortOrderInput | SortOrder
    body?: SortOrder
    colors?: SortOrder
    weapons?: SortOrder
    skills?: SortOrder
    pets?: SortOrder
    ascensions?: SortOrder
    ascendedWeapons?: SortOrder
    ascendedSkills?: SortOrder
    ascendedPets?: SortOrder
    masterId?: SortOrderInput | SortOrder
    pupilsCount?: SortOrder
    clanId?: SortOrderInput | SortOrder
    registeredForTournament?: SortOrder
    nextTournamentDate?: SortOrderInput | SortOrder
    currentTournamentDate?: SortOrderInput | SortOrder
    currentTournamentStepWatched?: SortOrderInput | SortOrder
    globalTournamentWatchedDate?: SortOrderInput | SortOrder
    globalTournamentRoundWatched?: SortOrderInput | SortOrder
    eventTournamentWatchedDate?: SortOrderInput | SortOrder
    eventTournamentRoundWatched?: SortOrderInput | SortOrder
    lastFight?: SortOrderInput | SortOrder
    fightsLeft?: SortOrder
    victories?: SortOrder
    losses?: SortOrder
    opponentsGeneratedAt?: SortOrderInput | SortOrder
    canRankUpSince?: SortOrderInput | SortOrder
    favorite?: SortOrder
    wantToJoinClanId?: SortOrderInput | SortOrder
    tournamentWins?: SortOrder
    eventId?: SortOrderInput | SortOrder
    resets?: SortOrder
    user?: UserOrderByWithRelationInput
    master?: BruteOrderByWithRelationInput
    pupils?: BruteOrderByRelationAggregateInput
    clan?: ClanOrderByWithRelationInput
    fights?: FightOrderByRelationAggregateInput
    fightsAsAdversary?: FightOrderByRelationAggregateInput
    logs?: LogOrderByRelationAggregateInput
    destinyChoices?: DestinyChoiceOrderByRelationAggregateInput
    tournaments?: TournamentOrderByRelationAggregateInput
    opponents?: BruteOrderByRelationAggregateInput
    opponentOf?: BruteOrderByRelationAggregateInput
    achievements?: AchievementOrderByRelationAggregateInput
    reports?: BruteReportOrderByRelationAggregateInput
    titles?: TitleOrderByRelationAggregateInput
    masterOfClan?: ClanOrderByWithRelationInput
    clanPosts?: ClanPostOrderByRelationAggregateInput
    wantToJoinClan?: ClanOrderByWithRelationInput
    threads?: ClanThreadOrderByRelationAggregateInput
    inventory?: InventoryItemOrderByRelationAggregateInput
    tournamentAchievements?: TournamentAchievementOrderByRelationAggregateInput
    tournamentXps?: TournamentXpOrderByRelationAggregateInput
    startingStats?: BruteStartingStatsOrderByWithRelationInput
    damageOnBosses?: BossDamageOrderByRelationAggregateInput
    followers?: UserOrderByRelationAggregateInput
    inClanWarAttackerFighters?: ClanWarFightersOrderByRelationAggregateInput
    inClanWarDefenderFighters?: ClanWarFightersOrderByRelationAggregateInput
    event?: EventOrderByWithRelationInput
    wonEvents?: EventOrderByRelationAggregateInput
  }

  export type BruteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BruteWhereInput | BruteWhereInput[]
    OR?: BruteWhereInput[]
    NOT?: BruteWhereInput | BruteWhereInput[]
    name?: StringFilter<"Brute"> | string
    deletedAt?: DateTimeNullableFilter<"Brute"> | Date | string | null
    createdAt?: DateTimeFilter<"Brute"> | Date | string
    willBeDeletedAt?: DateTimeNullableFilter<"Brute"> | Date | string | null
    deletionReason?: StringNullableFilter<"Brute"> | string | null
    destinyPath?: EnumDestinyChoiceSideNullableListFilter<"Brute">
    previousDestinyPath?: EnumDestinyChoiceSideNullableListFilter<"Brute">
    level?: IntFilter<"Brute"> | number
    xp?: IntFilter<"Brute"> | number
    hp?: IntFilter<"Brute"> | number
    enduranceStat?: IntFilter<"Brute"> | number
    enduranceModifier?: FloatFilter<"Brute"> | number
    enduranceValue?: IntFilter<"Brute"> | number
    strengthStat?: IntFilter<"Brute"> | number
    strengthModifier?: FloatFilter<"Brute"> | number
    strengthValue?: IntFilter<"Brute"> | number
    agilityStat?: IntFilter<"Brute"> | number
    agilityModifier?: FloatFilter<"Brute"> | number
    agilityValue?: IntFilter<"Brute"> | number
    speedStat?: IntFilter<"Brute"> | number
    speedModifier?: FloatFilter<"Brute"> | number
    speedValue?: IntFilter<"Brute"> | number
    ranking?: IntFilter<"Brute"> | number
    gender?: EnumGenderFilter<"Brute"> | $Enums.Gender
    userId?: UuidNullableFilter<"Brute"> | string | null
    body?: StringFilter<"Brute"> | string
    colors?: StringFilter<"Brute"> | string
    weapons?: EnumWeaponNameNullableListFilter<"Brute">
    skills?: EnumSkillNameNullableListFilter<"Brute">
    pets?: EnumPetNameNullableListFilter<"Brute">
    ascensions?: IntFilter<"Brute"> | number
    ascendedWeapons?: EnumWeaponNameNullableListFilter<"Brute">
    ascendedSkills?: EnumSkillNameNullableListFilter<"Brute">
    ascendedPets?: EnumPetNameNullableListFilter<"Brute">
    masterId?: UuidNullableFilter<"Brute"> | string | null
    pupilsCount?: IntFilter<"Brute"> | number
    clanId?: UuidNullableFilter<"Brute"> | string | null
    registeredForTournament?: BoolFilter<"Brute"> | boolean
    nextTournamentDate?: DateTimeNullableFilter<"Brute"> | Date | string | null
    currentTournamentDate?: DateTimeNullableFilter<"Brute"> | Date | string | null
    currentTournamentStepWatched?: IntNullableFilter<"Brute"> | number | null
    globalTournamentWatchedDate?: DateTimeNullableFilter<"Brute"> | Date | string | null
    globalTournamentRoundWatched?: IntNullableFilter<"Brute"> | number | null
    eventTournamentWatchedDate?: DateTimeNullableFilter<"Brute"> | Date | string | null
    eventTournamentRoundWatched?: IntNullableFilter<"Brute"> | number | null
    lastFight?: DateTimeNullableFilter<"Brute"> | Date | string | null
    fightsLeft?: IntFilter<"Brute"> | number
    victories?: IntFilter<"Brute"> | number
    losses?: IntFilter<"Brute"> | number
    opponentsGeneratedAt?: DateTimeNullableFilter<"Brute"> | Date | string | null
    canRankUpSince?: DateTimeNullableFilter<"Brute"> | Date | string | null
    favorite?: BoolFilter<"Brute"> | boolean
    wantToJoinClanId?: UuidNullableFilter<"Brute"> | string | null
    tournamentWins?: IntFilter<"Brute"> | number
    eventId?: UuidNullableFilter<"Brute"> | string | null
    resets?: IntFilter<"Brute"> | number
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    master?: XOR<BruteNullableRelationFilter, BruteWhereInput> | null
    pupils?: BruteListRelationFilter
    clan?: XOR<ClanNullableRelationFilter, ClanWhereInput> | null
    fights?: FightListRelationFilter
    fightsAsAdversary?: FightListRelationFilter
    logs?: LogListRelationFilter
    destinyChoices?: DestinyChoiceListRelationFilter
    tournaments?: TournamentListRelationFilter
    opponents?: BruteListRelationFilter
    opponentOf?: BruteListRelationFilter
    achievements?: AchievementListRelationFilter
    reports?: BruteReportListRelationFilter
    titles?: TitleListRelationFilter
    masterOfClan?: XOR<ClanNullableRelationFilter, ClanWhereInput> | null
    clanPosts?: ClanPostListRelationFilter
    wantToJoinClan?: XOR<ClanNullableRelationFilter, ClanWhereInput> | null
    threads?: ClanThreadListRelationFilter
    inventory?: InventoryItemListRelationFilter
    tournamentAchievements?: TournamentAchievementListRelationFilter
    tournamentXps?: TournamentXpListRelationFilter
    startingStats?: XOR<BruteStartingStatsNullableRelationFilter, BruteStartingStatsWhereInput> | null
    damageOnBosses?: BossDamageListRelationFilter
    followers?: UserListRelationFilter
    inClanWarAttackerFighters?: ClanWarFightersListRelationFilter
    inClanWarDefenderFighters?: ClanWarFightersListRelationFilter
    event?: XOR<EventNullableRelationFilter, EventWhereInput> | null
    wonEvents?: EventListRelationFilter
  }, "id" | "id">

  export type BruteOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    willBeDeletedAt?: SortOrderInput | SortOrder
    deletionReason?: SortOrderInput | SortOrder
    destinyPath?: SortOrder
    previousDestinyPath?: SortOrder
    level?: SortOrder
    xp?: SortOrder
    hp?: SortOrder
    enduranceStat?: SortOrder
    enduranceModifier?: SortOrder
    enduranceValue?: SortOrder
    strengthStat?: SortOrder
    strengthModifier?: SortOrder
    strengthValue?: SortOrder
    agilityStat?: SortOrder
    agilityModifier?: SortOrder
    agilityValue?: SortOrder
    speedStat?: SortOrder
    speedModifier?: SortOrder
    speedValue?: SortOrder
    ranking?: SortOrder
    gender?: SortOrder
    userId?: SortOrderInput | SortOrder
    body?: SortOrder
    colors?: SortOrder
    weapons?: SortOrder
    skills?: SortOrder
    pets?: SortOrder
    ascensions?: SortOrder
    ascendedWeapons?: SortOrder
    ascendedSkills?: SortOrder
    ascendedPets?: SortOrder
    masterId?: SortOrderInput | SortOrder
    pupilsCount?: SortOrder
    clanId?: SortOrderInput | SortOrder
    registeredForTournament?: SortOrder
    nextTournamentDate?: SortOrderInput | SortOrder
    currentTournamentDate?: SortOrderInput | SortOrder
    currentTournamentStepWatched?: SortOrderInput | SortOrder
    globalTournamentWatchedDate?: SortOrderInput | SortOrder
    globalTournamentRoundWatched?: SortOrderInput | SortOrder
    eventTournamentWatchedDate?: SortOrderInput | SortOrder
    eventTournamentRoundWatched?: SortOrderInput | SortOrder
    lastFight?: SortOrderInput | SortOrder
    fightsLeft?: SortOrder
    victories?: SortOrder
    losses?: SortOrder
    opponentsGeneratedAt?: SortOrderInput | SortOrder
    canRankUpSince?: SortOrderInput | SortOrder
    favorite?: SortOrder
    wantToJoinClanId?: SortOrderInput | SortOrder
    tournamentWins?: SortOrder
    eventId?: SortOrderInput | SortOrder
    resets?: SortOrder
    _count?: BruteCountOrderByAggregateInput
    _avg?: BruteAvgOrderByAggregateInput
    _max?: BruteMaxOrderByAggregateInput
    _min?: BruteMinOrderByAggregateInput
    _sum?: BruteSumOrderByAggregateInput
  }

  export type BruteScalarWhereWithAggregatesInput = {
    AND?: BruteScalarWhereWithAggregatesInput | BruteScalarWhereWithAggregatesInput[]
    OR?: BruteScalarWhereWithAggregatesInput[]
    NOT?: BruteScalarWhereWithAggregatesInput | BruteScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Brute"> | string
    name?: StringWithAggregatesFilter<"Brute"> | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Brute"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Brute"> | Date | string
    willBeDeletedAt?: DateTimeNullableWithAggregatesFilter<"Brute"> | Date | string | null
    deletionReason?: StringNullableWithAggregatesFilter<"Brute"> | string | null
    destinyPath?: EnumDestinyChoiceSideNullableListFilter<"Brute">
    previousDestinyPath?: EnumDestinyChoiceSideNullableListFilter<"Brute">
    level?: IntWithAggregatesFilter<"Brute"> | number
    xp?: IntWithAggregatesFilter<"Brute"> | number
    hp?: IntWithAggregatesFilter<"Brute"> | number
    enduranceStat?: IntWithAggregatesFilter<"Brute"> | number
    enduranceModifier?: FloatWithAggregatesFilter<"Brute"> | number
    enduranceValue?: IntWithAggregatesFilter<"Brute"> | number
    strengthStat?: IntWithAggregatesFilter<"Brute"> | number
    strengthModifier?: FloatWithAggregatesFilter<"Brute"> | number
    strengthValue?: IntWithAggregatesFilter<"Brute"> | number
    agilityStat?: IntWithAggregatesFilter<"Brute"> | number
    agilityModifier?: FloatWithAggregatesFilter<"Brute"> | number
    agilityValue?: IntWithAggregatesFilter<"Brute"> | number
    speedStat?: IntWithAggregatesFilter<"Brute"> | number
    speedModifier?: FloatWithAggregatesFilter<"Brute"> | number
    speedValue?: IntWithAggregatesFilter<"Brute"> | number
    ranking?: IntWithAggregatesFilter<"Brute"> | number
    gender?: EnumGenderWithAggregatesFilter<"Brute"> | $Enums.Gender
    userId?: UuidNullableWithAggregatesFilter<"Brute"> | string | null
    body?: StringWithAggregatesFilter<"Brute"> | string
    colors?: StringWithAggregatesFilter<"Brute"> | string
    weapons?: EnumWeaponNameNullableListFilter<"Brute">
    skills?: EnumSkillNameNullableListFilter<"Brute">
    pets?: EnumPetNameNullableListFilter<"Brute">
    ascensions?: IntWithAggregatesFilter<"Brute"> | number
    ascendedWeapons?: EnumWeaponNameNullableListFilter<"Brute">
    ascendedSkills?: EnumSkillNameNullableListFilter<"Brute">
    ascendedPets?: EnumPetNameNullableListFilter<"Brute">
    masterId?: UuidNullableWithAggregatesFilter<"Brute"> | string | null
    pupilsCount?: IntWithAggregatesFilter<"Brute"> | number
    clanId?: UuidNullableWithAggregatesFilter<"Brute"> | string | null
    registeredForTournament?: BoolWithAggregatesFilter<"Brute"> | boolean
    nextTournamentDate?: DateTimeNullableWithAggregatesFilter<"Brute"> | Date | string | null
    currentTournamentDate?: DateTimeNullableWithAggregatesFilter<"Brute"> | Date | string | null
    currentTournamentStepWatched?: IntNullableWithAggregatesFilter<"Brute"> | number | null
    globalTournamentWatchedDate?: DateTimeNullableWithAggregatesFilter<"Brute"> | Date | string | null
    globalTournamentRoundWatched?: IntNullableWithAggregatesFilter<"Brute"> | number | null
    eventTournamentWatchedDate?: DateTimeNullableWithAggregatesFilter<"Brute"> | Date | string | null
    eventTournamentRoundWatched?: IntNullableWithAggregatesFilter<"Brute"> | number | null
    lastFight?: DateTimeNullableWithAggregatesFilter<"Brute"> | Date | string | null
    fightsLeft?: IntWithAggregatesFilter<"Brute"> | number
    victories?: IntWithAggregatesFilter<"Brute"> | number
    losses?: IntWithAggregatesFilter<"Brute"> | number
    opponentsGeneratedAt?: DateTimeNullableWithAggregatesFilter<"Brute"> | Date | string | null
    canRankUpSince?: DateTimeNullableWithAggregatesFilter<"Brute"> | Date | string | null
    favorite?: BoolWithAggregatesFilter<"Brute"> | boolean
    wantToJoinClanId?: UuidNullableWithAggregatesFilter<"Brute"> | string | null
    tournamentWins?: IntWithAggregatesFilter<"Brute"> | number
    eventId?: UuidNullableWithAggregatesFilter<"Brute"> | string | null
    resets?: IntWithAggregatesFilter<"Brute"> | number
  }

  export type BruteStartingStatsWhereInput = {
    AND?: BruteStartingStatsWhereInput | BruteStartingStatsWhereInput[]
    OR?: BruteStartingStatsWhereInput[]
    NOT?: BruteStartingStatsWhereInput | BruteStartingStatsWhereInput[]
    id?: UuidFilter<"BruteStartingStats"> | string
    endurance?: IntFilter<"BruteStartingStats"> | number
    strength?: IntFilter<"BruteStartingStats"> | number
    agility?: IntFilter<"BruteStartingStats"> | number
    speed?: IntFilter<"BruteStartingStats"> | number
    bruteId?: UuidFilter<"BruteStartingStats"> | string
    brute?: XOR<BruteRelationFilter, BruteWhereInput>
  }

  export type BruteStartingStatsOrderByWithRelationInput = {
    id?: SortOrder
    endurance?: SortOrder
    strength?: SortOrder
    agility?: SortOrder
    speed?: SortOrder
    bruteId?: SortOrder
    brute?: BruteOrderByWithRelationInput
  }

  export type BruteStartingStatsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    bruteId?: string
    AND?: BruteStartingStatsWhereInput | BruteStartingStatsWhereInput[]
    OR?: BruteStartingStatsWhereInput[]
    NOT?: BruteStartingStatsWhereInput | BruteStartingStatsWhereInput[]
    endurance?: IntFilter<"BruteStartingStats"> | number
    strength?: IntFilter<"BruteStartingStats"> | number
    agility?: IntFilter<"BruteStartingStats"> | number
    speed?: IntFilter<"BruteStartingStats"> | number
    brute?: XOR<BruteRelationFilter, BruteWhereInput>
  }, "id" | "id" | "bruteId">

  export type BruteStartingStatsOrderByWithAggregationInput = {
    id?: SortOrder
    endurance?: SortOrder
    strength?: SortOrder
    agility?: SortOrder
    speed?: SortOrder
    bruteId?: SortOrder
    _count?: BruteStartingStatsCountOrderByAggregateInput
    _avg?: BruteStartingStatsAvgOrderByAggregateInput
    _max?: BruteStartingStatsMaxOrderByAggregateInput
    _min?: BruteStartingStatsMinOrderByAggregateInput
    _sum?: BruteStartingStatsSumOrderByAggregateInput
  }

  export type BruteStartingStatsScalarWhereWithAggregatesInput = {
    AND?: BruteStartingStatsScalarWhereWithAggregatesInput | BruteStartingStatsScalarWhereWithAggregatesInput[]
    OR?: BruteStartingStatsScalarWhereWithAggregatesInput[]
    NOT?: BruteStartingStatsScalarWhereWithAggregatesInput | BruteStartingStatsScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"BruteStartingStats"> | string
    endurance?: IntWithAggregatesFilter<"BruteStartingStats"> | number
    strength?: IntWithAggregatesFilter<"BruteStartingStats"> | number
    agility?: IntWithAggregatesFilter<"BruteStartingStats"> | number
    speed?: IntWithAggregatesFilter<"BruteStartingStats"> | number
    bruteId?: UuidWithAggregatesFilter<"BruteStartingStats"> | string
  }

  export type FightWhereInput = {
    AND?: FightWhereInput | FightWhereInput[]
    OR?: FightWhereInput[]
    NOT?: FightWhereInput | FightWhereInput[]
    id?: UuidFilter<"Fight"> | string
    date?: DateTimeFilter<"Fight"> | Date | string
    brute1Id?: UuidFilter<"Fight"> | string
    brute2Id?: UuidNullableFilter<"Fight"> | string | null
    winner?: StringFilter<"Fight"> | string
    loser?: StringFilter<"Fight"> | string
    steps?: StringFilter<"Fight"> | string
    fighters?: StringFilter<"Fight"> | string
    tournamentId?: UuidNullableFilter<"Fight"> | string | null
    tournamentStep?: IntFilter<"Fight"> | number
    modifiers?: EnumFightModifierNullableListFilter<"Fight">
    background?: StringFilter<"Fight"> | string
    clanWarId?: UuidNullableFilter<"Fight"> | string | null
    brute1?: XOR<BruteRelationFilter, BruteWhereInput>
    brute2?: XOR<BruteNullableRelationFilter, BruteWhereInput> | null
    logs?: LogListRelationFilter
    tournament?: XOR<TournamentNullableRelationFilter, TournamentWhereInput> | null
    favoritedBy?: UserListRelationFilter
    clanWar?: XOR<ClanWarNullableRelationFilter, ClanWarWhereInput> | null
  }

  export type FightOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    brute1Id?: SortOrder
    brute2Id?: SortOrderInput | SortOrder
    winner?: SortOrder
    loser?: SortOrder
    steps?: SortOrder
    fighters?: SortOrder
    tournamentId?: SortOrderInput | SortOrder
    tournamentStep?: SortOrder
    modifiers?: SortOrder
    background?: SortOrder
    clanWarId?: SortOrderInput | SortOrder
    brute1?: BruteOrderByWithRelationInput
    brute2?: BruteOrderByWithRelationInput
    logs?: LogOrderByRelationAggregateInput
    tournament?: TournamentOrderByWithRelationInput
    favoritedBy?: UserOrderByRelationAggregateInput
    clanWar?: ClanWarOrderByWithRelationInput
  }

  export type FightWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FightWhereInput | FightWhereInput[]
    OR?: FightWhereInput[]
    NOT?: FightWhereInput | FightWhereInput[]
    date?: DateTimeFilter<"Fight"> | Date | string
    brute1Id?: UuidFilter<"Fight"> | string
    brute2Id?: UuidNullableFilter<"Fight"> | string | null
    winner?: StringFilter<"Fight"> | string
    loser?: StringFilter<"Fight"> | string
    steps?: StringFilter<"Fight"> | string
    fighters?: StringFilter<"Fight"> | string
    tournamentId?: UuidNullableFilter<"Fight"> | string | null
    tournamentStep?: IntFilter<"Fight"> | number
    modifiers?: EnumFightModifierNullableListFilter<"Fight">
    background?: StringFilter<"Fight"> | string
    clanWarId?: UuidNullableFilter<"Fight"> | string | null
    brute1?: XOR<BruteRelationFilter, BruteWhereInput>
    brute2?: XOR<BruteNullableRelationFilter, BruteWhereInput> | null
    logs?: LogListRelationFilter
    tournament?: XOR<TournamentNullableRelationFilter, TournamentWhereInput> | null
    favoritedBy?: UserListRelationFilter
    clanWar?: XOR<ClanWarNullableRelationFilter, ClanWarWhereInput> | null
  }, "id" | "id">

  export type FightOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    brute1Id?: SortOrder
    brute2Id?: SortOrderInput | SortOrder
    winner?: SortOrder
    loser?: SortOrder
    steps?: SortOrder
    fighters?: SortOrder
    tournamentId?: SortOrderInput | SortOrder
    tournamentStep?: SortOrder
    modifiers?: SortOrder
    background?: SortOrder
    clanWarId?: SortOrderInput | SortOrder
    _count?: FightCountOrderByAggregateInput
    _avg?: FightAvgOrderByAggregateInput
    _max?: FightMaxOrderByAggregateInput
    _min?: FightMinOrderByAggregateInput
    _sum?: FightSumOrderByAggregateInput
  }

  export type FightScalarWhereWithAggregatesInput = {
    AND?: FightScalarWhereWithAggregatesInput | FightScalarWhereWithAggregatesInput[]
    OR?: FightScalarWhereWithAggregatesInput[]
    NOT?: FightScalarWhereWithAggregatesInput | FightScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Fight"> | string
    date?: DateTimeWithAggregatesFilter<"Fight"> | Date | string
    brute1Id?: UuidWithAggregatesFilter<"Fight"> | string
    brute2Id?: UuidNullableWithAggregatesFilter<"Fight"> | string | null
    winner?: StringWithAggregatesFilter<"Fight"> | string
    loser?: StringWithAggregatesFilter<"Fight"> | string
    steps?: StringWithAggregatesFilter<"Fight"> | string
    fighters?: StringWithAggregatesFilter<"Fight"> | string
    tournamentId?: UuidNullableWithAggregatesFilter<"Fight"> | string | null
    tournamentStep?: IntWithAggregatesFilter<"Fight"> | number
    modifiers?: EnumFightModifierNullableListFilter<"Fight">
    background?: StringWithAggregatesFilter<"Fight"> | string
    clanWarId?: UuidNullableWithAggregatesFilter<"Fight"> | string | null
  }

  export type LogWhereInput = {
    AND?: LogWhereInput | LogWhereInput[]
    OR?: LogWhereInput[]
    NOT?: LogWhereInput | LogWhereInput[]
    id?: UuidFilter<"Log"> | string
    date?: DateTimeFilter<"Log"> | Date | string
    currentBruteId?: UuidFilter<"Log"> | string
    type?: EnumLogTypeFilter<"Log"> | $Enums.LogType
    level?: IntNullableFilter<"Log"> | number | null
    brute?: StringNullableFilter<"Log"> | string | null
    fightId?: UuidNullableFilter<"Log"> | string | null
    xp?: IntNullableFilter<"Log"> | number | null
    gold?: IntNullableFilter<"Log"> | number | null
    template?: StringNullableFilter<"Log"> | string | null
    destinyChoiceId?: UuidNullableFilter<"Log"> | string | null
    currentBrute?: XOR<BruteRelationFilter, BruteWhereInput>
    fight?: XOR<FightNullableRelationFilter, FightWhereInput> | null
    destinyChoice?: XOR<DestinyChoiceNullableRelationFilter, DestinyChoiceWhereInput> | null
  }

  export type LogOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    currentBruteId?: SortOrder
    type?: SortOrder
    level?: SortOrderInput | SortOrder
    brute?: SortOrderInput | SortOrder
    fightId?: SortOrderInput | SortOrder
    xp?: SortOrderInput | SortOrder
    gold?: SortOrderInput | SortOrder
    template?: SortOrderInput | SortOrder
    destinyChoiceId?: SortOrderInput | SortOrder
    currentBrute?: BruteOrderByWithRelationInput
    fight?: FightOrderByWithRelationInput
    destinyChoice?: DestinyChoiceOrderByWithRelationInput
  }

  export type LogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LogWhereInput | LogWhereInput[]
    OR?: LogWhereInput[]
    NOT?: LogWhereInput | LogWhereInput[]
    date?: DateTimeFilter<"Log"> | Date | string
    currentBruteId?: UuidFilter<"Log"> | string
    type?: EnumLogTypeFilter<"Log"> | $Enums.LogType
    level?: IntNullableFilter<"Log"> | number | null
    brute?: StringNullableFilter<"Log"> | string | null
    fightId?: UuidNullableFilter<"Log"> | string | null
    xp?: IntNullableFilter<"Log"> | number | null
    gold?: IntNullableFilter<"Log"> | number | null
    template?: StringNullableFilter<"Log"> | string | null
    destinyChoiceId?: UuidNullableFilter<"Log"> | string | null
    currentBrute?: XOR<BruteRelationFilter, BruteWhereInput>
    fight?: XOR<FightNullableRelationFilter, FightWhereInput> | null
    destinyChoice?: XOR<DestinyChoiceNullableRelationFilter, DestinyChoiceWhereInput> | null
  }, "id" | "id">

  export type LogOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    currentBruteId?: SortOrder
    type?: SortOrder
    level?: SortOrderInput | SortOrder
    brute?: SortOrderInput | SortOrder
    fightId?: SortOrderInput | SortOrder
    xp?: SortOrderInput | SortOrder
    gold?: SortOrderInput | SortOrder
    template?: SortOrderInput | SortOrder
    destinyChoiceId?: SortOrderInput | SortOrder
    _count?: LogCountOrderByAggregateInput
    _avg?: LogAvgOrderByAggregateInput
    _max?: LogMaxOrderByAggregateInput
    _min?: LogMinOrderByAggregateInput
    _sum?: LogSumOrderByAggregateInput
  }

  export type LogScalarWhereWithAggregatesInput = {
    AND?: LogScalarWhereWithAggregatesInput | LogScalarWhereWithAggregatesInput[]
    OR?: LogScalarWhereWithAggregatesInput[]
    NOT?: LogScalarWhereWithAggregatesInput | LogScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Log"> | string
    date?: DateTimeWithAggregatesFilter<"Log"> | Date | string
    currentBruteId?: UuidWithAggregatesFilter<"Log"> | string
    type?: EnumLogTypeWithAggregatesFilter<"Log"> | $Enums.LogType
    level?: IntNullableWithAggregatesFilter<"Log"> | number | null
    brute?: StringNullableWithAggregatesFilter<"Log"> | string | null
    fightId?: UuidNullableWithAggregatesFilter<"Log"> | string | null
    xp?: IntNullableWithAggregatesFilter<"Log"> | number | null
    gold?: IntNullableWithAggregatesFilter<"Log"> | number | null
    template?: StringNullableWithAggregatesFilter<"Log"> | string | null
    destinyChoiceId?: UuidNullableWithAggregatesFilter<"Log"> | string | null
  }

  export type DestinyChoiceWhereInput = {
    AND?: DestinyChoiceWhereInput | DestinyChoiceWhereInput[]
    OR?: DestinyChoiceWhereInput[]
    NOT?: DestinyChoiceWhereInput | DestinyChoiceWhereInput[]
    id?: UuidFilter<"DestinyChoice"> | string
    bruteId?: UuidFilter<"DestinyChoice"> | string
    path?: EnumDestinyChoiceSideNullableListFilter<"DestinyChoice">
    type?: EnumDestinyChoiceTypeFilter<"DestinyChoice"> | $Enums.DestinyChoiceType
    skill?: EnumSkillNameNullableFilter<"DestinyChoice"> | $Enums.SkillName | null
    weapon?: EnumWeaponNameNullableFilter<"DestinyChoice"> | $Enums.WeaponName | null
    pet?: EnumPetNameNullableFilter<"DestinyChoice"> | $Enums.PetName | null
    originalSkill?: EnumSkillNameNullableFilter<"DestinyChoice"> | $Enums.SkillName | null
    originalWeapon?: EnumWeaponNameNullableFilter<"DestinyChoice"> | $Enums.WeaponName | null
    originalPet?: EnumPetNameNullableFilter<"DestinyChoice"> | $Enums.PetName | null
    stat1?: EnumBruteStatNullableFilter<"DestinyChoice"> | $Enums.BruteStat | null
    stat1Value?: IntNullableFilter<"DestinyChoice"> | number | null
    stat2?: EnumBruteStatNullableFilter<"DestinyChoice"> | $Enums.BruteStat | null
    stat2Value?: IntNullableFilter<"DestinyChoice"> | number | null
    brute?: XOR<BruteRelationFilter, BruteWhereInput>
    logs?: LogListRelationFilter
  }

  export type DestinyChoiceOrderByWithRelationInput = {
    id?: SortOrder
    bruteId?: SortOrder
    path?: SortOrder
    type?: SortOrder
    skill?: SortOrderInput | SortOrder
    weapon?: SortOrderInput | SortOrder
    pet?: SortOrderInput | SortOrder
    originalSkill?: SortOrderInput | SortOrder
    originalWeapon?: SortOrderInput | SortOrder
    originalPet?: SortOrderInput | SortOrder
    stat1?: SortOrderInput | SortOrder
    stat1Value?: SortOrderInput | SortOrder
    stat2?: SortOrderInput | SortOrder
    stat2Value?: SortOrderInput | SortOrder
    brute?: BruteOrderByWithRelationInput
    logs?: LogOrderByRelationAggregateInput
  }

  export type DestinyChoiceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DestinyChoiceWhereInput | DestinyChoiceWhereInput[]
    OR?: DestinyChoiceWhereInput[]
    NOT?: DestinyChoiceWhereInput | DestinyChoiceWhereInput[]
    bruteId?: UuidFilter<"DestinyChoice"> | string
    path?: EnumDestinyChoiceSideNullableListFilter<"DestinyChoice">
    type?: EnumDestinyChoiceTypeFilter<"DestinyChoice"> | $Enums.DestinyChoiceType
    skill?: EnumSkillNameNullableFilter<"DestinyChoice"> | $Enums.SkillName | null
    weapon?: EnumWeaponNameNullableFilter<"DestinyChoice"> | $Enums.WeaponName | null
    pet?: EnumPetNameNullableFilter<"DestinyChoice"> | $Enums.PetName | null
    originalSkill?: EnumSkillNameNullableFilter<"DestinyChoice"> | $Enums.SkillName | null
    originalWeapon?: EnumWeaponNameNullableFilter<"DestinyChoice"> | $Enums.WeaponName | null
    originalPet?: EnumPetNameNullableFilter<"DestinyChoice"> | $Enums.PetName | null
    stat1?: EnumBruteStatNullableFilter<"DestinyChoice"> | $Enums.BruteStat | null
    stat1Value?: IntNullableFilter<"DestinyChoice"> | number | null
    stat2?: EnumBruteStatNullableFilter<"DestinyChoice"> | $Enums.BruteStat | null
    stat2Value?: IntNullableFilter<"DestinyChoice"> | number | null
    brute?: XOR<BruteRelationFilter, BruteWhereInput>
    logs?: LogListRelationFilter
  }, "id" | "id">

  export type DestinyChoiceOrderByWithAggregationInput = {
    id?: SortOrder
    bruteId?: SortOrder
    path?: SortOrder
    type?: SortOrder
    skill?: SortOrderInput | SortOrder
    weapon?: SortOrderInput | SortOrder
    pet?: SortOrderInput | SortOrder
    originalSkill?: SortOrderInput | SortOrder
    originalWeapon?: SortOrderInput | SortOrder
    originalPet?: SortOrderInput | SortOrder
    stat1?: SortOrderInput | SortOrder
    stat1Value?: SortOrderInput | SortOrder
    stat2?: SortOrderInput | SortOrder
    stat2Value?: SortOrderInput | SortOrder
    _count?: DestinyChoiceCountOrderByAggregateInput
    _avg?: DestinyChoiceAvgOrderByAggregateInput
    _max?: DestinyChoiceMaxOrderByAggregateInput
    _min?: DestinyChoiceMinOrderByAggregateInput
    _sum?: DestinyChoiceSumOrderByAggregateInput
  }

  export type DestinyChoiceScalarWhereWithAggregatesInput = {
    AND?: DestinyChoiceScalarWhereWithAggregatesInput | DestinyChoiceScalarWhereWithAggregatesInput[]
    OR?: DestinyChoiceScalarWhereWithAggregatesInput[]
    NOT?: DestinyChoiceScalarWhereWithAggregatesInput | DestinyChoiceScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"DestinyChoice"> | string
    bruteId?: UuidWithAggregatesFilter<"DestinyChoice"> | string
    path?: EnumDestinyChoiceSideNullableListFilter<"DestinyChoice">
    type?: EnumDestinyChoiceTypeWithAggregatesFilter<"DestinyChoice"> | $Enums.DestinyChoiceType
    skill?: EnumSkillNameNullableWithAggregatesFilter<"DestinyChoice"> | $Enums.SkillName | null
    weapon?: EnumWeaponNameNullableWithAggregatesFilter<"DestinyChoice"> | $Enums.WeaponName | null
    pet?: EnumPetNameNullableWithAggregatesFilter<"DestinyChoice"> | $Enums.PetName | null
    originalSkill?: EnumSkillNameNullableWithAggregatesFilter<"DestinyChoice"> | $Enums.SkillName | null
    originalWeapon?: EnumWeaponNameNullableWithAggregatesFilter<"DestinyChoice"> | $Enums.WeaponName | null
    originalPet?: EnumPetNameNullableWithAggregatesFilter<"DestinyChoice"> | $Enums.PetName | null
    stat1?: EnumBruteStatNullableWithAggregatesFilter<"DestinyChoice"> | $Enums.BruteStat | null
    stat1Value?: IntNullableWithAggregatesFilter<"DestinyChoice"> | number | null
    stat2?: EnumBruteStatNullableWithAggregatesFilter<"DestinyChoice"> | $Enums.BruteStat | null
    stat2Value?: IntNullableWithAggregatesFilter<"DestinyChoice"> | number | null
  }

  export type TournamentWhereInput = {
    AND?: TournamentWhereInput | TournamentWhereInput[]
    OR?: TournamentWhereInput[]
    NOT?: TournamentWhereInput | TournamentWhereInput[]
    id?: UuidFilter<"Tournament"> | string
    date?: DateTimeFilter<"Tournament"> | Date | string
    type?: EnumTournamentTypeFilter<"Tournament"> | $Enums.TournamentType
    rounds?: IntFilter<"Tournament"> | number
    eventId?: UuidNullableFilter<"Tournament"> | string | null
    participants?: BruteListRelationFilter
    fights?: FightListRelationFilter
    event?: XOR<EventNullableRelationFilter, EventWhereInput> | null
  }

  export type TournamentOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    type?: SortOrder
    rounds?: SortOrder
    eventId?: SortOrderInput | SortOrder
    participants?: BruteOrderByRelationAggregateInput
    fights?: FightOrderByRelationAggregateInput
    event?: EventOrderByWithRelationInput
  }

  export type TournamentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    eventId?: string
    AND?: TournamentWhereInput | TournamentWhereInput[]
    OR?: TournamentWhereInput[]
    NOT?: TournamentWhereInput | TournamentWhereInput[]
    date?: DateTimeFilter<"Tournament"> | Date | string
    type?: EnumTournamentTypeFilter<"Tournament"> | $Enums.TournamentType
    rounds?: IntFilter<"Tournament"> | number
    participants?: BruteListRelationFilter
    fights?: FightListRelationFilter
    event?: XOR<EventNullableRelationFilter, EventWhereInput> | null
  }, "id" | "id" | "eventId">

  export type TournamentOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    type?: SortOrder
    rounds?: SortOrder
    eventId?: SortOrderInput | SortOrder
    _count?: TournamentCountOrderByAggregateInput
    _avg?: TournamentAvgOrderByAggregateInput
    _max?: TournamentMaxOrderByAggregateInput
    _min?: TournamentMinOrderByAggregateInput
    _sum?: TournamentSumOrderByAggregateInput
  }

  export type TournamentScalarWhereWithAggregatesInput = {
    AND?: TournamentScalarWhereWithAggregatesInput | TournamentScalarWhereWithAggregatesInput[]
    OR?: TournamentScalarWhereWithAggregatesInput[]
    NOT?: TournamentScalarWhereWithAggregatesInput | TournamentScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Tournament"> | string
    date?: DateTimeWithAggregatesFilter<"Tournament"> | Date | string
    type?: EnumTournamentTypeWithAggregatesFilter<"Tournament"> | $Enums.TournamentType
    rounds?: IntWithAggregatesFilter<"Tournament"> | number
    eventId?: UuidNullableWithAggregatesFilter<"Tournament"> | string | null
  }

  export type TournamentAchievementWhereInput = {
    AND?: TournamentAchievementWhereInput | TournamentAchievementWhereInput[]
    OR?: TournamentAchievementWhereInput[]
    NOT?: TournamentAchievementWhereInput | TournamentAchievementWhereInput[]
    id?: UuidFilter<"TournamentAchievement"> | string
    bruteId?: UuidFilter<"TournamentAchievement"> | string
    date?: DateTimeFilter<"TournamentAchievement"> | Date | string
    achievement?: EnumAchievementNameFilter<"TournamentAchievement"> | $Enums.AchievementName
    achievementCount?: IntFilter<"TournamentAchievement"> | number
    brute?: XOR<BruteRelationFilter, BruteWhereInput>
  }

  export type TournamentAchievementOrderByWithRelationInput = {
    id?: SortOrder
    bruteId?: SortOrder
    date?: SortOrder
    achievement?: SortOrder
    achievementCount?: SortOrder
    brute?: BruteOrderByWithRelationInput
  }

  export type TournamentAchievementWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    achievement_bruteId?: TournamentAchievementAchievementBruteIdCompoundUniqueInput
    AND?: TournamentAchievementWhereInput | TournamentAchievementWhereInput[]
    OR?: TournamentAchievementWhereInput[]
    NOT?: TournamentAchievementWhereInput | TournamentAchievementWhereInput[]
    bruteId?: UuidFilter<"TournamentAchievement"> | string
    date?: DateTimeFilter<"TournamentAchievement"> | Date | string
    achievement?: EnumAchievementNameFilter<"TournamentAchievement"> | $Enums.AchievementName
    achievementCount?: IntFilter<"TournamentAchievement"> | number
    brute?: XOR<BruteRelationFilter, BruteWhereInput>
  }, "id" | "id" | "achievement_bruteId">

  export type TournamentAchievementOrderByWithAggregationInput = {
    id?: SortOrder
    bruteId?: SortOrder
    date?: SortOrder
    achievement?: SortOrder
    achievementCount?: SortOrder
    _count?: TournamentAchievementCountOrderByAggregateInput
    _avg?: TournamentAchievementAvgOrderByAggregateInput
    _max?: TournamentAchievementMaxOrderByAggregateInput
    _min?: TournamentAchievementMinOrderByAggregateInput
    _sum?: TournamentAchievementSumOrderByAggregateInput
  }

  export type TournamentAchievementScalarWhereWithAggregatesInput = {
    AND?: TournamentAchievementScalarWhereWithAggregatesInput | TournamentAchievementScalarWhereWithAggregatesInput[]
    OR?: TournamentAchievementScalarWhereWithAggregatesInput[]
    NOT?: TournamentAchievementScalarWhereWithAggregatesInput | TournamentAchievementScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"TournamentAchievement"> | string
    bruteId?: UuidWithAggregatesFilter<"TournamentAchievement"> | string
    date?: DateTimeWithAggregatesFilter<"TournamentAchievement"> | Date | string
    achievement?: EnumAchievementNameWithAggregatesFilter<"TournamentAchievement"> | $Enums.AchievementName
    achievementCount?: IntWithAggregatesFilter<"TournamentAchievement"> | number
  }

  export type TournamentGoldWhereInput = {
    AND?: TournamentGoldWhereInput | TournamentGoldWhereInput[]
    OR?: TournamentGoldWhereInput[]
    NOT?: TournamentGoldWhereInput | TournamentGoldWhereInput[]
    id?: UuidFilter<"TournamentGold"> | string
    date?: DateTimeFilter<"TournamentGold"> | Date | string
    userId?: UuidFilter<"TournamentGold"> | string
    gold?: IntFilter<"TournamentGold"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type TournamentGoldOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    userId?: SortOrder
    gold?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type TournamentGoldWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TournamentGoldWhereInput | TournamentGoldWhereInput[]
    OR?: TournamentGoldWhereInput[]
    NOT?: TournamentGoldWhereInput | TournamentGoldWhereInput[]
    date?: DateTimeFilter<"TournamentGold"> | Date | string
    userId?: UuidFilter<"TournamentGold"> | string
    gold?: IntFilter<"TournamentGold"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "id">

  export type TournamentGoldOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    userId?: SortOrder
    gold?: SortOrder
    _count?: TournamentGoldCountOrderByAggregateInput
    _avg?: TournamentGoldAvgOrderByAggregateInput
    _max?: TournamentGoldMaxOrderByAggregateInput
    _min?: TournamentGoldMinOrderByAggregateInput
    _sum?: TournamentGoldSumOrderByAggregateInput
  }

  export type TournamentGoldScalarWhereWithAggregatesInput = {
    AND?: TournamentGoldScalarWhereWithAggregatesInput | TournamentGoldScalarWhereWithAggregatesInput[]
    OR?: TournamentGoldScalarWhereWithAggregatesInput[]
    NOT?: TournamentGoldScalarWhereWithAggregatesInput | TournamentGoldScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"TournamentGold"> | string
    date?: DateTimeWithAggregatesFilter<"TournamentGold"> | Date | string
    userId?: UuidWithAggregatesFilter<"TournamentGold"> | string
    gold?: IntWithAggregatesFilter<"TournamentGold"> | number
  }

  export type TournamentXpWhereInput = {
    AND?: TournamentXpWhereInput | TournamentXpWhereInput[]
    OR?: TournamentXpWhereInput[]
    NOT?: TournamentXpWhereInput | TournamentXpWhereInput[]
    id?: UuidFilter<"TournamentXp"> | string
    date?: DateTimeFilter<"TournamentXp"> | Date | string
    bruteId?: UuidFilter<"TournamentXp"> | string
    xp?: IntFilter<"TournamentXp"> | number
    brute?: XOR<BruteRelationFilter, BruteWhereInput>
  }

  export type TournamentXpOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    bruteId?: SortOrder
    xp?: SortOrder
    brute?: BruteOrderByWithRelationInput
  }

  export type TournamentXpWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TournamentXpWhereInput | TournamentXpWhereInput[]
    OR?: TournamentXpWhereInput[]
    NOT?: TournamentXpWhereInput | TournamentXpWhereInput[]
    date?: DateTimeFilter<"TournamentXp"> | Date | string
    bruteId?: UuidFilter<"TournamentXp"> | string
    xp?: IntFilter<"TournamentXp"> | number
    brute?: XOR<BruteRelationFilter, BruteWhereInput>
  }, "id" | "id">

  export type TournamentXpOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    bruteId?: SortOrder
    xp?: SortOrder
    _count?: TournamentXpCountOrderByAggregateInput
    _avg?: TournamentXpAvgOrderByAggregateInput
    _max?: TournamentXpMaxOrderByAggregateInput
    _min?: TournamentXpMinOrderByAggregateInput
    _sum?: TournamentXpSumOrderByAggregateInput
  }

  export type TournamentXpScalarWhereWithAggregatesInput = {
    AND?: TournamentXpScalarWhereWithAggregatesInput | TournamentXpScalarWhereWithAggregatesInput[]
    OR?: TournamentXpScalarWhereWithAggregatesInput[]
    NOT?: TournamentXpScalarWhereWithAggregatesInput | TournamentXpScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"TournamentXp"> | string
    date?: DateTimeWithAggregatesFilter<"TournamentXp"> | Date | string
    bruteId?: UuidWithAggregatesFilter<"TournamentXp"> | string
    xp?: IntWithAggregatesFilter<"TournamentXp"> | number
  }

  export type AchievementWhereInput = {
    AND?: AchievementWhereInput | AchievementWhereInput[]
    OR?: AchievementWhereInput[]
    NOT?: AchievementWhereInput | AchievementWhereInput[]
    id?: UuidFilter<"Achievement"> | string
    name?: EnumAchievementNameFilter<"Achievement"> | $Enums.AchievementName
    count?: IntFilter<"Achievement"> | number
    bruteId?: UuidNullableFilter<"Achievement"> | string | null
    userId?: UuidNullableFilter<"Achievement"> | string | null
    brute?: XOR<BruteNullableRelationFilter, BruteWhereInput> | null
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type AchievementOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    count?: SortOrder
    bruteId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    brute?: BruteOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type AchievementWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name_bruteId?: AchievementNameBruteIdCompoundUniqueInput
    AND?: AchievementWhereInput | AchievementWhereInput[]
    OR?: AchievementWhereInput[]
    NOT?: AchievementWhereInput | AchievementWhereInput[]
    name?: EnumAchievementNameFilter<"Achievement"> | $Enums.AchievementName
    count?: IntFilter<"Achievement"> | number
    bruteId?: UuidNullableFilter<"Achievement"> | string | null
    userId?: UuidNullableFilter<"Achievement"> | string | null
    brute?: XOR<BruteNullableRelationFilter, BruteWhereInput> | null
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id" | "id" | "name_bruteId">

  export type AchievementOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    count?: SortOrder
    bruteId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    _count?: AchievementCountOrderByAggregateInput
    _avg?: AchievementAvgOrderByAggregateInput
    _max?: AchievementMaxOrderByAggregateInput
    _min?: AchievementMinOrderByAggregateInput
    _sum?: AchievementSumOrderByAggregateInput
  }

  export type AchievementScalarWhereWithAggregatesInput = {
    AND?: AchievementScalarWhereWithAggregatesInput | AchievementScalarWhereWithAggregatesInput[]
    OR?: AchievementScalarWhereWithAggregatesInput[]
    NOT?: AchievementScalarWhereWithAggregatesInput | AchievementScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Achievement"> | string
    name?: EnumAchievementNameWithAggregatesFilter<"Achievement"> | $Enums.AchievementName
    count?: IntWithAggregatesFilter<"Achievement"> | number
    bruteId?: UuidNullableWithAggregatesFilter<"Achievement"> | string | null
    userId?: UuidNullableWithAggregatesFilter<"Achievement"> | string | null
  }

  export type TitleWhereInput = {
    AND?: TitleWhereInput | TitleWhereInput[]
    OR?: TitleWhereInput[]
    NOT?: TitleWhereInput | TitleWhereInput[]
    id?: UuidFilter<"Title"> | string
    name?: EnumAchievementNameFilter<"Title"> | $Enums.AchievementName
    count?: IntFilter<"Title"> | number
    brutes?: BruteListRelationFilter
  }

  export type TitleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    count?: SortOrder
    brutes?: BruteOrderByRelationAggregateInput
  }

  export type TitleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TitleWhereInput | TitleWhereInput[]
    OR?: TitleWhereInput[]
    NOT?: TitleWhereInput | TitleWhereInput[]
    name?: EnumAchievementNameFilter<"Title"> | $Enums.AchievementName
    count?: IntFilter<"Title"> | number
    brutes?: BruteListRelationFilter
  }, "id" | "id">

  export type TitleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    count?: SortOrder
    _count?: TitleCountOrderByAggregateInput
    _avg?: TitleAvgOrderByAggregateInput
    _max?: TitleMaxOrderByAggregateInput
    _min?: TitleMinOrderByAggregateInput
    _sum?: TitleSumOrderByAggregateInput
  }

  export type TitleScalarWhereWithAggregatesInput = {
    AND?: TitleScalarWhereWithAggregatesInput | TitleScalarWhereWithAggregatesInput[]
    OR?: TitleScalarWhereWithAggregatesInput[]
    NOT?: TitleScalarWhereWithAggregatesInput | TitleScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Title"> | string
    name?: EnumAchievementNameWithAggregatesFilter<"Title"> | $Enums.AchievementName
    count?: IntWithAggregatesFilter<"Title"> | number
  }

  export type BruteReportWhereInput = {
    AND?: BruteReportWhereInput | BruteReportWhereInput[]
    OR?: BruteReportWhereInput[]
    NOT?: BruteReportWhereInput | BruteReportWhereInput[]
    id?: UuidFilter<"BruteReport"> | string
    bruteId?: UuidFilter<"BruteReport"> | string
    reason?: EnumBruteReportReasonFilter<"BruteReport"> | $Enums.BruteReportReason
    count?: IntFilter<"BruteReport"> | number
    date?: DateTimeFilter<"BruteReport"> | Date | string
    status?: EnumBruteReportStatusFilter<"BruteReport"> | $Enums.BruteReportStatus
    brute?: XOR<BruteRelationFilter, BruteWhereInput>
    users?: UserListRelationFilter
  }

  export type BruteReportOrderByWithRelationInput = {
    id?: SortOrder
    bruteId?: SortOrder
    reason?: SortOrder
    count?: SortOrder
    date?: SortOrder
    status?: SortOrder
    brute?: BruteOrderByWithRelationInput
    users?: UserOrderByRelationAggregateInput
  }

  export type BruteReportWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BruteReportWhereInput | BruteReportWhereInput[]
    OR?: BruteReportWhereInput[]
    NOT?: BruteReportWhereInput | BruteReportWhereInput[]
    bruteId?: UuidFilter<"BruteReport"> | string
    reason?: EnumBruteReportReasonFilter<"BruteReport"> | $Enums.BruteReportReason
    count?: IntFilter<"BruteReport"> | number
    date?: DateTimeFilter<"BruteReport"> | Date | string
    status?: EnumBruteReportStatusFilter<"BruteReport"> | $Enums.BruteReportStatus
    brute?: XOR<BruteRelationFilter, BruteWhereInput>
    users?: UserListRelationFilter
  }, "id" | "id">

  export type BruteReportOrderByWithAggregationInput = {
    id?: SortOrder
    bruteId?: SortOrder
    reason?: SortOrder
    count?: SortOrder
    date?: SortOrder
    status?: SortOrder
    _count?: BruteReportCountOrderByAggregateInput
    _avg?: BruteReportAvgOrderByAggregateInput
    _max?: BruteReportMaxOrderByAggregateInput
    _min?: BruteReportMinOrderByAggregateInput
    _sum?: BruteReportSumOrderByAggregateInput
  }

  export type BruteReportScalarWhereWithAggregatesInput = {
    AND?: BruteReportScalarWhereWithAggregatesInput | BruteReportScalarWhereWithAggregatesInput[]
    OR?: BruteReportScalarWhereWithAggregatesInput[]
    NOT?: BruteReportScalarWhereWithAggregatesInput | BruteReportScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"BruteReport"> | string
    bruteId?: UuidWithAggregatesFilter<"BruteReport"> | string
    reason?: EnumBruteReportReasonWithAggregatesFilter<"BruteReport"> | $Enums.BruteReportReason
    count?: IntWithAggregatesFilter<"BruteReport"> | number
    date?: DateTimeWithAggregatesFilter<"BruteReport"> | Date | string
    status?: EnumBruteReportStatusWithAggregatesFilter<"BruteReport"> | $Enums.BruteReportStatus
  }

  export type ServerStateWhereInput = {
    AND?: ServerStateWhereInput | ServerStateWhereInput[]
    OR?: ServerStateWhereInput[]
    NOT?: ServerStateWhereInput | ServerStateWhereInput[]
    id?: UuidFilter<"ServerState"> | string
    globalTournamentValid?: BoolFilter<"ServerState"> | boolean
    activeModifiers?: EnumFightModifierNullableListFilter<"ServerState">
    modifiersEndAt?: DateTimeNullableFilter<"ServerState"> | Date | string | null
    nextModifiers?: EnumFightModifierNullableListFilter<"ServerState">
  }

  export type ServerStateOrderByWithRelationInput = {
    id?: SortOrder
    globalTournamentValid?: SortOrder
    activeModifiers?: SortOrder
    modifiersEndAt?: SortOrderInput | SortOrder
    nextModifiers?: SortOrder
  }

  export type ServerStateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ServerStateWhereInput | ServerStateWhereInput[]
    OR?: ServerStateWhereInput[]
    NOT?: ServerStateWhereInput | ServerStateWhereInput[]
    globalTournamentValid?: BoolFilter<"ServerState"> | boolean
    activeModifiers?: EnumFightModifierNullableListFilter<"ServerState">
    modifiersEndAt?: DateTimeNullableFilter<"ServerState"> | Date | string | null
    nextModifiers?: EnumFightModifierNullableListFilter<"ServerState">
  }, "id" | "id">

  export type ServerStateOrderByWithAggregationInput = {
    id?: SortOrder
    globalTournamentValid?: SortOrder
    activeModifiers?: SortOrder
    modifiersEndAt?: SortOrderInput | SortOrder
    nextModifiers?: SortOrder
    _count?: ServerStateCountOrderByAggregateInput
    _max?: ServerStateMaxOrderByAggregateInput
    _min?: ServerStateMinOrderByAggregateInput
  }

  export type ServerStateScalarWhereWithAggregatesInput = {
    AND?: ServerStateScalarWhereWithAggregatesInput | ServerStateScalarWhereWithAggregatesInput[]
    OR?: ServerStateScalarWhereWithAggregatesInput[]
    NOT?: ServerStateScalarWhereWithAggregatesInput | ServerStateScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"ServerState"> | string
    globalTournamentValid?: BoolWithAggregatesFilter<"ServerState"> | boolean
    activeModifiers?: EnumFightModifierNullableListFilter<"ServerState">
    modifiersEndAt?: DateTimeNullableWithAggregatesFilter<"ServerState"> | Date | string | null
    nextModifiers?: EnumFightModifierNullableListFilter<"ServerState">
  }

  export type BannedWordWhereInput = {
    AND?: BannedWordWhereInput | BannedWordWhereInput[]
    OR?: BannedWordWhereInput[]
    NOT?: BannedWordWhereInput | BannedWordWhereInput[]
    id?: UuidFilter<"BannedWord"> | string
    word?: StringFilter<"BannedWord"> | string
  }

  export type BannedWordOrderByWithRelationInput = {
    id?: SortOrder
    word?: SortOrder
  }

  export type BannedWordWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BannedWordWhereInput | BannedWordWhereInput[]
    OR?: BannedWordWhereInput[]
    NOT?: BannedWordWhereInput | BannedWordWhereInput[]
    word?: StringFilter<"BannedWord"> | string
  }, "id" | "id">

  export type BannedWordOrderByWithAggregationInput = {
    id?: SortOrder
    word?: SortOrder
    _count?: BannedWordCountOrderByAggregateInput
    _max?: BannedWordMaxOrderByAggregateInput
    _min?: BannedWordMinOrderByAggregateInput
  }

  export type BannedWordScalarWhereWithAggregatesInput = {
    AND?: BannedWordScalarWhereWithAggregatesInput | BannedWordScalarWhereWithAggregatesInput[]
    OR?: BannedWordScalarWhereWithAggregatesInput[]
    NOT?: BannedWordScalarWhereWithAggregatesInput | BannedWordScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"BannedWord"> | string
    word?: StringWithAggregatesFilter<"BannedWord"> | string
  }

  export type BannedIpWhereInput = {
    AND?: BannedIpWhereInput | BannedIpWhereInput[]
    OR?: BannedIpWhereInput[]
    NOT?: BannedIpWhereInput | BannedIpWhereInput[]
    id?: StringFilter<"BannedIp"> | string
  }

  export type BannedIpOrderByWithRelationInput = {
    id?: SortOrder
  }

  export type BannedIpWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BannedIpWhereInput | BannedIpWhereInput[]
    OR?: BannedIpWhereInput[]
    NOT?: BannedIpWhereInput | BannedIpWhereInput[]
  }, "id">

  export type BannedIpOrderByWithAggregationInput = {
    id?: SortOrder
    _count?: BannedIpCountOrderByAggregateInput
    _max?: BannedIpMaxOrderByAggregateInput
    _min?: BannedIpMinOrderByAggregateInput
  }

  export type BannedIpScalarWhereWithAggregatesInput = {
    AND?: BannedIpScalarWhereWithAggregatesInput | BannedIpScalarWhereWithAggregatesInput[]
    OR?: BannedIpScalarWhereWithAggregatesInput[]
    NOT?: BannedIpScalarWhereWithAggregatesInput | BannedIpScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BannedIp"> | string
  }

  export type ClanWhereInput = {
    AND?: ClanWhereInput | ClanWhereInput[]
    OR?: ClanWhereInput[]
    NOT?: ClanWhereInput | ClanWhereInput[]
    id?: UuidFilter<"Clan"> | string
    name?: StringFilter<"Clan"> | string
    deletedAt?: DateTimeNullableFilter<"Clan"> | Date | string | null
    limit?: IntFilter<"Clan"> | number
    points?: IntFilter<"Clan"> | number
    elo?: IntFilter<"Clan"> | number
    boss?: EnumBossNameFilter<"Clan"> | $Enums.BossName
    damageOnBoss?: IntFilter<"Clan"> | number
    masterId?: UuidNullableFilter<"Clan"> | string | null
    participateInClanWar?: BoolFilter<"Clan"> | boolean
    master?: XOR<BruteNullableRelationFilter, BruteWhereInput> | null
    brutes?: BruteListRelationFilter
    joinRequests?: BruteListRelationFilter
    threads?: ClanThreadListRelationFilter
    bossDamages?: BossDamageListRelationFilter
    attacks?: ClanWarListRelationFilter
    defenses?: ClanWarListRelationFilter
    wins?: ClanWarListRelationFilter
  }

  export type ClanOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    limit?: SortOrder
    points?: SortOrder
    elo?: SortOrder
    boss?: SortOrder
    damageOnBoss?: SortOrder
    masterId?: SortOrderInput | SortOrder
    participateInClanWar?: SortOrder
    master?: BruteOrderByWithRelationInput
    brutes?: BruteOrderByRelationAggregateInput
    joinRequests?: BruteOrderByRelationAggregateInput
    threads?: ClanThreadOrderByRelationAggregateInput
    bossDamages?: BossDamageOrderByRelationAggregateInput
    attacks?: ClanWarOrderByRelationAggregateInput
    defenses?: ClanWarOrderByRelationAggregateInput
    wins?: ClanWarOrderByRelationAggregateInput
  }

  export type ClanWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    masterId?: string
    name_deletedAt?: ClanNameDeletedAtCompoundUniqueInput
    AND?: ClanWhereInput | ClanWhereInput[]
    OR?: ClanWhereInput[]
    NOT?: ClanWhereInput | ClanWhereInput[]
    name?: StringFilter<"Clan"> | string
    deletedAt?: DateTimeNullableFilter<"Clan"> | Date | string | null
    limit?: IntFilter<"Clan"> | number
    points?: IntFilter<"Clan"> | number
    elo?: IntFilter<"Clan"> | number
    boss?: EnumBossNameFilter<"Clan"> | $Enums.BossName
    damageOnBoss?: IntFilter<"Clan"> | number
    participateInClanWar?: BoolFilter<"Clan"> | boolean
    master?: XOR<BruteNullableRelationFilter, BruteWhereInput> | null
    brutes?: BruteListRelationFilter
    joinRequests?: BruteListRelationFilter
    threads?: ClanThreadListRelationFilter
    bossDamages?: BossDamageListRelationFilter
    attacks?: ClanWarListRelationFilter
    defenses?: ClanWarListRelationFilter
    wins?: ClanWarListRelationFilter
  }, "id" | "id" | "masterId" | "name_deletedAt">

  export type ClanOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    limit?: SortOrder
    points?: SortOrder
    elo?: SortOrder
    boss?: SortOrder
    damageOnBoss?: SortOrder
    masterId?: SortOrderInput | SortOrder
    participateInClanWar?: SortOrder
    _count?: ClanCountOrderByAggregateInput
    _avg?: ClanAvgOrderByAggregateInput
    _max?: ClanMaxOrderByAggregateInput
    _min?: ClanMinOrderByAggregateInput
    _sum?: ClanSumOrderByAggregateInput
  }

  export type ClanScalarWhereWithAggregatesInput = {
    AND?: ClanScalarWhereWithAggregatesInput | ClanScalarWhereWithAggregatesInput[]
    OR?: ClanScalarWhereWithAggregatesInput[]
    NOT?: ClanScalarWhereWithAggregatesInput | ClanScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Clan"> | string
    name?: StringWithAggregatesFilter<"Clan"> | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Clan"> | Date | string | null
    limit?: IntWithAggregatesFilter<"Clan"> | number
    points?: IntWithAggregatesFilter<"Clan"> | number
    elo?: IntWithAggregatesFilter<"Clan"> | number
    boss?: EnumBossNameWithAggregatesFilter<"Clan"> | $Enums.BossName
    damageOnBoss?: IntWithAggregatesFilter<"Clan"> | number
    masterId?: UuidNullableWithAggregatesFilter<"Clan"> | string | null
    participateInClanWar?: BoolWithAggregatesFilter<"Clan"> | boolean
  }

  export type ClanThreadWhereInput = {
    AND?: ClanThreadWhereInput | ClanThreadWhereInput[]
    OR?: ClanThreadWhereInput[]
    NOT?: ClanThreadWhereInput | ClanThreadWhereInput[]
    id?: UuidFilter<"ClanThread"> | string
    clanId?: UuidFilter<"ClanThread"> | string
    creatorId?: UuidFilter<"ClanThread"> | string
    title?: StringFilter<"ClanThread"> | string
    locked?: BoolFilter<"ClanThread"> | boolean
    pinned?: BoolFilter<"ClanThread"> | boolean
    postCount?: IntFilter<"ClanThread"> | number
    createdAt?: DateTimeFilter<"ClanThread"> | Date | string
    updatedAt?: DateTimeFilter<"ClanThread"> | Date | string
    clan?: XOR<ClanRelationFilter, ClanWhereInput>
    creator?: XOR<BruteRelationFilter, BruteWhereInput>
    posts?: ClanPostListRelationFilter
  }

  export type ClanThreadOrderByWithRelationInput = {
    id?: SortOrder
    clanId?: SortOrder
    creatorId?: SortOrder
    title?: SortOrder
    locked?: SortOrder
    pinned?: SortOrder
    postCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clan?: ClanOrderByWithRelationInput
    creator?: BruteOrderByWithRelationInput
    posts?: ClanPostOrderByRelationAggregateInput
  }

  export type ClanThreadWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ClanThreadWhereInput | ClanThreadWhereInput[]
    OR?: ClanThreadWhereInput[]
    NOT?: ClanThreadWhereInput | ClanThreadWhereInput[]
    clanId?: UuidFilter<"ClanThread"> | string
    creatorId?: UuidFilter<"ClanThread"> | string
    title?: StringFilter<"ClanThread"> | string
    locked?: BoolFilter<"ClanThread"> | boolean
    pinned?: BoolFilter<"ClanThread"> | boolean
    postCount?: IntFilter<"ClanThread"> | number
    createdAt?: DateTimeFilter<"ClanThread"> | Date | string
    updatedAt?: DateTimeFilter<"ClanThread"> | Date | string
    clan?: XOR<ClanRelationFilter, ClanWhereInput>
    creator?: XOR<BruteRelationFilter, BruteWhereInput>
    posts?: ClanPostListRelationFilter
  }, "id" | "id">

  export type ClanThreadOrderByWithAggregationInput = {
    id?: SortOrder
    clanId?: SortOrder
    creatorId?: SortOrder
    title?: SortOrder
    locked?: SortOrder
    pinned?: SortOrder
    postCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ClanThreadCountOrderByAggregateInput
    _avg?: ClanThreadAvgOrderByAggregateInput
    _max?: ClanThreadMaxOrderByAggregateInput
    _min?: ClanThreadMinOrderByAggregateInput
    _sum?: ClanThreadSumOrderByAggregateInput
  }

  export type ClanThreadScalarWhereWithAggregatesInput = {
    AND?: ClanThreadScalarWhereWithAggregatesInput | ClanThreadScalarWhereWithAggregatesInput[]
    OR?: ClanThreadScalarWhereWithAggregatesInput[]
    NOT?: ClanThreadScalarWhereWithAggregatesInput | ClanThreadScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"ClanThread"> | string
    clanId?: UuidWithAggregatesFilter<"ClanThread"> | string
    creatorId?: UuidWithAggregatesFilter<"ClanThread"> | string
    title?: StringWithAggregatesFilter<"ClanThread"> | string
    locked?: BoolWithAggregatesFilter<"ClanThread"> | boolean
    pinned?: BoolWithAggregatesFilter<"ClanThread"> | boolean
    postCount?: IntWithAggregatesFilter<"ClanThread"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ClanThread"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ClanThread"> | Date | string
  }

  export type ClanPostWhereInput = {
    AND?: ClanPostWhereInput | ClanPostWhereInput[]
    OR?: ClanPostWhereInput[]
    NOT?: ClanPostWhereInput | ClanPostWhereInput[]
    id?: UuidFilter<"ClanPost"> | string
    threadId?: UuidFilter<"ClanPost"> | string
    authorId?: UuidFilter<"ClanPost"> | string
    date?: DateTimeFilter<"ClanPost"> | Date | string
    message?: StringFilter<"ClanPost"> | string
    thread?: XOR<ClanThreadRelationFilter, ClanThreadWhereInput>
    author?: XOR<BruteRelationFilter, BruteWhereInput>
  }

  export type ClanPostOrderByWithRelationInput = {
    id?: SortOrder
    threadId?: SortOrder
    authorId?: SortOrder
    date?: SortOrder
    message?: SortOrder
    thread?: ClanThreadOrderByWithRelationInput
    author?: BruteOrderByWithRelationInput
  }

  export type ClanPostWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ClanPostWhereInput | ClanPostWhereInput[]
    OR?: ClanPostWhereInput[]
    NOT?: ClanPostWhereInput | ClanPostWhereInput[]
    threadId?: UuidFilter<"ClanPost"> | string
    authorId?: UuidFilter<"ClanPost"> | string
    date?: DateTimeFilter<"ClanPost"> | Date | string
    message?: StringFilter<"ClanPost"> | string
    thread?: XOR<ClanThreadRelationFilter, ClanThreadWhereInput>
    author?: XOR<BruteRelationFilter, BruteWhereInput>
  }, "id" | "id">

  export type ClanPostOrderByWithAggregationInput = {
    id?: SortOrder
    threadId?: SortOrder
    authorId?: SortOrder
    date?: SortOrder
    message?: SortOrder
    _count?: ClanPostCountOrderByAggregateInput
    _max?: ClanPostMaxOrderByAggregateInput
    _min?: ClanPostMinOrderByAggregateInput
  }

  export type ClanPostScalarWhereWithAggregatesInput = {
    AND?: ClanPostScalarWhereWithAggregatesInput | ClanPostScalarWhereWithAggregatesInput[]
    OR?: ClanPostScalarWhereWithAggregatesInput[]
    NOT?: ClanPostScalarWhereWithAggregatesInput | ClanPostScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"ClanPost"> | string
    threadId?: UuidWithAggregatesFilter<"ClanPost"> | string
    authorId?: UuidWithAggregatesFilter<"ClanPost"> | string
    date?: DateTimeWithAggregatesFilter<"ClanPost"> | Date | string
    message?: StringWithAggregatesFilter<"ClanPost"> | string
  }

  export type BossDamageWhereInput = {
    AND?: BossDamageWhereInput | BossDamageWhereInput[]
    OR?: BossDamageWhereInput[]
    NOT?: BossDamageWhereInput | BossDamageWhereInput[]
    id?: UuidFilter<"BossDamage"> | string
    bruteId?: UuidFilter<"BossDamage"> | string
    clanId?: UuidFilter<"BossDamage"> | string
    damage?: IntFilter<"BossDamage"> | number
    brute?: XOR<BruteRelationFilter, BruteWhereInput>
    clan?: XOR<ClanRelationFilter, ClanWhereInput>
  }

  export type BossDamageOrderByWithRelationInput = {
    id?: SortOrder
    bruteId?: SortOrder
    clanId?: SortOrder
    damage?: SortOrder
    brute?: BruteOrderByWithRelationInput
    clan?: ClanOrderByWithRelationInput
  }

  export type BossDamageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    bruteId_clanId?: BossDamageBruteIdClanIdCompoundUniqueInput
    AND?: BossDamageWhereInput | BossDamageWhereInput[]
    OR?: BossDamageWhereInput[]
    NOT?: BossDamageWhereInput | BossDamageWhereInput[]
    bruteId?: UuidFilter<"BossDamage"> | string
    clanId?: UuidFilter<"BossDamage"> | string
    damage?: IntFilter<"BossDamage"> | number
    brute?: XOR<BruteRelationFilter, BruteWhereInput>
    clan?: XOR<ClanRelationFilter, ClanWhereInput>
  }, "id" | "id" | "bruteId_clanId">

  export type BossDamageOrderByWithAggregationInput = {
    id?: SortOrder
    bruteId?: SortOrder
    clanId?: SortOrder
    damage?: SortOrder
    _count?: BossDamageCountOrderByAggregateInput
    _avg?: BossDamageAvgOrderByAggregateInput
    _max?: BossDamageMaxOrderByAggregateInput
    _min?: BossDamageMinOrderByAggregateInput
    _sum?: BossDamageSumOrderByAggregateInput
  }

  export type BossDamageScalarWhereWithAggregatesInput = {
    AND?: BossDamageScalarWhereWithAggregatesInput | BossDamageScalarWhereWithAggregatesInput[]
    OR?: BossDamageScalarWhereWithAggregatesInput[]
    NOT?: BossDamageScalarWhereWithAggregatesInput | BossDamageScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"BossDamage"> | string
    bruteId?: UuidWithAggregatesFilter<"BossDamage"> | string
    clanId?: UuidWithAggregatesFilter<"BossDamage"> | string
    damage?: IntWithAggregatesFilter<"BossDamage"> | number
  }

  export type ClanWarWhereInput = {
    AND?: ClanWarWhereInput | ClanWarWhereInput[]
    OR?: ClanWarWhereInput[]
    NOT?: ClanWarWhereInput | ClanWarWhereInput[]
    id?: UuidFilter<"ClanWar"> | string
    duration?: IntFilter<"ClanWar"> | number
    type?: EnumClanWarTypeFilter<"ClanWar"> | $Enums.ClanWarType
    date?: DateTimeFilter<"ClanWar"> | Date | string
    status?: EnumClanWarStatusFilter<"ClanWar"> | $Enums.ClanWarStatus
    attackerId?: UuidFilter<"ClanWar"> | string
    attackerEloChange?: IntFilter<"ClanWar"> | number
    attackerWins?: IntFilter<"ClanWar"> | number
    defenderId?: UuidFilter<"ClanWar"> | string
    defenderEloChange?: IntFilter<"ClanWar"> | number
    defenderWins?: IntFilter<"ClanWar"> | number
    winnerId?: UuidNullableFilter<"ClanWar"> | string | null
    attacker?: XOR<ClanRelationFilter, ClanWhereInput>
    defender?: XOR<ClanRelationFilter, ClanWhereInput>
    winner?: XOR<ClanNullableRelationFilter, ClanWhereInput> | null
    fights?: FightListRelationFilter
    fighters?: ClanWarFightersListRelationFilter
  }

  export type ClanWarOrderByWithRelationInput = {
    id?: SortOrder
    duration?: SortOrder
    type?: SortOrder
    date?: SortOrder
    status?: SortOrder
    attackerId?: SortOrder
    attackerEloChange?: SortOrder
    attackerWins?: SortOrder
    defenderId?: SortOrder
    defenderEloChange?: SortOrder
    defenderWins?: SortOrder
    winnerId?: SortOrderInput | SortOrder
    attacker?: ClanOrderByWithRelationInput
    defender?: ClanOrderByWithRelationInput
    winner?: ClanOrderByWithRelationInput
    fights?: FightOrderByRelationAggregateInput
    fighters?: ClanWarFightersOrderByRelationAggregateInput
  }

  export type ClanWarWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ClanWarWhereInput | ClanWarWhereInput[]
    OR?: ClanWarWhereInput[]
    NOT?: ClanWarWhereInput | ClanWarWhereInput[]
    duration?: IntFilter<"ClanWar"> | number
    type?: EnumClanWarTypeFilter<"ClanWar"> | $Enums.ClanWarType
    date?: DateTimeFilter<"ClanWar"> | Date | string
    status?: EnumClanWarStatusFilter<"ClanWar"> | $Enums.ClanWarStatus
    attackerId?: UuidFilter<"ClanWar"> | string
    attackerEloChange?: IntFilter<"ClanWar"> | number
    attackerWins?: IntFilter<"ClanWar"> | number
    defenderId?: UuidFilter<"ClanWar"> | string
    defenderEloChange?: IntFilter<"ClanWar"> | number
    defenderWins?: IntFilter<"ClanWar"> | number
    winnerId?: UuidNullableFilter<"ClanWar"> | string | null
    attacker?: XOR<ClanRelationFilter, ClanWhereInput>
    defender?: XOR<ClanRelationFilter, ClanWhereInput>
    winner?: XOR<ClanNullableRelationFilter, ClanWhereInput> | null
    fights?: FightListRelationFilter
    fighters?: ClanWarFightersListRelationFilter
  }, "id" | "id">

  export type ClanWarOrderByWithAggregationInput = {
    id?: SortOrder
    duration?: SortOrder
    type?: SortOrder
    date?: SortOrder
    status?: SortOrder
    attackerId?: SortOrder
    attackerEloChange?: SortOrder
    attackerWins?: SortOrder
    defenderId?: SortOrder
    defenderEloChange?: SortOrder
    defenderWins?: SortOrder
    winnerId?: SortOrderInput | SortOrder
    _count?: ClanWarCountOrderByAggregateInput
    _avg?: ClanWarAvgOrderByAggregateInput
    _max?: ClanWarMaxOrderByAggregateInput
    _min?: ClanWarMinOrderByAggregateInput
    _sum?: ClanWarSumOrderByAggregateInput
  }

  export type ClanWarScalarWhereWithAggregatesInput = {
    AND?: ClanWarScalarWhereWithAggregatesInput | ClanWarScalarWhereWithAggregatesInput[]
    OR?: ClanWarScalarWhereWithAggregatesInput[]
    NOT?: ClanWarScalarWhereWithAggregatesInput | ClanWarScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"ClanWar"> | string
    duration?: IntWithAggregatesFilter<"ClanWar"> | number
    type?: EnumClanWarTypeWithAggregatesFilter<"ClanWar"> | $Enums.ClanWarType
    date?: DateTimeWithAggregatesFilter<"ClanWar"> | Date | string
    status?: EnumClanWarStatusWithAggregatesFilter<"ClanWar"> | $Enums.ClanWarStatus
    attackerId?: UuidWithAggregatesFilter<"ClanWar"> | string
    attackerEloChange?: IntWithAggregatesFilter<"ClanWar"> | number
    attackerWins?: IntWithAggregatesFilter<"ClanWar"> | number
    defenderId?: UuidWithAggregatesFilter<"ClanWar"> | string
    defenderEloChange?: IntWithAggregatesFilter<"ClanWar"> | number
    defenderWins?: IntWithAggregatesFilter<"ClanWar"> | number
    winnerId?: UuidNullableWithAggregatesFilter<"ClanWar"> | string | null
  }

  export type ClanWarFightersWhereInput = {
    AND?: ClanWarFightersWhereInput | ClanWarFightersWhereInput[]
    OR?: ClanWarFightersWhereInput[]
    NOT?: ClanWarFightersWhereInput | ClanWarFightersWhereInput[]
    id?: UuidFilter<"ClanWarFighters"> | string
    clanWarId?: UuidFilter<"ClanWarFighters"> | string
    day?: IntFilter<"ClanWarFighters"> | number
    clanWar?: XOR<ClanWarRelationFilter, ClanWarWhereInput>
    attackers?: BruteListRelationFilter
    defenders?: BruteListRelationFilter
  }

  export type ClanWarFightersOrderByWithRelationInput = {
    id?: SortOrder
    clanWarId?: SortOrder
    day?: SortOrder
    clanWar?: ClanWarOrderByWithRelationInput
    attackers?: BruteOrderByRelationAggregateInput
    defenders?: BruteOrderByRelationAggregateInput
  }

  export type ClanWarFightersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    clanWarId_day?: ClanWarFightersClanWarIdDayCompoundUniqueInput
    AND?: ClanWarFightersWhereInput | ClanWarFightersWhereInput[]
    OR?: ClanWarFightersWhereInput[]
    NOT?: ClanWarFightersWhereInput | ClanWarFightersWhereInput[]
    clanWarId?: UuidFilter<"ClanWarFighters"> | string
    day?: IntFilter<"ClanWarFighters"> | number
    clanWar?: XOR<ClanWarRelationFilter, ClanWarWhereInput>
    attackers?: BruteListRelationFilter
    defenders?: BruteListRelationFilter
  }, "id" | "id" | "clanWarId_day">

  export type ClanWarFightersOrderByWithAggregationInput = {
    id?: SortOrder
    clanWarId?: SortOrder
    day?: SortOrder
    _count?: ClanWarFightersCountOrderByAggregateInput
    _avg?: ClanWarFightersAvgOrderByAggregateInput
    _max?: ClanWarFightersMaxOrderByAggregateInput
    _min?: ClanWarFightersMinOrderByAggregateInput
    _sum?: ClanWarFightersSumOrderByAggregateInput
  }

  export type ClanWarFightersScalarWhereWithAggregatesInput = {
    AND?: ClanWarFightersScalarWhereWithAggregatesInput | ClanWarFightersScalarWhereWithAggregatesInput[]
    OR?: ClanWarFightersScalarWhereWithAggregatesInput[]
    NOT?: ClanWarFightersScalarWhereWithAggregatesInput | ClanWarFightersScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"ClanWarFighters"> | string
    clanWarId?: UuidWithAggregatesFilter<"ClanWarFighters"> | string
    day?: IntWithAggregatesFilter<"ClanWarFighters"> | number
  }

  export type InventoryItemWhereInput = {
    AND?: InventoryItemWhereInput | InventoryItemWhereInput[]
    OR?: InventoryItemWhereInput[]
    NOT?: InventoryItemWhereInput | InventoryItemWhereInput[]
    id?: UuidFilter<"InventoryItem"> | string
    type?: EnumInventoryItemTypeFilter<"InventoryItem"> | $Enums.InventoryItemType
    count?: IntFilter<"InventoryItem"> | number
    bruteId?: UuidNullableFilter<"InventoryItem"> | string | null
    userId?: UuidNullableFilter<"InventoryItem"> | string | null
    brute?: XOR<BruteNullableRelationFilter, BruteWhereInput> | null
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type InventoryItemOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    count?: SortOrder
    bruteId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    brute?: BruteOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type InventoryItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    type_bruteId?: InventoryItemTypeBruteIdCompoundUniqueInput
    type_userId?: InventoryItemTypeUserIdCompoundUniqueInput
    AND?: InventoryItemWhereInput | InventoryItemWhereInput[]
    OR?: InventoryItemWhereInput[]
    NOT?: InventoryItemWhereInput | InventoryItemWhereInput[]
    type?: EnumInventoryItemTypeFilter<"InventoryItem"> | $Enums.InventoryItemType
    count?: IntFilter<"InventoryItem"> | number
    bruteId?: UuidNullableFilter<"InventoryItem"> | string | null
    userId?: UuidNullableFilter<"InventoryItem"> | string | null
    brute?: XOR<BruteNullableRelationFilter, BruteWhereInput> | null
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id" | "id" | "type_bruteId" | "type_userId">

  export type InventoryItemOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    count?: SortOrder
    bruteId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    _count?: InventoryItemCountOrderByAggregateInput
    _avg?: InventoryItemAvgOrderByAggregateInput
    _max?: InventoryItemMaxOrderByAggregateInput
    _min?: InventoryItemMinOrderByAggregateInput
    _sum?: InventoryItemSumOrderByAggregateInput
  }

  export type InventoryItemScalarWhereWithAggregatesInput = {
    AND?: InventoryItemScalarWhereWithAggregatesInput | InventoryItemScalarWhereWithAggregatesInput[]
    OR?: InventoryItemScalarWhereWithAggregatesInput[]
    NOT?: InventoryItemScalarWhereWithAggregatesInput | InventoryItemScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"InventoryItem"> | string
    type?: EnumInventoryItemTypeWithAggregatesFilter<"InventoryItem"> | $Enums.InventoryItemType
    count?: IntWithAggregatesFilter<"InventoryItem"> | number
    bruteId?: UuidNullableWithAggregatesFilter<"InventoryItem"> | string | null
    userId?: UuidNullableWithAggregatesFilter<"InventoryItem"> | string | null
  }

  export type ReleaseWhereInput = {
    AND?: ReleaseWhereInput | ReleaseWhereInput[]
    OR?: ReleaseWhereInput[]
    NOT?: ReleaseWhereInput | ReleaseWhereInput[]
    version?: StringFilter<"Release"> | string
    date?: DateTimeFilter<"Release"> | Date | string
  }

  export type ReleaseOrderByWithRelationInput = {
    version?: SortOrder
    date?: SortOrder
  }

  export type ReleaseWhereUniqueInput = Prisma.AtLeast<{
    version?: string
    AND?: ReleaseWhereInput | ReleaseWhereInput[]
    OR?: ReleaseWhereInput[]
    NOT?: ReleaseWhereInput | ReleaseWhereInput[]
    date?: DateTimeFilter<"Release"> | Date | string
  }, "version" | "version">

  export type ReleaseOrderByWithAggregationInput = {
    version?: SortOrder
    date?: SortOrder
    _count?: ReleaseCountOrderByAggregateInput
    _max?: ReleaseMaxOrderByAggregateInput
    _min?: ReleaseMinOrderByAggregateInput
  }

  export type ReleaseScalarWhereWithAggregatesInput = {
    AND?: ReleaseScalarWhereWithAggregatesInput | ReleaseScalarWhereWithAggregatesInput[]
    OR?: ReleaseScalarWhereWithAggregatesInput[]
    NOT?: ReleaseScalarWhereWithAggregatesInput | ReleaseScalarWhereWithAggregatesInput[]
    version?: StringWithAggregatesFilter<"Release"> | string
    date?: DateTimeWithAggregatesFilter<"Release"> | Date | string
  }

  export type EventWhereInput = {
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    id?: UuidFilter<"Event"> | string
    date?: DateTimeFilter<"Event"> | Date | string
    type?: EnumEventTypeFilter<"Event"> | $Enums.EventType
    maxLevel?: IntFilter<"Event"> | number
    maxRound?: IntFilter<"Event"> | number
    status?: EnumEventStatusFilter<"Event"> | $Enums.EventStatus
    winnerId?: UuidNullableFilter<"Event"> | string | null
    finishedAt?: DateTimeNullableFilter<"Event"> | Date | string | null
    sortedBrutes?: StringNullableListFilter<"Event">
    brutes?: BruteListRelationFilter
    tournament?: XOR<TournamentNullableRelationFilter, TournamentWhereInput> | null
    winner?: XOR<BruteNullableRelationFilter, BruteWhereInput> | null
  }

  export type EventOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    type?: SortOrder
    maxLevel?: SortOrder
    maxRound?: SortOrder
    status?: SortOrder
    winnerId?: SortOrderInput | SortOrder
    finishedAt?: SortOrderInput | SortOrder
    sortedBrutes?: SortOrder
    brutes?: BruteOrderByRelationAggregateInput
    tournament?: TournamentOrderByWithRelationInput
    winner?: BruteOrderByWithRelationInput
  }

  export type EventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    date?: DateTimeFilter<"Event"> | Date | string
    type?: EnumEventTypeFilter<"Event"> | $Enums.EventType
    maxLevel?: IntFilter<"Event"> | number
    maxRound?: IntFilter<"Event"> | number
    status?: EnumEventStatusFilter<"Event"> | $Enums.EventStatus
    winnerId?: UuidNullableFilter<"Event"> | string | null
    finishedAt?: DateTimeNullableFilter<"Event"> | Date | string | null
    sortedBrutes?: StringNullableListFilter<"Event">
    brutes?: BruteListRelationFilter
    tournament?: XOR<TournamentNullableRelationFilter, TournamentWhereInput> | null
    winner?: XOR<BruteNullableRelationFilter, BruteWhereInput> | null
  }, "id" | "id">

  export type EventOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    type?: SortOrder
    maxLevel?: SortOrder
    maxRound?: SortOrder
    status?: SortOrder
    winnerId?: SortOrderInput | SortOrder
    finishedAt?: SortOrderInput | SortOrder
    sortedBrutes?: SortOrder
    _count?: EventCountOrderByAggregateInput
    _avg?: EventAvgOrderByAggregateInput
    _max?: EventMaxOrderByAggregateInput
    _min?: EventMinOrderByAggregateInput
    _sum?: EventSumOrderByAggregateInput
  }

  export type EventScalarWhereWithAggregatesInput = {
    AND?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    OR?: EventScalarWhereWithAggregatesInput[]
    NOT?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Event"> | string
    date?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    type?: EnumEventTypeWithAggregatesFilter<"Event"> | $Enums.EventType
    maxLevel?: IntWithAggregatesFilter<"Event"> | number
    maxRound?: IntWithAggregatesFilter<"Event"> | number
    status?: EnumEventStatusWithAggregatesFilter<"Event"> | $Enums.EventStatus
    winnerId?: UuidNullableWithAggregatesFilter<"Event"> | string | null
    finishedAt?: DateTimeNullableWithAggregatesFilter<"Event"> | Date | string | null
    sortedBrutes?: StringNullableListFilter<"Event">
  }

  export type UserCreateInput = {
    id: string
    lang?: $Enums.Lang
    name: string
    admin?: boolean
    moderator?: boolean
    connexionToken: string
    bruteLimit?: number
    gold?: number
    fightSpeed?: number
    backgroundMusic?: boolean
    dinorpgDone?: Date | string | null
    ips?: UserCreateipsInput | string[]
    bannedAt?: Date | string | null
    banReason?: string | null
    lastReleaseSeen?: string | null
    displayVersusPage?: boolean
    brutes?: BruteCreateNestedManyWithoutUserInput
    achievements?: AchievementCreateNestedManyWithoutUserInput
    reports?: BruteReportCreateNestedManyWithoutUsersInput
    tournamentGolds?: TournamentGoldCreateNestedManyWithoutUserInput
    inventory?: InventoryItemCreateNestedManyWithoutUserInput
    favoriteFights?: FightCreateNestedManyWithoutFavoritedByInput
    following?: BruteCreateNestedManyWithoutFollowersInput
  }

  export type UserUncheckedCreateInput = {
    id: string
    lang?: $Enums.Lang
    name: string
    admin?: boolean
    moderator?: boolean
    connexionToken: string
    bruteLimit?: number
    gold?: number
    fightSpeed?: number
    backgroundMusic?: boolean
    dinorpgDone?: Date | string | null
    ips?: UserCreateipsInput | string[]
    bannedAt?: Date | string | null
    banReason?: string | null
    lastReleaseSeen?: string | null
    displayVersusPage?: boolean
    brutes?: BruteUncheckedCreateNestedManyWithoutUserInput
    achievements?: AchievementUncheckedCreateNestedManyWithoutUserInput
    reports?: BruteReportUncheckedCreateNestedManyWithoutUsersInput
    tournamentGolds?: TournamentGoldUncheckedCreateNestedManyWithoutUserInput
    inventory?: InventoryItemUncheckedCreateNestedManyWithoutUserInput
    favoriteFights?: FightUncheckedCreateNestedManyWithoutFavoritedByInput
    following?: BruteUncheckedCreateNestedManyWithoutFollowersInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    lang?: EnumLangFieldUpdateOperationsInput | $Enums.Lang
    name?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
    moderator?: BoolFieldUpdateOperationsInput | boolean
    connexionToken?: StringFieldUpdateOperationsInput | string
    bruteLimit?: IntFieldUpdateOperationsInput | number
    gold?: IntFieldUpdateOperationsInput | number
    fightSpeed?: IntFieldUpdateOperationsInput | number
    backgroundMusic?: BoolFieldUpdateOperationsInput | boolean
    dinorpgDone?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ips?: UserUpdateipsInput | string[]
    bannedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    lastReleaseSeen?: NullableStringFieldUpdateOperationsInput | string | null
    displayVersusPage?: BoolFieldUpdateOperationsInput | boolean
    brutes?: BruteUpdateManyWithoutUserNestedInput
    achievements?: AchievementUpdateManyWithoutUserNestedInput
    reports?: BruteReportUpdateManyWithoutUsersNestedInput
    tournamentGolds?: TournamentGoldUpdateManyWithoutUserNestedInput
    inventory?: InventoryItemUpdateManyWithoutUserNestedInput
    favoriteFights?: FightUpdateManyWithoutFavoritedByNestedInput
    following?: BruteUpdateManyWithoutFollowersNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    lang?: EnumLangFieldUpdateOperationsInput | $Enums.Lang
    name?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
    moderator?: BoolFieldUpdateOperationsInput | boolean
    connexionToken?: StringFieldUpdateOperationsInput | string
    bruteLimit?: IntFieldUpdateOperationsInput | number
    gold?: IntFieldUpdateOperationsInput | number
    fightSpeed?: IntFieldUpdateOperationsInput | number
    backgroundMusic?: BoolFieldUpdateOperationsInput | boolean
    dinorpgDone?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ips?: UserUpdateipsInput | string[]
    bannedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    lastReleaseSeen?: NullableStringFieldUpdateOperationsInput | string | null
    displayVersusPage?: BoolFieldUpdateOperationsInput | boolean
    brutes?: BruteUncheckedUpdateManyWithoutUserNestedInput
    achievements?: AchievementUncheckedUpdateManyWithoutUserNestedInput
    reports?: BruteReportUncheckedUpdateManyWithoutUsersNestedInput
    tournamentGolds?: TournamentGoldUncheckedUpdateManyWithoutUserNestedInput
    inventory?: InventoryItemUncheckedUpdateManyWithoutUserNestedInput
    favoriteFights?: FightUncheckedUpdateManyWithoutFavoritedByNestedInput
    following?: BruteUncheckedUpdateManyWithoutFollowersNestedInput
  }

  export type UserCreateManyInput = {
    id: string
    lang?: $Enums.Lang
    name: string
    admin?: boolean
    moderator?: boolean
    connexionToken: string
    bruteLimit?: number
    gold?: number
    fightSpeed?: number
    backgroundMusic?: boolean
    dinorpgDone?: Date | string | null
    ips?: UserCreateipsInput | string[]
    bannedAt?: Date | string | null
    banReason?: string | null
    lastReleaseSeen?: string | null
    displayVersusPage?: boolean
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    lang?: EnumLangFieldUpdateOperationsInput | $Enums.Lang
    name?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
    moderator?: BoolFieldUpdateOperationsInput | boolean
    connexionToken?: StringFieldUpdateOperationsInput | string
    bruteLimit?: IntFieldUpdateOperationsInput | number
    gold?: IntFieldUpdateOperationsInput | number
    fightSpeed?: IntFieldUpdateOperationsInput | number
    backgroundMusic?: BoolFieldUpdateOperationsInput | boolean
    dinorpgDone?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ips?: UserUpdateipsInput | string[]
    bannedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    lastReleaseSeen?: NullableStringFieldUpdateOperationsInput | string | null
    displayVersusPage?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    lang?: EnumLangFieldUpdateOperationsInput | $Enums.Lang
    name?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
    moderator?: BoolFieldUpdateOperationsInput | boolean
    connexionToken?: StringFieldUpdateOperationsInput | string
    bruteLimit?: IntFieldUpdateOperationsInput | number
    gold?: IntFieldUpdateOperationsInput | number
    fightSpeed?: IntFieldUpdateOperationsInput | number
    backgroundMusic?: BoolFieldUpdateOperationsInput | boolean
    dinorpgDone?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ips?: UserUpdateipsInput | string[]
    bannedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    lastReleaseSeen?: NullableStringFieldUpdateOperationsInput | string | null
    displayVersusPage?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BruteCreateInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: number
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    tournamentWins?: number
    resets?: number
    user?: UserCreateNestedOneWithoutBrutesInput
    master?: BruteCreateNestedOneWithoutPupilsInput
    pupils?: BruteCreateNestedManyWithoutMasterInput
    clan?: ClanCreateNestedOneWithoutBrutesInput
    fights?: FightCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightCreateNestedManyWithoutBrute2Input
    logs?: LogCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceCreateNestedManyWithoutBruteInput
    tournaments?: TournamentCreateNestedManyWithoutParticipantsInput
    opponents?: BruteCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementCreateNestedManyWithoutBruteInput
    reports?: BruteReportCreateNestedManyWithoutBruteInput
    titles?: TitleCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostCreateNestedManyWithoutAuthorInput
    wantToJoinClan?: ClanCreateNestedOneWithoutJoinRequestsInput
    threads?: ClanThreadCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageCreateNestedManyWithoutBruteInput
    followers?: UserCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersCreateNestedManyWithoutDefendersInput
    event?: EventCreateNestedOneWithoutBrutesInput
    wonEvents?: EventCreateNestedManyWithoutWinnerInput
  }

  export type BruteUncheckedCreateInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    userId?: string | null
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    masterId?: string | null
    pupilsCount?: number
    clanId?: string | null
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    wantToJoinClanId?: string | null
    tournamentWins?: number
    eventId?: string | null
    resets?: number
    pupils?: BruteUncheckedCreateNestedManyWithoutMasterInput
    fights?: FightUncheckedCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightUncheckedCreateNestedManyWithoutBrute2Input
    logs?: LogUncheckedCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceUncheckedCreateNestedManyWithoutBruteInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutParticipantsInput
    opponents?: BruteUncheckedCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteUncheckedCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementUncheckedCreateNestedManyWithoutBruteInput
    reports?: BruteReportUncheckedCreateNestedManyWithoutBruteInput
    titles?: TitleUncheckedCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanUncheckedCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostUncheckedCreateNestedManyWithoutAuthorInput
    threads?: ClanThreadUncheckedCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemUncheckedCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementUncheckedCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpUncheckedCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsUncheckedCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageUncheckedCreateNestedManyWithoutBruteInput
    followers?: UserUncheckedCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutDefendersInput
    wonEvents?: EventUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type BruteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: IntFieldUpdateOperationsInput | number
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    tournamentWins?: IntFieldUpdateOperationsInput | number
    resets?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutBrutesNestedInput
    master?: BruteUpdateOneWithoutPupilsNestedInput
    pupils?: BruteUpdateManyWithoutMasterNestedInput
    clan?: ClanUpdateOneWithoutBrutesNestedInput
    fights?: FightUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUpdateManyWithoutBrute2NestedInput
    logs?: LogUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUpdateManyWithoutBruteNestedInput
    titles?: TitleUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUpdateManyWithoutAuthorNestedInput
    wantToJoinClan?: ClanUpdateOneWithoutJoinRequestsNestedInput
    threads?: ClanThreadUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUpdateManyWithoutBruteNestedInput
    followers?: UserUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUpdateManyWithoutDefendersNestedInput
    event?: EventUpdateOneWithoutBrutesNestedInput
    wonEvents?: EventUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
    pupils?: BruteUncheckedUpdateManyWithoutMasterNestedInput
    fights?: FightUncheckedUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUncheckedUpdateManyWithoutBrute2NestedInput
    logs?: LogUncheckedUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUncheckedUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUncheckedUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUncheckedUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUncheckedUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUncheckedUpdateManyWithoutBruteNestedInput
    titles?: TitleUncheckedUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUncheckedUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUncheckedUpdateManyWithoutAuthorNestedInput
    threads?: ClanThreadUncheckedUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUncheckedUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUncheckedUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUncheckedUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUncheckedUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUncheckedUpdateManyWithoutBruteNestedInput
    followers?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedUpdateManyWithoutDefendersNestedInput
    wonEvents?: EventUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type BruteCreateManyInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    userId?: string | null
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    masterId?: string | null
    pupilsCount?: number
    clanId?: string | null
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    wantToJoinClanId?: string | null
    tournamentWins?: number
    eventId?: string | null
    resets?: number
  }

  export type BruteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: IntFieldUpdateOperationsInput | number
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    tournamentWins?: IntFieldUpdateOperationsInput | number
    resets?: IntFieldUpdateOperationsInput | number
  }

  export type BruteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
  }

  export type BruteStartingStatsCreateInput = {
    id?: string
    endurance?: number
    strength?: number
    agility?: number
    speed?: number
    brute: BruteCreateNestedOneWithoutStartingStatsInput
  }

  export type BruteStartingStatsUncheckedCreateInput = {
    id?: string
    endurance?: number
    strength?: number
    agility?: number
    speed?: number
    bruteId: string
  }

  export type BruteStartingStatsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    endurance?: IntFieldUpdateOperationsInput | number
    strength?: IntFieldUpdateOperationsInput | number
    agility?: IntFieldUpdateOperationsInput | number
    speed?: IntFieldUpdateOperationsInput | number
    brute?: BruteUpdateOneRequiredWithoutStartingStatsNestedInput
  }

  export type BruteStartingStatsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    endurance?: IntFieldUpdateOperationsInput | number
    strength?: IntFieldUpdateOperationsInput | number
    agility?: IntFieldUpdateOperationsInput | number
    speed?: IntFieldUpdateOperationsInput | number
    bruteId?: StringFieldUpdateOperationsInput | string
  }

  export type BruteStartingStatsCreateManyInput = {
    id?: string
    endurance?: number
    strength?: number
    agility?: number
    speed?: number
    bruteId: string
  }

  export type BruteStartingStatsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    endurance?: IntFieldUpdateOperationsInput | number
    strength?: IntFieldUpdateOperationsInput | number
    agility?: IntFieldUpdateOperationsInput | number
    speed?: IntFieldUpdateOperationsInput | number
  }

  export type BruteStartingStatsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    endurance?: IntFieldUpdateOperationsInput | number
    strength?: IntFieldUpdateOperationsInput | number
    agility?: IntFieldUpdateOperationsInput | number
    speed?: IntFieldUpdateOperationsInput | number
    bruteId?: StringFieldUpdateOperationsInput | string
  }

  export type FightCreateInput = {
    id?: string
    date?: Date | string
    winner: string
    loser: string
    steps: string
    fighters: string
    tournamentStep?: number
    modifiers?: FightCreatemodifiersInput | $Enums.FightModifier[]
    background?: string
    brute1: BruteCreateNestedOneWithoutFightsInput
    brute2?: BruteCreateNestedOneWithoutFightsAsAdversaryInput
    logs?: LogCreateNestedManyWithoutFightInput
    tournament?: TournamentCreateNestedOneWithoutFightsInput
    favoritedBy?: UserCreateNestedManyWithoutFavoriteFightsInput
    clanWar?: ClanWarCreateNestedOneWithoutFightsInput
  }

  export type FightUncheckedCreateInput = {
    id?: string
    date?: Date | string
    brute1Id: string
    brute2Id?: string | null
    winner: string
    loser: string
    steps: string
    fighters: string
    tournamentId?: string | null
    tournamentStep?: number
    modifiers?: FightCreatemodifiersInput | $Enums.FightModifier[]
    background?: string
    clanWarId?: string | null
    logs?: LogUncheckedCreateNestedManyWithoutFightInput
    favoritedBy?: UserUncheckedCreateNestedManyWithoutFavoriteFightsInput
  }

  export type FightUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    winner?: StringFieldUpdateOperationsInput | string
    loser?: StringFieldUpdateOperationsInput | string
    steps?: StringFieldUpdateOperationsInput | string
    fighters?: StringFieldUpdateOperationsInput | string
    tournamentStep?: IntFieldUpdateOperationsInput | number
    modifiers?: FightUpdatemodifiersInput | $Enums.FightModifier[]
    background?: StringFieldUpdateOperationsInput | string
    brute1?: BruteUpdateOneRequiredWithoutFightsNestedInput
    brute2?: BruteUpdateOneWithoutFightsAsAdversaryNestedInput
    logs?: LogUpdateManyWithoutFightNestedInput
    tournament?: TournamentUpdateOneWithoutFightsNestedInput
    favoritedBy?: UserUpdateManyWithoutFavoriteFightsNestedInput
    clanWar?: ClanWarUpdateOneWithoutFightsNestedInput
  }

  export type FightUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    brute1Id?: StringFieldUpdateOperationsInput | string
    brute2Id?: NullableStringFieldUpdateOperationsInput | string | null
    winner?: StringFieldUpdateOperationsInput | string
    loser?: StringFieldUpdateOperationsInput | string
    steps?: StringFieldUpdateOperationsInput | string
    fighters?: StringFieldUpdateOperationsInput | string
    tournamentId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentStep?: IntFieldUpdateOperationsInput | number
    modifiers?: FightUpdatemodifiersInput | $Enums.FightModifier[]
    background?: StringFieldUpdateOperationsInput | string
    clanWarId?: NullableStringFieldUpdateOperationsInput | string | null
    logs?: LogUncheckedUpdateManyWithoutFightNestedInput
    favoritedBy?: UserUncheckedUpdateManyWithoutFavoriteFightsNestedInput
  }

  export type FightCreateManyInput = {
    id?: string
    date?: Date | string
    brute1Id: string
    brute2Id?: string | null
    winner: string
    loser: string
    steps: string
    fighters: string
    tournamentId?: string | null
    tournamentStep?: number
    modifiers?: FightCreatemodifiersInput | $Enums.FightModifier[]
    background?: string
    clanWarId?: string | null
  }

  export type FightUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    winner?: StringFieldUpdateOperationsInput | string
    loser?: StringFieldUpdateOperationsInput | string
    steps?: StringFieldUpdateOperationsInput | string
    fighters?: StringFieldUpdateOperationsInput | string
    tournamentStep?: IntFieldUpdateOperationsInput | number
    modifiers?: FightUpdatemodifiersInput | $Enums.FightModifier[]
    background?: StringFieldUpdateOperationsInput | string
  }

  export type FightUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    brute1Id?: StringFieldUpdateOperationsInput | string
    brute2Id?: NullableStringFieldUpdateOperationsInput | string | null
    winner?: StringFieldUpdateOperationsInput | string
    loser?: StringFieldUpdateOperationsInput | string
    steps?: StringFieldUpdateOperationsInput | string
    fighters?: StringFieldUpdateOperationsInput | string
    tournamentId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentStep?: IntFieldUpdateOperationsInput | number
    modifiers?: FightUpdatemodifiersInput | $Enums.FightModifier[]
    background?: StringFieldUpdateOperationsInput | string
    clanWarId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LogCreateInput = {
    id?: string
    date?: Date | string
    type: $Enums.LogType
    level?: number | null
    brute?: string | null
    xp?: number | null
    gold?: number | null
    template?: string | null
    currentBrute: BruteCreateNestedOneWithoutLogsInput
    fight?: FightCreateNestedOneWithoutLogsInput
    destinyChoice?: DestinyChoiceCreateNestedOneWithoutLogsInput
  }

  export type LogUncheckedCreateInput = {
    id?: string
    date?: Date | string
    currentBruteId: string
    type: $Enums.LogType
    level?: number | null
    brute?: string | null
    fightId?: string | null
    xp?: number | null
    gold?: number | null
    template?: string | null
    destinyChoiceId?: string | null
  }

  export type LogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumLogTypeFieldUpdateOperationsInput | $Enums.LogType
    level?: NullableIntFieldUpdateOperationsInput | number | null
    brute?: NullableStringFieldUpdateOperationsInput | string | null
    xp?: NullableIntFieldUpdateOperationsInput | number | null
    gold?: NullableIntFieldUpdateOperationsInput | number | null
    template?: NullableStringFieldUpdateOperationsInput | string | null
    currentBrute?: BruteUpdateOneRequiredWithoutLogsNestedInput
    fight?: FightUpdateOneWithoutLogsNestedInput
    destinyChoice?: DestinyChoiceUpdateOneWithoutLogsNestedInput
  }

  export type LogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    currentBruteId?: StringFieldUpdateOperationsInput | string
    type?: EnumLogTypeFieldUpdateOperationsInput | $Enums.LogType
    level?: NullableIntFieldUpdateOperationsInput | number | null
    brute?: NullableStringFieldUpdateOperationsInput | string | null
    fightId?: NullableStringFieldUpdateOperationsInput | string | null
    xp?: NullableIntFieldUpdateOperationsInput | number | null
    gold?: NullableIntFieldUpdateOperationsInput | number | null
    template?: NullableStringFieldUpdateOperationsInput | string | null
    destinyChoiceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LogCreateManyInput = {
    id?: string
    date?: Date | string
    currentBruteId: string
    type: $Enums.LogType
    level?: number | null
    brute?: string | null
    fightId?: string | null
    xp?: number | null
    gold?: number | null
    template?: string | null
    destinyChoiceId?: string | null
  }

  export type LogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumLogTypeFieldUpdateOperationsInput | $Enums.LogType
    level?: NullableIntFieldUpdateOperationsInput | number | null
    brute?: NullableStringFieldUpdateOperationsInput | string | null
    xp?: NullableIntFieldUpdateOperationsInput | number | null
    gold?: NullableIntFieldUpdateOperationsInput | number | null
    template?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    currentBruteId?: StringFieldUpdateOperationsInput | string
    type?: EnumLogTypeFieldUpdateOperationsInput | $Enums.LogType
    level?: NullableIntFieldUpdateOperationsInput | number | null
    brute?: NullableStringFieldUpdateOperationsInput | string | null
    fightId?: NullableStringFieldUpdateOperationsInput | string | null
    xp?: NullableIntFieldUpdateOperationsInput | number | null
    gold?: NullableIntFieldUpdateOperationsInput | number | null
    template?: NullableStringFieldUpdateOperationsInput | string | null
    destinyChoiceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DestinyChoiceCreateInput = {
    id?: string
    path?: DestinyChoiceCreatepathInput | $Enums.DestinyChoiceSide[]
    type: $Enums.DestinyChoiceType
    skill?: $Enums.SkillName | null
    weapon?: $Enums.WeaponName | null
    pet?: $Enums.PetName | null
    originalSkill?: $Enums.SkillName | null
    originalWeapon?: $Enums.WeaponName | null
    originalPet?: $Enums.PetName | null
    stat1?: $Enums.BruteStat | null
    stat1Value?: number | null
    stat2?: $Enums.BruteStat | null
    stat2Value?: number | null
    brute: BruteCreateNestedOneWithoutDestinyChoicesInput
    logs?: LogCreateNestedManyWithoutDestinyChoiceInput
  }

  export type DestinyChoiceUncheckedCreateInput = {
    id?: string
    bruteId: string
    path?: DestinyChoiceCreatepathInput | $Enums.DestinyChoiceSide[]
    type: $Enums.DestinyChoiceType
    skill?: $Enums.SkillName | null
    weapon?: $Enums.WeaponName | null
    pet?: $Enums.PetName | null
    originalSkill?: $Enums.SkillName | null
    originalWeapon?: $Enums.WeaponName | null
    originalPet?: $Enums.PetName | null
    stat1?: $Enums.BruteStat | null
    stat1Value?: number | null
    stat2?: $Enums.BruteStat | null
    stat2Value?: number | null
    logs?: LogUncheckedCreateNestedManyWithoutDestinyChoiceInput
  }

  export type DestinyChoiceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: DestinyChoiceUpdatepathInput | $Enums.DestinyChoiceSide[]
    type?: EnumDestinyChoiceTypeFieldUpdateOperationsInput | $Enums.DestinyChoiceType
    skill?: NullableEnumSkillNameFieldUpdateOperationsInput | $Enums.SkillName | null
    weapon?: NullableEnumWeaponNameFieldUpdateOperationsInput | $Enums.WeaponName | null
    pet?: NullableEnumPetNameFieldUpdateOperationsInput | $Enums.PetName | null
    originalSkill?: NullableEnumSkillNameFieldUpdateOperationsInput | $Enums.SkillName | null
    originalWeapon?: NullableEnumWeaponNameFieldUpdateOperationsInput | $Enums.WeaponName | null
    originalPet?: NullableEnumPetNameFieldUpdateOperationsInput | $Enums.PetName | null
    stat1?: NullableEnumBruteStatFieldUpdateOperationsInput | $Enums.BruteStat | null
    stat1Value?: NullableIntFieldUpdateOperationsInput | number | null
    stat2?: NullableEnumBruteStatFieldUpdateOperationsInput | $Enums.BruteStat | null
    stat2Value?: NullableIntFieldUpdateOperationsInput | number | null
    brute?: BruteUpdateOneRequiredWithoutDestinyChoicesNestedInput
    logs?: LogUpdateManyWithoutDestinyChoiceNestedInput
  }

  export type DestinyChoiceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    bruteId?: StringFieldUpdateOperationsInput | string
    path?: DestinyChoiceUpdatepathInput | $Enums.DestinyChoiceSide[]
    type?: EnumDestinyChoiceTypeFieldUpdateOperationsInput | $Enums.DestinyChoiceType
    skill?: NullableEnumSkillNameFieldUpdateOperationsInput | $Enums.SkillName | null
    weapon?: NullableEnumWeaponNameFieldUpdateOperationsInput | $Enums.WeaponName | null
    pet?: NullableEnumPetNameFieldUpdateOperationsInput | $Enums.PetName | null
    originalSkill?: NullableEnumSkillNameFieldUpdateOperationsInput | $Enums.SkillName | null
    originalWeapon?: NullableEnumWeaponNameFieldUpdateOperationsInput | $Enums.WeaponName | null
    originalPet?: NullableEnumPetNameFieldUpdateOperationsInput | $Enums.PetName | null
    stat1?: NullableEnumBruteStatFieldUpdateOperationsInput | $Enums.BruteStat | null
    stat1Value?: NullableIntFieldUpdateOperationsInput | number | null
    stat2?: NullableEnumBruteStatFieldUpdateOperationsInput | $Enums.BruteStat | null
    stat2Value?: NullableIntFieldUpdateOperationsInput | number | null
    logs?: LogUncheckedUpdateManyWithoutDestinyChoiceNestedInput
  }

  export type DestinyChoiceCreateManyInput = {
    id?: string
    bruteId: string
    path?: DestinyChoiceCreatepathInput | $Enums.DestinyChoiceSide[]
    type: $Enums.DestinyChoiceType
    skill?: $Enums.SkillName | null
    weapon?: $Enums.WeaponName | null
    pet?: $Enums.PetName | null
    originalSkill?: $Enums.SkillName | null
    originalWeapon?: $Enums.WeaponName | null
    originalPet?: $Enums.PetName | null
    stat1?: $Enums.BruteStat | null
    stat1Value?: number | null
    stat2?: $Enums.BruteStat | null
    stat2Value?: number | null
  }

  export type DestinyChoiceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: DestinyChoiceUpdatepathInput | $Enums.DestinyChoiceSide[]
    type?: EnumDestinyChoiceTypeFieldUpdateOperationsInput | $Enums.DestinyChoiceType
    skill?: NullableEnumSkillNameFieldUpdateOperationsInput | $Enums.SkillName | null
    weapon?: NullableEnumWeaponNameFieldUpdateOperationsInput | $Enums.WeaponName | null
    pet?: NullableEnumPetNameFieldUpdateOperationsInput | $Enums.PetName | null
    originalSkill?: NullableEnumSkillNameFieldUpdateOperationsInput | $Enums.SkillName | null
    originalWeapon?: NullableEnumWeaponNameFieldUpdateOperationsInput | $Enums.WeaponName | null
    originalPet?: NullableEnumPetNameFieldUpdateOperationsInput | $Enums.PetName | null
    stat1?: NullableEnumBruteStatFieldUpdateOperationsInput | $Enums.BruteStat | null
    stat1Value?: NullableIntFieldUpdateOperationsInput | number | null
    stat2?: NullableEnumBruteStatFieldUpdateOperationsInput | $Enums.BruteStat | null
    stat2Value?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DestinyChoiceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    bruteId?: StringFieldUpdateOperationsInput | string
    path?: DestinyChoiceUpdatepathInput | $Enums.DestinyChoiceSide[]
    type?: EnumDestinyChoiceTypeFieldUpdateOperationsInput | $Enums.DestinyChoiceType
    skill?: NullableEnumSkillNameFieldUpdateOperationsInput | $Enums.SkillName | null
    weapon?: NullableEnumWeaponNameFieldUpdateOperationsInput | $Enums.WeaponName | null
    pet?: NullableEnumPetNameFieldUpdateOperationsInput | $Enums.PetName | null
    originalSkill?: NullableEnumSkillNameFieldUpdateOperationsInput | $Enums.SkillName | null
    originalWeapon?: NullableEnumWeaponNameFieldUpdateOperationsInput | $Enums.WeaponName | null
    originalPet?: NullableEnumPetNameFieldUpdateOperationsInput | $Enums.PetName | null
    stat1?: NullableEnumBruteStatFieldUpdateOperationsInput | $Enums.BruteStat | null
    stat1Value?: NullableIntFieldUpdateOperationsInput | number | null
    stat2?: NullableEnumBruteStatFieldUpdateOperationsInput | $Enums.BruteStat | null
    stat2Value?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TournamentCreateInput = {
    id?: string
    date: Date | string
    type?: $Enums.TournamentType
    rounds: number
    participants?: BruteCreateNestedManyWithoutTournamentsInput
    fights?: FightCreateNestedManyWithoutTournamentInput
    event?: EventCreateNestedOneWithoutTournamentInput
  }

  export type TournamentUncheckedCreateInput = {
    id?: string
    date: Date | string
    type?: $Enums.TournamentType
    rounds: number
    eventId?: string | null
    participants?: BruteUncheckedCreateNestedManyWithoutTournamentsInput
    fights?: FightUncheckedCreateNestedManyWithoutTournamentInput
  }

  export type TournamentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumTournamentTypeFieldUpdateOperationsInput | $Enums.TournamentType
    rounds?: IntFieldUpdateOperationsInput | number
    participants?: BruteUpdateManyWithoutTournamentsNestedInput
    fights?: FightUpdateManyWithoutTournamentNestedInput
    event?: EventUpdateOneWithoutTournamentNestedInput
  }

  export type TournamentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumTournamentTypeFieldUpdateOperationsInput | $Enums.TournamentType
    rounds?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    participants?: BruteUncheckedUpdateManyWithoutTournamentsNestedInput
    fights?: FightUncheckedUpdateManyWithoutTournamentNestedInput
  }

  export type TournamentCreateManyInput = {
    id?: string
    date: Date | string
    type?: $Enums.TournamentType
    rounds: number
    eventId?: string | null
  }

  export type TournamentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumTournamentTypeFieldUpdateOperationsInput | $Enums.TournamentType
    rounds?: IntFieldUpdateOperationsInput | number
  }

  export type TournamentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumTournamentTypeFieldUpdateOperationsInput | $Enums.TournamentType
    rounds?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TournamentAchievementCreateInput = {
    id?: string
    date: Date | string
    achievement: $Enums.AchievementName
    achievementCount: number
    brute: BruteCreateNestedOneWithoutTournamentAchievementsInput
  }

  export type TournamentAchievementUncheckedCreateInput = {
    id?: string
    bruteId: string
    date: Date | string
    achievement: $Enums.AchievementName
    achievementCount: number
  }

  export type TournamentAchievementUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    achievement?: EnumAchievementNameFieldUpdateOperationsInput | $Enums.AchievementName
    achievementCount?: IntFieldUpdateOperationsInput | number
    brute?: BruteUpdateOneRequiredWithoutTournamentAchievementsNestedInput
  }

  export type TournamentAchievementUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    bruteId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    achievement?: EnumAchievementNameFieldUpdateOperationsInput | $Enums.AchievementName
    achievementCount?: IntFieldUpdateOperationsInput | number
  }

  export type TournamentAchievementCreateManyInput = {
    id?: string
    bruteId: string
    date: Date | string
    achievement: $Enums.AchievementName
    achievementCount: number
  }

  export type TournamentAchievementUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    achievement?: EnumAchievementNameFieldUpdateOperationsInput | $Enums.AchievementName
    achievementCount?: IntFieldUpdateOperationsInput | number
  }

  export type TournamentAchievementUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    bruteId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    achievement?: EnumAchievementNameFieldUpdateOperationsInput | $Enums.AchievementName
    achievementCount?: IntFieldUpdateOperationsInput | number
  }

  export type TournamentGoldCreateInput = {
    id?: string
    date: Date | string
    gold: number
    user: UserCreateNestedOneWithoutTournamentGoldsInput
  }

  export type TournamentGoldUncheckedCreateInput = {
    id?: string
    date: Date | string
    userId: string
    gold: number
  }

  export type TournamentGoldUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    gold?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutTournamentGoldsNestedInput
  }

  export type TournamentGoldUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    gold?: IntFieldUpdateOperationsInput | number
  }

  export type TournamentGoldCreateManyInput = {
    id?: string
    date: Date | string
    userId: string
    gold: number
  }

  export type TournamentGoldUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    gold?: IntFieldUpdateOperationsInput | number
  }

  export type TournamentGoldUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    gold?: IntFieldUpdateOperationsInput | number
  }

  export type TournamentXpCreateInput = {
    id?: string
    date: Date | string
    xp: number
    brute: BruteCreateNestedOneWithoutTournamentXpsInput
  }

  export type TournamentXpUncheckedCreateInput = {
    id?: string
    date: Date | string
    bruteId: string
    xp: number
  }

  export type TournamentXpUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    xp?: IntFieldUpdateOperationsInput | number
    brute?: BruteUpdateOneRequiredWithoutTournamentXpsNestedInput
  }

  export type TournamentXpUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bruteId?: StringFieldUpdateOperationsInput | string
    xp?: IntFieldUpdateOperationsInput | number
  }

  export type TournamentXpCreateManyInput = {
    id?: string
    date: Date | string
    bruteId: string
    xp: number
  }

  export type TournamentXpUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    xp?: IntFieldUpdateOperationsInput | number
  }

  export type TournamentXpUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    bruteId?: StringFieldUpdateOperationsInput | string
    xp?: IntFieldUpdateOperationsInput | number
  }

  export type AchievementCreateInput = {
    id?: string
    name: $Enums.AchievementName
    count?: number
    brute?: BruteCreateNestedOneWithoutAchievementsInput
    user?: UserCreateNestedOneWithoutAchievementsInput
  }

  export type AchievementUncheckedCreateInput = {
    id?: string
    name: $Enums.AchievementName
    count?: number
    bruteId?: string | null
    userId?: string | null
  }

  export type AchievementUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: EnumAchievementNameFieldUpdateOperationsInput | $Enums.AchievementName
    count?: IntFieldUpdateOperationsInput | number
    brute?: BruteUpdateOneWithoutAchievementsNestedInput
    user?: UserUpdateOneWithoutAchievementsNestedInput
  }

  export type AchievementUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: EnumAchievementNameFieldUpdateOperationsInput | $Enums.AchievementName
    count?: IntFieldUpdateOperationsInput | number
    bruteId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AchievementCreateManyInput = {
    id?: string
    name: $Enums.AchievementName
    count?: number
    bruteId?: string | null
    userId?: string | null
  }

  export type AchievementUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: EnumAchievementNameFieldUpdateOperationsInput | $Enums.AchievementName
    count?: IntFieldUpdateOperationsInput | number
  }

  export type AchievementUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: EnumAchievementNameFieldUpdateOperationsInput | $Enums.AchievementName
    count?: IntFieldUpdateOperationsInput | number
    bruteId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TitleCreateInput = {
    id?: string
    name: $Enums.AchievementName
    count?: number
    brutes?: BruteCreateNestedManyWithoutTitlesInput
  }

  export type TitleUncheckedCreateInput = {
    id?: string
    name: $Enums.AchievementName
    count?: number
    brutes?: BruteUncheckedCreateNestedManyWithoutTitlesInput
  }

  export type TitleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: EnumAchievementNameFieldUpdateOperationsInput | $Enums.AchievementName
    count?: IntFieldUpdateOperationsInput | number
    brutes?: BruteUpdateManyWithoutTitlesNestedInput
  }

  export type TitleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: EnumAchievementNameFieldUpdateOperationsInput | $Enums.AchievementName
    count?: IntFieldUpdateOperationsInput | number
    brutes?: BruteUncheckedUpdateManyWithoutTitlesNestedInput
  }

  export type TitleCreateManyInput = {
    id?: string
    name: $Enums.AchievementName
    count?: number
  }

  export type TitleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: EnumAchievementNameFieldUpdateOperationsInput | $Enums.AchievementName
    count?: IntFieldUpdateOperationsInput | number
  }

  export type TitleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: EnumAchievementNameFieldUpdateOperationsInput | $Enums.AchievementName
    count?: IntFieldUpdateOperationsInput | number
  }

  export type BruteReportCreateInput = {
    id?: string
    reason?: $Enums.BruteReportReason
    count?: number
    date?: Date | string
    status?: $Enums.BruteReportStatus
    brute: BruteCreateNestedOneWithoutReportsInput
    users?: UserCreateNestedManyWithoutReportsInput
  }

  export type BruteReportUncheckedCreateInput = {
    id?: string
    bruteId: string
    reason?: $Enums.BruteReportReason
    count?: number
    date?: Date | string
    status?: $Enums.BruteReportStatus
    users?: UserUncheckedCreateNestedManyWithoutReportsInput
  }

  export type BruteReportUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: EnumBruteReportReasonFieldUpdateOperationsInput | $Enums.BruteReportReason
    count?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBruteReportStatusFieldUpdateOperationsInput | $Enums.BruteReportStatus
    brute?: BruteUpdateOneRequiredWithoutReportsNestedInput
    users?: UserUpdateManyWithoutReportsNestedInput
  }

  export type BruteReportUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    bruteId?: StringFieldUpdateOperationsInput | string
    reason?: EnumBruteReportReasonFieldUpdateOperationsInput | $Enums.BruteReportReason
    count?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBruteReportStatusFieldUpdateOperationsInput | $Enums.BruteReportStatus
    users?: UserUncheckedUpdateManyWithoutReportsNestedInput
  }

  export type BruteReportCreateManyInput = {
    id?: string
    bruteId: string
    reason?: $Enums.BruteReportReason
    count?: number
    date?: Date | string
    status?: $Enums.BruteReportStatus
  }

  export type BruteReportUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: EnumBruteReportReasonFieldUpdateOperationsInput | $Enums.BruteReportReason
    count?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBruteReportStatusFieldUpdateOperationsInput | $Enums.BruteReportStatus
  }

  export type BruteReportUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    bruteId?: StringFieldUpdateOperationsInput | string
    reason?: EnumBruteReportReasonFieldUpdateOperationsInput | $Enums.BruteReportReason
    count?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBruteReportStatusFieldUpdateOperationsInput | $Enums.BruteReportStatus
  }

  export type ServerStateCreateInput = {
    id?: string
    globalTournamentValid?: boolean
    activeModifiers?: ServerStateCreateactiveModifiersInput | $Enums.FightModifier[]
    modifiersEndAt?: Date | string | null
    nextModifiers?: ServerStateCreatenextModifiersInput | $Enums.FightModifier[]
  }

  export type ServerStateUncheckedCreateInput = {
    id?: string
    globalTournamentValid?: boolean
    activeModifiers?: ServerStateCreateactiveModifiersInput | $Enums.FightModifier[]
    modifiersEndAt?: Date | string | null
    nextModifiers?: ServerStateCreatenextModifiersInput | $Enums.FightModifier[]
  }

  export type ServerStateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    globalTournamentValid?: BoolFieldUpdateOperationsInput | boolean
    activeModifiers?: ServerStateUpdateactiveModifiersInput | $Enums.FightModifier[]
    modifiersEndAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextModifiers?: ServerStateUpdatenextModifiersInput | $Enums.FightModifier[]
  }

  export type ServerStateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    globalTournamentValid?: BoolFieldUpdateOperationsInput | boolean
    activeModifiers?: ServerStateUpdateactiveModifiersInput | $Enums.FightModifier[]
    modifiersEndAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextModifiers?: ServerStateUpdatenextModifiersInput | $Enums.FightModifier[]
  }

  export type ServerStateCreateManyInput = {
    id?: string
    globalTournamentValid?: boolean
    activeModifiers?: ServerStateCreateactiveModifiersInput | $Enums.FightModifier[]
    modifiersEndAt?: Date | string | null
    nextModifiers?: ServerStateCreatenextModifiersInput | $Enums.FightModifier[]
  }

  export type ServerStateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    globalTournamentValid?: BoolFieldUpdateOperationsInput | boolean
    activeModifiers?: ServerStateUpdateactiveModifiersInput | $Enums.FightModifier[]
    modifiersEndAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextModifiers?: ServerStateUpdatenextModifiersInput | $Enums.FightModifier[]
  }

  export type ServerStateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    globalTournamentValid?: BoolFieldUpdateOperationsInput | boolean
    activeModifiers?: ServerStateUpdateactiveModifiersInput | $Enums.FightModifier[]
    modifiersEndAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextModifiers?: ServerStateUpdatenextModifiersInput | $Enums.FightModifier[]
  }

  export type BannedWordCreateInput = {
    id?: string
    word: string
  }

  export type BannedWordUncheckedCreateInput = {
    id?: string
    word: string
  }

  export type BannedWordUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    word?: StringFieldUpdateOperationsInput | string
  }

  export type BannedWordUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    word?: StringFieldUpdateOperationsInput | string
  }

  export type BannedWordCreateManyInput = {
    id?: string
    word: string
  }

  export type BannedWordUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    word?: StringFieldUpdateOperationsInput | string
  }

  export type BannedWordUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    word?: StringFieldUpdateOperationsInput | string
  }

  export type BannedIpCreateInput = {
    id: string
  }

  export type BannedIpUncheckedCreateInput = {
    id: string
  }

  export type BannedIpUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type BannedIpUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type BannedIpCreateManyInput = {
    id: string
  }

  export type BannedIpUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type BannedIpUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type ClanCreateInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    limit?: number
    points?: number
    elo?: number
    boss?: $Enums.BossName
    damageOnBoss?: number
    participateInClanWar?: boolean
    master?: BruteCreateNestedOneWithoutMasterOfClanInput
    brutes?: BruteCreateNestedManyWithoutClanInput
    joinRequests?: BruteCreateNestedManyWithoutWantToJoinClanInput
    threads?: ClanThreadCreateNestedManyWithoutClanInput
    bossDamages?: BossDamageCreateNestedManyWithoutClanInput
    attacks?: ClanWarCreateNestedManyWithoutAttackerInput
    defenses?: ClanWarCreateNestedManyWithoutDefenderInput
    wins?: ClanWarCreateNestedManyWithoutWinnerInput
  }

  export type ClanUncheckedCreateInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    limit?: number
    points?: number
    elo?: number
    boss?: $Enums.BossName
    damageOnBoss?: number
    masterId?: string | null
    participateInClanWar?: boolean
    brutes?: BruteUncheckedCreateNestedManyWithoutClanInput
    joinRequests?: BruteUncheckedCreateNestedManyWithoutWantToJoinClanInput
    threads?: ClanThreadUncheckedCreateNestedManyWithoutClanInput
    bossDamages?: BossDamageUncheckedCreateNestedManyWithoutClanInput
    attacks?: ClanWarUncheckedCreateNestedManyWithoutAttackerInput
    defenses?: ClanWarUncheckedCreateNestedManyWithoutDefenderInput
    wins?: ClanWarUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type ClanUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    limit?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    elo?: IntFieldUpdateOperationsInput | number
    boss?: EnumBossNameFieldUpdateOperationsInput | $Enums.BossName
    damageOnBoss?: IntFieldUpdateOperationsInput | number
    participateInClanWar?: BoolFieldUpdateOperationsInput | boolean
    master?: BruteUpdateOneWithoutMasterOfClanNestedInput
    brutes?: BruteUpdateManyWithoutClanNestedInput
    joinRequests?: BruteUpdateManyWithoutWantToJoinClanNestedInput
    threads?: ClanThreadUpdateManyWithoutClanNestedInput
    bossDamages?: BossDamageUpdateManyWithoutClanNestedInput
    attacks?: ClanWarUpdateManyWithoutAttackerNestedInput
    defenses?: ClanWarUpdateManyWithoutDefenderNestedInput
    wins?: ClanWarUpdateManyWithoutWinnerNestedInput
  }

  export type ClanUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    limit?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    elo?: IntFieldUpdateOperationsInput | number
    boss?: EnumBossNameFieldUpdateOperationsInput | $Enums.BossName
    damageOnBoss?: IntFieldUpdateOperationsInput | number
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    participateInClanWar?: BoolFieldUpdateOperationsInput | boolean
    brutes?: BruteUncheckedUpdateManyWithoutClanNestedInput
    joinRequests?: BruteUncheckedUpdateManyWithoutWantToJoinClanNestedInput
    threads?: ClanThreadUncheckedUpdateManyWithoutClanNestedInput
    bossDamages?: BossDamageUncheckedUpdateManyWithoutClanNestedInput
    attacks?: ClanWarUncheckedUpdateManyWithoutAttackerNestedInput
    defenses?: ClanWarUncheckedUpdateManyWithoutDefenderNestedInput
    wins?: ClanWarUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type ClanCreateManyInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    limit?: number
    points?: number
    elo?: number
    boss?: $Enums.BossName
    damageOnBoss?: number
    masterId?: string | null
    participateInClanWar?: boolean
  }

  export type ClanUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    limit?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    elo?: IntFieldUpdateOperationsInput | number
    boss?: EnumBossNameFieldUpdateOperationsInput | $Enums.BossName
    damageOnBoss?: IntFieldUpdateOperationsInput | number
    participateInClanWar?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ClanUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    limit?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    elo?: IntFieldUpdateOperationsInput | number
    boss?: EnumBossNameFieldUpdateOperationsInput | $Enums.BossName
    damageOnBoss?: IntFieldUpdateOperationsInput | number
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    participateInClanWar?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ClanThreadCreateInput = {
    id?: string
    title: string
    locked?: boolean
    pinned?: boolean
    postCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    clan: ClanCreateNestedOneWithoutThreadsInput
    creator: BruteCreateNestedOneWithoutThreadsInput
    posts?: ClanPostCreateNestedManyWithoutThreadInput
  }

  export type ClanThreadUncheckedCreateInput = {
    id?: string
    clanId: string
    creatorId: string
    title: string
    locked?: boolean
    pinned?: boolean
    postCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: ClanPostUncheckedCreateNestedManyWithoutThreadInput
  }

  export type ClanThreadUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    locked?: BoolFieldUpdateOperationsInput | boolean
    pinned?: BoolFieldUpdateOperationsInput | boolean
    postCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clan?: ClanUpdateOneRequiredWithoutThreadsNestedInput
    creator?: BruteUpdateOneRequiredWithoutThreadsNestedInput
    posts?: ClanPostUpdateManyWithoutThreadNestedInput
  }

  export type ClanThreadUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clanId?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    locked?: BoolFieldUpdateOperationsInput | boolean
    pinned?: BoolFieldUpdateOperationsInput | boolean
    postCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: ClanPostUncheckedUpdateManyWithoutThreadNestedInput
  }

  export type ClanThreadCreateManyInput = {
    id?: string
    clanId: string
    creatorId: string
    title: string
    locked?: boolean
    pinned?: boolean
    postCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClanThreadUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    locked?: BoolFieldUpdateOperationsInput | boolean
    pinned?: BoolFieldUpdateOperationsInput | boolean
    postCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClanThreadUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clanId?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    locked?: BoolFieldUpdateOperationsInput | boolean
    pinned?: BoolFieldUpdateOperationsInput | boolean
    postCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClanPostCreateInput = {
    id?: string
    date?: Date | string
    message: string
    thread: ClanThreadCreateNestedOneWithoutPostsInput
    author: BruteCreateNestedOneWithoutClanPostsInput
  }

  export type ClanPostUncheckedCreateInput = {
    id?: string
    threadId: string
    authorId: string
    date?: Date | string
    message: string
  }

  export type ClanPostUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: StringFieldUpdateOperationsInput | string
    thread?: ClanThreadUpdateOneRequiredWithoutPostsNestedInput
    author?: BruteUpdateOneRequiredWithoutClanPostsNestedInput
  }

  export type ClanPostUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    threadId?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: StringFieldUpdateOperationsInput | string
  }

  export type ClanPostCreateManyInput = {
    id?: string
    threadId: string
    authorId: string
    date?: Date | string
    message: string
  }

  export type ClanPostUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: StringFieldUpdateOperationsInput | string
  }

  export type ClanPostUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    threadId?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: StringFieldUpdateOperationsInput | string
  }

  export type BossDamageCreateInput = {
    id?: string
    damage: number
    brute: BruteCreateNestedOneWithoutDamageOnBossesInput
    clan: ClanCreateNestedOneWithoutBossDamagesInput
  }

  export type BossDamageUncheckedCreateInput = {
    id?: string
    bruteId: string
    clanId: string
    damage: number
  }

  export type BossDamageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    damage?: IntFieldUpdateOperationsInput | number
    brute?: BruteUpdateOneRequiredWithoutDamageOnBossesNestedInput
    clan?: ClanUpdateOneRequiredWithoutBossDamagesNestedInput
  }

  export type BossDamageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    bruteId?: StringFieldUpdateOperationsInput | string
    clanId?: StringFieldUpdateOperationsInput | string
    damage?: IntFieldUpdateOperationsInput | number
  }

  export type BossDamageCreateManyInput = {
    id?: string
    bruteId: string
    clanId: string
    damage: number
  }

  export type BossDamageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    damage?: IntFieldUpdateOperationsInput | number
  }

  export type BossDamageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    bruteId?: StringFieldUpdateOperationsInput | string
    clanId?: StringFieldUpdateOperationsInput | string
    damage?: IntFieldUpdateOperationsInput | number
  }

  export type ClanWarCreateInput = {
    id?: string
    duration?: number
    type?: $Enums.ClanWarType
    date?: Date | string
    status?: $Enums.ClanWarStatus
    attackerEloChange?: number
    attackerWins?: number
    defenderEloChange?: number
    defenderWins?: number
    attacker: ClanCreateNestedOneWithoutAttacksInput
    defender: ClanCreateNestedOneWithoutDefensesInput
    winner?: ClanCreateNestedOneWithoutWinsInput
    fights?: FightCreateNestedManyWithoutClanWarInput
    fighters?: ClanWarFightersCreateNestedManyWithoutClanWarInput
  }

  export type ClanWarUncheckedCreateInput = {
    id?: string
    duration?: number
    type?: $Enums.ClanWarType
    date?: Date | string
    status?: $Enums.ClanWarStatus
    attackerId: string
    attackerEloChange?: number
    attackerWins?: number
    defenderId: string
    defenderEloChange?: number
    defenderWins?: number
    winnerId?: string | null
    fights?: FightUncheckedCreateNestedManyWithoutClanWarInput
    fighters?: ClanWarFightersUncheckedCreateNestedManyWithoutClanWarInput
  }

  export type ClanWarUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    type?: EnumClanWarTypeFieldUpdateOperationsInput | $Enums.ClanWarType
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumClanWarStatusFieldUpdateOperationsInput | $Enums.ClanWarStatus
    attackerEloChange?: IntFieldUpdateOperationsInput | number
    attackerWins?: IntFieldUpdateOperationsInput | number
    defenderEloChange?: IntFieldUpdateOperationsInput | number
    defenderWins?: IntFieldUpdateOperationsInput | number
    attacker?: ClanUpdateOneRequiredWithoutAttacksNestedInput
    defender?: ClanUpdateOneRequiredWithoutDefensesNestedInput
    winner?: ClanUpdateOneWithoutWinsNestedInput
    fights?: FightUpdateManyWithoutClanWarNestedInput
    fighters?: ClanWarFightersUpdateManyWithoutClanWarNestedInput
  }

  export type ClanWarUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    type?: EnumClanWarTypeFieldUpdateOperationsInput | $Enums.ClanWarType
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumClanWarStatusFieldUpdateOperationsInput | $Enums.ClanWarStatus
    attackerId?: StringFieldUpdateOperationsInput | string
    attackerEloChange?: IntFieldUpdateOperationsInput | number
    attackerWins?: IntFieldUpdateOperationsInput | number
    defenderId?: StringFieldUpdateOperationsInput | string
    defenderEloChange?: IntFieldUpdateOperationsInput | number
    defenderWins?: IntFieldUpdateOperationsInput | number
    winnerId?: NullableStringFieldUpdateOperationsInput | string | null
    fights?: FightUncheckedUpdateManyWithoutClanWarNestedInput
    fighters?: ClanWarFightersUncheckedUpdateManyWithoutClanWarNestedInput
  }

  export type ClanWarCreateManyInput = {
    id?: string
    duration?: number
    type?: $Enums.ClanWarType
    date?: Date | string
    status?: $Enums.ClanWarStatus
    attackerId: string
    attackerEloChange?: number
    attackerWins?: number
    defenderId: string
    defenderEloChange?: number
    defenderWins?: number
    winnerId?: string | null
  }

  export type ClanWarUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    type?: EnumClanWarTypeFieldUpdateOperationsInput | $Enums.ClanWarType
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumClanWarStatusFieldUpdateOperationsInput | $Enums.ClanWarStatus
    attackerEloChange?: IntFieldUpdateOperationsInput | number
    attackerWins?: IntFieldUpdateOperationsInput | number
    defenderEloChange?: IntFieldUpdateOperationsInput | number
    defenderWins?: IntFieldUpdateOperationsInput | number
  }

  export type ClanWarUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    type?: EnumClanWarTypeFieldUpdateOperationsInput | $Enums.ClanWarType
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumClanWarStatusFieldUpdateOperationsInput | $Enums.ClanWarStatus
    attackerId?: StringFieldUpdateOperationsInput | string
    attackerEloChange?: IntFieldUpdateOperationsInput | number
    attackerWins?: IntFieldUpdateOperationsInput | number
    defenderId?: StringFieldUpdateOperationsInput | string
    defenderEloChange?: IntFieldUpdateOperationsInput | number
    defenderWins?: IntFieldUpdateOperationsInput | number
    winnerId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClanWarFightersCreateInput = {
    id?: string
    day: number
    clanWar: ClanWarCreateNestedOneWithoutFightersInput
    attackers?: BruteCreateNestedManyWithoutInClanWarAttackerFightersInput
    defenders?: BruteCreateNestedManyWithoutInClanWarDefenderFightersInput
  }

  export type ClanWarFightersUncheckedCreateInput = {
    id?: string
    clanWarId: string
    day: number
    attackers?: BruteUncheckedCreateNestedManyWithoutInClanWarAttackerFightersInput
    defenders?: BruteUncheckedCreateNestedManyWithoutInClanWarDefenderFightersInput
  }

  export type ClanWarFightersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    day?: IntFieldUpdateOperationsInput | number
    clanWar?: ClanWarUpdateOneRequiredWithoutFightersNestedInput
    attackers?: BruteUpdateManyWithoutInClanWarAttackerFightersNestedInput
    defenders?: BruteUpdateManyWithoutInClanWarDefenderFightersNestedInput
  }

  export type ClanWarFightersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clanWarId?: StringFieldUpdateOperationsInput | string
    day?: IntFieldUpdateOperationsInput | number
    attackers?: BruteUncheckedUpdateManyWithoutInClanWarAttackerFightersNestedInput
    defenders?: BruteUncheckedUpdateManyWithoutInClanWarDefenderFightersNestedInput
  }

  export type ClanWarFightersCreateManyInput = {
    id?: string
    clanWarId: string
    day: number
  }

  export type ClanWarFightersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    day?: IntFieldUpdateOperationsInput | number
  }

  export type ClanWarFightersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clanWarId?: StringFieldUpdateOperationsInput | string
    day?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryItemCreateInput = {
    id?: string
    type: $Enums.InventoryItemType
    count?: number
    brute?: BruteCreateNestedOneWithoutInventoryInput
    user?: UserCreateNestedOneWithoutInventoryInput
  }

  export type InventoryItemUncheckedCreateInput = {
    id?: string
    type: $Enums.InventoryItemType
    count?: number
    bruteId?: string | null
    userId?: string | null
  }

  export type InventoryItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumInventoryItemTypeFieldUpdateOperationsInput | $Enums.InventoryItemType
    count?: IntFieldUpdateOperationsInput | number
    brute?: BruteUpdateOneWithoutInventoryNestedInput
    user?: UserUpdateOneWithoutInventoryNestedInput
  }

  export type InventoryItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumInventoryItemTypeFieldUpdateOperationsInput | $Enums.InventoryItemType
    count?: IntFieldUpdateOperationsInput | number
    bruteId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InventoryItemCreateManyInput = {
    id?: string
    type: $Enums.InventoryItemType
    count?: number
    bruteId?: string | null
    userId?: string | null
  }

  export type InventoryItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumInventoryItemTypeFieldUpdateOperationsInput | $Enums.InventoryItemType
    count?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumInventoryItemTypeFieldUpdateOperationsInput | $Enums.InventoryItemType
    count?: IntFieldUpdateOperationsInput | number
    bruteId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReleaseCreateInput = {
    version: string
    date?: Date | string
  }

  export type ReleaseUncheckedCreateInput = {
    version: string
    date?: Date | string
  }

  export type ReleaseUpdateInput = {
    version?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReleaseUncheckedUpdateInput = {
    version?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReleaseCreateManyInput = {
    version: string
    date?: Date | string
  }

  export type ReleaseUpdateManyMutationInput = {
    version?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReleaseUncheckedUpdateManyInput = {
    version?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventCreateInput = {
    id?: string
    date?: Date | string
    type?: $Enums.EventType
    maxLevel: number
    maxRound?: number
    status?: $Enums.EventStatus
    finishedAt?: Date | string | null
    sortedBrutes?: EventCreatesortedBrutesInput | string[]
    brutes?: BruteCreateNestedManyWithoutEventInput
    tournament?: TournamentCreateNestedOneWithoutEventInput
    winner?: BruteCreateNestedOneWithoutWonEventsInput
  }

  export type EventUncheckedCreateInput = {
    id?: string
    date?: Date | string
    type?: $Enums.EventType
    maxLevel: number
    maxRound?: number
    status?: $Enums.EventStatus
    winnerId?: string | null
    finishedAt?: Date | string | null
    sortedBrutes?: EventCreatesortedBrutesInput | string[]
    brutes?: BruteUncheckedCreateNestedManyWithoutEventInput
    tournament?: TournamentUncheckedCreateNestedOneWithoutEventInput
  }

  export type EventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    maxLevel?: IntFieldUpdateOperationsInput | number
    maxRound?: IntFieldUpdateOperationsInput | number
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortedBrutes?: EventUpdatesortedBrutesInput | string[]
    brutes?: BruteUpdateManyWithoutEventNestedInput
    tournament?: TournamentUpdateOneWithoutEventNestedInput
    winner?: BruteUpdateOneWithoutWonEventsNestedInput
  }

  export type EventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    maxLevel?: IntFieldUpdateOperationsInput | number
    maxRound?: IntFieldUpdateOperationsInput | number
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    winnerId?: NullableStringFieldUpdateOperationsInput | string | null
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortedBrutes?: EventUpdatesortedBrutesInput | string[]
    brutes?: BruteUncheckedUpdateManyWithoutEventNestedInput
    tournament?: TournamentUncheckedUpdateOneWithoutEventNestedInput
  }

  export type EventCreateManyInput = {
    id?: string
    date?: Date | string
    type?: $Enums.EventType
    maxLevel: number
    maxRound?: number
    status?: $Enums.EventStatus
    winnerId?: string | null
    finishedAt?: Date | string | null
    sortedBrutes?: EventCreatesortedBrutesInput | string[]
  }

  export type EventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    maxLevel?: IntFieldUpdateOperationsInput | number
    maxRound?: IntFieldUpdateOperationsInput | number
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortedBrutes?: EventUpdatesortedBrutesInput | string[]
  }

  export type EventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    maxLevel?: IntFieldUpdateOperationsInput | number
    maxRound?: IntFieldUpdateOperationsInput | number
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    winnerId?: NullableStringFieldUpdateOperationsInput | string | null
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortedBrutes?: EventUpdatesortedBrutesInput | string[]
  }

  export type UuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type EnumLangFilter<$PrismaModel = never> = {
    equals?: $Enums.Lang | EnumLangFieldRefInput<$PrismaModel>
    in?: $Enums.Lang[] | ListEnumLangFieldRefInput<$PrismaModel>
    notIn?: $Enums.Lang[] | ListEnumLangFieldRefInput<$PrismaModel>
    not?: NestedEnumLangFilter<$PrismaModel> | $Enums.Lang
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BruteListRelationFilter = {
    every?: BruteWhereInput
    some?: BruteWhereInput
    none?: BruteWhereInput
  }

  export type AchievementListRelationFilter = {
    every?: AchievementWhereInput
    some?: AchievementWhereInput
    none?: AchievementWhereInput
  }

  export type BruteReportListRelationFilter = {
    every?: BruteReportWhereInput
    some?: BruteReportWhereInput
    none?: BruteReportWhereInput
  }

  export type TournamentGoldListRelationFilter = {
    every?: TournamentGoldWhereInput
    some?: TournamentGoldWhereInput
    none?: TournamentGoldWhereInput
  }

  export type InventoryItemListRelationFilter = {
    every?: InventoryItemWhereInput
    some?: InventoryItemWhereInput
    none?: InventoryItemWhereInput
  }

  export type FightListRelationFilter = {
    every?: FightWhereInput
    some?: FightWhereInput
    none?: FightWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type BruteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AchievementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BruteReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TournamentGoldOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InventoryItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FightOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    lang?: SortOrder
    name?: SortOrder
    admin?: SortOrder
    moderator?: SortOrder
    connexionToken?: SortOrder
    bruteLimit?: SortOrder
    gold?: SortOrder
    fightSpeed?: SortOrder
    backgroundMusic?: SortOrder
    dinorpgDone?: SortOrder
    ips?: SortOrder
    bannedAt?: SortOrder
    banReason?: SortOrder
    lastReleaseSeen?: SortOrder
    displayVersusPage?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    bruteLimit?: SortOrder
    gold?: SortOrder
    fightSpeed?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    lang?: SortOrder
    name?: SortOrder
    admin?: SortOrder
    moderator?: SortOrder
    connexionToken?: SortOrder
    bruteLimit?: SortOrder
    gold?: SortOrder
    fightSpeed?: SortOrder
    backgroundMusic?: SortOrder
    dinorpgDone?: SortOrder
    bannedAt?: SortOrder
    banReason?: SortOrder
    lastReleaseSeen?: SortOrder
    displayVersusPage?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    lang?: SortOrder
    name?: SortOrder
    admin?: SortOrder
    moderator?: SortOrder
    connexionToken?: SortOrder
    bruteLimit?: SortOrder
    gold?: SortOrder
    fightSpeed?: SortOrder
    backgroundMusic?: SortOrder
    dinorpgDone?: SortOrder
    bannedAt?: SortOrder
    banReason?: SortOrder
    lastReleaseSeen?: SortOrder
    displayVersusPage?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    bruteLimit?: SortOrder
    gold?: SortOrder
    fightSpeed?: SortOrder
  }

  export type UuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumLangWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Lang | EnumLangFieldRefInput<$PrismaModel>
    in?: $Enums.Lang[] | ListEnumLangFieldRefInput<$PrismaModel>
    notIn?: $Enums.Lang[] | ListEnumLangFieldRefInput<$PrismaModel>
    not?: NestedEnumLangWithAggregatesFilter<$PrismaModel> | $Enums.Lang
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLangFilter<$PrismaModel>
    _max?: NestedEnumLangFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnumDestinyChoiceSideNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.DestinyChoiceSide[] | ListEnumDestinyChoiceSideFieldRefInput<$PrismaModel> | null
    has?: $Enums.DestinyChoiceSide | EnumDestinyChoiceSideFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.DestinyChoiceSide[] | ListEnumDestinyChoiceSideFieldRefInput<$PrismaModel>
    hasSome?: $Enums.DestinyChoiceSide[] | ListEnumDestinyChoiceSideFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type EnumGenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderFilter<$PrismaModel> | $Enums.Gender
  }

  export type UuidNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidNullableFilter<$PrismaModel> | string | null
  }

  export type EnumWeaponNameNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.WeaponName[] | ListEnumWeaponNameFieldRefInput<$PrismaModel> | null
    has?: $Enums.WeaponName | EnumWeaponNameFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.WeaponName[] | ListEnumWeaponNameFieldRefInput<$PrismaModel>
    hasSome?: $Enums.WeaponName[] | ListEnumWeaponNameFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumSkillNameNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.SkillName[] | ListEnumSkillNameFieldRefInput<$PrismaModel> | null
    has?: $Enums.SkillName | EnumSkillNameFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.SkillName[] | ListEnumSkillNameFieldRefInput<$PrismaModel>
    hasSome?: $Enums.SkillName[] | ListEnumSkillNameFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumPetNameNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.PetName[] | ListEnumPetNameFieldRefInput<$PrismaModel> | null
    has?: $Enums.PetName | EnumPetNameFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.PetName[] | ListEnumPetNameFieldRefInput<$PrismaModel>
    hasSome?: $Enums.PetName[] | ListEnumPetNameFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type BruteNullableRelationFilter = {
    is?: BruteWhereInput | null
    isNot?: BruteWhereInput | null
  }

  export type ClanNullableRelationFilter = {
    is?: ClanWhereInput | null
    isNot?: ClanWhereInput | null
  }

  export type LogListRelationFilter = {
    every?: LogWhereInput
    some?: LogWhereInput
    none?: LogWhereInput
  }

  export type DestinyChoiceListRelationFilter = {
    every?: DestinyChoiceWhereInput
    some?: DestinyChoiceWhereInput
    none?: DestinyChoiceWhereInput
  }

  export type TournamentListRelationFilter = {
    every?: TournamentWhereInput
    some?: TournamentWhereInput
    none?: TournamentWhereInput
  }

  export type TitleListRelationFilter = {
    every?: TitleWhereInput
    some?: TitleWhereInput
    none?: TitleWhereInput
  }

  export type ClanPostListRelationFilter = {
    every?: ClanPostWhereInput
    some?: ClanPostWhereInput
    none?: ClanPostWhereInput
  }

  export type ClanThreadListRelationFilter = {
    every?: ClanThreadWhereInput
    some?: ClanThreadWhereInput
    none?: ClanThreadWhereInput
  }

  export type TournamentAchievementListRelationFilter = {
    every?: TournamentAchievementWhereInput
    some?: TournamentAchievementWhereInput
    none?: TournamentAchievementWhereInput
  }

  export type TournamentXpListRelationFilter = {
    every?: TournamentXpWhereInput
    some?: TournamentXpWhereInput
    none?: TournamentXpWhereInput
  }

  export type BruteStartingStatsNullableRelationFilter = {
    is?: BruteStartingStatsWhereInput | null
    isNot?: BruteStartingStatsWhereInput | null
  }

  export type BossDamageListRelationFilter = {
    every?: BossDamageWhereInput
    some?: BossDamageWhereInput
    none?: BossDamageWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type ClanWarFightersListRelationFilter = {
    every?: ClanWarFightersWhereInput
    some?: ClanWarFightersWhereInput
    none?: ClanWarFightersWhereInput
  }

  export type EventNullableRelationFilter = {
    is?: EventWhereInput | null
    isNot?: EventWhereInput | null
  }

  export type EventListRelationFilter = {
    every?: EventWhereInput
    some?: EventWhereInput
    none?: EventWhereInput
  }

  export type LogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DestinyChoiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TournamentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TitleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClanPostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClanThreadOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TournamentAchievementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TournamentXpOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BossDamageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClanWarFightersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BruteCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    willBeDeletedAt?: SortOrder
    deletionReason?: SortOrder
    destinyPath?: SortOrder
    previousDestinyPath?: SortOrder
    level?: SortOrder
    xp?: SortOrder
    hp?: SortOrder
    enduranceStat?: SortOrder
    enduranceModifier?: SortOrder
    enduranceValue?: SortOrder
    strengthStat?: SortOrder
    strengthModifier?: SortOrder
    strengthValue?: SortOrder
    agilityStat?: SortOrder
    agilityModifier?: SortOrder
    agilityValue?: SortOrder
    speedStat?: SortOrder
    speedModifier?: SortOrder
    speedValue?: SortOrder
    ranking?: SortOrder
    gender?: SortOrder
    userId?: SortOrder
    body?: SortOrder
    colors?: SortOrder
    weapons?: SortOrder
    skills?: SortOrder
    pets?: SortOrder
    ascensions?: SortOrder
    ascendedWeapons?: SortOrder
    ascendedSkills?: SortOrder
    ascendedPets?: SortOrder
    masterId?: SortOrder
    pupilsCount?: SortOrder
    clanId?: SortOrder
    registeredForTournament?: SortOrder
    nextTournamentDate?: SortOrder
    currentTournamentDate?: SortOrder
    currentTournamentStepWatched?: SortOrder
    globalTournamentWatchedDate?: SortOrder
    globalTournamentRoundWatched?: SortOrder
    eventTournamentWatchedDate?: SortOrder
    eventTournamentRoundWatched?: SortOrder
    lastFight?: SortOrder
    fightsLeft?: SortOrder
    victories?: SortOrder
    losses?: SortOrder
    opponentsGeneratedAt?: SortOrder
    canRankUpSince?: SortOrder
    favorite?: SortOrder
    wantToJoinClanId?: SortOrder
    tournamentWins?: SortOrder
    eventId?: SortOrder
    resets?: SortOrder
  }

  export type BruteAvgOrderByAggregateInput = {
    level?: SortOrder
    xp?: SortOrder
    hp?: SortOrder
    enduranceStat?: SortOrder
    enduranceModifier?: SortOrder
    enduranceValue?: SortOrder
    strengthStat?: SortOrder
    strengthModifier?: SortOrder
    strengthValue?: SortOrder
    agilityStat?: SortOrder
    agilityModifier?: SortOrder
    agilityValue?: SortOrder
    speedStat?: SortOrder
    speedModifier?: SortOrder
    speedValue?: SortOrder
    ranking?: SortOrder
    ascensions?: SortOrder
    pupilsCount?: SortOrder
    currentTournamentStepWatched?: SortOrder
    globalTournamentRoundWatched?: SortOrder
    eventTournamentRoundWatched?: SortOrder
    fightsLeft?: SortOrder
    victories?: SortOrder
    losses?: SortOrder
    tournamentWins?: SortOrder
    resets?: SortOrder
  }

  export type BruteMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    willBeDeletedAt?: SortOrder
    deletionReason?: SortOrder
    level?: SortOrder
    xp?: SortOrder
    hp?: SortOrder
    enduranceStat?: SortOrder
    enduranceModifier?: SortOrder
    enduranceValue?: SortOrder
    strengthStat?: SortOrder
    strengthModifier?: SortOrder
    strengthValue?: SortOrder
    agilityStat?: SortOrder
    agilityModifier?: SortOrder
    agilityValue?: SortOrder
    speedStat?: SortOrder
    speedModifier?: SortOrder
    speedValue?: SortOrder
    ranking?: SortOrder
    gender?: SortOrder
    userId?: SortOrder
    body?: SortOrder
    colors?: SortOrder
    ascensions?: SortOrder
    masterId?: SortOrder
    pupilsCount?: SortOrder
    clanId?: SortOrder
    registeredForTournament?: SortOrder
    nextTournamentDate?: SortOrder
    currentTournamentDate?: SortOrder
    currentTournamentStepWatched?: SortOrder
    globalTournamentWatchedDate?: SortOrder
    globalTournamentRoundWatched?: SortOrder
    eventTournamentWatchedDate?: SortOrder
    eventTournamentRoundWatched?: SortOrder
    lastFight?: SortOrder
    fightsLeft?: SortOrder
    victories?: SortOrder
    losses?: SortOrder
    opponentsGeneratedAt?: SortOrder
    canRankUpSince?: SortOrder
    favorite?: SortOrder
    wantToJoinClanId?: SortOrder
    tournamentWins?: SortOrder
    eventId?: SortOrder
    resets?: SortOrder
  }

  export type BruteMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    willBeDeletedAt?: SortOrder
    deletionReason?: SortOrder
    level?: SortOrder
    xp?: SortOrder
    hp?: SortOrder
    enduranceStat?: SortOrder
    enduranceModifier?: SortOrder
    enduranceValue?: SortOrder
    strengthStat?: SortOrder
    strengthModifier?: SortOrder
    strengthValue?: SortOrder
    agilityStat?: SortOrder
    agilityModifier?: SortOrder
    agilityValue?: SortOrder
    speedStat?: SortOrder
    speedModifier?: SortOrder
    speedValue?: SortOrder
    ranking?: SortOrder
    gender?: SortOrder
    userId?: SortOrder
    body?: SortOrder
    colors?: SortOrder
    ascensions?: SortOrder
    masterId?: SortOrder
    pupilsCount?: SortOrder
    clanId?: SortOrder
    registeredForTournament?: SortOrder
    nextTournamentDate?: SortOrder
    currentTournamentDate?: SortOrder
    currentTournamentStepWatched?: SortOrder
    globalTournamentWatchedDate?: SortOrder
    globalTournamentRoundWatched?: SortOrder
    eventTournamentWatchedDate?: SortOrder
    eventTournamentRoundWatched?: SortOrder
    lastFight?: SortOrder
    fightsLeft?: SortOrder
    victories?: SortOrder
    losses?: SortOrder
    opponentsGeneratedAt?: SortOrder
    canRankUpSince?: SortOrder
    favorite?: SortOrder
    wantToJoinClanId?: SortOrder
    tournamentWins?: SortOrder
    eventId?: SortOrder
    resets?: SortOrder
  }

  export type BruteSumOrderByAggregateInput = {
    level?: SortOrder
    xp?: SortOrder
    hp?: SortOrder
    enduranceStat?: SortOrder
    enduranceModifier?: SortOrder
    enduranceValue?: SortOrder
    strengthStat?: SortOrder
    strengthModifier?: SortOrder
    strengthValue?: SortOrder
    agilityStat?: SortOrder
    agilityModifier?: SortOrder
    agilityValue?: SortOrder
    speedStat?: SortOrder
    speedModifier?: SortOrder
    speedValue?: SortOrder
    ranking?: SortOrder
    ascensions?: SortOrder
    pupilsCount?: SortOrder
    currentTournamentStepWatched?: SortOrder
    globalTournamentRoundWatched?: SortOrder
    eventTournamentRoundWatched?: SortOrder
    fightsLeft?: SortOrder
    victories?: SortOrder
    losses?: SortOrder
    tournamentWins?: SortOrder
    resets?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumGenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderWithAggregatesFilter<$PrismaModel> | $Enums.Gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderFilter<$PrismaModel>
    _max?: NestedEnumGenderFilter<$PrismaModel>
  }

  export type UuidNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BruteRelationFilter = {
    is?: BruteWhereInput
    isNot?: BruteWhereInput
  }

  export type BruteStartingStatsCountOrderByAggregateInput = {
    id?: SortOrder
    endurance?: SortOrder
    strength?: SortOrder
    agility?: SortOrder
    speed?: SortOrder
    bruteId?: SortOrder
  }

  export type BruteStartingStatsAvgOrderByAggregateInput = {
    endurance?: SortOrder
    strength?: SortOrder
    agility?: SortOrder
    speed?: SortOrder
  }

  export type BruteStartingStatsMaxOrderByAggregateInput = {
    id?: SortOrder
    endurance?: SortOrder
    strength?: SortOrder
    agility?: SortOrder
    speed?: SortOrder
    bruteId?: SortOrder
  }

  export type BruteStartingStatsMinOrderByAggregateInput = {
    id?: SortOrder
    endurance?: SortOrder
    strength?: SortOrder
    agility?: SortOrder
    speed?: SortOrder
    bruteId?: SortOrder
  }

  export type BruteStartingStatsSumOrderByAggregateInput = {
    endurance?: SortOrder
    strength?: SortOrder
    agility?: SortOrder
    speed?: SortOrder
  }

  export type EnumFightModifierNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.FightModifier[] | ListEnumFightModifierFieldRefInput<$PrismaModel> | null
    has?: $Enums.FightModifier | EnumFightModifierFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.FightModifier[] | ListEnumFightModifierFieldRefInput<$PrismaModel>
    hasSome?: $Enums.FightModifier[] | ListEnumFightModifierFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type TournamentNullableRelationFilter = {
    is?: TournamentWhereInput | null
    isNot?: TournamentWhereInput | null
  }

  export type ClanWarNullableRelationFilter = {
    is?: ClanWarWhereInput | null
    isNot?: ClanWarWhereInput | null
  }

  export type FightCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    brute1Id?: SortOrder
    brute2Id?: SortOrder
    winner?: SortOrder
    loser?: SortOrder
    steps?: SortOrder
    fighters?: SortOrder
    tournamentId?: SortOrder
    tournamentStep?: SortOrder
    modifiers?: SortOrder
    background?: SortOrder
    clanWarId?: SortOrder
  }

  export type FightAvgOrderByAggregateInput = {
    tournamentStep?: SortOrder
  }

  export type FightMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    brute1Id?: SortOrder
    brute2Id?: SortOrder
    winner?: SortOrder
    loser?: SortOrder
    steps?: SortOrder
    fighters?: SortOrder
    tournamentId?: SortOrder
    tournamentStep?: SortOrder
    background?: SortOrder
    clanWarId?: SortOrder
  }

  export type FightMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    brute1Id?: SortOrder
    brute2Id?: SortOrder
    winner?: SortOrder
    loser?: SortOrder
    steps?: SortOrder
    fighters?: SortOrder
    tournamentId?: SortOrder
    tournamentStep?: SortOrder
    background?: SortOrder
    clanWarId?: SortOrder
  }

  export type FightSumOrderByAggregateInput = {
    tournamentStep?: SortOrder
  }

  export type EnumLogTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.LogType | EnumLogTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LogType[] | ListEnumLogTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogType[] | ListEnumLogTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLogTypeFilter<$PrismaModel> | $Enums.LogType
  }

  export type FightNullableRelationFilter = {
    is?: FightWhereInput | null
    isNot?: FightWhereInput | null
  }

  export type DestinyChoiceNullableRelationFilter = {
    is?: DestinyChoiceWhereInput | null
    isNot?: DestinyChoiceWhereInput | null
  }

  export type LogCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    currentBruteId?: SortOrder
    type?: SortOrder
    level?: SortOrder
    brute?: SortOrder
    fightId?: SortOrder
    xp?: SortOrder
    gold?: SortOrder
    template?: SortOrder
    destinyChoiceId?: SortOrder
  }

  export type LogAvgOrderByAggregateInput = {
    level?: SortOrder
    xp?: SortOrder
    gold?: SortOrder
  }

  export type LogMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    currentBruteId?: SortOrder
    type?: SortOrder
    level?: SortOrder
    brute?: SortOrder
    fightId?: SortOrder
    xp?: SortOrder
    gold?: SortOrder
    template?: SortOrder
    destinyChoiceId?: SortOrder
  }

  export type LogMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    currentBruteId?: SortOrder
    type?: SortOrder
    level?: SortOrder
    brute?: SortOrder
    fightId?: SortOrder
    xp?: SortOrder
    gold?: SortOrder
    template?: SortOrder
    destinyChoiceId?: SortOrder
  }

  export type LogSumOrderByAggregateInput = {
    level?: SortOrder
    xp?: SortOrder
    gold?: SortOrder
  }

  export type EnumLogTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LogType | EnumLogTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LogType[] | ListEnumLogTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogType[] | ListEnumLogTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLogTypeWithAggregatesFilter<$PrismaModel> | $Enums.LogType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLogTypeFilter<$PrismaModel>
    _max?: NestedEnumLogTypeFilter<$PrismaModel>
  }

  export type EnumDestinyChoiceTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DestinyChoiceType | EnumDestinyChoiceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DestinyChoiceType[] | ListEnumDestinyChoiceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DestinyChoiceType[] | ListEnumDestinyChoiceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDestinyChoiceTypeFilter<$PrismaModel> | $Enums.DestinyChoiceType
  }

  export type EnumSkillNameNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.SkillName | EnumSkillNameFieldRefInput<$PrismaModel> | null
    in?: $Enums.SkillName[] | ListEnumSkillNameFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.SkillName[] | ListEnumSkillNameFieldRefInput<$PrismaModel> | null
    not?: NestedEnumSkillNameNullableFilter<$PrismaModel> | $Enums.SkillName | null
  }

  export type EnumWeaponNameNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.WeaponName | EnumWeaponNameFieldRefInput<$PrismaModel> | null
    in?: $Enums.WeaponName[] | ListEnumWeaponNameFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.WeaponName[] | ListEnumWeaponNameFieldRefInput<$PrismaModel> | null
    not?: NestedEnumWeaponNameNullableFilter<$PrismaModel> | $Enums.WeaponName | null
  }

  export type EnumPetNameNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.PetName | EnumPetNameFieldRefInput<$PrismaModel> | null
    in?: $Enums.PetName[] | ListEnumPetNameFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PetName[] | ListEnumPetNameFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPetNameNullableFilter<$PrismaModel> | $Enums.PetName | null
  }

  export type EnumBruteStatNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.BruteStat | EnumBruteStatFieldRefInput<$PrismaModel> | null
    in?: $Enums.BruteStat[] | ListEnumBruteStatFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.BruteStat[] | ListEnumBruteStatFieldRefInput<$PrismaModel> | null
    not?: NestedEnumBruteStatNullableFilter<$PrismaModel> | $Enums.BruteStat | null
  }

  export type DestinyChoiceCountOrderByAggregateInput = {
    id?: SortOrder
    bruteId?: SortOrder
    path?: SortOrder
    type?: SortOrder
    skill?: SortOrder
    weapon?: SortOrder
    pet?: SortOrder
    originalSkill?: SortOrder
    originalWeapon?: SortOrder
    originalPet?: SortOrder
    stat1?: SortOrder
    stat1Value?: SortOrder
    stat2?: SortOrder
    stat2Value?: SortOrder
  }

  export type DestinyChoiceAvgOrderByAggregateInput = {
    stat1Value?: SortOrder
    stat2Value?: SortOrder
  }

  export type DestinyChoiceMaxOrderByAggregateInput = {
    id?: SortOrder
    bruteId?: SortOrder
    type?: SortOrder
    skill?: SortOrder
    weapon?: SortOrder
    pet?: SortOrder
    originalSkill?: SortOrder
    originalWeapon?: SortOrder
    originalPet?: SortOrder
    stat1?: SortOrder
    stat1Value?: SortOrder
    stat2?: SortOrder
    stat2Value?: SortOrder
  }

  export type DestinyChoiceMinOrderByAggregateInput = {
    id?: SortOrder
    bruteId?: SortOrder
    type?: SortOrder
    skill?: SortOrder
    weapon?: SortOrder
    pet?: SortOrder
    originalSkill?: SortOrder
    originalWeapon?: SortOrder
    originalPet?: SortOrder
    stat1?: SortOrder
    stat1Value?: SortOrder
    stat2?: SortOrder
    stat2Value?: SortOrder
  }

  export type DestinyChoiceSumOrderByAggregateInput = {
    stat1Value?: SortOrder
    stat2Value?: SortOrder
  }

  export type EnumDestinyChoiceTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DestinyChoiceType | EnumDestinyChoiceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DestinyChoiceType[] | ListEnumDestinyChoiceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DestinyChoiceType[] | ListEnumDestinyChoiceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDestinyChoiceTypeWithAggregatesFilter<$PrismaModel> | $Enums.DestinyChoiceType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDestinyChoiceTypeFilter<$PrismaModel>
    _max?: NestedEnumDestinyChoiceTypeFilter<$PrismaModel>
  }

  export type EnumSkillNameNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SkillName | EnumSkillNameFieldRefInput<$PrismaModel> | null
    in?: $Enums.SkillName[] | ListEnumSkillNameFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.SkillName[] | ListEnumSkillNameFieldRefInput<$PrismaModel> | null
    not?: NestedEnumSkillNameNullableWithAggregatesFilter<$PrismaModel> | $Enums.SkillName | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumSkillNameNullableFilter<$PrismaModel>
    _max?: NestedEnumSkillNameNullableFilter<$PrismaModel>
  }

  export type EnumWeaponNameNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WeaponName | EnumWeaponNameFieldRefInput<$PrismaModel> | null
    in?: $Enums.WeaponName[] | ListEnumWeaponNameFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.WeaponName[] | ListEnumWeaponNameFieldRefInput<$PrismaModel> | null
    not?: NestedEnumWeaponNameNullableWithAggregatesFilter<$PrismaModel> | $Enums.WeaponName | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumWeaponNameNullableFilter<$PrismaModel>
    _max?: NestedEnumWeaponNameNullableFilter<$PrismaModel>
  }

  export type EnumPetNameNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PetName | EnumPetNameFieldRefInput<$PrismaModel> | null
    in?: $Enums.PetName[] | ListEnumPetNameFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PetName[] | ListEnumPetNameFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPetNameNullableWithAggregatesFilter<$PrismaModel> | $Enums.PetName | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPetNameNullableFilter<$PrismaModel>
    _max?: NestedEnumPetNameNullableFilter<$PrismaModel>
  }

  export type EnumBruteStatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BruteStat | EnumBruteStatFieldRefInput<$PrismaModel> | null
    in?: $Enums.BruteStat[] | ListEnumBruteStatFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.BruteStat[] | ListEnumBruteStatFieldRefInput<$PrismaModel> | null
    not?: NestedEnumBruteStatNullableWithAggregatesFilter<$PrismaModel> | $Enums.BruteStat | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumBruteStatNullableFilter<$PrismaModel>
    _max?: NestedEnumBruteStatNullableFilter<$PrismaModel>
  }

  export type EnumTournamentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TournamentType | EnumTournamentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TournamentType[] | ListEnumTournamentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TournamentType[] | ListEnumTournamentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTournamentTypeFilter<$PrismaModel> | $Enums.TournamentType
  }

  export type TournamentCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    type?: SortOrder
    rounds?: SortOrder
    eventId?: SortOrder
  }

  export type TournamentAvgOrderByAggregateInput = {
    rounds?: SortOrder
  }

  export type TournamentMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    type?: SortOrder
    rounds?: SortOrder
    eventId?: SortOrder
  }

  export type TournamentMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    type?: SortOrder
    rounds?: SortOrder
    eventId?: SortOrder
  }

  export type TournamentSumOrderByAggregateInput = {
    rounds?: SortOrder
  }

  export type EnumTournamentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TournamentType | EnumTournamentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TournamentType[] | ListEnumTournamentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TournamentType[] | ListEnumTournamentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTournamentTypeWithAggregatesFilter<$PrismaModel> | $Enums.TournamentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTournamentTypeFilter<$PrismaModel>
    _max?: NestedEnumTournamentTypeFilter<$PrismaModel>
  }

  export type EnumAchievementNameFilter<$PrismaModel = never> = {
    equals?: $Enums.AchievementName | EnumAchievementNameFieldRefInput<$PrismaModel>
    in?: $Enums.AchievementName[] | ListEnumAchievementNameFieldRefInput<$PrismaModel>
    notIn?: $Enums.AchievementName[] | ListEnumAchievementNameFieldRefInput<$PrismaModel>
    not?: NestedEnumAchievementNameFilter<$PrismaModel> | $Enums.AchievementName
  }

  export type TournamentAchievementAchievementBruteIdCompoundUniqueInput = {
    achievement: $Enums.AchievementName
    bruteId: string
  }

  export type TournamentAchievementCountOrderByAggregateInput = {
    id?: SortOrder
    bruteId?: SortOrder
    date?: SortOrder
    achievement?: SortOrder
    achievementCount?: SortOrder
  }

  export type TournamentAchievementAvgOrderByAggregateInput = {
    achievementCount?: SortOrder
  }

  export type TournamentAchievementMaxOrderByAggregateInput = {
    id?: SortOrder
    bruteId?: SortOrder
    date?: SortOrder
    achievement?: SortOrder
    achievementCount?: SortOrder
  }

  export type TournamentAchievementMinOrderByAggregateInput = {
    id?: SortOrder
    bruteId?: SortOrder
    date?: SortOrder
    achievement?: SortOrder
    achievementCount?: SortOrder
  }

  export type TournamentAchievementSumOrderByAggregateInput = {
    achievementCount?: SortOrder
  }

  export type EnumAchievementNameWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AchievementName | EnumAchievementNameFieldRefInput<$PrismaModel>
    in?: $Enums.AchievementName[] | ListEnumAchievementNameFieldRefInput<$PrismaModel>
    notIn?: $Enums.AchievementName[] | ListEnumAchievementNameFieldRefInput<$PrismaModel>
    not?: NestedEnumAchievementNameWithAggregatesFilter<$PrismaModel> | $Enums.AchievementName
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAchievementNameFilter<$PrismaModel>
    _max?: NestedEnumAchievementNameFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type TournamentGoldCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    userId?: SortOrder
    gold?: SortOrder
  }

  export type TournamentGoldAvgOrderByAggregateInput = {
    gold?: SortOrder
  }

  export type TournamentGoldMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    userId?: SortOrder
    gold?: SortOrder
  }

  export type TournamentGoldMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    userId?: SortOrder
    gold?: SortOrder
  }

  export type TournamentGoldSumOrderByAggregateInput = {
    gold?: SortOrder
  }

  export type TournamentXpCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    bruteId?: SortOrder
    xp?: SortOrder
  }

  export type TournamentXpAvgOrderByAggregateInput = {
    xp?: SortOrder
  }

  export type TournamentXpMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    bruteId?: SortOrder
    xp?: SortOrder
  }

  export type TournamentXpMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    bruteId?: SortOrder
    xp?: SortOrder
  }

  export type TournamentXpSumOrderByAggregateInput = {
    xp?: SortOrder
  }

  export type AchievementNameBruteIdCompoundUniqueInput = {
    name: $Enums.AchievementName
    bruteId: string
  }

  export type AchievementCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    count?: SortOrder
    bruteId?: SortOrder
    userId?: SortOrder
  }

  export type AchievementAvgOrderByAggregateInput = {
    count?: SortOrder
  }

  export type AchievementMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    count?: SortOrder
    bruteId?: SortOrder
    userId?: SortOrder
  }

  export type AchievementMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    count?: SortOrder
    bruteId?: SortOrder
    userId?: SortOrder
  }

  export type AchievementSumOrderByAggregateInput = {
    count?: SortOrder
  }

  export type TitleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    count?: SortOrder
  }

  export type TitleAvgOrderByAggregateInput = {
    count?: SortOrder
  }

  export type TitleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    count?: SortOrder
  }

  export type TitleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    count?: SortOrder
  }

  export type TitleSumOrderByAggregateInput = {
    count?: SortOrder
  }

  export type EnumBruteReportReasonFilter<$PrismaModel = never> = {
    equals?: $Enums.BruteReportReason | EnumBruteReportReasonFieldRefInput<$PrismaModel>
    in?: $Enums.BruteReportReason[] | ListEnumBruteReportReasonFieldRefInput<$PrismaModel>
    notIn?: $Enums.BruteReportReason[] | ListEnumBruteReportReasonFieldRefInput<$PrismaModel>
    not?: NestedEnumBruteReportReasonFilter<$PrismaModel> | $Enums.BruteReportReason
  }

  export type EnumBruteReportStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BruteReportStatus | EnumBruteReportStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BruteReportStatus[] | ListEnumBruteReportStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BruteReportStatus[] | ListEnumBruteReportStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBruteReportStatusFilter<$PrismaModel> | $Enums.BruteReportStatus
  }

  export type BruteReportCountOrderByAggregateInput = {
    id?: SortOrder
    bruteId?: SortOrder
    reason?: SortOrder
    count?: SortOrder
    date?: SortOrder
    status?: SortOrder
  }

  export type BruteReportAvgOrderByAggregateInput = {
    count?: SortOrder
  }

  export type BruteReportMaxOrderByAggregateInput = {
    id?: SortOrder
    bruteId?: SortOrder
    reason?: SortOrder
    count?: SortOrder
    date?: SortOrder
    status?: SortOrder
  }

  export type BruteReportMinOrderByAggregateInput = {
    id?: SortOrder
    bruteId?: SortOrder
    reason?: SortOrder
    count?: SortOrder
    date?: SortOrder
    status?: SortOrder
  }

  export type BruteReportSumOrderByAggregateInput = {
    count?: SortOrder
  }

  export type EnumBruteReportReasonWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BruteReportReason | EnumBruteReportReasonFieldRefInput<$PrismaModel>
    in?: $Enums.BruteReportReason[] | ListEnumBruteReportReasonFieldRefInput<$PrismaModel>
    notIn?: $Enums.BruteReportReason[] | ListEnumBruteReportReasonFieldRefInput<$PrismaModel>
    not?: NestedEnumBruteReportReasonWithAggregatesFilter<$PrismaModel> | $Enums.BruteReportReason
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBruteReportReasonFilter<$PrismaModel>
    _max?: NestedEnumBruteReportReasonFilter<$PrismaModel>
  }

  export type EnumBruteReportStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BruteReportStatus | EnumBruteReportStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BruteReportStatus[] | ListEnumBruteReportStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BruteReportStatus[] | ListEnumBruteReportStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBruteReportStatusWithAggregatesFilter<$PrismaModel> | $Enums.BruteReportStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBruteReportStatusFilter<$PrismaModel>
    _max?: NestedEnumBruteReportStatusFilter<$PrismaModel>
  }

  export type ServerStateCountOrderByAggregateInput = {
    id?: SortOrder
    globalTournamentValid?: SortOrder
    activeModifiers?: SortOrder
    modifiersEndAt?: SortOrder
    nextModifiers?: SortOrder
  }

  export type ServerStateMaxOrderByAggregateInput = {
    id?: SortOrder
    globalTournamentValid?: SortOrder
    modifiersEndAt?: SortOrder
  }

  export type ServerStateMinOrderByAggregateInput = {
    id?: SortOrder
    globalTournamentValid?: SortOrder
    modifiersEndAt?: SortOrder
  }

  export type BannedWordCountOrderByAggregateInput = {
    id?: SortOrder
    word?: SortOrder
  }

  export type BannedWordMaxOrderByAggregateInput = {
    id?: SortOrder
    word?: SortOrder
  }

  export type BannedWordMinOrderByAggregateInput = {
    id?: SortOrder
    word?: SortOrder
  }

  export type BannedIpCountOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BannedIpMaxOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BannedIpMinOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumBossNameFilter<$PrismaModel = never> = {
    equals?: $Enums.BossName | EnumBossNameFieldRefInput<$PrismaModel>
    in?: $Enums.BossName[] | ListEnumBossNameFieldRefInput<$PrismaModel>
    notIn?: $Enums.BossName[] | ListEnumBossNameFieldRefInput<$PrismaModel>
    not?: NestedEnumBossNameFilter<$PrismaModel> | $Enums.BossName
  }

  export type ClanWarListRelationFilter = {
    every?: ClanWarWhereInput
    some?: ClanWarWhereInput
    none?: ClanWarWhereInput
  }

  export type ClanWarOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClanNameDeletedAtCompoundUniqueInput = {
    name: string
    deletedAt: Date | string
  }

  export type ClanCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    deletedAt?: SortOrder
    limit?: SortOrder
    points?: SortOrder
    elo?: SortOrder
    boss?: SortOrder
    damageOnBoss?: SortOrder
    masterId?: SortOrder
    participateInClanWar?: SortOrder
  }

  export type ClanAvgOrderByAggregateInput = {
    limit?: SortOrder
    points?: SortOrder
    elo?: SortOrder
    damageOnBoss?: SortOrder
  }

  export type ClanMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    deletedAt?: SortOrder
    limit?: SortOrder
    points?: SortOrder
    elo?: SortOrder
    boss?: SortOrder
    damageOnBoss?: SortOrder
    masterId?: SortOrder
    participateInClanWar?: SortOrder
  }

  export type ClanMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    deletedAt?: SortOrder
    limit?: SortOrder
    points?: SortOrder
    elo?: SortOrder
    boss?: SortOrder
    damageOnBoss?: SortOrder
    masterId?: SortOrder
    participateInClanWar?: SortOrder
  }

  export type ClanSumOrderByAggregateInput = {
    limit?: SortOrder
    points?: SortOrder
    elo?: SortOrder
    damageOnBoss?: SortOrder
  }

  export type EnumBossNameWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BossName | EnumBossNameFieldRefInput<$PrismaModel>
    in?: $Enums.BossName[] | ListEnumBossNameFieldRefInput<$PrismaModel>
    notIn?: $Enums.BossName[] | ListEnumBossNameFieldRefInput<$PrismaModel>
    not?: NestedEnumBossNameWithAggregatesFilter<$PrismaModel> | $Enums.BossName
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBossNameFilter<$PrismaModel>
    _max?: NestedEnumBossNameFilter<$PrismaModel>
  }

  export type ClanRelationFilter = {
    is?: ClanWhereInput
    isNot?: ClanWhereInput
  }

  export type ClanThreadCountOrderByAggregateInput = {
    id?: SortOrder
    clanId?: SortOrder
    creatorId?: SortOrder
    title?: SortOrder
    locked?: SortOrder
    pinned?: SortOrder
    postCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClanThreadAvgOrderByAggregateInput = {
    postCount?: SortOrder
  }

  export type ClanThreadMaxOrderByAggregateInput = {
    id?: SortOrder
    clanId?: SortOrder
    creatorId?: SortOrder
    title?: SortOrder
    locked?: SortOrder
    pinned?: SortOrder
    postCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClanThreadMinOrderByAggregateInput = {
    id?: SortOrder
    clanId?: SortOrder
    creatorId?: SortOrder
    title?: SortOrder
    locked?: SortOrder
    pinned?: SortOrder
    postCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClanThreadSumOrderByAggregateInput = {
    postCount?: SortOrder
  }

  export type ClanThreadRelationFilter = {
    is?: ClanThreadWhereInput
    isNot?: ClanThreadWhereInput
  }

  export type ClanPostCountOrderByAggregateInput = {
    id?: SortOrder
    threadId?: SortOrder
    authorId?: SortOrder
    date?: SortOrder
    message?: SortOrder
  }

  export type ClanPostMaxOrderByAggregateInput = {
    id?: SortOrder
    threadId?: SortOrder
    authorId?: SortOrder
    date?: SortOrder
    message?: SortOrder
  }

  export type ClanPostMinOrderByAggregateInput = {
    id?: SortOrder
    threadId?: SortOrder
    authorId?: SortOrder
    date?: SortOrder
    message?: SortOrder
  }

  export type BossDamageBruteIdClanIdCompoundUniqueInput = {
    bruteId: string
    clanId: string
  }

  export type BossDamageCountOrderByAggregateInput = {
    id?: SortOrder
    bruteId?: SortOrder
    clanId?: SortOrder
    damage?: SortOrder
  }

  export type BossDamageAvgOrderByAggregateInput = {
    damage?: SortOrder
  }

  export type BossDamageMaxOrderByAggregateInput = {
    id?: SortOrder
    bruteId?: SortOrder
    clanId?: SortOrder
    damage?: SortOrder
  }

  export type BossDamageMinOrderByAggregateInput = {
    id?: SortOrder
    bruteId?: SortOrder
    clanId?: SortOrder
    damage?: SortOrder
  }

  export type BossDamageSumOrderByAggregateInput = {
    damage?: SortOrder
  }

  export type EnumClanWarTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ClanWarType | EnumClanWarTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ClanWarType[] | ListEnumClanWarTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClanWarType[] | ListEnumClanWarTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumClanWarTypeFilter<$PrismaModel> | $Enums.ClanWarType
  }

  export type EnumClanWarStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ClanWarStatus | EnumClanWarStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ClanWarStatus[] | ListEnumClanWarStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClanWarStatus[] | ListEnumClanWarStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumClanWarStatusFilter<$PrismaModel> | $Enums.ClanWarStatus
  }

  export type ClanWarCountOrderByAggregateInput = {
    id?: SortOrder
    duration?: SortOrder
    type?: SortOrder
    date?: SortOrder
    status?: SortOrder
    attackerId?: SortOrder
    attackerEloChange?: SortOrder
    attackerWins?: SortOrder
    defenderId?: SortOrder
    defenderEloChange?: SortOrder
    defenderWins?: SortOrder
    winnerId?: SortOrder
  }

  export type ClanWarAvgOrderByAggregateInput = {
    duration?: SortOrder
    attackerEloChange?: SortOrder
    attackerWins?: SortOrder
    defenderEloChange?: SortOrder
    defenderWins?: SortOrder
  }

  export type ClanWarMaxOrderByAggregateInput = {
    id?: SortOrder
    duration?: SortOrder
    type?: SortOrder
    date?: SortOrder
    status?: SortOrder
    attackerId?: SortOrder
    attackerEloChange?: SortOrder
    attackerWins?: SortOrder
    defenderId?: SortOrder
    defenderEloChange?: SortOrder
    defenderWins?: SortOrder
    winnerId?: SortOrder
  }

  export type ClanWarMinOrderByAggregateInput = {
    id?: SortOrder
    duration?: SortOrder
    type?: SortOrder
    date?: SortOrder
    status?: SortOrder
    attackerId?: SortOrder
    attackerEloChange?: SortOrder
    attackerWins?: SortOrder
    defenderId?: SortOrder
    defenderEloChange?: SortOrder
    defenderWins?: SortOrder
    winnerId?: SortOrder
  }

  export type ClanWarSumOrderByAggregateInput = {
    duration?: SortOrder
    attackerEloChange?: SortOrder
    attackerWins?: SortOrder
    defenderEloChange?: SortOrder
    defenderWins?: SortOrder
  }

  export type EnumClanWarTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ClanWarType | EnumClanWarTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ClanWarType[] | ListEnumClanWarTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClanWarType[] | ListEnumClanWarTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumClanWarTypeWithAggregatesFilter<$PrismaModel> | $Enums.ClanWarType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumClanWarTypeFilter<$PrismaModel>
    _max?: NestedEnumClanWarTypeFilter<$PrismaModel>
  }

  export type EnumClanWarStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ClanWarStatus | EnumClanWarStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ClanWarStatus[] | ListEnumClanWarStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClanWarStatus[] | ListEnumClanWarStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumClanWarStatusWithAggregatesFilter<$PrismaModel> | $Enums.ClanWarStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumClanWarStatusFilter<$PrismaModel>
    _max?: NestedEnumClanWarStatusFilter<$PrismaModel>
  }

  export type ClanWarRelationFilter = {
    is?: ClanWarWhereInput
    isNot?: ClanWarWhereInput
  }

  export type ClanWarFightersClanWarIdDayCompoundUniqueInput = {
    clanWarId: string
    day: number
  }

  export type ClanWarFightersCountOrderByAggregateInput = {
    id?: SortOrder
    clanWarId?: SortOrder
    day?: SortOrder
  }

  export type ClanWarFightersAvgOrderByAggregateInput = {
    day?: SortOrder
  }

  export type ClanWarFightersMaxOrderByAggregateInput = {
    id?: SortOrder
    clanWarId?: SortOrder
    day?: SortOrder
  }

  export type ClanWarFightersMinOrderByAggregateInput = {
    id?: SortOrder
    clanWarId?: SortOrder
    day?: SortOrder
  }

  export type ClanWarFightersSumOrderByAggregateInput = {
    day?: SortOrder
  }

  export type EnumInventoryItemTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.InventoryItemType | EnumInventoryItemTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InventoryItemType[] | ListEnumInventoryItemTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InventoryItemType[] | ListEnumInventoryItemTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInventoryItemTypeFilter<$PrismaModel> | $Enums.InventoryItemType
  }

  export type InventoryItemTypeBruteIdCompoundUniqueInput = {
    type: $Enums.InventoryItemType
    bruteId: string
  }

  export type InventoryItemTypeUserIdCompoundUniqueInput = {
    type: $Enums.InventoryItemType
    userId: string
  }

  export type InventoryItemCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    count?: SortOrder
    bruteId?: SortOrder
    userId?: SortOrder
  }

  export type InventoryItemAvgOrderByAggregateInput = {
    count?: SortOrder
  }

  export type InventoryItemMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    count?: SortOrder
    bruteId?: SortOrder
    userId?: SortOrder
  }

  export type InventoryItemMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    count?: SortOrder
    bruteId?: SortOrder
    userId?: SortOrder
  }

  export type InventoryItemSumOrderByAggregateInput = {
    count?: SortOrder
  }

  export type EnumInventoryItemTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InventoryItemType | EnumInventoryItemTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InventoryItemType[] | ListEnumInventoryItemTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InventoryItemType[] | ListEnumInventoryItemTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInventoryItemTypeWithAggregatesFilter<$PrismaModel> | $Enums.InventoryItemType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInventoryItemTypeFilter<$PrismaModel>
    _max?: NestedEnumInventoryItemTypeFilter<$PrismaModel>
  }

  export type ReleaseCountOrderByAggregateInput = {
    version?: SortOrder
    date?: SortOrder
  }

  export type ReleaseMaxOrderByAggregateInput = {
    version?: SortOrder
    date?: SortOrder
  }

  export type ReleaseMinOrderByAggregateInput = {
    version?: SortOrder
    date?: SortOrder
  }

  export type EnumEventTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.EventType | EnumEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EventType[] | ListEnumEventTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventType[] | ListEnumEventTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEventTypeFilter<$PrismaModel> | $Enums.EventType
  }

  export type EnumEventStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EventStatus | EnumEventStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEventStatusFilter<$PrismaModel> | $Enums.EventStatus
  }

  export type EventCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    type?: SortOrder
    maxLevel?: SortOrder
    maxRound?: SortOrder
    status?: SortOrder
    winnerId?: SortOrder
    finishedAt?: SortOrder
    sortedBrutes?: SortOrder
  }

  export type EventAvgOrderByAggregateInput = {
    maxLevel?: SortOrder
    maxRound?: SortOrder
  }

  export type EventMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    type?: SortOrder
    maxLevel?: SortOrder
    maxRound?: SortOrder
    status?: SortOrder
    winnerId?: SortOrder
    finishedAt?: SortOrder
  }

  export type EventMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    type?: SortOrder
    maxLevel?: SortOrder
    maxRound?: SortOrder
    status?: SortOrder
    winnerId?: SortOrder
    finishedAt?: SortOrder
  }

  export type EventSumOrderByAggregateInput = {
    maxLevel?: SortOrder
    maxRound?: SortOrder
  }

  export type EnumEventTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EventType | EnumEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EventType[] | ListEnumEventTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventType[] | ListEnumEventTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEventTypeWithAggregatesFilter<$PrismaModel> | $Enums.EventType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEventTypeFilter<$PrismaModel>
    _max?: NestedEnumEventTypeFilter<$PrismaModel>
  }

  export type EnumEventStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EventStatus | EnumEventStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEventStatusWithAggregatesFilter<$PrismaModel> | $Enums.EventStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEventStatusFilter<$PrismaModel>
    _max?: NestedEnumEventStatusFilter<$PrismaModel>
  }

  export type UserCreateipsInput = {
    set: string[]
  }

  export type BruteCreateNestedManyWithoutUserInput = {
    create?: XOR<BruteCreateWithoutUserInput, BruteUncheckedCreateWithoutUserInput> | BruteCreateWithoutUserInput[] | BruteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutUserInput | BruteCreateOrConnectWithoutUserInput[]
    createMany?: BruteCreateManyUserInputEnvelope
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
  }

  export type AchievementCreateNestedManyWithoutUserInput = {
    create?: XOR<AchievementCreateWithoutUserInput, AchievementUncheckedCreateWithoutUserInput> | AchievementCreateWithoutUserInput[] | AchievementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AchievementCreateOrConnectWithoutUserInput | AchievementCreateOrConnectWithoutUserInput[]
    createMany?: AchievementCreateManyUserInputEnvelope
    connect?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
  }

  export type BruteReportCreateNestedManyWithoutUsersInput = {
    create?: XOR<BruteReportCreateWithoutUsersInput, BruteReportUncheckedCreateWithoutUsersInput> | BruteReportCreateWithoutUsersInput[] | BruteReportUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: BruteReportCreateOrConnectWithoutUsersInput | BruteReportCreateOrConnectWithoutUsersInput[]
    connect?: BruteReportWhereUniqueInput | BruteReportWhereUniqueInput[]
  }

  export type TournamentGoldCreateNestedManyWithoutUserInput = {
    create?: XOR<TournamentGoldCreateWithoutUserInput, TournamentGoldUncheckedCreateWithoutUserInput> | TournamentGoldCreateWithoutUserInput[] | TournamentGoldUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TournamentGoldCreateOrConnectWithoutUserInput | TournamentGoldCreateOrConnectWithoutUserInput[]
    createMany?: TournamentGoldCreateManyUserInputEnvelope
    connect?: TournamentGoldWhereUniqueInput | TournamentGoldWhereUniqueInput[]
  }

  export type InventoryItemCreateNestedManyWithoutUserInput = {
    create?: XOR<InventoryItemCreateWithoutUserInput, InventoryItemUncheckedCreateWithoutUserInput> | InventoryItemCreateWithoutUserInput[] | InventoryItemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InventoryItemCreateOrConnectWithoutUserInput | InventoryItemCreateOrConnectWithoutUserInput[]
    createMany?: InventoryItemCreateManyUserInputEnvelope
    connect?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
  }

  export type FightCreateNestedManyWithoutFavoritedByInput = {
    create?: XOR<FightCreateWithoutFavoritedByInput, FightUncheckedCreateWithoutFavoritedByInput> | FightCreateWithoutFavoritedByInput[] | FightUncheckedCreateWithoutFavoritedByInput[]
    connectOrCreate?: FightCreateOrConnectWithoutFavoritedByInput | FightCreateOrConnectWithoutFavoritedByInput[]
    connect?: FightWhereUniqueInput | FightWhereUniqueInput[]
  }

  export type BruteCreateNestedManyWithoutFollowersInput = {
    create?: XOR<BruteCreateWithoutFollowersInput, BruteUncheckedCreateWithoutFollowersInput> | BruteCreateWithoutFollowersInput[] | BruteUncheckedCreateWithoutFollowersInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutFollowersInput | BruteCreateOrConnectWithoutFollowersInput[]
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
  }

  export type BruteUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BruteCreateWithoutUserInput, BruteUncheckedCreateWithoutUserInput> | BruteCreateWithoutUserInput[] | BruteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutUserInput | BruteCreateOrConnectWithoutUserInput[]
    createMany?: BruteCreateManyUserInputEnvelope
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
  }

  export type AchievementUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AchievementCreateWithoutUserInput, AchievementUncheckedCreateWithoutUserInput> | AchievementCreateWithoutUserInput[] | AchievementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AchievementCreateOrConnectWithoutUserInput | AchievementCreateOrConnectWithoutUserInput[]
    createMany?: AchievementCreateManyUserInputEnvelope
    connect?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
  }

  export type BruteReportUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<BruteReportCreateWithoutUsersInput, BruteReportUncheckedCreateWithoutUsersInput> | BruteReportCreateWithoutUsersInput[] | BruteReportUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: BruteReportCreateOrConnectWithoutUsersInput | BruteReportCreateOrConnectWithoutUsersInput[]
    connect?: BruteReportWhereUniqueInput | BruteReportWhereUniqueInput[]
  }

  export type TournamentGoldUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TournamentGoldCreateWithoutUserInput, TournamentGoldUncheckedCreateWithoutUserInput> | TournamentGoldCreateWithoutUserInput[] | TournamentGoldUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TournamentGoldCreateOrConnectWithoutUserInput | TournamentGoldCreateOrConnectWithoutUserInput[]
    createMany?: TournamentGoldCreateManyUserInputEnvelope
    connect?: TournamentGoldWhereUniqueInput | TournamentGoldWhereUniqueInput[]
  }

  export type InventoryItemUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<InventoryItemCreateWithoutUserInput, InventoryItemUncheckedCreateWithoutUserInput> | InventoryItemCreateWithoutUserInput[] | InventoryItemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InventoryItemCreateOrConnectWithoutUserInput | InventoryItemCreateOrConnectWithoutUserInput[]
    createMany?: InventoryItemCreateManyUserInputEnvelope
    connect?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
  }

  export type FightUncheckedCreateNestedManyWithoutFavoritedByInput = {
    create?: XOR<FightCreateWithoutFavoritedByInput, FightUncheckedCreateWithoutFavoritedByInput> | FightCreateWithoutFavoritedByInput[] | FightUncheckedCreateWithoutFavoritedByInput[]
    connectOrCreate?: FightCreateOrConnectWithoutFavoritedByInput | FightCreateOrConnectWithoutFavoritedByInput[]
    connect?: FightWhereUniqueInput | FightWhereUniqueInput[]
  }

  export type BruteUncheckedCreateNestedManyWithoutFollowersInput = {
    create?: XOR<BruteCreateWithoutFollowersInput, BruteUncheckedCreateWithoutFollowersInput> | BruteCreateWithoutFollowersInput[] | BruteUncheckedCreateWithoutFollowersInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutFollowersInput | BruteCreateOrConnectWithoutFollowersInput[]
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumLangFieldUpdateOperationsInput = {
    set?: $Enums.Lang
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateipsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BruteUpdateManyWithoutUserNestedInput = {
    create?: XOR<BruteCreateWithoutUserInput, BruteUncheckedCreateWithoutUserInput> | BruteCreateWithoutUserInput[] | BruteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutUserInput | BruteCreateOrConnectWithoutUserInput[]
    upsert?: BruteUpsertWithWhereUniqueWithoutUserInput | BruteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BruteCreateManyUserInputEnvelope
    set?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    disconnect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    delete?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    update?: BruteUpdateWithWhereUniqueWithoutUserInput | BruteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BruteUpdateManyWithWhereWithoutUserInput | BruteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BruteScalarWhereInput | BruteScalarWhereInput[]
  }

  export type AchievementUpdateManyWithoutUserNestedInput = {
    create?: XOR<AchievementCreateWithoutUserInput, AchievementUncheckedCreateWithoutUserInput> | AchievementCreateWithoutUserInput[] | AchievementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AchievementCreateOrConnectWithoutUserInput | AchievementCreateOrConnectWithoutUserInput[]
    upsert?: AchievementUpsertWithWhereUniqueWithoutUserInput | AchievementUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AchievementCreateManyUserInputEnvelope
    set?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
    disconnect?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
    delete?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
    connect?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
    update?: AchievementUpdateWithWhereUniqueWithoutUserInput | AchievementUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AchievementUpdateManyWithWhereWithoutUserInput | AchievementUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AchievementScalarWhereInput | AchievementScalarWhereInput[]
  }

  export type BruteReportUpdateManyWithoutUsersNestedInput = {
    create?: XOR<BruteReportCreateWithoutUsersInput, BruteReportUncheckedCreateWithoutUsersInput> | BruteReportCreateWithoutUsersInput[] | BruteReportUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: BruteReportCreateOrConnectWithoutUsersInput | BruteReportCreateOrConnectWithoutUsersInput[]
    upsert?: BruteReportUpsertWithWhereUniqueWithoutUsersInput | BruteReportUpsertWithWhereUniqueWithoutUsersInput[]
    set?: BruteReportWhereUniqueInput | BruteReportWhereUniqueInput[]
    disconnect?: BruteReportWhereUniqueInput | BruteReportWhereUniqueInput[]
    delete?: BruteReportWhereUniqueInput | BruteReportWhereUniqueInput[]
    connect?: BruteReportWhereUniqueInput | BruteReportWhereUniqueInput[]
    update?: BruteReportUpdateWithWhereUniqueWithoutUsersInput | BruteReportUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: BruteReportUpdateManyWithWhereWithoutUsersInput | BruteReportUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: BruteReportScalarWhereInput | BruteReportScalarWhereInput[]
  }

  export type TournamentGoldUpdateManyWithoutUserNestedInput = {
    create?: XOR<TournamentGoldCreateWithoutUserInput, TournamentGoldUncheckedCreateWithoutUserInput> | TournamentGoldCreateWithoutUserInput[] | TournamentGoldUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TournamentGoldCreateOrConnectWithoutUserInput | TournamentGoldCreateOrConnectWithoutUserInput[]
    upsert?: TournamentGoldUpsertWithWhereUniqueWithoutUserInput | TournamentGoldUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TournamentGoldCreateManyUserInputEnvelope
    set?: TournamentGoldWhereUniqueInput | TournamentGoldWhereUniqueInput[]
    disconnect?: TournamentGoldWhereUniqueInput | TournamentGoldWhereUniqueInput[]
    delete?: TournamentGoldWhereUniqueInput | TournamentGoldWhereUniqueInput[]
    connect?: TournamentGoldWhereUniqueInput | TournamentGoldWhereUniqueInput[]
    update?: TournamentGoldUpdateWithWhereUniqueWithoutUserInput | TournamentGoldUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TournamentGoldUpdateManyWithWhereWithoutUserInput | TournamentGoldUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TournamentGoldScalarWhereInput | TournamentGoldScalarWhereInput[]
  }

  export type InventoryItemUpdateManyWithoutUserNestedInput = {
    create?: XOR<InventoryItemCreateWithoutUserInput, InventoryItemUncheckedCreateWithoutUserInput> | InventoryItemCreateWithoutUserInput[] | InventoryItemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InventoryItemCreateOrConnectWithoutUserInput | InventoryItemCreateOrConnectWithoutUserInput[]
    upsert?: InventoryItemUpsertWithWhereUniqueWithoutUserInput | InventoryItemUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: InventoryItemCreateManyUserInputEnvelope
    set?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    disconnect?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    delete?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    connect?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    update?: InventoryItemUpdateWithWhereUniqueWithoutUserInput | InventoryItemUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: InventoryItemUpdateManyWithWhereWithoutUserInput | InventoryItemUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: InventoryItemScalarWhereInput | InventoryItemScalarWhereInput[]
  }

  export type FightUpdateManyWithoutFavoritedByNestedInput = {
    create?: XOR<FightCreateWithoutFavoritedByInput, FightUncheckedCreateWithoutFavoritedByInput> | FightCreateWithoutFavoritedByInput[] | FightUncheckedCreateWithoutFavoritedByInput[]
    connectOrCreate?: FightCreateOrConnectWithoutFavoritedByInput | FightCreateOrConnectWithoutFavoritedByInput[]
    upsert?: FightUpsertWithWhereUniqueWithoutFavoritedByInput | FightUpsertWithWhereUniqueWithoutFavoritedByInput[]
    set?: FightWhereUniqueInput | FightWhereUniqueInput[]
    disconnect?: FightWhereUniqueInput | FightWhereUniqueInput[]
    delete?: FightWhereUniqueInput | FightWhereUniqueInput[]
    connect?: FightWhereUniqueInput | FightWhereUniqueInput[]
    update?: FightUpdateWithWhereUniqueWithoutFavoritedByInput | FightUpdateWithWhereUniqueWithoutFavoritedByInput[]
    updateMany?: FightUpdateManyWithWhereWithoutFavoritedByInput | FightUpdateManyWithWhereWithoutFavoritedByInput[]
    deleteMany?: FightScalarWhereInput | FightScalarWhereInput[]
  }

  export type BruteUpdateManyWithoutFollowersNestedInput = {
    create?: XOR<BruteCreateWithoutFollowersInput, BruteUncheckedCreateWithoutFollowersInput> | BruteCreateWithoutFollowersInput[] | BruteUncheckedCreateWithoutFollowersInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutFollowersInput | BruteCreateOrConnectWithoutFollowersInput[]
    upsert?: BruteUpsertWithWhereUniqueWithoutFollowersInput | BruteUpsertWithWhereUniqueWithoutFollowersInput[]
    set?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    disconnect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    delete?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    update?: BruteUpdateWithWhereUniqueWithoutFollowersInput | BruteUpdateWithWhereUniqueWithoutFollowersInput[]
    updateMany?: BruteUpdateManyWithWhereWithoutFollowersInput | BruteUpdateManyWithWhereWithoutFollowersInput[]
    deleteMany?: BruteScalarWhereInput | BruteScalarWhereInput[]
  }

  export type BruteUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BruteCreateWithoutUserInput, BruteUncheckedCreateWithoutUserInput> | BruteCreateWithoutUserInput[] | BruteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutUserInput | BruteCreateOrConnectWithoutUserInput[]
    upsert?: BruteUpsertWithWhereUniqueWithoutUserInput | BruteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BruteCreateManyUserInputEnvelope
    set?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    disconnect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    delete?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    update?: BruteUpdateWithWhereUniqueWithoutUserInput | BruteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BruteUpdateManyWithWhereWithoutUserInput | BruteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BruteScalarWhereInput | BruteScalarWhereInput[]
  }

  export type AchievementUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AchievementCreateWithoutUserInput, AchievementUncheckedCreateWithoutUserInput> | AchievementCreateWithoutUserInput[] | AchievementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AchievementCreateOrConnectWithoutUserInput | AchievementCreateOrConnectWithoutUserInput[]
    upsert?: AchievementUpsertWithWhereUniqueWithoutUserInput | AchievementUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AchievementCreateManyUserInputEnvelope
    set?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
    disconnect?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
    delete?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
    connect?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
    update?: AchievementUpdateWithWhereUniqueWithoutUserInput | AchievementUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AchievementUpdateManyWithWhereWithoutUserInput | AchievementUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AchievementScalarWhereInput | AchievementScalarWhereInput[]
  }

  export type BruteReportUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<BruteReportCreateWithoutUsersInput, BruteReportUncheckedCreateWithoutUsersInput> | BruteReportCreateWithoutUsersInput[] | BruteReportUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: BruteReportCreateOrConnectWithoutUsersInput | BruteReportCreateOrConnectWithoutUsersInput[]
    upsert?: BruteReportUpsertWithWhereUniqueWithoutUsersInput | BruteReportUpsertWithWhereUniqueWithoutUsersInput[]
    set?: BruteReportWhereUniqueInput | BruteReportWhereUniqueInput[]
    disconnect?: BruteReportWhereUniqueInput | BruteReportWhereUniqueInput[]
    delete?: BruteReportWhereUniqueInput | BruteReportWhereUniqueInput[]
    connect?: BruteReportWhereUniqueInput | BruteReportWhereUniqueInput[]
    update?: BruteReportUpdateWithWhereUniqueWithoutUsersInput | BruteReportUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: BruteReportUpdateManyWithWhereWithoutUsersInput | BruteReportUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: BruteReportScalarWhereInput | BruteReportScalarWhereInput[]
  }

  export type TournamentGoldUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TournamentGoldCreateWithoutUserInput, TournamentGoldUncheckedCreateWithoutUserInput> | TournamentGoldCreateWithoutUserInput[] | TournamentGoldUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TournamentGoldCreateOrConnectWithoutUserInput | TournamentGoldCreateOrConnectWithoutUserInput[]
    upsert?: TournamentGoldUpsertWithWhereUniqueWithoutUserInput | TournamentGoldUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TournamentGoldCreateManyUserInputEnvelope
    set?: TournamentGoldWhereUniqueInput | TournamentGoldWhereUniqueInput[]
    disconnect?: TournamentGoldWhereUniqueInput | TournamentGoldWhereUniqueInput[]
    delete?: TournamentGoldWhereUniqueInput | TournamentGoldWhereUniqueInput[]
    connect?: TournamentGoldWhereUniqueInput | TournamentGoldWhereUniqueInput[]
    update?: TournamentGoldUpdateWithWhereUniqueWithoutUserInput | TournamentGoldUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TournamentGoldUpdateManyWithWhereWithoutUserInput | TournamentGoldUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TournamentGoldScalarWhereInput | TournamentGoldScalarWhereInput[]
  }

  export type InventoryItemUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<InventoryItemCreateWithoutUserInput, InventoryItemUncheckedCreateWithoutUserInput> | InventoryItemCreateWithoutUserInput[] | InventoryItemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InventoryItemCreateOrConnectWithoutUserInput | InventoryItemCreateOrConnectWithoutUserInput[]
    upsert?: InventoryItemUpsertWithWhereUniqueWithoutUserInput | InventoryItemUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: InventoryItemCreateManyUserInputEnvelope
    set?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    disconnect?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    delete?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    connect?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    update?: InventoryItemUpdateWithWhereUniqueWithoutUserInput | InventoryItemUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: InventoryItemUpdateManyWithWhereWithoutUserInput | InventoryItemUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: InventoryItemScalarWhereInput | InventoryItemScalarWhereInput[]
  }

  export type FightUncheckedUpdateManyWithoutFavoritedByNestedInput = {
    create?: XOR<FightCreateWithoutFavoritedByInput, FightUncheckedCreateWithoutFavoritedByInput> | FightCreateWithoutFavoritedByInput[] | FightUncheckedCreateWithoutFavoritedByInput[]
    connectOrCreate?: FightCreateOrConnectWithoutFavoritedByInput | FightCreateOrConnectWithoutFavoritedByInput[]
    upsert?: FightUpsertWithWhereUniqueWithoutFavoritedByInput | FightUpsertWithWhereUniqueWithoutFavoritedByInput[]
    set?: FightWhereUniqueInput | FightWhereUniqueInput[]
    disconnect?: FightWhereUniqueInput | FightWhereUniqueInput[]
    delete?: FightWhereUniqueInput | FightWhereUniqueInput[]
    connect?: FightWhereUniqueInput | FightWhereUniqueInput[]
    update?: FightUpdateWithWhereUniqueWithoutFavoritedByInput | FightUpdateWithWhereUniqueWithoutFavoritedByInput[]
    updateMany?: FightUpdateManyWithWhereWithoutFavoritedByInput | FightUpdateManyWithWhereWithoutFavoritedByInput[]
    deleteMany?: FightScalarWhereInput | FightScalarWhereInput[]
  }

  export type BruteUncheckedUpdateManyWithoutFollowersNestedInput = {
    create?: XOR<BruteCreateWithoutFollowersInput, BruteUncheckedCreateWithoutFollowersInput> | BruteCreateWithoutFollowersInput[] | BruteUncheckedCreateWithoutFollowersInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutFollowersInput | BruteCreateOrConnectWithoutFollowersInput[]
    upsert?: BruteUpsertWithWhereUniqueWithoutFollowersInput | BruteUpsertWithWhereUniqueWithoutFollowersInput[]
    set?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    disconnect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    delete?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    update?: BruteUpdateWithWhereUniqueWithoutFollowersInput | BruteUpdateWithWhereUniqueWithoutFollowersInput[]
    updateMany?: BruteUpdateManyWithWhereWithoutFollowersInput | BruteUpdateManyWithWhereWithoutFollowersInput[]
    deleteMany?: BruteScalarWhereInput | BruteScalarWhereInput[]
  }

  export type BruteCreatedestinyPathInput = {
    set: $Enums.DestinyChoiceSide[]
  }

  export type BruteCreatepreviousDestinyPathInput = {
    set: $Enums.DestinyChoiceSide[]
  }

  export type BruteCreateweaponsInput = {
    set: $Enums.WeaponName[]
  }

  export type BruteCreateskillsInput = {
    set: $Enums.SkillName[]
  }

  export type BruteCreatepetsInput = {
    set: $Enums.PetName[]
  }

  export type BruteCreateascendedWeaponsInput = {
    set: $Enums.WeaponName[]
  }

  export type BruteCreateascendedSkillsInput = {
    set: $Enums.SkillName[]
  }

  export type BruteCreateascendedPetsInput = {
    set: $Enums.PetName[]
  }

  export type UserCreateNestedOneWithoutBrutesInput = {
    create?: XOR<UserCreateWithoutBrutesInput, UserUncheckedCreateWithoutBrutesInput>
    connectOrCreate?: UserCreateOrConnectWithoutBrutesInput
    connect?: UserWhereUniqueInput
  }

  export type BruteCreateNestedOneWithoutPupilsInput = {
    create?: XOR<BruteCreateWithoutPupilsInput, BruteUncheckedCreateWithoutPupilsInput>
    connectOrCreate?: BruteCreateOrConnectWithoutPupilsInput
    connect?: BruteWhereUniqueInput
  }

  export type BruteCreateNestedManyWithoutMasterInput = {
    create?: XOR<BruteCreateWithoutMasterInput, BruteUncheckedCreateWithoutMasterInput> | BruteCreateWithoutMasterInput[] | BruteUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutMasterInput | BruteCreateOrConnectWithoutMasterInput[]
    createMany?: BruteCreateManyMasterInputEnvelope
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
  }

  export type ClanCreateNestedOneWithoutBrutesInput = {
    create?: XOR<ClanCreateWithoutBrutesInput, ClanUncheckedCreateWithoutBrutesInput>
    connectOrCreate?: ClanCreateOrConnectWithoutBrutesInput
    connect?: ClanWhereUniqueInput
  }

  export type FightCreateNestedManyWithoutBrute1Input = {
    create?: XOR<FightCreateWithoutBrute1Input, FightUncheckedCreateWithoutBrute1Input> | FightCreateWithoutBrute1Input[] | FightUncheckedCreateWithoutBrute1Input[]
    connectOrCreate?: FightCreateOrConnectWithoutBrute1Input | FightCreateOrConnectWithoutBrute1Input[]
    createMany?: FightCreateManyBrute1InputEnvelope
    connect?: FightWhereUniqueInput | FightWhereUniqueInput[]
  }

  export type FightCreateNestedManyWithoutBrute2Input = {
    create?: XOR<FightCreateWithoutBrute2Input, FightUncheckedCreateWithoutBrute2Input> | FightCreateWithoutBrute2Input[] | FightUncheckedCreateWithoutBrute2Input[]
    connectOrCreate?: FightCreateOrConnectWithoutBrute2Input | FightCreateOrConnectWithoutBrute2Input[]
    createMany?: FightCreateManyBrute2InputEnvelope
    connect?: FightWhereUniqueInput | FightWhereUniqueInput[]
  }

  export type LogCreateNestedManyWithoutCurrentBruteInput = {
    create?: XOR<LogCreateWithoutCurrentBruteInput, LogUncheckedCreateWithoutCurrentBruteInput> | LogCreateWithoutCurrentBruteInput[] | LogUncheckedCreateWithoutCurrentBruteInput[]
    connectOrCreate?: LogCreateOrConnectWithoutCurrentBruteInput | LogCreateOrConnectWithoutCurrentBruteInput[]
    createMany?: LogCreateManyCurrentBruteInputEnvelope
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
  }

  export type DestinyChoiceCreateNestedManyWithoutBruteInput = {
    create?: XOR<DestinyChoiceCreateWithoutBruteInput, DestinyChoiceUncheckedCreateWithoutBruteInput> | DestinyChoiceCreateWithoutBruteInput[] | DestinyChoiceUncheckedCreateWithoutBruteInput[]
    connectOrCreate?: DestinyChoiceCreateOrConnectWithoutBruteInput | DestinyChoiceCreateOrConnectWithoutBruteInput[]
    createMany?: DestinyChoiceCreateManyBruteInputEnvelope
    connect?: DestinyChoiceWhereUniqueInput | DestinyChoiceWhereUniqueInput[]
  }

  export type TournamentCreateNestedManyWithoutParticipantsInput = {
    create?: XOR<TournamentCreateWithoutParticipantsInput, TournamentUncheckedCreateWithoutParticipantsInput> | TournamentCreateWithoutParticipantsInput[] | TournamentUncheckedCreateWithoutParticipantsInput[]
    connectOrCreate?: TournamentCreateOrConnectWithoutParticipantsInput | TournamentCreateOrConnectWithoutParticipantsInput[]
    connect?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
  }

  export type BruteCreateNestedManyWithoutOpponentOfInput = {
    create?: XOR<BruteCreateWithoutOpponentOfInput, BruteUncheckedCreateWithoutOpponentOfInput> | BruteCreateWithoutOpponentOfInput[] | BruteUncheckedCreateWithoutOpponentOfInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutOpponentOfInput | BruteCreateOrConnectWithoutOpponentOfInput[]
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
  }

  export type BruteCreateNestedManyWithoutOpponentsInput = {
    create?: XOR<BruteCreateWithoutOpponentsInput, BruteUncheckedCreateWithoutOpponentsInput> | BruteCreateWithoutOpponentsInput[] | BruteUncheckedCreateWithoutOpponentsInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutOpponentsInput | BruteCreateOrConnectWithoutOpponentsInput[]
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
  }

  export type AchievementCreateNestedManyWithoutBruteInput = {
    create?: XOR<AchievementCreateWithoutBruteInput, AchievementUncheckedCreateWithoutBruteInput> | AchievementCreateWithoutBruteInput[] | AchievementUncheckedCreateWithoutBruteInput[]
    connectOrCreate?: AchievementCreateOrConnectWithoutBruteInput | AchievementCreateOrConnectWithoutBruteInput[]
    createMany?: AchievementCreateManyBruteInputEnvelope
    connect?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
  }

  export type BruteReportCreateNestedManyWithoutBruteInput = {
    create?: XOR<BruteReportCreateWithoutBruteInput, BruteReportUncheckedCreateWithoutBruteInput> | BruteReportCreateWithoutBruteInput[] | BruteReportUncheckedCreateWithoutBruteInput[]
    connectOrCreate?: BruteReportCreateOrConnectWithoutBruteInput | BruteReportCreateOrConnectWithoutBruteInput[]
    createMany?: BruteReportCreateManyBruteInputEnvelope
    connect?: BruteReportWhereUniqueInput | BruteReportWhereUniqueInput[]
  }

  export type TitleCreateNestedManyWithoutBrutesInput = {
    create?: XOR<TitleCreateWithoutBrutesInput, TitleUncheckedCreateWithoutBrutesInput> | TitleCreateWithoutBrutesInput[] | TitleUncheckedCreateWithoutBrutesInput[]
    connectOrCreate?: TitleCreateOrConnectWithoutBrutesInput | TitleCreateOrConnectWithoutBrutesInput[]
    connect?: TitleWhereUniqueInput | TitleWhereUniqueInput[]
  }

  export type ClanCreateNestedOneWithoutMasterInput = {
    create?: XOR<ClanCreateWithoutMasterInput, ClanUncheckedCreateWithoutMasterInput>
    connectOrCreate?: ClanCreateOrConnectWithoutMasterInput
    connect?: ClanWhereUniqueInput
  }

  export type ClanPostCreateNestedManyWithoutAuthorInput = {
    create?: XOR<ClanPostCreateWithoutAuthorInput, ClanPostUncheckedCreateWithoutAuthorInput> | ClanPostCreateWithoutAuthorInput[] | ClanPostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ClanPostCreateOrConnectWithoutAuthorInput | ClanPostCreateOrConnectWithoutAuthorInput[]
    createMany?: ClanPostCreateManyAuthorInputEnvelope
    connect?: ClanPostWhereUniqueInput | ClanPostWhereUniqueInput[]
  }

  export type ClanCreateNestedOneWithoutJoinRequestsInput = {
    create?: XOR<ClanCreateWithoutJoinRequestsInput, ClanUncheckedCreateWithoutJoinRequestsInput>
    connectOrCreate?: ClanCreateOrConnectWithoutJoinRequestsInput
    connect?: ClanWhereUniqueInput
  }

  export type ClanThreadCreateNestedManyWithoutCreatorInput = {
    create?: XOR<ClanThreadCreateWithoutCreatorInput, ClanThreadUncheckedCreateWithoutCreatorInput> | ClanThreadCreateWithoutCreatorInput[] | ClanThreadUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ClanThreadCreateOrConnectWithoutCreatorInput | ClanThreadCreateOrConnectWithoutCreatorInput[]
    createMany?: ClanThreadCreateManyCreatorInputEnvelope
    connect?: ClanThreadWhereUniqueInput | ClanThreadWhereUniqueInput[]
  }

  export type InventoryItemCreateNestedManyWithoutBruteInput = {
    create?: XOR<InventoryItemCreateWithoutBruteInput, InventoryItemUncheckedCreateWithoutBruteInput> | InventoryItemCreateWithoutBruteInput[] | InventoryItemUncheckedCreateWithoutBruteInput[]
    connectOrCreate?: InventoryItemCreateOrConnectWithoutBruteInput | InventoryItemCreateOrConnectWithoutBruteInput[]
    createMany?: InventoryItemCreateManyBruteInputEnvelope
    connect?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
  }

  export type TournamentAchievementCreateNestedManyWithoutBruteInput = {
    create?: XOR<TournamentAchievementCreateWithoutBruteInput, TournamentAchievementUncheckedCreateWithoutBruteInput> | TournamentAchievementCreateWithoutBruteInput[] | TournamentAchievementUncheckedCreateWithoutBruteInput[]
    connectOrCreate?: TournamentAchievementCreateOrConnectWithoutBruteInput | TournamentAchievementCreateOrConnectWithoutBruteInput[]
    createMany?: TournamentAchievementCreateManyBruteInputEnvelope
    connect?: TournamentAchievementWhereUniqueInput | TournamentAchievementWhereUniqueInput[]
  }

  export type TournamentXpCreateNestedManyWithoutBruteInput = {
    create?: XOR<TournamentXpCreateWithoutBruteInput, TournamentXpUncheckedCreateWithoutBruteInput> | TournamentXpCreateWithoutBruteInput[] | TournamentXpUncheckedCreateWithoutBruteInput[]
    connectOrCreate?: TournamentXpCreateOrConnectWithoutBruteInput | TournamentXpCreateOrConnectWithoutBruteInput[]
    createMany?: TournamentXpCreateManyBruteInputEnvelope
    connect?: TournamentXpWhereUniqueInput | TournamentXpWhereUniqueInput[]
  }

  export type BruteStartingStatsCreateNestedOneWithoutBruteInput = {
    create?: XOR<BruteStartingStatsCreateWithoutBruteInput, BruteStartingStatsUncheckedCreateWithoutBruteInput>
    connectOrCreate?: BruteStartingStatsCreateOrConnectWithoutBruteInput
    connect?: BruteStartingStatsWhereUniqueInput
  }

  export type BossDamageCreateNestedManyWithoutBruteInput = {
    create?: XOR<BossDamageCreateWithoutBruteInput, BossDamageUncheckedCreateWithoutBruteInput> | BossDamageCreateWithoutBruteInput[] | BossDamageUncheckedCreateWithoutBruteInput[]
    connectOrCreate?: BossDamageCreateOrConnectWithoutBruteInput | BossDamageCreateOrConnectWithoutBruteInput[]
    createMany?: BossDamageCreateManyBruteInputEnvelope
    connect?: BossDamageWhereUniqueInput | BossDamageWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutFollowingInput = {
    create?: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput> | UserCreateWithoutFollowingInput[] | UserUncheckedCreateWithoutFollowingInput[]
    connectOrCreate?: UserCreateOrConnectWithoutFollowingInput | UserCreateOrConnectWithoutFollowingInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ClanWarFightersCreateNestedManyWithoutAttackersInput = {
    create?: XOR<ClanWarFightersCreateWithoutAttackersInput, ClanWarFightersUncheckedCreateWithoutAttackersInput> | ClanWarFightersCreateWithoutAttackersInput[] | ClanWarFightersUncheckedCreateWithoutAttackersInput[]
    connectOrCreate?: ClanWarFightersCreateOrConnectWithoutAttackersInput | ClanWarFightersCreateOrConnectWithoutAttackersInput[]
    connect?: ClanWarFightersWhereUniqueInput | ClanWarFightersWhereUniqueInput[]
  }

  export type ClanWarFightersCreateNestedManyWithoutDefendersInput = {
    create?: XOR<ClanWarFightersCreateWithoutDefendersInput, ClanWarFightersUncheckedCreateWithoutDefendersInput> | ClanWarFightersCreateWithoutDefendersInput[] | ClanWarFightersUncheckedCreateWithoutDefendersInput[]
    connectOrCreate?: ClanWarFightersCreateOrConnectWithoutDefendersInput | ClanWarFightersCreateOrConnectWithoutDefendersInput[]
    connect?: ClanWarFightersWhereUniqueInput | ClanWarFightersWhereUniqueInput[]
  }

  export type EventCreateNestedOneWithoutBrutesInput = {
    create?: XOR<EventCreateWithoutBrutesInput, EventUncheckedCreateWithoutBrutesInput>
    connectOrCreate?: EventCreateOrConnectWithoutBrutesInput
    connect?: EventWhereUniqueInput
  }

  export type EventCreateNestedManyWithoutWinnerInput = {
    create?: XOR<EventCreateWithoutWinnerInput, EventUncheckedCreateWithoutWinnerInput> | EventCreateWithoutWinnerInput[] | EventUncheckedCreateWithoutWinnerInput[]
    connectOrCreate?: EventCreateOrConnectWithoutWinnerInput | EventCreateOrConnectWithoutWinnerInput[]
    createMany?: EventCreateManyWinnerInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type BruteUncheckedCreateNestedManyWithoutMasterInput = {
    create?: XOR<BruteCreateWithoutMasterInput, BruteUncheckedCreateWithoutMasterInput> | BruteCreateWithoutMasterInput[] | BruteUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutMasterInput | BruteCreateOrConnectWithoutMasterInput[]
    createMany?: BruteCreateManyMasterInputEnvelope
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
  }

  export type FightUncheckedCreateNestedManyWithoutBrute1Input = {
    create?: XOR<FightCreateWithoutBrute1Input, FightUncheckedCreateWithoutBrute1Input> | FightCreateWithoutBrute1Input[] | FightUncheckedCreateWithoutBrute1Input[]
    connectOrCreate?: FightCreateOrConnectWithoutBrute1Input | FightCreateOrConnectWithoutBrute1Input[]
    createMany?: FightCreateManyBrute1InputEnvelope
    connect?: FightWhereUniqueInput | FightWhereUniqueInput[]
  }

  export type FightUncheckedCreateNestedManyWithoutBrute2Input = {
    create?: XOR<FightCreateWithoutBrute2Input, FightUncheckedCreateWithoutBrute2Input> | FightCreateWithoutBrute2Input[] | FightUncheckedCreateWithoutBrute2Input[]
    connectOrCreate?: FightCreateOrConnectWithoutBrute2Input | FightCreateOrConnectWithoutBrute2Input[]
    createMany?: FightCreateManyBrute2InputEnvelope
    connect?: FightWhereUniqueInput | FightWhereUniqueInput[]
  }

  export type LogUncheckedCreateNestedManyWithoutCurrentBruteInput = {
    create?: XOR<LogCreateWithoutCurrentBruteInput, LogUncheckedCreateWithoutCurrentBruteInput> | LogCreateWithoutCurrentBruteInput[] | LogUncheckedCreateWithoutCurrentBruteInput[]
    connectOrCreate?: LogCreateOrConnectWithoutCurrentBruteInput | LogCreateOrConnectWithoutCurrentBruteInput[]
    createMany?: LogCreateManyCurrentBruteInputEnvelope
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
  }

  export type DestinyChoiceUncheckedCreateNestedManyWithoutBruteInput = {
    create?: XOR<DestinyChoiceCreateWithoutBruteInput, DestinyChoiceUncheckedCreateWithoutBruteInput> | DestinyChoiceCreateWithoutBruteInput[] | DestinyChoiceUncheckedCreateWithoutBruteInput[]
    connectOrCreate?: DestinyChoiceCreateOrConnectWithoutBruteInput | DestinyChoiceCreateOrConnectWithoutBruteInput[]
    createMany?: DestinyChoiceCreateManyBruteInputEnvelope
    connect?: DestinyChoiceWhereUniqueInput | DestinyChoiceWhereUniqueInput[]
  }

  export type TournamentUncheckedCreateNestedManyWithoutParticipantsInput = {
    create?: XOR<TournamentCreateWithoutParticipantsInput, TournamentUncheckedCreateWithoutParticipantsInput> | TournamentCreateWithoutParticipantsInput[] | TournamentUncheckedCreateWithoutParticipantsInput[]
    connectOrCreate?: TournamentCreateOrConnectWithoutParticipantsInput | TournamentCreateOrConnectWithoutParticipantsInput[]
    connect?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
  }

  export type BruteUncheckedCreateNestedManyWithoutOpponentOfInput = {
    create?: XOR<BruteCreateWithoutOpponentOfInput, BruteUncheckedCreateWithoutOpponentOfInput> | BruteCreateWithoutOpponentOfInput[] | BruteUncheckedCreateWithoutOpponentOfInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutOpponentOfInput | BruteCreateOrConnectWithoutOpponentOfInput[]
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
  }

  export type BruteUncheckedCreateNestedManyWithoutOpponentsInput = {
    create?: XOR<BruteCreateWithoutOpponentsInput, BruteUncheckedCreateWithoutOpponentsInput> | BruteCreateWithoutOpponentsInput[] | BruteUncheckedCreateWithoutOpponentsInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutOpponentsInput | BruteCreateOrConnectWithoutOpponentsInput[]
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
  }

  export type AchievementUncheckedCreateNestedManyWithoutBruteInput = {
    create?: XOR<AchievementCreateWithoutBruteInput, AchievementUncheckedCreateWithoutBruteInput> | AchievementCreateWithoutBruteInput[] | AchievementUncheckedCreateWithoutBruteInput[]
    connectOrCreate?: AchievementCreateOrConnectWithoutBruteInput | AchievementCreateOrConnectWithoutBruteInput[]
    createMany?: AchievementCreateManyBruteInputEnvelope
    connect?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
  }

  export type BruteReportUncheckedCreateNestedManyWithoutBruteInput = {
    create?: XOR<BruteReportCreateWithoutBruteInput, BruteReportUncheckedCreateWithoutBruteInput> | BruteReportCreateWithoutBruteInput[] | BruteReportUncheckedCreateWithoutBruteInput[]
    connectOrCreate?: BruteReportCreateOrConnectWithoutBruteInput | BruteReportCreateOrConnectWithoutBruteInput[]
    createMany?: BruteReportCreateManyBruteInputEnvelope
    connect?: BruteReportWhereUniqueInput | BruteReportWhereUniqueInput[]
  }

  export type TitleUncheckedCreateNestedManyWithoutBrutesInput = {
    create?: XOR<TitleCreateWithoutBrutesInput, TitleUncheckedCreateWithoutBrutesInput> | TitleCreateWithoutBrutesInput[] | TitleUncheckedCreateWithoutBrutesInput[]
    connectOrCreate?: TitleCreateOrConnectWithoutBrutesInput | TitleCreateOrConnectWithoutBrutesInput[]
    connect?: TitleWhereUniqueInput | TitleWhereUniqueInput[]
  }

  export type ClanUncheckedCreateNestedOneWithoutMasterInput = {
    create?: XOR<ClanCreateWithoutMasterInput, ClanUncheckedCreateWithoutMasterInput>
    connectOrCreate?: ClanCreateOrConnectWithoutMasterInput
    connect?: ClanWhereUniqueInput
  }

  export type ClanPostUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<ClanPostCreateWithoutAuthorInput, ClanPostUncheckedCreateWithoutAuthorInput> | ClanPostCreateWithoutAuthorInput[] | ClanPostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ClanPostCreateOrConnectWithoutAuthorInput | ClanPostCreateOrConnectWithoutAuthorInput[]
    createMany?: ClanPostCreateManyAuthorInputEnvelope
    connect?: ClanPostWhereUniqueInput | ClanPostWhereUniqueInput[]
  }

  export type ClanThreadUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<ClanThreadCreateWithoutCreatorInput, ClanThreadUncheckedCreateWithoutCreatorInput> | ClanThreadCreateWithoutCreatorInput[] | ClanThreadUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ClanThreadCreateOrConnectWithoutCreatorInput | ClanThreadCreateOrConnectWithoutCreatorInput[]
    createMany?: ClanThreadCreateManyCreatorInputEnvelope
    connect?: ClanThreadWhereUniqueInput | ClanThreadWhereUniqueInput[]
  }

  export type InventoryItemUncheckedCreateNestedManyWithoutBruteInput = {
    create?: XOR<InventoryItemCreateWithoutBruteInput, InventoryItemUncheckedCreateWithoutBruteInput> | InventoryItemCreateWithoutBruteInput[] | InventoryItemUncheckedCreateWithoutBruteInput[]
    connectOrCreate?: InventoryItemCreateOrConnectWithoutBruteInput | InventoryItemCreateOrConnectWithoutBruteInput[]
    createMany?: InventoryItemCreateManyBruteInputEnvelope
    connect?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
  }

  export type TournamentAchievementUncheckedCreateNestedManyWithoutBruteInput = {
    create?: XOR<TournamentAchievementCreateWithoutBruteInput, TournamentAchievementUncheckedCreateWithoutBruteInput> | TournamentAchievementCreateWithoutBruteInput[] | TournamentAchievementUncheckedCreateWithoutBruteInput[]
    connectOrCreate?: TournamentAchievementCreateOrConnectWithoutBruteInput | TournamentAchievementCreateOrConnectWithoutBruteInput[]
    createMany?: TournamentAchievementCreateManyBruteInputEnvelope
    connect?: TournamentAchievementWhereUniqueInput | TournamentAchievementWhereUniqueInput[]
  }

  export type TournamentXpUncheckedCreateNestedManyWithoutBruteInput = {
    create?: XOR<TournamentXpCreateWithoutBruteInput, TournamentXpUncheckedCreateWithoutBruteInput> | TournamentXpCreateWithoutBruteInput[] | TournamentXpUncheckedCreateWithoutBruteInput[]
    connectOrCreate?: TournamentXpCreateOrConnectWithoutBruteInput | TournamentXpCreateOrConnectWithoutBruteInput[]
    createMany?: TournamentXpCreateManyBruteInputEnvelope
    connect?: TournamentXpWhereUniqueInput | TournamentXpWhereUniqueInput[]
  }

  export type BruteStartingStatsUncheckedCreateNestedOneWithoutBruteInput = {
    create?: XOR<BruteStartingStatsCreateWithoutBruteInput, BruteStartingStatsUncheckedCreateWithoutBruteInput>
    connectOrCreate?: BruteStartingStatsCreateOrConnectWithoutBruteInput
    connect?: BruteStartingStatsWhereUniqueInput
  }

  export type BossDamageUncheckedCreateNestedManyWithoutBruteInput = {
    create?: XOR<BossDamageCreateWithoutBruteInput, BossDamageUncheckedCreateWithoutBruteInput> | BossDamageCreateWithoutBruteInput[] | BossDamageUncheckedCreateWithoutBruteInput[]
    connectOrCreate?: BossDamageCreateOrConnectWithoutBruteInput | BossDamageCreateOrConnectWithoutBruteInput[]
    createMany?: BossDamageCreateManyBruteInputEnvelope
    connect?: BossDamageWhereUniqueInput | BossDamageWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutFollowingInput = {
    create?: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput> | UserCreateWithoutFollowingInput[] | UserUncheckedCreateWithoutFollowingInput[]
    connectOrCreate?: UserCreateOrConnectWithoutFollowingInput | UserCreateOrConnectWithoutFollowingInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ClanWarFightersUncheckedCreateNestedManyWithoutAttackersInput = {
    create?: XOR<ClanWarFightersCreateWithoutAttackersInput, ClanWarFightersUncheckedCreateWithoutAttackersInput> | ClanWarFightersCreateWithoutAttackersInput[] | ClanWarFightersUncheckedCreateWithoutAttackersInput[]
    connectOrCreate?: ClanWarFightersCreateOrConnectWithoutAttackersInput | ClanWarFightersCreateOrConnectWithoutAttackersInput[]
    connect?: ClanWarFightersWhereUniqueInput | ClanWarFightersWhereUniqueInput[]
  }

  export type ClanWarFightersUncheckedCreateNestedManyWithoutDefendersInput = {
    create?: XOR<ClanWarFightersCreateWithoutDefendersInput, ClanWarFightersUncheckedCreateWithoutDefendersInput> | ClanWarFightersCreateWithoutDefendersInput[] | ClanWarFightersUncheckedCreateWithoutDefendersInput[]
    connectOrCreate?: ClanWarFightersCreateOrConnectWithoutDefendersInput | ClanWarFightersCreateOrConnectWithoutDefendersInput[]
    connect?: ClanWarFightersWhereUniqueInput | ClanWarFightersWhereUniqueInput[]
  }

  export type EventUncheckedCreateNestedManyWithoutWinnerInput = {
    create?: XOR<EventCreateWithoutWinnerInput, EventUncheckedCreateWithoutWinnerInput> | EventCreateWithoutWinnerInput[] | EventUncheckedCreateWithoutWinnerInput[]
    connectOrCreate?: EventCreateOrConnectWithoutWinnerInput | EventCreateOrConnectWithoutWinnerInput[]
    createMany?: EventCreateManyWinnerInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BruteUpdatedestinyPathInput = {
    set?: $Enums.DestinyChoiceSide[]
    push?: $Enums.DestinyChoiceSide | $Enums.DestinyChoiceSide[]
  }

  export type BruteUpdatepreviousDestinyPathInput = {
    set?: $Enums.DestinyChoiceSide[]
    push?: $Enums.DestinyChoiceSide | $Enums.DestinyChoiceSide[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumGenderFieldUpdateOperationsInput = {
    set?: $Enums.Gender
  }

  export type BruteUpdateweaponsInput = {
    set?: $Enums.WeaponName[]
    push?: $Enums.WeaponName | $Enums.WeaponName[]
  }

  export type BruteUpdateskillsInput = {
    set?: $Enums.SkillName[]
    push?: $Enums.SkillName | $Enums.SkillName[]
  }

  export type BruteUpdatepetsInput = {
    set?: $Enums.PetName[]
    push?: $Enums.PetName | $Enums.PetName[]
  }

  export type BruteUpdateascendedWeaponsInput = {
    set?: $Enums.WeaponName[]
    push?: $Enums.WeaponName | $Enums.WeaponName[]
  }

  export type BruteUpdateascendedSkillsInput = {
    set?: $Enums.SkillName[]
    push?: $Enums.SkillName | $Enums.SkillName[]
  }

  export type BruteUpdateascendedPetsInput = {
    set?: $Enums.PetName[]
    push?: $Enums.PetName | $Enums.PetName[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneWithoutBrutesNestedInput = {
    create?: XOR<UserCreateWithoutBrutesInput, UserUncheckedCreateWithoutBrutesInput>
    connectOrCreate?: UserCreateOrConnectWithoutBrutesInput
    upsert?: UserUpsertWithoutBrutesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBrutesInput, UserUpdateWithoutBrutesInput>, UserUncheckedUpdateWithoutBrutesInput>
  }

  export type BruteUpdateOneWithoutPupilsNestedInput = {
    create?: XOR<BruteCreateWithoutPupilsInput, BruteUncheckedCreateWithoutPupilsInput>
    connectOrCreate?: BruteCreateOrConnectWithoutPupilsInput
    upsert?: BruteUpsertWithoutPupilsInput
    disconnect?: BruteWhereInput | boolean
    delete?: BruteWhereInput | boolean
    connect?: BruteWhereUniqueInput
    update?: XOR<XOR<BruteUpdateToOneWithWhereWithoutPupilsInput, BruteUpdateWithoutPupilsInput>, BruteUncheckedUpdateWithoutPupilsInput>
  }

  export type BruteUpdateManyWithoutMasterNestedInput = {
    create?: XOR<BruteCreateWithoutMasterInput, BruteUncheckedCreateWithoutMasterInput> | BruteCreateWithoutMasterInput[] | BruteUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutMasterInput | BruteCreateOrConnectWithoutMasterInput[]
    upsert?: BruteUpsertWithWhereUniqueWithoutMasterInput | BruteUpsertWithWhereUniqueWithoutMasterInput[]
    createMany?: BruteCreateManyMasterInputEnvelope
    set?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    disconnect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    delete?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    update?: BruteUpdateWithWhereUniqueWithoutMasterInput | BruteUpdateWithWhereUniqueWithoutMasterInput[]
    updateMany?: BruteUpdateManyWithWhereWithoutMasterInput | BruteUpdateManyWithWhereWithoutMasterInput[]
    deleteMany?: BruteScalarWhereInput | BruteScalarWhereInput[]
  }

  export type ClanUpdateOneWithoutBrutesNestedInput = {
    create?: XOR<ClanCreateWithoutBrutesInput, ClanUncheckedCreateWithoutBrutesInput>
    connectOrCreate?: ClanCreateOrConnectWithoutBrutesInput
    upsert?: ClanUpsertWithoutBrutesInput
    disconnect?: ClanWhereInput | boolean
    delete?: ClanWhereInput | boolean
    connect?: ClanWhereUniqueInput
    update?: XOR<XOR<ClanUpdateToOneWithWhereWithoutBrutesInput, ClanUpdateWithoutBrutesInput>, ClanUncheckedUpdateWithoutBrutesInput>
  }

  export type FightUpdateManyWithoutBrute1NestedInput = {
    create?: XOR<FightCreateWithoutBrute1Input, FightUncheckedCreateWithoutBrute1Input> | FightCreateWithoutBrute1Input[] | FightUncheckedCreateWithoutBrute1Input[]
    connectOrCreate?: FightCreateOrConnectWithoutBrute1Input | FightCreateOrConnectWithoutBrute1Input[]
    upsert?: FightUpsertWithWhereUniqueWithoutBrute1Input | FightUpsertWithWhereUniqueWithoutBrute1Input[]
    createMany?: FightCreateManyBrute1InputEnvelope
    set?: FightWhereUniqueInput | FightWhereUniqueInput[]
    disconnect?: FightWhereUniqueInput | FightWhereUniqueInput[]
    delete?: FightWhereUniqueInput | FightWhereUniqueInput[]
    connect?: FightWhereUniqueInput | FightWhereUniqueInput[]
    update?: FightUpdateWithWhereUniqueWithoutBrute1Input | FightUpdateWithWhereUniqueWithoutBrute1Input[]
    updateMany?: FightUpdateManyWithWhereWithoutBrute1Input | FightUpdateManyWithWhereWithoutBrute1Input[]
    deleteMany?: FightScalarWhereInput | FightScalarWhereInput[]
  }

  export type FightUpdateManyWithoutBrute2NestedInput = {
    create?: XOR<FightCreateWithoutBrute2Input, FightUncheckedCreateWithoutBrute2Input> | FightCreateWithoutBrute2Input[] | FightUncheckedCreateWithoutBrute2Input[]
    connectOrCreate?: FightCreateOrConnectWithoutBrute2Input | FightCreateOrConnectWithoutBrute2Input[]
    upsert?: FightUpsertWithWhereUniqueWithoutBrute2Input | FightUpsertWithWhereUniqueWithoutBrute2Input[]
    createMany?: FightCreateManyBrute2InputEnvelope
    set?: FightWhereUniqueInput | FightWhereUniqueInput[]
    disconnect?: FightWhereUniqueInput | FightWhereUniqueInput[]
    delete?: FightWhereUniqueInput | FightWhereUniqueInput[]
    connect?: FightWhereUniqueInput | FightWhereUniqueInput[]
    update?: FightUpdateWithWhereUniqueWithoutBrute2Input | FightUpdateWithWhereUniqueWithoutBrute2Input[]
    updateMany?: FightUpdateManyWithWhereWithoutBrute2Input | FightUpdateManyWithWhereWithoutBrute2Input[]
    deleteMany?: FightScalarWhereInput | FightScalarWhereInput[]
  }

  export type LogUpdateManyWithoutCurrentBruteNestedInput = {
    create?: XOR<LogCreateWithoutCurrentBruteInput, LogUncheckedCreateWithoutCurrentBruteInput> | LogCreateWithoutCurrentBruteInput[] | LogUncheckedCreateWithoutCurrentBruteInput[]
    connectOrCreate?: LogCreateOrConnectWithoutCurrentBruteInput | LogCreateOrConnectWithoutCurrentBruteInput[]
    upsert?: LogUpsertWithWhereUniqueWithoutCurrentBruteInput | LogUpsertWithWhereUniqueWithoutCurrentBruteInput[]
    createMany?: LogCreateManyCurrentBruteInputEnvelope
    set?: LogWhereUniqueInput | LogWhereUniqueInput[]
    disconnect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    delete?: LogWhereUniqueInput | LogWhereUniqueInput[]
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    update?: LogUpdateWithWhereUniqueWithoutCurrentBruteInput | LogUpdateWithWhereUniqueWithoutCurrentBruteInput[]
    updateMany?: LogUpdateManyWithWhereWithoutCurrentBruteInput | LogUpdateManyWithWhereWithoutCurrentBruteInput[]
    deleteMany?: LogScalarWhereInput | LogScalarWhereInput[]
  }

  export type DestinyChoiceUpdateManyWithoutBruteNestedInput = {
    create?: XOR<DestinyChoiceCreateWithoutBruteInput, DestinyChoiceUncheckedCreateWithoutBruteInput> | DestinyChoiceCreateWithoutBruteInput[] | DestinyChoiceUncheckedCreateWithoutBruteInput[]
    connectOrCreate?: DestinyChoiceCreateOrConnectWithoutBruteInput | DestinyChoiceCreateOrConnectWithoutBruteInput[]
    upsert?: DestinyChoiceUpsertWithWhereUniqueWithoutBruteInput | DestinyChoiceUpsertWithWhereUniqueWithoutBruteInput[]
    createMany?: DestinyChoiceCreateManyBruteInputEnvelope
    set?: DestinyChoiceWhereUniqueInput | DestinyChoiceWhereUniqueInput[]
    disconnect?: DestinyChoiceWhereUniqueInput | DestinyChoiceWhereUniqueInput[]
    delete?: DestinyChoiceWhereUniqueInput | DestinyChoiceWhereUniqueInput[]
    connect?: DestinyChoiceWhereUniqueInput | DestinyChoiceWhereUniqueInput[]
    update?: DestinyChoiceUpdateWithWhereUniqueWithoutBruteInput | DestinyChoiceUpdateWithWhereUniqueWithoutBruteInput[]
    updateMany?: DestinyChoiceUpdateManyWithWhereWithoutBruteInput | DestinyChoiceUpdateManyWithWhereWithoutBruteInput[]
    deleteMany?: DestinyChoiceScalarWhereInput | DestinyChoiceScalarWhereInput[]
  }

  export type TournamentUpdateManyWithoutParticipantsNestedInput = {
    create?: XOR<TournamentCreateWithoutParticipantsInput, TournamentUncheckedCreateWithoutParticipantsInput> | TournamentCreateWithoutParticipantsInput[] | TournamentUncheckedCreateWithoutParticipantsInput[]
    connectOrCreate?: TournamentCreateOrConnectWithoutParticipantsInput | TournamentCreateOrConnectWithoutParticipantsInput[]
    upsert?: TournamentUpsertWithWhereUniqueWithoutParticipantsInput | TournamentUpsertWithWhereUniqueWithoutParticipantsInput[]
    set?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    disconnect?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    delete?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    connect?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    update?: TournamentUpdateWithWhereUniqueWithoutParticipantsInput | TournamentUpdateWithWhereUniqueWithoutParticipantsInput[]
    updateMany?: TournamentUpdateManyWithWhereWithoutParticipantsInput | TournamentUpdateManyWithWhereWithoutParticipantsInput[]
    deleteMany?: TournamentScalarWhereInput | TournamentScalarWhereInput[]
  }

  export type BruteUpdateManyWithoutOpponentOfNestedInput = {
    create?: XOR<BruteCreateWithoutOpponentOfInput, BruteUncheckedCreateWithoutOpponentOfInput> | BruteCreateWithoutOpponentOfInput[] | BruteUncheckedCreateWithoutOpponentOfInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutOpponentOfInput | BruteCreateOrConnectWithoutOpponentOfInput[]
    upsert?: BruteUpsertWithWhereUniqueWithoutOpponentOfInput | BruteUpsertWithWhereUniqueWithoutOpponentOfInput[]
    set?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    disconnect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    delete?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    update?: BruteUpdateWithWhereUniqueWithoutOpponentOfInput | BruteUpdateWithWhereUniqueWithoutOpponentOfInput[]
    updateMany?: BruteUpdateManyWithWhereWithoutOpponentOfInput | BruteUpdateManyWithWhereWithoutOpponentOfInput[]
    deleteMany?: BruteScalarWhereInput | BruteScalarWhereInput[]
  }

  export type BruteUpdateManyWithoutOpponentsNestedInput = {
    create?: XOR<BruteCreateWithoutOpponentsInput, BruteUncheckedCreateWithoutOpponentsInput> | BruteCreateWithoutOpponentsInput[] | BruteUncheckedCreateWithoutOpponentsInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutOpponentsInput | BruteCreateOrConnectWithoutOpponentsInput[]
    upsert?: BruteUpsertWithWhereUniqueWithoutOpponentsInput | BruteUpsertWithWhereUniqueWithoutOpponentsInput[]
    set?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    disconnect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    delete?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    update?: BruteUpdateWithWhereUniqueWithoutOpponentsInput | BruteUpdateWithWhereUniqueWithoutOpponentsInput[]
    updateMany?: BruteUpdateManyWithWhereWithoutOpponentsInput | BruteUpdateManyWithWhereWithoutOpponentsInput[]
    deleteMany?: BruteScalarWhereInput | BruteScalarWhereInput[]
  }

  export type AchievementUpdateManyWithoutBruteNestedInput = {
    create?: XOR<AchievementCreateWithoutBruteInput, AchievementUncheckedCreateWithoutBruteInput> | AchievementCreateWithoutBruteInput[] | AchievementUncheckedCreateWithoutBruteInput[]
    connectOrCreate?: AchievementCreateOrConnectWithoutBruteInput | AchievementCreateOrConnectWithoutBruteInput[]
    upsert?: AchievementUpsertWithWhereUniqueWithoutBruteInput | AchievementUpsertWithWhereUniqueWithoutBruteInput[]
    createMany?: AchievementCreateManyBruteInputEnvelope
    set?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
    disconnect?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
    delete?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
    connect?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
    update?: AchievementUpdateWithWhereUniqueWithoutBruteInput | AchievementUpdateWithWhereUniqueWithoutBruteInput[]
    updateMany?: AchievementUpdateManyWithWhereWithoutBruteInput | AchievementUpdateManyWithWhereWithoutBruteInput[]
    deleteMany?: AchievementScalarWhereInput | AchievementScalarWhereInput[]
  }

  export type BruteReportUpdateManyWithoutBruteNestedInput = {
    create?: XOR<BruteReportCreateWithoutBruteInput, BruteReportUncheckedCreateWithoutBruteInput> | BruteReportCreateWithoutBruteInput[] | BruteReportUncheckedCreateWithoutBruteInput[]
    connectOrCreate?: BruteReportCreateOrConnectWithoutBruteInput | BruteReportCreateOrConnectWithoutBruteInput[]
    upsert?: BruteReportUpsertWithWhereUniqueWithoutBruteInput | BruteReportUpsertWithWhereUniqueWithoutBruteInput[]
    createMany?: BruteReportCreateManyBruteInputEnvelope
    set?: BruteReportWhereUniqueInput | BruteReportWhereUniqueInput[]
    disconnect?: BruteReportWhereUniqueInput | BruteReportWhereUniqueInput[]
    delete?: BruteReportWhereUniqueInput | BruteReportWhereUniqueInput[]
    connect?: BruteReportWhereUniqueInput | BruteReportWhereUniqueInput[]
    update?: BruteReportUpdateWithWhereUniqueWithoutBruteInput | BruteReportUpdateWithWhereUniqueWithoutBruteInput[]
    updateMany?: BruteReportUpdateManyWithWhereWithoutBruteInput | BruteReportUpdateManyWithWhereWithoutBruteInput[]
    deleteMany?: BruteReportScalarWhereInput | BruteReportScalarWhereInput[]
  }

  export type TitleUpdateManyWithoutBrutesNestedInput = {
    create?: XOR<TitleCreateWithoutBrutesInput, TitleUncheckedCreateWithoutBrutesInput> | TitleCreateWithoutBrutesInput[] | TitleUncheckedCreateWithoutBrutesInput[]
    connectOrCreate?: TitleCreateOrConnectWithoutBrutesInput | TitleCreateOrConnectWithoutBrutesInput[]
    upsert?: TitleUpsertWithWhereUniqueWithoutBrutesInput | TitleUpsertWithWhereUniqueWithoutBrutesInput[]
    set?: TitleWhereUniqueInput | TitleWhereUniqueInput[]
    disconnect?: TitleWhereUniqueInput | TitleWhereUniqueInput[]
    delete?: TitleWhereUniqueInput | TitleWhereUniqueInput[]
    connect?: TitleWhereUniqueInput | TitleWhereUniqueInput[]
    update?: TitleUpdateWithWhereUniqueWithoutBrutesInput | TitleUpdateWithWhereUniqueWithoutBrutesInput[]
    updateMany?: TitleUpdateManyWithWhereWithoutBrutesInput | TitleUpdateManyWithWhereWithoutBrutesInput[]
    deleteMany?: TitleScalarWhereInput | TitleScalarWhereInput[]
  }

  export type ClanUpdateOneWithoutMasterNestedInput = {
    create?: XOR<ClanCreateWithoutMasterInput, ClanUncheckedCreateWithoutMasterInput>
    connectOrCreate?: ClanCreateOrConnectWithoutMasterInput
    upsert?: ClanUpsertWithoutMasterInput
    disconnect?: ClanWhereInput | boolean
    delete?: ClanWhereInput | boolean
    connect?: ClanWhereUniqueInput
    update?: XOR<XOR<ClanUpdateToOneWithWhereWithoutMasterInput, ClanUpdateWithoutMasterInput>, ClanUncheckedUpdateWithoutMasterInput>
  }

  export type ClanPostUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<ClanPostCreateWithoutAuthorInput, ClanPostUncheckedCreateWithoutAuthorInput> | ClanPostCreateWithoutAuthorInput[] | ClanPostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ClanPostCreateOrConnectWithoutAuthorInput | ClanPostCreateOrConnectWithoutAuthorInput[]
    upsert?: ClanPostUpsertWithWhereUniqueWithoutAuthorInput | ClanPostUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: ClanPostCreateManyAuthorInputEnvelope
    set?: ClanPostWhereUniqueInput | ClanPostWhereUniqueInput[]
    disconnect?: ClanPostWhereUniqueInput | ClanPostWhereUniqueInput[]
    delete?: ClanPostWhereUniqueInput | ClanPostWhereUniqueInput[]
    connect?: ClanPostWhereUniqueInput | ClanPostWhereUniqueInput[]
    update?: ClanPostUpdateWithWhereUniqueWithoutAuthorInput | ClanPostUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: ClanPostUpdateManyWithWhereWithoutAuthorInput | ClanPostUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: ClanPostScalarWhereInput | ClanPostScalarWhereInput[]
  }

  export type ClanUpdateOneWithoutJoinRequestsNestedInput = {
    create?: XOR<ClanCreateWithoutJoinRequestsInput, ClanUncheckedCreateWithoutJoinRequestsInput>
    connectOrCreate?: ClanCreateOrConnectWithoutJoinRequestsInput
    upsert?: ClanUpsertWithoutJoinRequestsInput
    disconnect?: ClanWhereInput | boolean
    delete?: ClanWhereInput | boolean
    connect?: ClanWhereUniqueInput
    update?: XOR<XOR<ClanUpdateToOneWithWhereWithoutJoinRequestsInput, ClanUpdateWithoutJoinRequestsInput>, ClanUncheckedUpdateWithoutJoinRequestsInput>
  }

  export type ClanThreadUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<ClanThreadCreateWithoutCreatorInput, ClanThreadUncheckedCreateWithoutCreatorInput> | ClanThreadCreateWithoutCreatorInput[] | ClanThreadUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ClanThreadCreateOrConnectWithoutCreatorInput | ClanThreadCreateOrConnectWithoutCreatorInput[]
    upsert?: ClanThreadUpsertWithWhereUniqueWithoutCreatorInput | ClanThreadUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: ClanThreadCreateManyCreatorInputEnvelope
    set?: ClanThreadWhereUniqueInput | ClanThreadWhereUniqueInput[]
    disconnect?: ClanThreadWhereUniqueInput | ClanThreadWhereUniqueInput[]
    delete?: ClanThreadWhereUniqueInput | ClanThreadWhereUniqueInput[]
    connect?: ClanThreadWhereUniqueInput | ClanThreadWhereUniqueInput[]
    update?: ClanThreadUpdateWithWhereUniqueWithoutCreatorInput | ClanThreadUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: ClanThreadUpdateManyWithWhereWithoutCreatorInput | ClanThreadUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: ClanThreadScalarWhereInput | ClanThreadScalarWhereInput[]
  }

  export type InventoryItemUpdateManyWithoutBruteNestedInput = {
    create?: XOR<InventoryItemCreateWithoutBruteInput, InventoryItemUncheckedCreateWithoutBruteInput> | InventoryItemCreateWithoutBruteInput[] | InventoryItemUncheckedCreateWithoutBruteInput[]
    connectOrCreate?: InventoryItemCreateOrConnectWithoutBruteInput | InventoryItemCreateOrConnectWithoutBruteInput[]
    upsert?: InventoryItemUpsertWithWhereUniqueWithoutBruteInput | InventoryItemUpsertWithWhereUniqueWithoutBruteInput[]
    createMany?: InventoryItemCreateManyBruteInputEnvelope
    set?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    disconnect?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    delete?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    connect?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    update?: InventoryItemUpdateWithWhereUniqueWithoutBruteInput | InventoryItemUpdateWithWhereUniqueWithoutBruteInput[]
    updateMany?: InventoryItemUpdateManyWithWhereWithoutBruteInput | InventoryItemUpdateManyWithWhereWithoutBruteInput[]
    deleteMany?: InventoryItemScalarWhereInput | InventoryItemScalarWhereInput[]
  }

  export type TournamentAchievementUpdateManyWithoutBruteNestedInput = {
    create?: XOR<TournamentAchievementCreateWithoutBruteInput, TournamentAchievementUncheckedCreateWithoutBruteInput> | TournamentAchievementCreateWithoutBruteInput[] | TournamentAchievementUncheckedCreateWithoutBruteInput[]
    connectOrCreate?: TournamentAchievementCreateOrConnectWithoutBruteInput | TournamentAchievementCreateOrConnectWithoutBruteInput[]
    upsert?: TournamentAchievementUpsertWithWhereUniqueWithoutBruteInput | TournamentAchievementUpsertWithWhereUniqueWithoutBruteInput[]
    createMany?: TournamentAchievementCreateManyBruteInputEnvelope
    set?: TournamentAchievementWhereUniqueInput | TournamentAchievementWhereUniqueInput[]
    disconnect?: TournamentAchievementWhereUniqueInput | TournamentAchievementWhereUniqueInput[]
    delete?: TournamentAchievementWhereUniqueInput | TournamentAchievementWhereUniqueInput[]
    connect?: TournamentAchievementWhereUniqueInput | TournamentAchievementWhereUniqueInput[]
    update?: TournamentAchievementUpdateWithWhereUniqueWithoutBruteInput | TournamentAchievementUpdateWithWhereUniqueWithoutBruteInput[]
    updateMany?: TournamentAchievementUpdateManyWithWhereWithoutBruteInput | TournamentAchievementUpdateManyWithWhereWithoutBruteInput[]
    deleteMany?: TournamentAchievementScalarWhereInput | TournamentAchievementScalarWhereInput[]
  }

  export type TournamentXpUpdateManyWithoutBruteNestedInput = {
    create?: XOR<TournamentXpCreateWithoutBruteInput, TournamentXpUncheckedCreateWithoutBruteInput> | TournamentXpCreateWithoutBruteInput[] | TournamentXpUncheckedCreateWithoutBruteInput[]
    connectOrCreate?: TournamentXpCreateOrConnectWithoutBruteInput | TournamentXpCreateOrConnectWithoutBruteInput[]
    upsert?: TournamentXpUpsertWithWhereUniqueWithoutBruteInput | TournamentXpUpsertWithWhereUniqueWithoutBruteInput[]
    createMany?: TournamentXpCreateManyBruteInputEnvelope
    set?: TournamentXpWhereUniqueInput | TournamentXpWhereUniqueInput[]
    disconnect?: TournamentXpWhereUniqueInput | TournamentXpWhereUniqueInput[]
    delete?: TournamentXpWhereUniqueInput | TournamentXpWhereUniqueInput[]
    connect?: TournamentXpWhereUniqueInput | TournamentXpWhereUniqueInput[]
    update?: TournamentXpUpdateWithWhereUniqueWithoutBruteInput | TournamentXpUpdateWithWhereUniqueWithoutBruteInput[]
    updateMany?: TournamentXpUpdateManyWithWhereWithoutBruteInput | TournamentXpUpdateManyWithWhereWithoutBruteInput[]
    deleteMany?: TournamentXpScalarWhereInput | TournamentXpScalarWhereInput[]
  }

  export type BruteStartingStatsUpdateOneWithoutBruteNestedInput = {
    create?: XOR<BruteStartingStatsCreateWithoutBruteInput, BruteStartingStatsUncheckedCreateWithoutBruteInput>
    connectOrCreate?: BruteStartingStatsCreateOrConnectWithoutBruteInput
    upsert?: BruteStartingStatsUpsertWithoutBruteInput
    disconnect?: BruteStartingStatsWhereInput | boolean
    delete?: BruteStartingStatsWhereInput | boolean
    connect?: BruteStartingStatsWhereUniqueInput
    update?: XOR<XOR<BruteStartingStatsUpdateToOneWithWhereWithoutBruteInput, BruteStartingStatsUpdateWithoutBruteInput>, BruteStartingStatsUncheckedUpdateWithoutBruteInput>
  }

  export type BossDamageUpdateManyWithoutBruteNestedInput = {
    create?: XOR<BossDamageCreateWithoutBruteInput, BossDamageUncheckedCreateWithoutBruteInput> | BossDamageCreateWithoutBruteInput[] | BossDamageUncheckedCreateWithoutBruteInput[]
    connectOrCreate?: BossDamageCreateOrConnectWithoutBruteInput | BossDamageCreateOrConnectWithoutBruteInput[]
    upsert?: BossDamageUpsertWithWhereUniqueWithoutBruteInput | BossDamageUpsertWithWhereUniqueWithoutBruteInput[]
    createMany?: BossDamageCreateManyBruteInputEnvelope
    set?: BossDamageWhereUniqueInput | BossDamageWhereUniqueInput[]
    disconnect?: BossDamageWhereUniqueInput | BossDamageWhereUniqueInput[]
    delete?: BossDamageWhereUniqueInput | BossDamageWhereUniqueInput[]
    connect?: BossDamageWhereUniqueInput | BossDamageWhereUniqueInput[]
    update?: BossDamageUpdateWithWhereUniqueWithoutBruteInput | BossDamageUpdateWithWhereUniqueWithoutBruteInput[]
    updateMany?: BossDamageUpdateManyWithWhereWithoutBruteInput | BossDamageUpdateManyWithWhereWithoutBruteInput[]
    deleteMany?: BossDamageScalarWhereInput | BossDamageScalarWhereInput[]
  }

  export type UserUpdateManyWithoutFollowingNestedInput = {
    create?: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput> | UserCreateWithoutFollowingInput[] | UserUncheckedCreateWithoutFollowingInput[]
    connectOrCreate?: UserCreateOrConnectWithoutFollowingInput | UserCreateOrConnectWithoutFollowingInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutFollowingInput | UserUpsertWithWhereUniqueWithoutFollowingInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutFollowingInput | UserUpdateWithWhereUniqueWithoutFollowingInput[]
    updateMany?: UserUpdateManyWithWhereWithoutFollowingInput | UserUpdateManyWithWhereWithoutFollowingInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ClanWarFightersUpdateManyWithoutAttackersNestedInput = {
    create?: XOR<ClanWarFightersCreateWithoutAttackersInput, ClanWarFightersUncheckedCreateWithoutAttackersInput> | ClanWarFightersCreateWithoutAttackersInput[] | ClanWarFightersUncheckedCreateWithoutAttackersInput[]
    connectOrCreate?: ClanWarFightersCreateOrConnectWithoutAttackersInput | ClanWarFightersCreateOrConnectWithoutAttackersInput[]
    upsert?: ClanWarFightersUpsertWithWhereUniqueWithoutAttackersInput | ClanWarFightersUpsertWithWhereUniqueWithoutAttackersInput[]
    set?: ClanWarFightersWhereUniqueInput | ClanWarFightersWhereUniqueInput[]
    disconnect?: ClanWarFightersWhereUniqueInput | ClanWarFightersWhereUniqueInput[]
    delete?: ClanWarFightersWhereUniqueInput | ClanWarFightersWhereUniqueInput[]
    connect?: ClanWarFightersWhereUniqueInput | ClanWarFightersWhereUniqueInput[]
    update?: ClanWarFightersUpdateWithWhereUniqueWithoutAttackersInput | ClanWarFightersUpdateWithWhereUniqueWithoutAttackersInput[]
    updateMany?: ClanWarFightersUpdateManyWithWhereWithoutAttackersInput | ClanWarFightersUpdateManyWithWhereWithoutAttackersInput[]
    deleteMany?: ClanWarFightersScalarWhereInput | ClanWarFightersScalarWhereInput[]
  }

  export type ClanWarFightersUpdateManyWithoutDefendersNestedInput = {
    create?: XOR<ClanWarFightersCreateWithoutDefendersInput, ClanWarFightersUncheckedCreateWithoutDefendersInput> | ClanWarFightersCreateWithoutDefendersInput[] | ClanWarFightersUncheckedCreateWithoutDefendersInput[]
    connectOrCreate?: ClanWarFightersCreateOrConnectWithoutDefendersInput | ClanWarFightersCreateOrConnectWithoutDefendersInput[]
    upsert?: ClanWarFightersUpsertWithWhereUniqueWithoutDefendersInput | ClanWarFightersUpsertWithWhereUniqueWithoutDefendersInput[]
    set?: ClanWarFightersWhereUniqueInput | ClanWarFightersWhereUniqueInput[]
    disconnect?: ClanWarFightersWhereUniqueInput | ClanWarFightersWhereUniqueInput[]
    delete?: ClanWarFightersWhereUniqueInput | ClanWarFightersWhereUniqueInput[]
    connect?: ClanWarFightersWhereUniqueInput | ClanWarFightersWhereUniqueInput[]
    update?: ClanWarFightersUpdateWithWhereUniqueWithoutDefendersInput | ClanWarFightersUpdateWithWhereUniqueWithoutDefendersInput[]
    updateMany?: ClanWarFightersUpdateManyWithWhereWithoutDefendersInput | ClanWarFightersUpdateManyWithWhereWithoutDefendersInput[]
    deleteMany?: ClanWarFightersScalarWhereInput | ClanWarFightersScalarWhereInput[]
  }

  export type EventUpdateOneWithoutBrutesNestedInput = {
    create?: XOR<EventCreateWithoutBrutesInput, EventUncheckedCreateWithoutBrutesInput>
    connectOrCreate?: EventCreateOrConnectWithoutBrutesInput
    upsert?: EventUpsertWithoutBrutesInput
    disconnect?: EventWhereInput | boolean
    delete?: EventWhereInput | boolean
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutBrutesInput, EventUpdateWithoutBrutesInput>, EventUncheckedUpdateWithoutBrutesInput>
  }

  export type EventUpdateManyWithoutWinnerNestedInput = {
    create?: XOR<EventCreateWithoutWinnerInput, EventUncheckedCreateWithoutWinnerInput> | EventCreateWithoutWinnerInput[] | EventUncheckedCreateWithoutWinnerInput[]
    connectOrCreate?: EventCreateOrConnectWithoutWinnerInput | EventCreateOrConnectWithoutWinnerInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutWinnerInput | EventUpsertWithWhereUniqueWithoutWinnerInput[]
    createMany?: EventCreateManyWinnerInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutWinnerInput | EventUpdateWithWhereUniqueWithoutWinnerInput[]
    updateMany?: EventUpdateManyWithWhereWithoutWinnerInput | EventUpdateManyWithWhereWithoutWinnerInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type BruteUncheckedUpdateManyWithoutMasterNestedInput = {
    create?: XOR<BruteCreateWithoutMasterInput, BruteUncheckedCreateWithoutMasterInput> | BruteCreateWithoutMasterInput[] | BruteUncheckedCreateWithoutMasterInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutMasterInput | BruteCreateOrConnectWithoutMasterInput[]
    upsert?: BruteUpsertWithWhereUniqueWithoutMasterInput | BruteUpsertWithWhereUniqueWithoutMasterInput[]
    createMany?: BruteCreateManyMasterInputEnvelope
    set?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    disconnect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    delete?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    update?: BruteUpdateWithWhereUniqueWithoutMasterInput | BruteUpdateWithWhereUniqueWithoutMasterInput[]
    updateMany?: BruteUpdateManyWithWhereWithoutMasterInput | BruteUpdateManyWithWhereWithoutMasterInput[]
    deleteMany?: BruteScalarWhereInput | BruteScalarWhereInput[]
  }

  export type FightUncheckedUpdateManyWithoutBrute1NestedInput = {
    create?: XOR<FightCreateWithoutBrute1Input, FightUncheckedCreateWithoutBrute1Input> | FightCreateWithoutBrute1Input[] | FightUncheckedCreateWithoutBrute1Input[]
    connectOrCreate?: FightCreateOrConnectWithoutBrute1Input | FightCreateOrConnectWithoutBrute1Input[]
    upsert?: FightUpsertWithWhereUniqueWithoutBrute1Input | FightUpsertWithWhereUniqueWithoutBrute1Input[]
    createMany?: FightCreateManyBrute1InputEnvelope
    set?: FightWhereUniqueInput | FightWhereUniqueInput[]
    disconnect?: FightWhereUniqueInput | FightWhereUniqueInput[]
    delete?: FightWhereUniqueInput | FightWhereUniqueInput[]
    connect?: FightWhereUniqueInput | FightWhereUniqueInput[]
    update?: FightUpdateWithWhereUniqueWithoutBrute1Input | FightUpdateWithWhereUniqueWithoutBrute1Input[]
    updateMany?: FightUpdateManyWithWhereWithoutBrute1Input | FightUpdateManyWithWhereWithoutBrute1Input[]
    deleteMany?: FightScalarWhereInput | FightScalarWhereInput[]
  }

  export type FightUncheckedUpdateManyWithoutBrute2NestedInput = {
    create?: XOR<FightCreateWithoutBrute2Input, FightUncheckedCreateWithoutBrute2Input> | FightCreateWithoutBrute2Input[] | FightUncheckedCreateWithoutBrute2Input[]
    connectOrCreate?: FightCreateOrConnectWithoutBrute2Input | FightCreateOrConnectWithoutBrute2Input[]
    upsert?: FightUpsertWithWhereUniqueWithoutBrute2Input | FightUpsertWithWhereUniqueWithoutBrute2Input[]
    createMany?: FightCreateManyBrute2InputEnvelope
    set?: FightWhereUniqueInput | FightWhereUniqueInput[]
    disconnect?: FightWhereUniqueInput | FightWhereUniqueInput[]
    delete?: FightWhereUniqueInput | FightWhereUniqueInput[]
    connect?: FightWhereUniqueInput | FightWhereUniqueInput[]
    update?: FightUpdateWithWhereUniqueWithoutBrute2Input | FightUpdateWithWhereUniqueWithoutBrute2Input[]
    updateMany?: FightUpdateManyWithWhereWithoutBrute2Input | FightUpdateManyWithWhereWithoutBrute2Input[]
    deleteMany?: FightScalarWhereInput | FightScalarWhereInput[]
  }

  export type LogUncheckedUpdateManyWithoutCurrentBruteNestedInput = {
    create?: XOR<LogCreateWithoutCurrentBruteInput, LogUncheckedCreateWithoutCurrentBruteInput> | LogCreateWithoutCurrentBruteInput[] | LogUncheckedCreateWithoutCurrentBruteInput[]
    connectOrCreate?: LogCreateOrConnectWithoutCurrentBruteInput | LogCreateOrConnectWithoutCurrentBruteInput[]
    upsert?: LogUpsertWithWhereUniqueWithoutCurrentBruteInput | LogUpsertWithWhereUniqueWithoutCurrentBruteInput[]
    createMany?: LogCreateManyCurrentBruteInputEnvelope
    set?: LogWhereUniqueInput | LogWhereUniqueInput[]
    disconnect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    delete?: LogWhereUniqueInput | LogWhereUniqueInput[]
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    update?: LogUpdateWithWhereUniqueWithoutCurrentBruteInput | LogUpdateWithWhereUniqueWithoutCurrentBruteInput[]
    updateMany?: LogUpdateManyWithWhereWithoutCurrentBruteInput | LogUpdateManyWithWhereWithoutCurrentBruteInput[]
    deleteMany?: LogScalarWhereInput | LogScalarWhereInput[]
  }

  export type DestinyChoiceUncheckedUpdateManyWithoutBruteNestedInput = {
    create?: XOR<DestinyChoiceCreateWithoutBruteInput, DestinyChoiceUncheckedCreateWithoutBruteInput> | DestinyChoiceCreateWithoutBruteInput[] | DestinyChoiceUncheckedCreateWithoutBruteInput[]
    connectOrCreate?: DestinyChoiceCreateOrConnectWithoutBruteInput | DestinyChoiceCreateOrConnectWithoutBruteInput[]
    upsert?: DestinyChoiceUpsertWithWhereUniqueWithoutBruteInput | DestinyChoiceUpsertWithWhereUniqueWithoutBruteInput[]
    createMany?: DestinyChoiceCreateManyBruteInputEnvelope
    set?: DestinyChoiceWhereUniqueInput | DestinyChoiceWhereUniqueInput[]
    disconnect?: DestinyChoiceWhereUniqueInput | DestinyChoiceWhereUniqueInput[]
    delete?: DestinyChoiceWhereUniqueInput | DestinyChoiceWhereUniqueInput[]
    connect?: DestinyChoiceWhereUniqueInput | DestinyChoiceWhereUniqueInput[]
    update?: DestinyChoiceUpdateWithWhereUniqueWithoutBruteInput | DestinyChoiceUpdateWithWhereUniqueWithoutBruteInput[]
    updateMany?: DestinyChoiceUpdateManyWithWhereWithoutBruteInput | DestinyChoiceUpdateManyWithWhereWithoutBruteInput[]
    deleteMany?: DestinyChoiceScalarWhereInput | DestinyChoiceScalarWhereInput[]
  }

  export type TournamentUncheckedUpdateManyWithoutParticipantsNestedInput = {
    create?: XOR<TournamentCreateWithoutParticipantsInput, TournamentUncheckedCreateWithoutParticipantsInput> | TournamentCreateWithoutParticipantsInput[] | TournamentUncheckedCreateWithoutParticipantsInput[]
    connectOrCreate?: TournamentCreateOrConnectWithoutParticipantsInput | TournamentCreateOrConnectWithoutParticipantsInput[]
    upsert?: TournamentUpsertWithWhereUniqueWithoutParticipantsInput | TournamentUpsertWithWhereUniqueWithoutParticipantsInput[]
    set?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    disconnect?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    delete?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    connect?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    update?: TournamentUpdateWithWhereUniqueWithoutParticipantsInput | TournamentUpdateWithWhereUniqueWithoutParticipantsInput[]
    updateMany?: TournamentUpdateManyWithWhereWithoutParticipantsInput | TournamentUpdateManyWithWhereWithoutParticipantsInput[]
    deleteMany?: TournamentScalarWhereInput | TournamentScalarWhereInput[]
  }

  export type BruteUncheckedUpdateManyWithoutOpponentOfNestedInput = {
    create?: XOR<BruteCreateWithoutOpponentOfInput, BruteUncheckedCreateWithoutOpponentOfInput> | BruteCreateWithoutOpponentOfInput[] | BruteUncheckedCreateWithoutOpponentOfInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutOpponentOfInput | BruteCreateOrConnectWithoutOpponentOfInput[]
    upsert?: BruteUpsertWithWhereUniqueWithoutOpponentOfInput | BruteUpsertWithWhereUniqueWithoutOpponentOfInput[]
    set?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    disconnect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    delete?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    update?: BruteUpdateWithWhereUniqueWithoutOpponentOfInput | BruteUpdateWithWhereUniqueWithoutOpponentOfInput[]
    updateMany?: BruteUpdateManyWithWhereWithoutOpponentOfInput | BruteUpdateManyWithWhereWithoutOpponentOfInput[]
    deleteMany?: BruteScalarWhereInput | BruteScalarWhereInput[]
  }

  export type BruteUncheckedUpdateManyWithoutOpponentsNestedInput = {
    create?: XOR<BruteCreateWithoutOpponentsInput, BruteUncheckedCreateWithoutOpponentsInput> | BruteCreateWithoutOpponentsInput[] | BruteUncheckedCreateWithoutOpponentsInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutOpponentsInput | BruteCreateOrConnectWithoutOpponentsInput[]
    upsert?: BruteUpsertWithWhereUniqueWithoutOpponentsInput | BruteUpsertWithWhereUniqueWithoutOpponentsInput[]
    set?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    disconnect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    delete?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    update?: BruteUpdateWithWhereUniqueWithoutOpponentsInput | BruteUpdateWithWhereUniqueWithoutOpponentsInput[]
    updateMany?: BruteUpdateManyWithWhereWithoutOpponentsInput | BruteUpdateManyWithWhereWithoutOpponentsInput[]
    deleteMany?: BruteScalarWhereInput | BruteScalarWhereInput[]
  }

  export type AchievementUncheckedUpdateManyWithoutBruteNestedInput = {
    create?: XOR<AchievementCreateWithoutBruteInput, AchievementUncheckedCreateWithoutBruteInput> | AchievementCreateWithoutBruteInput[] | AchievementUncheckedCreateWithoutBruteInput[]
    connectOrCreate?: AchievementCreateOrConnectWithoutBruteInput | AchievementCreateOrConnectWithoutBruteInput[]
    upsert?: AchievementUpsertWithWhereUniqueWithoutBruteInput | AchievementUpsertWithWhereUniqueWithoutBruteInput[]
    createMany?: AchievementCreateManyBruteInputEnvelope
    set?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
    disconnect?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
    delete?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
    connect?: AchievementWhereUniqueInput | AchievementWhereUniqueInput[]
    update?: AchievementUpdateWithWhereUniqueWithoutBruteInput | AchievementUpdateWithWhereUniqueWithoutBruteInput[]
    updateMany?: AchievementUpdateManyWithWhereWithoutBruteInput | AchievementUpdateManyWithWhereWithoutBruteInput[]
    deleteMany?: AchievementScalarWhereInput | AchievementScalarWhereInput[]
  }

  export type BruteReportUncheckedUpdateManyWithoutBruteNestedInput = {
    create?: XOR<BruteReportCreateWithoutBruteInput, BruteReportUncheckedCreateWithoutBruteInput> | BruteReportCreateWithoutBruteInput[] | BruteReportUncheckedCreateWithoutBruteInput[]
    connectOrCreate?: BruteReportCreateOrConnectWithoutBruteInput | BruteReportCreateOrConnectWithoutBruteInput[]
    upsert?: BruteReportUpsertWithWhereUniqueWithoutBruteInput | BruteReportUpsertWithWhereUniqueWithoutBruteInput[]
    createMany?: BruteReportCreateManyBruteInputEnvelope
    set?: BruteReportWhereUniqueInput | BruteReportWhereUniqueInput[]
    disconnect?: BruteReportWhereUniqueInput | BruteReportWhereUniqueInput[]
    delete?: BruteReportWhereUniqueInput | BruteReportWhereUniqueInput[]
    connect?: BruteReportWhereUniqueInput | BruteReportWhereUniqueInput[]
    update?: BruteReportUpdateWithWhereUniqueWithoutBruteInput | BruteReportUpdateWithWhereUniqueWithoutBruteInput[]
    updateMany?: BruteReportUpdateManyWithWhereWithoutBruteInput | BruteReportUpdateManyWithWhereWithoutBruteInput[]
    deleteMany?: BruteReportScalarWhereInput | BruteReportScalarWhereInput[]
  }

  export type TitleUncheckedUpdateManyWithoutBrutesNestedInput = {
    create?: XOR<TitleCreateWithoutBrutesInput, TitleUncheckedCreateWithoutBrutesInput> | TitleCreateWithoutBrutesInput[] | TitleUncheckedCreateWithoutBrutesInput[]
    connectOrCreate?: TitleCreateOrConnectWithoutBrutesInput | TitleCreateOrConnectWithoutBrutesInput[]
    upsert?: TitleUpsertWithWhereUniqueWithoutBrutesInput | TitleUpsertWithWhereUniqueWithoutBrutesInput[]
    set?: TitleWhereUniqueInput | TitleWhereUniqueInput[]
    disconnect?: TitleWhereUniqueInput | TitleWhereUniqueInput[]
    delete?: TitleWhereUniqueInput | TitleWhereUniqueInput[]
    connect?: TitleWhereUniqueInput | TitleWhereUniqueInput[]
    update?: TitleUpdateWithWhereUniqueWithoutBrutesInput | TitleUpdateWithWhereUniqueWithoutBrutesInput[]
    updateMany?: TitleUpdateManyWithWhereWithoutBrutesInput | TitleUpdateManyWithWhereWithoutBrutesInput[]
    deleteMany?: TitleScalarWhereInput | TitleScalarWhereInput[]
  }

  export type ClanUncheckedUpdateOneWithoutMasterNestedInput = {
    create?: XOR<ClanCreateWithoutMasterInput, ClanUncheckedCreateWithoutMasterInput>
    connectOrCreate?: ClanCreateOrConnectWithoutMasterInput
    upsert?: ClanUpsertWithoutMasterInput
    disconnect?: ClanWhereInput | boolean
    delete?: ClanWhereInput | boolean
    connect?: ClanWhereUniqueInput
    update?: XOR<XOR<ClanUpdateToOneWithWhereWithoutMasterInput, ClanUpdateWithoutMasterInput>, ClanUncheckedUpdateWithoutMasterInput>
  }

  export type ClanPostUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<ClanPostCreateWithoutAuthorInput, ClanPostUncheckedCreateWithoutAuthorInput> | ClanPostCreateWithoutAuthorInput[] | ClanPostUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ClanPostCreateOrConnectWithoutAuthorInput | ClanPostCreateOrConnectWithoutAuthorInput[]
    upsert?: ClanPostUpsertWithWhereUniqueWithoutAuthorInput | ClanPostUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: ClanPostCreateManyAuthorInputEnvelope
    set?: ClanPostWhereUniqueInput | ClanPostWhereUniqueInput[]
    disconnect?: ClanPostWhereUniqueInput | ClanPostWhereUniqueInput[]
    delete?: ClanPostWhereUniqueInput | ClanPostWhereUniqueInput[]
    connect?: ClanPostWhereUniqueInput | ClanPostWhereUniqueInput[]
    update?: ClanPostUpdateWithWhereUniqueWithoutAuthorInput | ClanPostUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: ClanPostUpdateManyWithWhereWithoutAuthorInput | ClanPostUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: ClanPostScalarWhereInput | ClanPostScalarWhereInput[]
  }

  export type ClanThreadUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<ClanThreadCreateWithoutCreatorInput, ClanThreadUncheckedCreateWithoutCreatorInput> | ClanThreadCreateWithoutCreatorInput[] | ClanThreadUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ClanThreadCreateOrConnectWithoutCreatorInput | ClanThreadCreateOrConnectWithoutCreatorInput[]
    upsert?: ClanThreadUpsertWithWhereUniqueWithoutCreatorInput | ClanThreadUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: ClanThreadCreateManyCreatorInputEnvelope
    set?: ClanThreadWhereUniqueInput | ClanThreadWhereUniqueInput[]
    disconnect?: ClanThreadWhereUniqueInput | ClanThreadWhereUniqueInput[]
    delete?: ClanThreadWhereUniqueInput | ClanThreadWhereUniqueInput[]
    connect?: ClanThreadWhereUniqueInput | ClanThreadWhereUniqueInput[]
    update?: ClanThreadUpdateWithWhereUniqueWithoutCreatorInput | ClanThreadUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: ClanThreadUpdateManyWithWhereWithoutCreatorInput | ClanThreadUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: ClanThreadScalarWhereInput | ClanThreadScalarWhereInput[]
  }

  export type InventoryItemUncheckedUpdateManyWithoutBruteNestedInput = {
    create?: XOR<InventoryItemCreateWithoutBruteInput, InventoryItemUncheckedCreateWithoutBruteInput> | InventoryItemCreateWithoutBruteInput[] | InventoryItemUncheckedCreateWithoutBruteInput[]
    connectOrCreate?: InventoryItemCreateOrConnectWithoutBruteInput | InventoryItemCreateOrConnectWithoutBruteInput[]
    upsert?: InventoryItemUpsertWithWhereUniqueWithoutBruteInput | InventoryItemUpsertWithWhereUniqueWithoutBruteInput[]
    createMany?: InventoryItemCreateManyBruteInputEnvelope
    set?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    disconnect?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    delete?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    connect?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    update?: InventoryItemUpdateWithWhereUniqueWithoutBruteInput | InventoryItemUpdateWithWhereUniqueWithoutBruteInput[]
    updateMany?: InventoryItemUpdateManyWithWhereWithoutBruteInput | InventoryItemUpdateManyWithWhereWithoutBruteInput[]
    deleteMany?: InventoryItemScalarWhereInput | InventoryItemScalarWhereInput[]
  }

  export type TournamentAchievementUncheckedUpdateManyWithoutBruteNestedInput = {
    create?: XOR<TournamentAchievementCreateWithoutBruteInput, TournamentAchievementUncheckedCreateWithoutBruteInput> | TournamentAchievementCreateWithoutBruteInput[] | TournamentAchievementUncheckedCreateWithoutBruteInput[]
    connectOrCreate?: TournamentAchievementCreateOrConnectWithoutBruteInput | TournamentAchievementCreateOrConnectWithoutBruteInput[]
    upsert?: TournamentAchievementUpsertWithWhereUniqueWithoutBruteInput | TournamentAchievementUpsertWithWhereUniqueWithoutBruteInput[]
    createMany?: TournamentAchievementCreateManyBruteInputEnvelope
    set?: TournamentAchievementWhereUniqueInput | TournamentAchievementWhereUniqueInput[]
    disconnect?: TournamentAchievementWhereUniqueInput | TournamentAchievementWhereUniqueInput[]
    delete?: TournamentAchievementWhereUniqueInput | TournamentAchievementWhereUniqueInput[]
    connect?: TournamentAchievementWhereUniqueInput | TournamentAchievementWhereUniqueInput[]
    update?: TournamentAchievementUpdateWithWhereUniqueWithoutBruteInput | TournamentAchievementUpdateWithWhereUniqueWithoutBruteInput[]
    updateMany?: TournamentAchievementUpdateManyWithWhereWithoutBruteInput | TournamentAchievementUpdateManyWithWhereWithoutBruteInput[]
    deleteMany?: TournamentAchievementScalarWhereInput | TournamentAchievementScalarWhereInput[]
  }

  export type TournamentXpUncheckedUpdateManyWithoutBruteNestedInput = {
    create?: XOR<TournamentXpCreateWithoutBruteInput, TournamentXpUncheckedCreateWithoutBruteInput> | TournamentXpCreateWithoutBruteInput[] | TournamentXpUncheckedCreateWithoutBruteInput[]
    connectOrCreate?: TournamentXpCreateOrConnectWithoutBruteInput | TournamentXpCreateOrConnectWithoutBruteInput[]
    upsert?: TournamentXpUpsertWithWhereUniqueWithoutBruteInput | TournamentXpUpsertWithWhereUniqueWithoutBruteInput[]
    createMany?: TournamentXpCreateManyBruteInputEnvelope
    set?: TournamentXpWhereUniqueInput | TournamentXpWhereUniqueInput[]
    disconnect?: TournamentXpWhereUniqueInput | TournamentXpWhereUniqueInput[]
    delete?: TournamentXpWhereUniqueInput | TournamentXpWhereUniqueInput[]
    connect?: TournamentXpWhereUniqueInput | TournamentXpWhereUniqueInput[]
    update?: TournamentXpUpdateWithWhereUniqueWithoutBruteInput | TournamentXpUpdateWithWhereUniqueWithoutBruteInput[]
    updateMany?: TournamentXpUpdateManyWithWhereWithoutBruteInput | TournamentXpUpdateManyWithWhereWithoutBruteInput[]
    deleteMany?: TournamentXpScalarWhereInput | TournamentXpScalarWhereInput[]
  }

  export type BruteStartingStatsUncheckedUpdateOneWithoutBruteNestedInput = {
    create?: XOR<BruteStartingStatsCreateWithoutBruteInput, BruteStartingStatsUncheckedCreateWithoutBruteInput>
    connectOrCreate?: BruteStartingStatsCreateOrConnectWithoutBruteInput
    upsert?: BruteStartingStatsUpsertWithoutBruteInput
    disconnect?: BruteStartingStatsWhereInput | boolean
    delete?: BruteStartingStatsWhereInput | boolean
    connect?: BruteStartingStatsWhereUniqueInput
    update?: XOR<XOR<BruteStartingStatsUpdateToOneWithWhereWithoutBruteInput, BruteStartingStatsUpdateWithoutBruteInput>, BruteStartingStatsUncheckedUpdateWithoutBruteInput>
  }

  export type BossDamageUncheckedUpdateManyWithoutBruteNestedInput = {
    create?: XOR<BossDamageCreateWithoutBruteInput, BossDamageUncheckedCreateWithoutBruteInput> | BossDamageCreateWithoutBruteInput[] | BossDamageUncheckedCreateWithoutBruteInput[]
    connectOrCreate?: BossDamageCreateOrConnectWithoutBruteInput | BossDamageCreateOrConnectWithoutBruteInput[]
    upsert?: BossDamageUpsertWithWhereUniqueWithoutBruteInput | BossDamageUpsertWithWhereUniqueWithoutBruteInput[]
    createMany?: BossDamageCreateManyBruteInputEnvelope
    set?: BossDamageWhereUniqueInput | BossDamageWhereUniqueInput[]
    disconnect?: BossDamageWhereUniqueInput | BossDamageWhereUniqueInput[]
    delete?: BossDamageWhereUniqueInput | BossDamageWhereUniqueInput[]
    connect?: BossDamageWhereUniqueInput | BossDamageWhereUniqueInput[]
    update?: BossDamageUpdateWithWhereUniqueWithoutBruteInput | BossDamageUpdateWithWhereUniqueWithoutBruteInput[]
    updateMany?: BossDamageUpdateManyWithWhereWithoutBruteInput | BossDamageUpdateManyWithWhereWithoutBruteInput[]
    deleteMany?: BossDamageScalarWhereInput | BossDamageScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutFollowingNestedInput = {
    create?: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput> | UserCreateWithoutFollowingInput[] | UserUncheckedCreateWithoutFollowingInput[]
    connectOrCreate?: UserCreateOrConnectWithoutFollowingInput | UserCreateOrConnectWithoutFollowingInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutFollowingInput | UserUpsertWithWhereUniqueWithoutFollowingInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutFollowingInput | UserUpdateWithWhereUniqueWithoutFollowingInput[]
    updateMany?: UserUpdateManyWithWhereWithoutFollowingInput | UserUpdateManyWithWhereWithoutFollowingInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ClanWarFightersUncheckedUpdateManyWithoutAttackersNestedInput = {
    create?: XOR<ClanWarFightersCreateWithoutAttackersInput, ClanWarFightersUncheckedCreateWithoutAttackersInput> | ClanWarFightersCreateWithoutAttackersInput[] | ClanWarFightersUncheckedCreateWithoutAttackersInput[]
    connectOrCreate?: ClanWarFightersCreateOrConnectWithoutAttackersInput | ClanWarFightersCreateOrConnectWithoutAttackersInput[]
    upsert?: ClanWarFightersUpsertWithWhereUniqueWithoutAttackersInput | ClanWarFightersUpsertWithWhereUniqueWithoutAttackersInput[]
    set?: ClanWarFightersWhereUniqueInput | ClanWarFightersWhereUniqueInput[]
    disconnect?: ClanWarFightersWhereUniqueInput | ClanWarFightersWhereUniqueInput[]
    delete?: ClanWarFightersWhereUniqueInput | ClanWarFightersWhereUniqueInput[]
    connect?: ClanWarFightersWhereUniqueInput | ClanWarFightersWhereUniqueInput[]
    update?: ClanWarFightersUpdateWithWhereUniqueWithoutAttackersInput | ClanWarFightersUpdateWithWhereUniqueWithoutAttackersInput[]
    updateMany?: ClanWarFightersUpdateManyWithWhereWithoutAttackersInput | ClanWarFightersUpdateManyWithWhereWithoutAttackersInput[]
    deleteMany?: ClanWarFightersScalarWhereInput | ClanWarFightersScalarWhereInput[]
  }

  export type ClanWarFightersUncheckedUpdateManyWithoutDefendersNestedInput = {
    create?: XOR<ClanWarFightersCreateWithoutDefendersInput, ClanWarFightersUncheckedCreateWithoutDefendersInput> | ClanWarFightersCreateWithoutDefendersInput[] | ClanWarFightersUncheckedCreateWithoutDefendersInput[]
    connectOrCreate?: ClanWarFightersCreateOrConnectWithoutDefendersInput | ClanWarFightersCreateOrConnectWithoutDefendersInput[]
    upsert?: ClanWarFightersUpsertWithWhereUniqueWithoutDefendersInput | ClanWarFightersUpsertWithWhereUniqueWithoutDefendersInput[]
    set?: ClanWarFightersWhereUniqueInput | ClanWarFightersWhereUniqueInput[]
    disconnect?: ClanWarFightersWhereUniqueInput | ClanWarFightersWhereUniqueInput[]
    delete?: ClanWarFightersWhereUniqueInput | ClanWarFightersWhereUniqueInput[]
    connect?: ClanWarFightersWhereUniqueInput | ClanWarFightersWhereUniqueInput[]
    update?: ClanWarFightersUpdateWithWhereUniqueWithoutDefendersInput | ClanWarFightersUpdateWithWhereUniqueWithoutDefendersInput[]
    updateMany?: ClanWarFightersUpdateManyWithWhereWithoutDefendersInput | ClanWarFightersUpdateManyWithWhereWithoutDefendersInput[]
    deleteMany?: ClanWarFightersScalarWhereInput | ClanWarFightersScalarWhereInput[]
  }

  export type EventUncheckedUpdateManyWithoutWinnerNestedInput = {
    create?: XOR<EventCreateWithoutWinnerInput, EventUncheckedCreateWithoutWinnerInput> | EventCreateWithoutWinnerInput[] | EventUncheckedCreateWithoutWinnerInput[]
    connectOrCreate?: EventCreateOrConnectWithoutWinnerInput | EventCreateOrConnectWithoutWinnerInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutWinnerInput | EventUpsertWithWhereUniqueWithoutWinnerInput[]
    createMany?: EventCreateManyWinnerInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutWinnerInput | EventUpdateWithWhereUniqueWithoutWinnerInput[]
    updateMany?: EventUpdateManyWithWhereWithoutWinnerInput | EventUpdateManyWithWhereWithoutWinnerInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type BruteCreateNestedOneWithoutStartingStatsInput = {
    create?: XOR<BruteCreateWithoutStartingStatsInput, BruteUncheckedCreateWithoutStartingStatsInput>
    connectOrCreate?: BruteCreateOrConnectWithoutStartingStatsInput
    connect?: BruteWhereUniqueInput
  }

  export type BruteUpdateOneRequiredWithoutStartingStatsNestedInput = {
    create?: XOR<BruteCreateWithoutStartingStatsInput, BruteUncheckedCreateWithoutStartingStatsInput>
    connectOrCreate?: BruteCreateOrConnectWithoutStartingStatsInput
    upsert?: BruteUpsertWithoutStartingStatsInput
    connect?: BruteWhereUniqueInput
    update?: XOR<XOR<BruteUpdateToOneWithWhereWithoutStartingStatsInput, BruteUpdateWithoutStartingStatsInput>, BruteUncheckedUpdateWithoutStartingStatsInput>
  }

  export type FightCreatemodifiersInput = {
    set: $Enums.FightModifier[]
  }

  export type BruteCreateNestedOneWithoutFightsInput = {
    create?: XOR<BruteCreateWithoutFightsInput, BruteUncheckedCreateWithoutFightsInput>
    connectOrCreate?: BruteCreateOrConnectWithoutFightsInput
    connect?: BruteWhereUniqueInput
  }

  export type BruteCreateNestedOneWithoutFightsAsAdversaryInput = {
    create?: XOR<BruteCreateWithoutFightsAsAdversaryInput, BruteUncheckedCreateWithoutFightsAsAdversaryInput>
    connectOrCreate?: BruteCreateOrConnectWithoutFightsAsAdversaryInput
    connect?: BruteWhereUniqueInput
  }

  export type LogCreateNestedManyWithoutFightInput = {
    create?: XOR<LogCreateWithoutFightInput, LogUncheckedCreateWithoutFightInput> | LogCreateWithoutFightInput[] | LogUncheckedCreateWithoutFightInput[]
    connectOrCreate?: LogCreateOrConnectWithoutFightInput | LogCreateOrConnectWithoutFightInput[]
    createMany?: LogCreateManyFightInputEnvelope
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
  }

  export type TournamentCreateNestedOneWithoutFightsInput = {
    create?: XOR<TournamentCreateWithoutFightsInput, TournamentUncheckedCreateWithoutFightsInput>
    connectOrCreate?: TournamentCreateOrConnectWithoutFightsInput
    connect?: TournamentWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutFavoriteFightsInput = {
    create?: XOR<UserCreateWithoutFavoriteFightsInput, UserUncheckedCreateWithoutFavoriteFightsInput> | UserCreateWithoutFavoriteFightsInput[] | UserUncheckedCreateWithoutFavoriteFightsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutFavoriteFightsInput | UserCreateOrConnectWithoutFavoriteFightsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ClanWarCreateNestedOneWithoutFightsInput = {
    create?: XOR<ClanWarCreateWithoutFightsInput, ClanWarUncheckedCreateWithoutFightsInput>
    connectOrCreate?: ClanWarCreateOrConnectWithoutFightsInput
    connect?: ClanWarWhereUniqueInput
  }

  export type LogUncheckedCreateNestedManyWithoutFightInput = {
    create?: XOR<LogCreateWithoutFightInput, LogUncheckedCreateWithoutFightInput> | LogCreateWithoutFightInput[] | LogUncheckedCreateWithoutFightInput[]
    connectOrCreate?: LogCreateOrConnectWithoutFightInput | LogCreateOrConnectWithoutFightInput[]
    createMany?: LogCreateManyFightInputEnvelope
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutFavoriteFightsInput = {
    create?: XOR<UserCreateWithoutFavoriteFightsInput, UserUncheckedCreateWithoutFavoriteFightsInput> | UserCreateWithoutFavoriteFightsInput[] | UserUncheckedCreateWithoutFavoriteFightsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutFavoriteFightsInput | UserCreateOrConnectWithoutFavoriteFightsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type FightUpdatemodifiersInput = {
    set?: $Enums.FightModifier[]
    push?: $Enums.FightModifier | $Enums.FightModifier[]
  }

  export type BruteUpdateOneRequiredWithoutFightsNestedInput = {
    create?: XOR<BruteCreateWithoutFightsInput, BruteUncheckedCreateWithoutFightsInput>
    connectOrCreate?: BruteCreateOrConnectWithoutFightsInput
    upsert?: BruteUpsertWithoutFightsInput
    connect?: BruteWhereUniqueInput
    update?: XOR<XOR<BruteUpdateToOneWithWhereWithoutFightsInput, BruteUpdateWithoutFightsInput>, BruteUncheckedUpdateWithoutFightsInput>
  }

  export type BruteUpdateOneWithoutFightsAsAdversaryNestedInput = {
    create?: XOR<BruteCreateWithoutFightsAsAdversaryInput, BruteUncheckedCreateWithoutFightsAsAdversaryInput>
    connectOrCreate?: BruteCreateOrConnectWithoutFightsAsAdversaryInput
    upsert?: BruteUpsertWithoutFightsAsAdversaryInput
    disconnect?: BruteWhereInput | boolean
    delete?: BruteWhereInput | boolean
    connect?: BruteWhereUniqueInput
    update?: XOR<XOR<BruteUpdateToOneWithWhereWithoutFightsAsAdversaryInput, BruteUpdateWithoutFightsAsAdversaryInput>, BruteUncheckedUpdateWithoutFightsAsAdversaryInput>
  }

  export type LogUpdateManyWithoutFightNestedInput = {
    create?: XOR<LogCreateWithoutFightInput, LogUncheckedCreateWithoutFightInput> | LogCreateWithoutFightInput[] | LogUncheckedCreateWithoutFightInput[]
    connectOrCreate?: LogCreateOrConnectWithoutFightInput | LogCreateOrConnectWithoutFightInput[]
    upsert?: LogUpsertWithWhereUniqueWithoutFightInput | LogUpsertWithWhereUniqueWithoutFightInput[]
    createMany?: LogCreateManyFightInputEnvelope
    set?: LogWhereUniqueInput | LogWhereUniqueInput[]
    disconnect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    delete?: LogWhereUniqueInput | LogWhereUniqueInput[]
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    update?: LogUpdateWithWhereUniqueWithoutFightInput | LogUpdateWithWhereUniqueWithoutFightInput[]
    updateMany?: LogUpdateManyWithWhereWithoutFightInput | LogUpdateManyWithWhereWithoutFightInput[]
    deleteMany?: LogScalarWhereInput | LogScalarWhereInput[]
  }

  export type TournamentUpdateOneWithoutFightsNestedInput = {
    create?: XOR<TournamentCreateWithoutFightsInput, TournamentUncheckedCreateWithoutFightsInput>
    connectOrCreate?: TournamentCreateOrConnectWithoutFightsInput
    upsert?: TournamentUpsertWithoutFightsInput
    disconnect?: TournamentWhereInput | boolean
    delete?: TournamentWhereInput | boolean
    connect?: TournamentWhereUniqueInput
    update?: XOR<XOR<TournamentUpdateToOneWithWhereWithoutFightsInput, TournamentUpdateWithoutFightsInput>, TournamentUncheckedUpdateWithoutFightsInput>
  }

  export type UserUpdateManyWithoutFavoriteFightsNestedInput = {
    create?: XOR<UserCreateWithoutFavoriteFightsInput, UserUncheckedCreateWithoutFavoriteFightsInput> | UserCreateWithoutFavoriteFightsInput[] | UserUncheckedCreateWithoutFavoriteFightsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutFavoriteFightsInput | UserCreateOrConnectWithoutFavoriteFightsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutFavoriteFightsInput | UserUpsertWithWhereUniqueWithoutFavoriteFightsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutFavoriteFightsInput | UserUpdateWithWhereUniqueWithoutFavoriteFightsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutFavoriteFightsInput | UserUpdateManyWithWhereWithoutFavoriteFightsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ClanWarUpdateOneWithoutFightsNestedInput = {
    create?: XOR<ClanWarCreateWithoutFightsInput, ClanWarUncheckedCreateWithoutFightsInput>
    connectOrCreate?: ClanWarCreateOrConnectWithoutFightsInput
    upsert?: ClanWarUpsertWithoutFightsInput
    disconnect?: ClanWarWhereInput | boolean
    delete?: ClanWarWhereInput | boolean
    connect?: ClanWarWhereUniqueInput
    update?: XOR<XOR<ClanWarUpdateToOneWithWhereWithoutFightsInput, ClanWarUpdateWithoutFightsInput>, ClanWarUncheckedUpdateWithoutFightsInput>
  }

  export type LogUncheckedUpdateManyWithoutFightNestedInput = {
    create?: XOR<LogCreateWithoutFightInput, LogUncheckedCreateWithoutFightInput> | LogCreateWithoutFightInput[] | LogUncheckedCreateWithoutFightInput[]
    connectOrCreate?: LogCreateOrConnectWithoutFightInput | LogCreateOrConnectWithoutFightInput[]
    upsert?: LogUpsertWithWhereUniqueWithoutFightInput | LogUpsertWithWhereUniqueWithoutFightInput[]
    createMany?: LogCreateManyFightInputEnvelope
    set?: LogWhereUniqueInput | LogWhereUniqueInput[]
    disconnect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    delete?: LogWhereUniqueInput | LogWhereUniqueInput[]
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    update?: LogUpdateWithWhereUniqueWithoutFightInput | LogUpdateWithWhereUniqueWithoutFightInput[]
    updateMany?: LogUpdateManyWithWhereWithoutFightInput | LogUpdateManyWithWhereWithoutFightInput[]
    deleteMany?: LogScalarWhereInput | LogScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutFavoriteFightsNestedInput = {
    create?: XOR<UserCreateWithoutFavoriteFightsInput, UserUncheckedCreateWithoutFavoriteFightsInput> | UserCreateWithoutFavoriteFightsInput[] | UserUncheckedCreateWithoutFavoriteFightsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutFavoriteFightsInput | UserCreateOrConnectWithoutFavoriteFightsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutFavoriteFightsInput | UserUpsertWithWhereUniqueWithoutFavoriteFightsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutFavoriteFightsInput | UserUpdateWithWhereUniqueWithoutFavoriteFightsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutFavoriteFightsInput | UserUpdateManyWithWhereWithoutFavoriteFightsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type BruteCreateNestedOneWithoutLogsInput = {
    create?: XOR<BruteCreateWithoutLogsInput, BruteUncheckedCreateWithoutLogsInput>
    connectOrCreate?: BruteCreateOrConnectWithoutLogsInput
    connect?: BruteWhereUniqueInput
  }

  export type FightCreateNestedOneWithoutLogsInput = {
    create?: XOR<FightCreateWithoutLogsInput, FightUncheckedCreateWithoutLogsInput>
    connectOrCreate?: FightCreateOrConnectWithoutLogsInput
    connect?: FightWhereUniqueInput
  }

  export type DestinyChoiceCreateNestedOneWithoutLogsInput = {
    create?: XOR<DestinyChoiceCreateWithoutLogsInput, DestinyChoiceUncheckedCreateWithoutLogsInput>
    connectOrCreate?: DestinyChoiceCreateOrConnectWithoutLogsInput
    connect?: DestinyChoiceWhereUniqueInput
  }

  export type EnumLogTypeFieldUpdateOperationsInput = {
    set?: $Enums.LogType
  }

  export type BruteUpdateOneRequiredWithoutLogsNestedInput = {
    create?: XOR<BruteCreateWithoutLogsInput, BruteUncheckedCreateWithoutLogsInput>
    connectOrCreate?: BruteCreateOrConnectWithoutLogsInput
    upsert?: BruteUpsertWithoutLogsInput
    connect?: BruteWhereUniqueInput
    update?: XOR<XOR<BruteUpdateToOneWithWhereWithoutLogsInput, BruteUpdateWithoutLogsInput>, BruteUncheckedUpdateWithoutLogsInput>
  }

  export type FightUpdateOneWithoutLogsNestedInput = {
    create?: XOR<FightCreateWithoutLogsInput, FightUncheckedCreateWithoutLogsInput>
    connectOrCreate?: FightCreateOrConnectWithoutLogsInput
    upsert?: FightUpsertWithoutLogsInput
    disconnect?: FightWhereInput | boolean
    delete?: FightWhereInput | boolean
    connect?: FightWhereUniqueInput
    update?: XOR<XOR<FightUpdateToOneWithWhereWithoutLogsInput, FightUpdateWithoutLogsInput>, FightUncheckedUpdateWithoutLogsInput>
  }

  export type DestinyChoiceUpdateOneWithoutLogsNestedInput = {
    create?: XOR<DestinyChoiceCreateWithoutLogsInput, DestinyChoiceUncheckedCreateWithoutLogsInput>
    connectOrCreate?: DestinyChoiceCreateOrConnectWithoutLogsInput
    upsert?: DestinyChoiceUpsertWithoutLogsInput
    disconnect?: DestinyChoiceWhereInput | boolean
    delete?: DestinyChoiceWhereInput | boolean
    connect?: DestinyChoiceWhereUniqueInput
    update?: XOR<XOR<DestinyChoiceUpdateToOneWithWhereWithoutLogsInput, DestinyChoiceUpdateWithoutLogsInput>, DestinyChoiceUncheckedUpdateWithoutLogsInput>
  }

  export type DestinyChoiceCreatepathInput = {
    set: $Enums.DestinyChoiceSide[]
  }

  export type BruteCreateNestedOneWithoutDestinyChoicesInput = {
    create?: XOR<BruteCreateWithoutDestinyChoicesInput, BruteUncheckedCreateWithoutDestinyChoicesInput>
    connectOrCreate?: BruteCreateOrConnectWithoutDestinyChoicesInput
    connect?: BruteWhereUniqueInput
  }

  export type LogCreateNestedManyWithoutDestinyChoiceInput = {
    create?: XOR<LogCreateWithoutDestinyChoiceInput, LogUncheckedCreateWithoutDestinyChoiceInput> | LogCreateWithoutDestinyChoiceInput[] | LogUncheckedCreateWithoutDestinyChoiceInput[]
    connectOrCreate?: LogCreateOrConnectWithoutDestinyChoiceInput | LogCreateOrConnectWithoutDestinyChoiceInput[]
    createMany?: LogCreateManyDestinyChoiceInputEnvelope
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
  }

  export type LogUncheckedCreateNestedManyWithoutDestinyChoiceInput = {
    create?: XOR<LogCreateWithoutDestinyChoiceInput, LogUncheckedCreateWithoutDestinyChoiceInput> | LogCreateWithoutDestinyChoiceInput[] | LogUncheckedCreateWithoutDestinyChoiceInput[]
    connectOrCreate?: LogCreateOrConnectWithoutDestinyChoiceInput | LogCreateOrConnectWithoutDestinyChoiceInput[]
    createMany?: LogCreateManyDestinyChoiceInputEnvelope
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
  }

  export type DestinyChoiceUpdatepathInput = {
    set?: $Enums.DestinyChoiceSide[]
    push?: $Enums.DestinyChoiceSide | $Enums.DestinyChoiceSide[]
  }

  export type EnumDestinyChoiceTypeFieldUpdateOperationsInput = {
    set?: $Enums.DestinyChoiceType
  }

  export type NullableEnumSkillNameFieldUpdateOperationsInput = {
    set?: $Enums.SkillName | null
  }

  export type NullableEnumWeaponNameFieldUpdateOperationsInput = {
    set?: $Enums.WeaponName | null
  }

  export type NullableEnumPetNameFieldUpdateOperationsInput = {
    set?: $Enums.PetName | null
  }

  export type NullableEnumBruteStatFieldUpdateOperationsInput = {
    set?: $Enums.BruteStat | null
  }

  export type BruteUpdateOneRequiredWithoutDestinyChoicesNestedInput = {
    create?: XOR<BruteCreateWithoutDestinyChoicesInput, BruteUncheckedCreateWithoutDestinyChoicesInput>
    connectOrCreate?: BruteCreateOrConnectWithoutDestinyChoicesInput
    upsert?: BruteUpsertWithoutDestinyChoicesInput
    connect?: BruteWhereUniqueInput
    update?: XOR<XOR<BruteUpdateToOneWithWhereWithoutDestinyChoicesInput, BruteUpdateWithoutDestinyChoicesInput>, BruteUncheckedUpdateWithoutDestinyChoicesInput>
  }

  export type LogUpdateManyWithoutDestinyChoiceNestedInput = {
    create?: XOR<LogCreateWithoutDestinyChoiceInput, LogUncheckedCreateWithoutDestinyChoiceInput> | LogCreateWithoutDestinyChoiceInput[] | LogUncheckedCreateWithoutDestinyChoiceInput[]
    connectOrCreate?: LogCreateOrConnectWithoutDestinyChoiceInput | LogCreateOrConnectWithoutDestinyChoiceInput[]
    upsert?: LogUpsertWithWhereUniqueWithoutDestinyChoiceInput | LogUpsertWithWhereUniqueWithoutDestinyChoiceInput[]
    createMany?: LogCreateManyDestinyChoiceInputEnvelope
    set?: LogWhereUniqueInput | LogWhereUniqueInput[]
    disconnect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    delete?: LogWhereUniqueInput | LogWhereUniqueInput[]
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    update?: LogUpdateWithWhereUniqueWithoutDestinyChoiceInput | LogUpdateWithWhereUniqueWithoutDestinyChoiceInput[]
    updateMany?: LogUpdateManyWithWhereWithoutDestinyChoiceInput | LogUpdateManyWithWhereWithoutDestinyChoiceInput[]
    deleteMany?: LogScalarWhereInput | LogScalarWhereInput[]
  }

  export type LogUncheckedUpdateManyWithoutDestinyChoiceNestedInput = {
    create?: XOR<LogCreateWithoutDestinyChoiceInput, LogUncheckedCreateWithoutDestinyChoiceInput> | LogCreateWithoutDestinyChoiceInput[] | LogUncheckedCreateWithoutDestinyChoiceInput[]
    connectOrCreate?: LogCreateOrConnectWithoutDestinyChoiceInput | LogCreateOrConnectWithoutDestinyChoiceInput[]
    upsert?: LogUpsertWithWhereUniqueWithoutDestinyChoiceInput | LogUpsertWithWhereUniqueWithoutDestinyChoiceInput[]
    createMany?: LogCreateManyDestinyChoiceInputEnvelope
    set?: LogWhereUniqueInput | LogWhereUniqueInput[]
    disconnect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    delete?: LogWhereUniqueInput | LogWhereUniqueInput[]
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    update?: LogUpdateWithWhereUniqueWithoutDestinyChoiceInput | LogUpdateWithWhereUniqueWithoutDestinyChoiceInput[]
    updateMany?: LogUpdateManyWithWhereWithoutDestinyChoiceInput | LogUpdateManyWithWhereWithoutDestinyChoiceInput[]
    deleteMany?: LogScalarWhereInput | LogScalarWhereInput[]
  }

  export type BruteCreateNestedManyWithoutTournamentsInput = {
    create?: XOR<BruteCreateWithoutTournamentsInput, BruteUncheckedCreateWithoutTournamentsInput> | BruteCreateWithoutTournamentsInput[] | BruteUncheckedCreateWithoutTournamentsInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutTournamentsInput | BruteCreateOrConnectWithoutTournamentsInput[]
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
  }

  export type FightCreateNestedManyWithoutTournamentInput = {
    create?: XOR<FightCreateWithoutTournamentInput, FightUncheckedCreateWithoutTournamentInput> | FightCreateWithoutTournamentInput[] | FightUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: FightCreateOrConnectWithoutTournamentInput | FightCreateOrConnectWithoutTournamentInput[]
    createMany?: FightCreateManyTournamentInputEnvelope
    connect?: FightWhereUniqueInput | FightWhereUniqueInput[]
  }

  export type EventCreateNestedOneWithoutTournamentInput = {
    create?: XOR<EventCreateWithoutTournamentInput, EventUncheckedCreateWithoutTournamentInput>
    connectOrCreate?: EventCreateOrConnectWithoutTournamentInput
    connect?: EventWhereUniqueInput
  }

  export type BruteUncheckedCreateNestedManyWithoutTournamentsInput = {
    create?: XOR<BruteCreateWithoutTournamentsInput, BruteUncheckedCreateWithoutTournamentsInput> | BruteCreateWithoutTournamentsInput[] | BruteUncheckedCreateWithoutTournamentsInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutTournamentsInput | BruteCreateOrConnectWithoutTournamentsInput[]
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
  }

  export type FightUncheckedCreateNestedManyWithoutTournamentInput = {
    create?: XOR<FightCreateWithoutTournamentInput, FightUncheckedCreateWithoutTournamentInput> | FightCreateWithoutTournamentInput[] | FightUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: FightCreateOrConnectWithoutTournamentInput | FightCreateOrConnectWithoutTournamentInput[]
    createMany?: FightCreateManyTournamentInputEnvelope
    connect?: FightWhereUniqueInput | FightWhereUniqueInput[]
  }

  export type EnumTournamentTypeFieldUpdateOperationsInput = {
    set?: $Enums.TournamentType
  }

  export type BruteUpdateManyWithoutTournamentsNestedInput = {
    create?: XOR<BruteCreateWithoutTournamentsInput, BruteUncheckedCreateWithoutTournamentsInput> | BruteCreateWithoutTournamentsInput[] | BruteUncheckedCreateWithoutTournamentsInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutTournamentsInput | BruteCreateOrConnectWithoutTournamentsInput[]
    upsert?: BruteUpsertWithWhereUniqueWithoutTournamentsInput | BruteUpsertWithWhereUniqueWithoutTournamentsInput[]
    set?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    disconnect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    delete?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    update?: BruteUpdateWithWhereUniqueWithoutTournamentsInput | BruteUpdateWithWhereUniqueWithoutTournamentsInput[]
    updateMany?: BruteUpdateManyWithWhereWithoutTournamentsInput | BruteUpdateManyWithWhereWithoutTournamentsInput[]
    deleteMany?: BruteScalarWhereInput | BruteScalarWhereInput[]
  }

  export type FightUpdateManyWithoutTournamentNestedInput = {
    create?: XOR<FightCreateWithoutTournamentInput, FightUncheckedCreateWithoutTournamentInput> | FightCreateWithoutTournamentInput[] | FightUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: FightCreateOrConnectWithoutTournamentInput | FightCreateOrConnectWithoutTournamentInput[]
    upsert?: FightUpsertWithWhereUniqueWithoutTournamentInput | FightUpsertWithWhereUniqueWithoutTournamentInput[]
    createMany?: FightCreateManyTournamentInputEnvelope
    set?: FightWhereUniqueInput | FightWhereUniqueInput[]
    disconnect?: FightWhereUniqueInput | FightWhereUniqueInput[]
    delete?: FightWhereUniqueInput | FightWhereUniqueInput[]
    connect?: FightWhereUniqueInput | FightWhereUniqueInput[]
    update?: FightUpdateWithWhereUniqueWithoutTournamentInput | FightUpdateWithWhereUniqueWithoutTournamentInput[]
    updateMany?: FightUpdateManyWithWhereWithoutTournamentInput | FightUpdateManyWithWhereWithoutTournamentInput[]
    deleteMany?: FightScalarWhereInput | FightScalarWhereInput[]
  }

  export type EventUpdateOneWithoutTournamentNestedInput = {
    create?: XOR<EventCreateWithoutTournamentInput, EventUncheckedCreateWithoutTournamentInput>
    connectOrCreate?: EventCreateOrConnectWithoutTournamentInput
    upsert?: EventUpsertWithoutTournamentInput
    disconnect?: EventWhereInput | boolean
    delete?: EventWhereInput | boolean
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutTournamentInput, EventUpdateWithoutTournamentInput>, EventUncheckedUpdateWithoutTournamentInput>
  }

  export type BruteUncheckedUpdateManyWithoutTournamentsNestedInput = {
    create?: XOR<BruteCreateWithoutTournamentsInput, BruteUncheckedCreateWithoutTournamentsInput> | BruteCreateWithoutTournamentsInput[] | BruteUncheckedCreateWithoutTournamentsInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutTournamentsInput | BruteCreateOrConnectWithoutTournamentsInput[]
    upsert?: BruteUpsertWithWhereUniqueWithoutTournamentsInput | BruteUpsertWithWhereUniqueWithoutTournamentsInput[]
    set?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    disconnect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    delete?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    update?: BruteUpdateWithWhereUniqueWithoutTournamentsInput | BruteUpdateWithWhereUniqueWithoutTournamentsInput[]
    updateMany?: BruteUpdateManyWithWhereWithoutTournamentsInput | BruteUpdateManyWithWhereWithoutTournamentsInput[]
    deleteMany?: BruteScalarWhereInput | BruteScalarWhereInput[]
  }

  export type FightUncheckedUpdateManyWithoutTournamentNestedInput = {
    create?: XOR<FightCreateWithoutTournamentInput, FightUncheckedCreateWithoutTournamentInput> | FightCreateWithoutTournamentInput[] | FightUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: FightCreateOrConnectWithoutTournamentInput | FightCreateOrConnectWithoutTournamentInput[]
    upsert?: FightUpsertWithWhereUniqueWithoutTournamentInput | FightUpsertWithWhereUniqueWithoutTournamentInput[]
    createMany?: FightCreateManyTournamentInputEnvelope
    set?: FightWhereUniqueInput | FightWhereUniqueInput[]
    disconnect?: FightWhereUniqueInput | FightWhereUniqueInput[]
    delete?: FightWhereUniqueInput | FightWhereUniqueInput[]
    connect?: FightWhereUniqueInput | FightWhereUniqueInput[]
    update?: FightUpdateWithWhereUniqueWithoutTournamentInput | FightUpdateWithWhereUniqueWithoutTournamentInput[]
    updateMany?: FightUpdateManyWithWhereWithoutTournamentInput | FightUpdateManyWithWhereWithoutTournamentInput[]
    deleteMany?: FightScalarWhereInput | FightScalarWhereInput[]
  }

  export type BruteCreateNestedOneWithoutTournamentAchievementsInput = {
    create?: XOR<BruteCreateWithoutTournamentAchievementsInput, BruteUncheckedCreateWithoutTournamentAchievementsInput>
    connectOrCreate?: BruteCreateOrConnectWithoutTournamentAchievementsInput
    connect?: BruteWhereUniqueInput
  }

  export type EnumAchievementNameFieldUpdateOperationsInput = {
    set?: $Enums.AchievementName
  }

  export type BruteUpdateOneRequiredWithoutTournamentAchievementsNestedInput = {
    create?: XOR<BruteCreateWithoutTournamentAchievementsInput, BruteUncheckedCreateWithoutTournamentAchievementsInput>
    connectOrCreate?: BruteCreateOrConnectWithoutTournamentAchievementsInput
    upsert?: BruteUpsertWithoutTournamentAchievementsInput
    connect?: BruteWhereUniqueInput
    update?: XOR<XOR<BruteUpdateToOneWithWhereWithoutTournamentAchievementsInput, BruteUpdateWithoutTournamentAchievementsInput>, BruteUncheckedUpdateWithoutTournamentAchievementsInput>
  }

  export type UserCreateNestedOneWithoutTournamentGoldsInput = {
    create?: XOR<UserCreateWithoutTournamentGoldsInput, UserUncheckedCreateWithoutTournamentGoldsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTournamentGoldsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutTournamentGoldsNestedInput = {
    create?: XOR<UserCreateWithoutTournamentGoldsInput, UserUncheckedCreateWithoutTournamentGoldsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTournamentGoldsInput
    upsert?: UserUpsertWithoutTournamentGoldsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTournamentGoldsInput, UserUpdateWithoutTournamentGoldsInput>, UserUncheckedUpdateWithoutTournamentGoldsInput>
  }

  export type BruteCreateNestedOneWithoutTournamentXpsInput = {
    create?: XOR<BruteCreateWithoutTournamentXpsInput, BruteUncheckedCreateWithoutTournamentXpsInput>
    connectOrCreate?: BruteCreateOrConnectWithoutTournamentXpsInput
    connect?: BruteWhereUniqueInput
  }

  export type BruteUpdateOneRequiredWithoutTournamentXpsNestedInput = {
    create?: XOR<BruteCreateWithoutTournamentXpsInput, BruteUncheckedCreateWithoutTournamentXpsInput>
    connectOrCreate?: BruteCreateOrConnectWithoutTournamentXpsInput
    upsert?: BruteUpsertWithoutTournamentXpsInput
    connect?: BruteWhereUniqueInput
    update?: XOR<XOR<BruteUpdateToOneWithWhereWithoutTournamentXpsInput, BruteUpdateWithoutTournamentXpsInput>, BruteUncheckedUpdateWithoutTournamentXpsInput>
  }

  export type BruteCreateNestedOneWithoutAchievementsInput = {
    create?: XOR<BruteCreateWithoutAchievementsInput, BruteUncheckedCreateWithoutAchievementsInput>
    connectOrCreate?: BruteCreateOrConnectWithoutAchievementsInput
    connect?: BruteWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAchievementsInput = {
    create?: XOR<UserCreateWithoutAchievementsInput, UserUncheckedCreateWithoutAchievementsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAchievementsInput
    connect?: UserWhereUniqueInput
  }

  export type BruteUpdateOneWithoutAchievementsNestedInput = {
    create?: XOR<BruteCreateWithoutAchievementsInput, BruteUncheckedCreateWithoutAchievementsInput>
    connectOrCreate?: BruteCreateOrConnectWithoutAchievementsInput
    upsert?: BruteUpsertWithoutAchievementsInput
    disconnect?: BruteWhereInput | boolean
    delete?: BruteWhereInput | boolean
    connect?: BruteWhereUniqueInput
    update?: XOR<XOR<BruteUpdateToOneWithWhereWithoutAchievementsInput, BruteUpdateWithoutAchievementsInput>, BruteUncheckedUpdateWithoutAchievementsInput>
  }

  export type UserUpdateOneWithoutAchievementsNestedInput = {
    create?: XOR<UserCreateWithoutAchievementsInput, UserUncheckedCreateWithoutAchievementsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAchievementsInput
    upsert?: UserUpsertWithoutAchievementsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAchievementsInput, UserUpdateWithoutAchievementsInput>, UserUncheckedUpdateWithoutAchievementsInput>
  }

  export type BruteCreateNestedManyWithoutTitlesInput = {
    create?: XOR<BruteCreateWithoutTitlesInput, BruteUncheckedCreateWithoutTitlesInput> | BruteCreateWithoutTitlesInput[] | BruteUncheckedCreateWithoutTitlesInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutTitlesInput | BruteCreateOrConnectWithoutTitlesInput[]
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
  }

  export type BruteUncheckedCreateNestedManyWithoutTitlesInput = {
    create?: XOR<BruteCreateWithoutTitlesInput, BruteUncheckedCreateWithoutTitlesInput> | BruteCreateWithoutTitlesInput[] | BruteUncheckedCreateWithoutTitlesInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutTitlesInput | BruteCreateOrConnectWithoutTitlesInput[]
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
  }

  export type BruteUpdateManyWithoutTitlesNestedInput = {
    create?: XOR<BruteCreateWithoutTitlesInput, BruteUncheckedCreateWithoutTitlesInput> | BruteCreateWithoutTitlesInput[] | BruteUncheckedCreateWithoutTitlesInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutTitlesInput | BruteCreateOrConnectWithoutTitlesInput[]
    upsert?: BruteUpsertWithWhereUniqueWithoutTitlesInput | BruteUpsertWithWhereUniqueWithoutTitlesInput[]
    set?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    disconnect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    delete?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    update?: BruteUpdateWithWhereUniqueWithoutTitlesInput | BruteUpdateWithWhereUniqueWithoutTitlesInput[]
    updateMany?: BruteUpdateManyWithWhereWithoutTitlesInput | BruteUpdateManyWithWhereWithoutTitlesInput[]
    deleteMany?: BruteScalarWhereInput | BruteScalarWhereInput[]
  }

  export type BruteUncheckedUpdateManyWithoutTitlesNestedInput = {
    create?: XOR<BruteCreateWithoutTitlesInput, BruteUncheckedCreateWithoutTitlesInput> | BruteCreateWithoutTitlesInput[] | BruteUncheckedCreateWithoutTitlesInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutTitlesInput | BruteCreateOrConnectWithoutTitlesInput[]
    upsert?: BruteUpsertWithWhereUniqueWithoutTitlesInput | BruteUpsertWithWhereUniqueWithoutTitlesInput[]
    set?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    disconnect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    delete?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    update?: BruteUpdateWithWhereUniqueWithoutTitlesInput | BruteUpdateWithWhereUniqueWithoutTitlesInput[]
    updateMany?: BruteUpdateManyWithWhereWithoutTitlesInput | BruteUpdateManyWithWhereWithoutTitlesInput[]
    deleteMany?: BruteScalarWhereInput | BruteScalarWhereInput[]
  }

  export type BruteCreateNestedOneWithoutReportsInput = {
    create?: XOR<BruteCreateWithoutReportsInput, BruteUncheckedCreateWithoutReportsInput>
    connectOrCreate?: BruteCreateOrConnectWithoutReportsInput
    connect?: BruteWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutReportsInput = {
    create?: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput> | UserCreateWithoutReportsInput[] | UserUncheckedCreateWithoutReportsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutReportsInput | UserCreateOrConnectWithoutReportsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutReportsInput = {
    create?: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput> | UserCreateWithoutReportsInput[] | UserUncheckedCreateWithoutReportsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutReportsInput | UserCreateOrConnectWithoutReportsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type EnumBruteReportReasonFieldUpdateOperationsInput = {
    set?: $Enums.BruteReportReason
  }

  export type EnumBruteReportStatusFieldUpdateOperationsInput = {
    set?: $Enums.BruteReportStatus
  }

  export type BruteUpdateOneRequiredWithoutReportsNestedInput = {
    create?: XOR<BruteCreateWithoutReportsInput, BruteUncheckedCreateWithoutReportsInput>
    connectOrCreate?: BruteCreateOrConnectWithoutReportsInput
    upsert?: BruteUpsertWithoutReportsInput
    connect?: BruteWhereUniqueInput
    update?: XOR<XOR<BruteUpdateToOneWithWhereWithoutReportsInput, BruteUpdateWithoutReportsInput>, BruteUncheckedUpdateWithoutReportsInput>
  }

  export type UserUpdateManyWithoutReportsNestedInput = {
    create?: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput> | UserCreateWithoutReportsInput[] | UserUncheckedCreateWithoutReportsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutReportsInput | UserCreateOrConnectWithoutReportsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutReportsInput | UserUpsertWithWhereUniqueWithoutReportsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutReportsInput | UserUpdateWithWhereUniqueWithoutReportsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutReportsInput | UserUpdateManyWithWhereWithoutReportsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutReportsNestedInput = {
    create?: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput> | UserCreateWithoutReportsInput[] | UserUncheckedCreateWithoutReportsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutReportsInput | UserCreateOrConnectWithoutReportsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutReportsInput | UserUpsertWithWhereUniqueWithoutReportsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutReportsInput | UserUpdateWithWhereUniqueWithoutReportsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutReportsInput | UserUpdateManyWithWhereWithoutReportsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ServerStateCreateactiveModifiersInput = {
    set: $Enums.FightModifier[]
  }

  export type ServerStateCreatenextModifiersInput = {
    set: $Enums.FightModifier[]
  }

  export type ServerStateUpdateactiveModifiersInput = {
    set?: $Enums.FightModifier[]
    push?: $Enums.FightModifier | $Enums.FightModifier[]
  }

  export type ServerStateUpdatenextModifiersInput = {
    set?: $Enums.FightModifier[]
    push?: $Enums.FightModifier | $Enums.FightModifier[]
  }

  export type BruteCreateNestedOneWithoutMasterOfClanInput = {
    create?: XOR<BruteCreateWithoutMasterOfClanInput, BruteUncheckedCreateWithoutMasterOfClanInput>
    connectOrCreate?: BruteCreateOrConnectWithoutMasterOfClanInput
    connect?: BruteWhereUniqueInput
  }

  export type BruteCreateNestedManyWithoutClanInput = {
    create?: XOR<BruteCreateWithoutClanInput, BruteUncheckedCreateWithoutClanInput> | BruteCreateWithoutClanInput[] | BruteUncheckedCreateWithoutClanInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutClanInput | BruteCreateOrConnectWithoutClanInput[]
    createMany?: BruteCreateManyClanInputEnvelope
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
  }

  export type BruteCreateNestedManyWithoutWantToJoinClanInput = {
    create?: XOR<BruteCreateWithoutWantToJoinClanInput, BruteUncheckedCreateWithoutWantToJoinClanInput> | BruteCreateWithoutWantToJoinClanInput[] | BruteUncheckedCreateWithoutWantToJoinClanInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutWantToJoinClanInput | BruteCreateOrConnectWithoutWantToJoinClanInput[]
    createMany?: BruteCreateManyWantToJoinClanInputEnvelope
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
  }

  export type ClanThreadCreateNestedManyWithoutClanInput = {
    create?: XOR<ClanThreadCreateWithoutClanInput, ClanThreadUncheckedCreateWithoutClanInput> | ClanThreadCreateWithoutClanInput[] | ClanThreadUncheckedCreateWithoutClanInput[]
    connectOrCreate?: ClanThreadCreateOrConnectWithoutClanInput | ClanThreadCreateOrConnectWithoutClanInput[]
    createMany?: ClanThreadCreateManyClanInputEnvelope
    connect?: ClanThreadWhereUniqueInput | ClanThreadWhereUniqueInput[]
  }

  export type BossDamageCreateNestedManyWithoutClanInput = {
    create?: XOR<BossDamageCreateWithoutClanInput, BossDamageUncheckedCreateWithoutClanInput> | BossDamageCreateWithoutClanInput[] | BossDamageUncheckedCreateWithoutClanInput[]
    connectOrCreate?: BossDamageCreateOrConnectWithoutClanInput | BossDamageCreateOrConnectWithoutClanInput[]
    createMany?: BossDamageCreateManyClanInputEnvelope
    connect?: BossDamageWhereUniqueInput | BossDamageWhereUniqueInput[]
  }

  export type ClanWarCreateNestedManyWithoutAttackerInput = {
    create?: XOR<ClanWarCreateWithoutAttackerInput, ClanWarUncheckedCreateWithoutAttackerInput> | ClanWarCreateWithoutAttackerInput[] | ClanWarUncheckedCreateWithoutAttackerInput[]
    connectOrCreate?: ClanWarCreateOrConnectWithoutAttackerInput | ClanWarCreateOrConnectWithoutAttackerInput[]
    createMany?: ClanWarCreateManyAttackerInputEnvelope
    connect?: ClanWarWhereUniqueInput | ClanWarWhereUniqueInput[]
  }

  export type ClanWarCreateNestedManyWithoutDefenderInput = {
    create?: XOR<ClanWarCreateWithoutDefenderInput, ClanWarUncheckedCreateWithoutDefenderInput> | ClanWarCreateWithoutDefenderInput[] | ClanWarUncheckedCreateWithoutDefenderInput[]
    connectOrCreate?: ClanWarCreateOrConnectWithoutDefenderInput | ClanWarCreateOrConnectWithoutDefenderInput[]
    createMany?: ClanWarCreateManyDefenderInputEnvelope
    connect?: ClanWarWhereUniqueInput | ClanWarWhereUniqueInput[]
  }

  export type ClanWarCreateNestedManyWithoutWinnerInput = {
    create?: XOR<ClanWarCreateWithoutWinnerInput, ClanWarUncheckedCreateWithoutWinnerInput> | ClanWarCreateWithoutWinnerInput[] | ClanWarUncheckedCreateWithoutWinnerInput[]
    connectOrCreate?: ClanWarCreateOrConnectWithoutWinnerInput | ClanWarCreateOrConnectWithoutWinnerInput[]
    createMany?: ClanWarCreateManyWinnerInputEnvelope
    connect?: ClanWarWhereUniqueInput | ClanWarWhereUniqueInput[]
  }

  export type BruteUncheckedCreateNestedManyWithoutClanInput = {
    create?: XOR<BruteCreateWithoutClanInput, BruteUncheckedCreateWithoutClanInput> | BruteCreateWithoutClanInput[] | BruteUncheckedCreateWithoutClanInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutClanInput | BruteCreateOrConnectWithoutClanInput[]
    createMany?: BruteCreateManyClanInputEnvelope
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
  }

  export type BruteUncheckedCreateNestedManyWithoutWantToJoinClanInput = {
    create?: XOR<BruteCreateWithoutWantToJoinClanInput, BruteUncheckedCreateWithoutWantToJoinClanInput> | BruteCreateWithoutWantToJoinClanInput[] | BruteUncheckedCreateWithoutWantToJoinClanInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutWantToJoinClanInput | BruteCreateOrConnectWithoutWantToJoinClanInput[]
    createMany?: BruteCreateManyWantToJoinClanInputEnvelope
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
  }

  export type ClanThreadUncheckedCreateNestedManyWithoutClanInput = {
    create?: XOR<ClanThreadCreateWithoutClanInput, ClanThreadUncheckedCreateWithoutClanInput> | ClanThreadCreateWithoutClanInput[] | ClanThreadUncheckedCreateWithoutClanInput[]
    connectOrCreate?: ClanThreadCreateOrConnectWithoutClanInput | ClanThreadCreateOrConnectWithoutClanInput[]
    createMany?: ClanThreadCreateManyClanInputEnvelope
    connect?: ClanThreadWhereUniqueInput | ClanThreadWhereUniqueInput[]
  }

  export type BossDamageUncheckedCreateNestedManyWithoutClanInput = {
    create?: XOR<BossDamageCreateWithoutClanInput, BossDamageUncheckedCreateWithoutClanInput> | BossDamageCreateWithoutClanInput[] | BossDamageUncheckedCreateWithoutClanInput[]
    connectOrCreate?: BossDamageCreateOrConnectWithoutClanInput | BossDamageCreateOrConnectWithoutClanInput[]
    createMany?: BossDamageCreateManyClanInputEnvelope
    connect?: BossDamageWhereUniqueInput | BossDamageWhereUniqueInput[]
  }

  export type ClanWarUncheckedCreateNestedManyWithoutAttackerInput = {
    create?: XOR<ClanWarCreateWithoutAttackerInput, ClanWarUncheckedCreateWithoutAttackerInput> | ClanWarCreateWithoutAttackerInput[] | ClanWarUncheckedCreateWithoutAttackerInput[]
    connectOrCreate?: ClanWarCreateOrConnectWithoutAttackerInput | ClanWarCreateOrConnectWithoutAttackerInput[]
    createMany?: ClanWarCreateManyAttackerInputEnvelope
    connect?: ClanWarWhereUniqueInput | ClanWarWhereUniqueInput[]
  }

  export type ClanWarUncheckedCreateNestedManyWithoutDefenderInput = {
    create?: XOR<ClanWarCreateWithoutDefenderInput, ClanWarUncheckedCreateWithoutDefenderInput> | ClanWarCreateWithoutDefenderInput[] | ClanWarUncheckedCreateWithoutDefenderInput[]
    connectOrCreate?: ClanWarCreateOrConnectWithoutDefenderInput | ClanWarCreateOrConnectWithoutDefenderInput[]
    createMany?: ClanWarCreateManyDefenderInputEnvelope
    connect?: ClanWarWhereUniqueInput | ClanWarWhereUniqueInput[]
  }

  export type ClanWarUncheckedCreateNestedManyWithoutWinnerInput = {
    create?: XOR<ClanWarCreateWithoutWinnerInput, ClanWarUncheckedCreateWithoutWinnerInput> | ClanWarCreateWithoutWinnerInput[] | ClanWarUncheckedCreateWithoutWinnerInput[]
    connectOrCreate?: ClanWarCreateOrConnectWithoutWinnerInput | ClanWarCreateOrConnectWithoutWinnerInput[]
    createMany?: ClanWarCreateManyWinnerInputEnvelope
    connect?: ClanWarWhereUniqueInput | ClanWarWhereUniqueInput[]
  }

  export type EnumBossNameFieldUpdateOperationsInput = {
    set?: $Enums.BossName
  }

  export type BruteUpdateOneWithoutMasterOfClanNestedInput = {
    create?: XOR<BruteCreateWithoutMasterOfClanInput, BruteUncheckedCreateWithoutMasterOfClanInput>
    connectOrCreate?: BruteCreateOrConnectWithoutMasterOfClanInput
    upsert?: BruteUpsertWithoutMasterOfClanInput
    disconnect?: BruteWhereInput | boolean
    delete?: BruteWhereInput | boolean
    connect?: BruteWhereUniqueInput
    update?: XOR<XOR<BruteUpdateToOneWithWhereWithoutMasterOfClanInput, BruteUpdateWithoutMasterOfClanInput>, BruteUncheckedUpdateWithoutMasterOfClanInput>
  }

  export type BruteUpdateManyWithoutClanNestedInput = {
    create?: XOR<BruteCreateWithoutClanInput, BruteUncheckedCreateWithoutClanInput> | BruteCreateWithoutClanInput[] | BruteUncheckedCreateWithoutClanInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutClanInput | BruteCreateOrConnectWithoutClanInput[]
    upsert?: BruteUpsertWithWhereUniqueWithoutClanInput | BruteUpsertWithWhereUniqueWithoutClanInput[]
    createMany?: BruteCreateManyClanInputEnvelope
    set?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    disconnect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    delete?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    update?: BruteUpdateWithWhereUniqueWithoutClanInput | BruteUpdateWithWhereUniqueWithoutClanInput[]
    updateMany?: BruteUpdateManyWithWhereWithoutClanInput | BruteUpdateManyWithWhereWithoutClanInput[]
    deleteMany?: BruteScalarWhereInput | BruteScalarWhereInput[]
  }

  export type BruteUpdateManyWithoutWantToJoinClanNestedInput = {
    create?: XOR<BruteCreateWithoutWantToJoinClanInput, BruteUncheckedCreateWithoutWantToJoinClanInput> | BruteCreateWithoutWantToJoinClanInput[] | BruteUncheckedCreateWithoutWantToJoinClanInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutWantToJoinClanInput | BruteCreateOrConnectWithoutWantToJoinClanInput[]
    upsert?: BruteUpsertWithWhereUniqueWithoutWantToJoinClanInput | BruteUpsertWithWhereUniqueWithoutWantToJoinClanInput[]
    createMany?: BruteCreateManyWantToJoinClanInputEnvelope
    set?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    disconnect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    delete?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    update?: BruteUpdateWithWhereUniqueWithoutWantToJoinClanInput | BruteUpdateWithWhereUniqueWithoutWantToJoinClanInput[]
    updateMany?: BruteUpdateManyWithWhereWithoutWantToJoinClanInput | BruteUpdateManyWithWhereWithoutWantToJoinClanInput[]
    deleteMany?: BruteScalarWhereInput | BruteScalarWhereInput[]
  }

  export type ClanThreadUpdateManyWithoutClanNestedInput = {
    create?: XOR<ClanThreadCreateWithoutClanInput, ClanThreadUncheckedCreateWithoutClanInput> | ClanThreadCreateWithoutClanInput[] | ClanThreadUncheckedCreateWithoutClanInput[]
    connectOrCreate?: ClanThreadCreateOrConnectWithoutClanInput | ClanThreadCreateOrConnectWithoutClanInput[]
    upsert?: ClanThreadUpsertWithWhereUniqueWithoutClanInput | ClanThreadUpsertWithWhereUniqueWithoutClanInput[]
    createMany?: ClanThreadCreateManyClanInputEnvelope
    set?: ClanThreadWhereUniqueInput | ClanThreadWhereUniqueInput[]
    disconnect?: ClanThreadWhereUniqueInput | ClanThreadWhereUniqueInput[]
    delete?: ClanThreadWhereUniqueInput | ClanThreadWhereUniqueInput[]
    connect?: ClanThreadWhereUniqueInput | ClanThreadWhereUniqueInput[]
    update?: ClanThreadUpdateWithWhereUniqueWithoutClanInput | ClanThreadUpdateWithWhereUniqueWithoutClanInput[]
    updateMany?: ClanThreadUpdateManyWithWhereWithoutClanInput | ClanThreadUpdateManyWithWhereWithoutClanInput[]
    deleteMany?: ClanThreadScalarWhereInput | ClanThreadScalarWhereInput[]
  }

  export type BossDamageUpdateManyWithoutClanNestedInput = {
    create?: XOR<BossDamageCreateWithoutClanInput, BossDamageUncheckedCreateWithoutClanInput> | BossDamageCreateWithoutClanInput[] | BossDamageUncheckedCreateWithoutClanInput[]
    connectOrCreate?: BossDamageCreateOrConnectWithoutClanInput | BossDamageCreateOrConnectWithoutClanInput[]
    upsert?: BossDamageUpsertWithWhereUniqueWithoutClanInput | BossDamageUpsertWithWhereUniqueWithoutClanInput[]
    createMany?: BossDamageCreateManyClanInputEnvelope
    set?: BossDamageWhereUniqueInput | BossDamageWhereUniqueInput[]
    disconnect?: BossDamageWhereUniqueInput | BossDamageWhereUniqueInput[]
    delete?: BossDamageWhereUniqueInput | BossDamageWhereUniqueInput[]
    connect?: BossDamageWhereUniqueInput | BossDamageWhereUniqueInput[]
    update?: BossDamageUpdateWithWhereUniqueWithoutClanInput | BossDamageUpdateWithWhereUniqueWithoutClanInput[]
    updateMany?: BossDamageUpdateManyWithWhereWithoutClanInput | BossDamageUpdateManyWithWhereWithoutClanInput[]
    deleteMany?: BossDamageScalarWhereInput | BossDamageScalarWhereInput[]
  }

  export type ClanWarUpdateManyWithoutAttackerNestedInput = {
    create?: XOR<ClanWarCreateWithoutAttackerInput, ClanWarUncheckedCreateWithoutAttackerInput> | ClanWarCreateWithoutAttackerInput[] | ClanWarUncheckedCreateWithoutAttackerInput[]
    connectOrCreate?: ClanWarCreateOrConnectWithoutAttackerInput | ClanWarCreateOrConnectWithoutAttackerInput[]
    upsert?: ClanWarUpsertWithWhereUniqueWithoutAttackerInput | ClanWarUpsertWithWhereUniqueWithoutAttackerInput[]
    createMany?: ClanWarCreateManyAttackerInputEnvelope
    set?: ClanWarWhereUniqueInput | ClanWarWhereUniqueInput[]
    disconnect?: ClanWarWhereUniqueInput | ClanWarWhereUniqueInput[]
    delete?: ClanWarWhereUniqueInput | ClanWarWhereUniqueInput[]
    connect?: ClanWarWhereUniqueInput | ClanWarWhereUniqueInput[]
    update?: ClanWarUpdateWithWhereUniqueWithoutAttackerInput | ClanWarUpdateWithWhereUniqueWithoutAttackerInput[]
    updateMany?: ClanWarUpdateManyWithWhereWithoutAttackerInput | ClanWarUpdateManyWithWhereWithoutAttackerInput[]
    deleteMany?: ClanWarScalarWhereInput | ClanWarScalarWhereInput[]
  }

  export type ClanWarUpdateManyWithoutDefenderNestedInput = {
    create?: XOR<ClanWarCreateWithoutDefenderInput, ClanWarUncheckedCreateWithoutDefenderInput> | ClanWarCreateWithoutDefenderInput[] | ClanWarUncheckedCreateWithoutDefenderInput[]
    connectOrCreate?: ClanWarCreateOrConnectWithoutDefenderInput | ClanWarCreateOrConnectWithoutDefenderInput[]
    upsert?: ClanWarUpsertWithWhereUniqueWithoutDefenderInput | ClanWarUpsertWithWhereUniqueWithoutDefenderInput[]
    createMany?: ClanWarCreateManyDefenderInputEnvelope
    set?: ClanWarWhereUniqueInput | ClanWarWhereUniqueInput[]
    disconnect?: ClanWarWhereUniqueInput | ClanWarWhereUniqueInput[]
    delete?: ClanWarWhereUniqueInput | ClanWarWhereUniqueInput[]
    connect?: ClanWarWhereUniqueInput | ClanWarWhereUniqueInput[]
    update?: ClanWarUpdateWithWhereUniqueWithoutDefenderInput | ClanWarUpdateWithWhereUniqueWithoutDefenderInput[]
    updateMany?: ClanWarUpdateManyWithWhereWithoutDefenderInput | ClanWarUpdateManyWithWhereWithoutDefenderInput[]
    deleteMany?: ClanWarScalarWhereInput | ClanWarScalarWhereInput[]
  }

  export type ClanWarUpdateManyWithoutWinnerNestedInput = {
    create?: XOR<ClanWarCreateWithoutWinnerInput, ClanWarUncheckedCreateWithoutWinnerInput> | ClanWarCreateWithoutWinnerInput[] | ClanWarUncheckedCreateWithoutWinnerInput[]
    connectOrCreate?: ClanWarCreateOrConnectWithoutWinnerInput | ClanWarCreateOrConnectWithoutWinnerInput[]
    upsert?: ClanWarUpsertWithWhereUniqueWithoutWinnerInput | ClanWarUpsertWithWhereUniqueWithoutWinnerInput[]
    createMany?: ClanWarCreateManyWinnerInputEnvelope
    set?: ClanWarWhereUniqueInput | ClanWarWhereUniqueInput[]
    disconnect?: ClanWarWhereUniqueInput | ClanWarWhereUniqueInput[]
    delete?: ClanWarWhereUniqueInput | ClanWarWhereUniqueInput[]
    connect?: ClanWarWhereUniqueInput | ClanWarWhereUniqueInput[]
    update?: ClanWarUpdateWithWhereUniqueWithoutWinnerInput | ClanWarUpdateWithWhereUniqueWithoutWinnerInput[]
    updateMany?: ClanWarUpdateManyWithWhereWithoutWinnerInput | ClanWarUpdateManyWithWhereWithoutWinnerInput[]
    deleteMany?: ClanWarScalarWhereInput | ClanWarScalarWhereInput[]
  }

  export type BruteUncheckedUpdateManyWithoutClanNestedInput = {
    create?: XOR<BruteCreateWithoutClanInput, BruteUncheckedCreateWithoutClanInput> | BruteCreateWithoutClanInput[] | BruteUncheckedCreateWithoutClanInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutClanInput | BruteCreateOrConnectWithoutClanInput[]
    upsert?: BruteUpsertWithWhereUniqueWithoutClanInput | BruteUpsertWithWhereUniqueWithoutClanInput[]
    createMany?: BruteCreateManyClanInputEnvelope
    set?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    disconnect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    delete?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    update?: BruteUpdateWithWhereUniqueWithoutClanInput | BruteUpdateWithWhereUniqueWithoutClanInput[]
    updateMany?: BruteUpdateManyWithWhereWithoutClanInput | BruteUpdateManyWithWhereWithoutClanInput[]
    deleteMany?: BruteScalarWhereInput | BruteScalarWhereInput[]
  }

  export type BruteUncheckedUpdateManyWithoutWantToJoinClanNestedInput = {
    create?: XOR<BruteCreateWithoutWantToJoinClanInput, BruteUncheckedCreateWithoutWantToJoinClanInput> | BruteCreateWithoutWantToJoinClanInput[] | BruteUncheckedCreateWithoutWantToJoinClanInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutWantToJoinClanInput | BruteCreateOrConnectWithoutWantToJoinClanInput[]
    upsert?: BruteUpsertWithWhereUniqueWithoutWantToJoinClanInput | BruteUpsertWithWhereUniqueWithoutWantToJoinClanInput[]
    createMany?: BruteCreateManyWantToJoinClanInputEnvelope
    set?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    disconnect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    delete?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    update?: BruteUpdateWithWhereUniqueWithoutWantToJoinClanInput | BruteUpdateWithWhereUniqueWithoutWantToJoinClanInput[]
    updateMany?: BruteUpdateManyWithWhereWithoutWantToJoinClanInput | BruteUpdateManyWithWhereWithoutWantToJoinClanInput[]
    deleteMany?: BruteScalarWhereInput | BruteScalarWhereInput[]
  }

  export type ClanThreadUncheckedUpdateManyWithoutClanNestedInput = {
    create?: XOR<ClanThreadCreateWithoutClanInput, ClanThreadUncheckedCreateWithoutClanInput> | ClanThreadCreateWithoutClanInput[] | ClanThreadUncheckedCreateWithoutClanInput[]
    connectOrCreate?: ClanThreadCreateOrConnectWithoutClanInput | ClanThreadCreateOrConnectWithoutClanInput[]
    upsert?: ClanThreadUpsertWithWhereUniqueWithoutClanInput | ClanThreadUpsertWithWhereUniqueWithoutClanInput[]
    createMany?: ClanThreadCreateManyClanInputEnvelope
    set?: ClanThreadWhereUniqueInput | ClanThreadWhereUniqueInput[]
    disconnect?: ClanThreadWhereUniqueInput | ClanThreadWhereUniqueInput[]
    delete?: ClanThreadWhereUniqueInput | ClanThreadWhereUniqueInput[]
    connect?: ClanThreadWhereUniqueInput | ClanThreadWhereUniqueInput[]
    update?: ClanThreadUpdateWithWhereUniqueWithoutClanInput | ClanThreadUpdateWithWhereUniqueWithoutClanInput[]
    updateMany?: ClanThreadUpdateManyWithWhereWithoutClanInput | ClanThreadUpdateManyWithWhereWithoutClanInput[]
    deleteMany?: ClanThreadScalarWhereInput | ClanThreadScalarWhereInput[]
  }

  export type BossDamageUncheckedUpdateManyWithoutClanNestedInput = {
    create?: XOR<BossDamageCreateWithoutClanInput, BossDamageUncheckedCreateWithoutClanInput> | BossDamageCreateWithoutClanInput[] | BossDamageUncheckedCreateWithoutClanInput[]
    connectOrCreate?: BossDamageCreateOrConnectWithoutClanInput | BossDamageCreateOrConnectWithoutClanInput[]
    upsert?: BossDamageUpsertWithWhereUniqueWithoutClanInput | BossDamageUpsertWithWhereUniqueWithoutClanInput[]
    createMany?: BossDamageCreateManyClanInputEnvelope
    set?: BossDamageWhereUniqueInput | BossDamageWhereUniqueInput[]
    disconnect?: BossDamageWhereUniqueInput | BossDamageWhereUniqueInput[]
    delete?: BossDamageWhereUniqueInput | BossDamageWhereUniqueInput[]
    connect?: BossDamageWhereUniqueInput | BossDamageWhereUniqueInput[]
    update?: BossDamageUpdateWithWhereUniqueWithoutClanInput | BossDamageUpdateWithWhereUniqueWithoutClanInput[]
    updateMany?: BossDamageUpdateManyWithWhereWithoutClanInput | BossDamageUpdateManyWithWhereWithoutClanInput[]
    deleteMany?: BossDamageScalarWhereInput | BossDamageScalarWhereInput[]
  }

  export type ClanWarUncheckedUpdateManyWithoutAttackerNestedInput = {
    create?: XOR<ClanWarCreateWithoutAttackerInput, ClanWarUncheckedCreateWithoutAttackerInput> | ClanWarCreateWithoutAttackerInput[] | ClanWarUncheckedCreateWithoutAttackerInput[]
    connectOrCreate?: ClanWarCreateOrConnectWithoutAttackerInput | ClanWarCreateOrConnectWithoutAttackerInput[]
    upsert?: ClanWarUpsertWithWhereUniqueWithoutAttackerInput | ClanWarUpsertWithWhereUniqueWithoutAttackerInput[]
    createMany?: ClanWarCreateManyAttackerInputEnvelope
    set?: ClanWarWhereUniqueInput | ClanWarWhereUniqueInput[]
    disconnect?: ClanWarWhereUniqueInput | ClanWarWhereUniqueInput[]
    delete?: ClanWarWhereUniqueInput | ClanWarWhereUniqueInput[]
    connect?: ClanWarWhereUniqueInput | ClanWarWhereUniqueInput[]
    update?: ClanWarUpdateWithWhereUniqueWithoutAttackerInput | ClanWarUpdateWithWhereUniqueWithoutAttackerInput[]
    updateMany?: ClanWarUpdateManyWithWhereWithoutAttackerInput | ClanWarUpdateManyWithWhereWithoutAttackerInput[]
    deleteMany?: ClanWarScalarWhereInput | ClanWarScalarWhereInput[]
  }

  export type ClanWarUncheckedUpdateManyWithoutDefenderNestedInput = {
    create?: XOR<ClanWarCreateWithoutDefenderInput, ClanWarUncheckedCreateWithoutDefenderInput> | ClanWarCreateWithoutDefenderInput[] | ClanWarUncheckedCreateWithoutDefenderInput[]
    connectOrCreate?: ClanWarCreateOrConnectWithoutDefenderInput | ClanWarCreateOrConnectWithoutDefenderInput[]
    upsert?: ClanWarUpsertWithWhereUniqueWithoutDefenderInput | ClanWarUpsertWithWhereUniqueWithoutDefenderInput[]
    createMany?: ClanWarCreateManyDefenderInputEnvelope
    set?: ClanWarWhereUniqueInput | ClanWarWhereUniqueInput[]
    disconnect?: ClanWarWhereUniqueInput | ClanWarWhereUniqueInput[]
    delete?: ClanWarWhereUniqueInput | ClanWarWhereUniqueInput[]
    connect?: ClanWarWhereUniqueInput | ClanWarWhereUniqueInput[]
    update?: ClanWarUpdateWithWhereUniqueWithoutDefenderInput | ClanWarUpdateWithWhereUniqueWithoutDefenderInput[]
    updateMany?: ClanWarUpdateManyWithWhereWithoutDefenderInput | ClanWarUpdateManyWithWhereWithoutDefenderInput[]
    deleteMany?: ClanWarScalarWhereInput | ClanWarScalarWhereInput[]
  }

  export type ClanWarUncheckedUpdateManyWithoutWinnerNestedInput = {
    create?: XOR<ClanWarCreateWithoutWinnerInput, ClanWarUncheckedCreateWithoutWinnerInput> | ClanWarCreateWithoutWinnerInput[] | ClanWarUncheckedCreateWithoutWinnerInput[]
    connectOrCreate?: ClanWarCreateOrConnectWithoutWinnerInput | ClanWarCreateOrConnectWithoutWinnerInput[]
    upsert?: ClanWarUpsertWithWhereUniqueWithoutWinnerInput | ClanWarUpsertWithWhereUniqueWithoutWinnerInput[]
    createMany?: ClanWarCreateManyWinnerInputEnvelope
    set?: ClanWarWhereUniqueInput | ClanWarWhereUniqueInput[]
    disconnect?: ClanWarWhereUniqueInput | ClanWarWhereUniqueInput[]
    delete?: ClanWarWhereUniqueInput | ClanWarWhereUniqueInput[]
    connect?: ClanWarWhereUniqueInput | ClanWarWhereUniqueInput[]
    update?: ClanWarUpdateWithWhereUniqueWithoutWinnerInput | ClanWarUpdateWithWhereUniqueWithoutWinnerInput[]
    updateMany?: ClanWarUpdateManyWithWhereWithoutWinnerInput | ClanWarUpdateManyWithWhereWithoutWinnerInput[]
    deleteMany?: ClanWarScalarWhereInput | ClanWarScalarWhereInput[]
  }

  export type ClanCreateNestedOneWithoutThreadsInput = {
    create?: XOR<ClanCreateWithoutThreadsInput, ClanUncheckedCreateWithoutThreadsInput>
    connectOrCreate?: ClanCreateOrConnectWithoutThreadsInput
    connect?: ClanWhereUniqueInput
  }

  export type BruteCreateNestedOneWithoutThreadsInput = {
    create?: XOR<BruteCreateWithoutThreadsInput, BruteUncheckedCreateWithoutThreadsInput>
    connectOrCreate?: BruteCreateOrConnectWithoutThreadsInput
    connect?: BruteWhereUniqueInput
  }

  export type ClanPostCreateNestedManyWithoutThreadInput = {
    create?: XOR<ClanPostCreateWithoutThreadInput, ClanPostUncheckedCreateWithoutThreadInput> | ClanPostCreateWithoutThreadInput[] | ClanPostUncheckedCreateWithoutThreadInput[]
    connectOrCreate?: ClanPostCreateOrConnectWithoutThreadInput | ClanPostCreateOrConnectWithoutThreadInput[]
    createMany?: ClanPostCreateManyThreadInputEnvelope
    connect?: ClanPostWhereUniqueInput | ClanPostWhereUniqueInput[]
  }

  export type ClanPostUncheckedCreateNestedManyWithoutThreadInput = {
    create?: XOR<ClanPostCreateWithoutThreadInput, ClanPostUncheckedCreateWithoutThreadInput> | ClanPostCreateWithoutThreadInput[] | ClanPostUncheckedCreateWithoutThreadInput[]
    connectOrCreate?: ClanPostCreateOrConnectWithoutThreadInput | ClanPostCreateOrConnectWithoutThreadInput[]
    createMany?: ClanPostCreateManyThreadInputEnvelope
    connect?: ClanPostWhereUniqueInput | ClanPostWhereUniqueInput[]
  }

  export type ClanUpdateOneRequiredWithoutThreadsNestedInput = {
    create?: XOR<ClanCreateWithoutThreadsInput, ClanUncheckedCreateWithoutThreadsInput>
    connectOrCreate?: ClanCreateOrConnectWithoutThreadsInput
    upsert?: ClanUpsertWithoutThreadsInput
    connect?: ClanWhereUniqueInput
    update?: XOR<XOR<ClanUpdateToOneWithWhereWithoutThreadsInput, ClanUpdateWithoutThreadsInput>, ClanUncheckedUpdateWithoutThreadsInput>
  }

  export type BruteUpdateOneRequiredWithoutThreadsNestedInput = {
    create?: XOR<BruteCreateWithoutThreadsInput, BruteUncheckedCreateWithoutThreadsInput>
    connectOrCreate?: BruteCreateOrConnectWithoutThreadsInput
    upsert?: BruteUpsertWithoutThreadsInput
    connect?: BruteWhereUniqueInput
    update?: XOR<XOR<BruteUpdateToOneWithWhereWithoutThreadsInput, BruteUpdateWithoutThreadsInput>, BruteUncheckedUpdateWithoutThreadsInput>
  }

  export type ClanPostUpdateManyWithoutThreadNestedInput = {
    create?: XOR<ClanPostCreateWithoutThreadInput, ClanPostUncheckedCreateWithoutThreadInput> | ClanPostCreateWithoutThreadInput[] | ClanPostUncheckedCreateWithoutThreadInput[]
    connectOrCreate?: ClanPostCreateOrConnectWithoutThreadInput | ClanPostCreateOrConnectWithoutThreadInput[]
    upsert?: ClanPostUpsertWithWhereUniqueWithoutThreadInput | ClanPostUpsertWithWhereUniqueWithoutThreadInput[]
    createMany?: ClanPostCreateManyThreadInputEnvelope
    set?: ClanPostWhereUniqueInput | ClanPostWhereUniqueInput[]
    disconnect?: ClanPostWhereUniqueInput | ClanPostWhereUniqueInput[]
    delete?: ClanPostWhereUniqueInput | ClanPostWhereUniqueInput[]
    connect?: ClanPostWhereUniqueInput | ClanPostWhereUniqueInput[]
    update?: ClanPostUpdateWithWhereUniqueWithoutThreadInput | ClanPostUpdateWithWhereUniqueWithoutThreadInput[]
    updateMany?: ClanPostUpdateManyWithWhereWithoutThreadInput | ClanPostUpdateManyWithWhereWithoutThreadInput[]
    deleteMany?: ClanPostScalarWhereInput | ClanPostScalarWhereInput[]
  }

  export type ClanPostUncheckedUpdateManyWithoutThreadNestedInput = {
    create?: XOR<ClanPostCreateWithoutThreadInput, ClanPostUncheckedCreateWithoutThreadInput> | ClanPostCreateWithoutThreadInput[] | ClanPostUncheckedCreateWithoutThreadInput[]
    connectOrCreate?: ClanPostCreateOrConnectWithoutThreadInput | ClanPostCreateOrConnectWithoutThreadInput[]
    upsert?: ClanPostUpsertWithWhereUniqueWithoutThreadInput | ClanPostUpsertWithWhereUniqueWithoutThreadInput[]
    createMany?: ClanPostCreateManyThreadInputEnvelope
    set?: ClanPostWhereUniqueInput | ClanPostWhereUniqueInput[]
    disconnect?: ClanPostWhereUniqueInput | ClanPostWhereUniqueInput[]
    delete?: ClanPostWhereUniqueInput | ClanPostWhereUniqueInput[]
    connect?: ClanPostWhereUniqueInput | ClanPostWhereUniqueInput[]
    update?: ClanPostUpdateWithWhereUniqueWithoutThreadInput | ClanPostUpdateWithWhereUniqueWithoutThreadInput[]
    updateMany?: ClanPostUpdateManyWithWhereWithoutThreadInput | ClanPostUpdateManyWithWhereWithoutThreadInput[]
    deleteMany?: ClanPostScalarWhereInput | ClanPostScalarWhereInput[]
  }

  export type ClanThreadCreateNestedOneWithoutPostsInput = {
    create?: XOR<ClanThreadCreateWithoutPostsInput, ClanThreadUncheckedCreateWithoutPostsInput>
    connectOrCreate?: ClanThreadCreateOrConnectWithoutPostsInput
    connect?: ClanThreadWhereUniqueInput
  }

  export type BruteCreateNestedOneWithoutClanPostsInput = {
    create?: XOR<BruteCreateWithoutClanPostsInput, BruteUncheckedCreateWithoutClanPostsInput>
    connectOrCreate?: BruteCreateOrConnectWithoutClanPostsInput
    connect?: BruteWhereUniqueInput
  }

  export type ClanThreadUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<ClanThreadCreateWithoutPostsInput, ClanThreadUncheckedCreateWithoutPostsInput>
    connectOrCreate?: ClanThreadCreateOrConnectWithoutPostsInput
    upsert?: ClanThreadUpsertWithoutPostsInput
    connect?: ClanThreadWhereUniqueInput
    update?: XOR<XOR<ClanThreadUpdateToOneWithWhereWithoutPostsInput, ClanThreadUpdateWithoutPostsInput>, ClanThreadUncheckedUpdateWithoutPostsInput>
  }

  export type BruteUpdateOneRequiredWithoutClanPostsNestedInput = {
    create?: XOR<BruteCreateWithoutClanPostsInput, BruteUncheckedCreateWithoutClanPostsInput>
    connectOrCreate?: BruteCreateOrConnectWithoutClanPostsInput
    upsert?: BruteUpsertWithoutClanPostsInput
    connect?: BruteWhereUniqueInput
    update?: XOR<XOR<BruteUpdateToOneWithWhereWithoutClanPostsInput, BruteUpdateWithoutClanPostsInput>, BruteUncheckedUpdateWithoutClanPostsInput>
  }

  export type BruteCreateNestedOneWithoutDamageOnBossesInput = {
    create?: XOR<BruteCreateWithoutDamageOnBossesInput, BruteUncheckedCreateWithoutDamageOnBossesInput>
    connectOrCreate?: BruteCreateOrConnectWithoutDamageOnBossesInput
    connect?: BruteWhereUniqueInput
  }

  export type ClanCreateNestedOneWithoutBossDamagesInput = {
    create?: XOR<ClanCreateWithoutBossDamagesInput, ClanUncheckedCreateWithoutBossDamagesInput>
    connectOrCreate?: ClanCreateOrConnectWithoutBossDamagesInput
    connect?: ClanWhereUniqueInput
  }

  export type BruteUpdateOneRequiredWithoutDamageOnBossesNestedInput = {
    create?: XOR<BruteCreateWithoutDamageOnBossesInput, BruteUncheckedCreateWithoutDamageOnBossesInput>
    connectOrCreate?: BruteCreateOrConnectWithoutDamageOnBossesInput
    upsert?: BruteUpsertWithoutDamageOnBossesInput
    connect?: BruteWhereUniqueInput
    update?: XOR<XOR<BruteUpdateToOneWithWhereWithoutDamageOnBossesInput, BruteUpdateWithoutDamageOnBossesInput>, BruteUncheckedUpdateWithoutDamageOnBossesInput>
  }

  export type ClanUpdateOneRequiredWithoutBossDamagesNestedInput = {
    create?: XOR<ClanCreateWithoutBossDamagesInput, ClanUncheckedCreateWithoutBossDamagesInput>
    connectOrCreate?: ClanCreateOrConnectWithoutBossDamagesInput
    upsert?: ClanUpsertWithoutBossDamagesInput
    connect?: ClanWhereUniqueInput
    update?: XOR<XOR<ClanUpdateToOneWithWhereWithoutBossDamagesInput, ClanUpdateWithoutBossDamagesInput>, ClanUncheckedUpdateWithoutBossDamagesInput>
  }

  export type ClanCreateNestedOneWithoutAttacksInput = {
    create?: XOR<ClanCreateWithoutAttacksInput, ClanUncheckedCreateWithoutAttacksInput>
    connectOrCreate?: ClanCreateOrConnectWithoutAttacksInput
    connect?: ClanWhereUniqueInput
  }

  export type ClanCreateNestedOneWithoutDefensesInput = {
    create?: XOR<ClanCreateWithoutDefensesInput, ClanUncheckedCreateWithoutDefensesInput>
    connectOrCreate?: ClanCreateOrConnectWithoutDefensesInput
    connect?: ClanWhereUniqueInput
  }

  export type ClanCreateNestedOneWithoutWinsInput = {
    create?: XOR<ClanCreateWithoutWinsInput, ClanUncheckedCreateWithoutWinsInput>
    connectOrCreate?: ClanCreateOrConnectWithoutWinsInput
    connect?: ClanWhereUniqueInput
  }

  export type FightCreateNestedManyWithoutClanWarInput = {
    create?: XOR<FightCreateWithoutClanWarInput, FightUncheckedCreateWithoutClanWarInput> | FightCreateWithoutClanWarInput[] | FightUncheckedCreateWithoutClanWarInput[]
    connectOrCreate?: FightCreateOrConnectWithoutClanWarInput | FightCreateOrConnectWithoutClanWarInput[]
    createMany?: FightCreateManyClanWarInputEnvelope
    connect?: FightWhereUniqueInput | FightWhereUniqueInput[]
  }

  export type ClanWarFightersCreateNestedManyWithoutClanWarInput = {
    create?: XOR<ClanWarFightersCreateWithoutClanWarInput, ClanWarFightersUncheckedCreateWithoutClanWarInput> | ClanWarFightersCreateWithoutClanWarInput[] | ClanWarFightersUncheckedCreateWithoutClanWarInput[]
    connectOrCreate?: ClanWarFightersCreateOrConnectWithoutClanWarInput | ClanWarFightersCreateOrConnectWithoutClanWarInput[]
    createMany?: ClanWarFightersCreateManyClanWarInputEnvelope
    connect?: ClanWarFightersWhereUniqueInput | ClanWarFightersWhereUniqueInput[]
  }

  export type FightUncheckedCreateNestedManyWithoutClanWarInput = {
    create?: XOR<FightCreateWithoutClanWarInput, FightUncheckedCreateWithoutClanWarInput> | FightCreateWithoutClanWarInput[] | FightUncheckedCreateWithoutClanWarInput[]
    connectOrCreate?: FightCreateOrConnectWithoutClanWarInput | FightCreateOrConnectWithoutClanWarInput[]
    createMany?: FightCreateManyClanWarInputEnvelope
    connect?: FightWhereUniqueInput | FightWhereUniqueInput[]
  }

  export type ClanWarFightersUncheckedCreateNestedManyWithoutClanWarInput = {
    create?: XOR<ClanWarFightersCreateWithoutClanWarInput, ClanWarFightersUncheckedCreateWithoutClanWarInput> | ClanWarFightersCreateWithoutClanWarInput[] | ClanWarFightersUncheckedCreateWithoutClanWarInput[]
    connectOrCreate?: ClanWarFightersCreateOrConnectWithoutClanWarInput | ClanWarFightersCreateOrConnectWithoutClanWarInput[]
    createMany?: ClanWarFightersCreateManyClanWarInputEnvelope
    connect?: ClanWarFightersWhereUniqueInput | ClanWarFightersWhereUniqueInput[]
  }

  export type EnumClanWarTypeFieldUpdateOperationsInput = {
    set?: $Enums.ClanWarType
  }

  export type EnumClanWarStatusFieldUpdateOperationsInput = {
    set?: $Enums.ClanWarStatus
  }

  export type ClanUpdateOneRequiredWithoutAttacksNestedInput = {
    create?: XOR<ClanCreateWithoutAttacksInput, ClanUncheckedCreateWithoutAttacksInput>
    connectOrCreate?: ClanCreateOrConnectWithoutAttacksInput
    upsert?: ClanUpsertWithoutAttacksInput
    connect?: ClanWhereUniqueInput
    update?: XOR<XOR<ClanUpdateToOneWithWhereWithoutAttacksInput, ClanUpdateWithoutAttacksInput>, ClanUncheckedUpdateWithoutAttacksInput>
  }

  export type ClanUpdateOneRequiredWithoutDefensesNestedInput = {
    create?: XOR<ClanCreateWithoutDefensesInput, ClanUncheckedCreateWithoutDefensesInput>
    connectOrCreate?: ClanCreateOrConnectWithoutDefensesInput
    upsert?: ClanUpsertWithoutDefensesInput
    connect?: ClanWhereUniqueInput
    update?: XOR<XOR<ClanUpdateToOneWithWhereWithoutDefensesInput, ClanUpdateWithoutDefensesInput>, ClanUncheckedUpdateWithoutDefensesInput>
  }

  export type ClanUpdateOneWithoutWinsNestedInput = {
    create?: XOR<ClanCreateWithoutWinsInput, ClanUncheckedCreateWithoutWinsInput>
    connectOrCreate?: ClanCreateOrConnectWithoutWinsInput
    upsert?: ClanUpsertWithoutWinsInput
    disconnect?: ClanWhereInput | boolean
    delete?: ClanWhereInput | boolean
    connect?: ClanWhereUniqueInput
    update?: XOR<XOR<ClanUpdateToOneWithWhereWithoutWinsInput, ClanUpdateWithoutWinsInput>, ClanUncheckedUpdateWithoutWinsInput>
  }

  export type FightUpdateManyWithoutClanWarNestedInput = {
    create?: XOR<FightCreateWithoutClanWarInput, FightUncheckedCreateWithoutClanWarInput> | FightCreateWithoutClanWarInput[] | FightUncheckedCreateWithoutClanWarInput[]
    connectOrCreate?: FightCreateOrConnectWithoutClanWarInput | FightCreateOrConnectWithoutClanWarInput[]
    upsert?: FightUpsertWithWhereUniqueWithoutClanWarInput | FightUpsertWithWhereUniqueWithoutClanWarInput[]
    createMany?: FightCreateManyClanWarInputEnvelope
    set?: FightWhereUniqueInput | FightWhereUniqueInput[]
    disconnect?: FightWhereUniqueInput | FightWhereUniqueInput[]
    delete?: FightWhereUniqueInput | FightWhereUniqueInput[]
    connect?: FightWhereUniqueInput | FightWhereUniqueInput[]
    update?: FightUpdateWithWhereUniqueWithoutClanWarInput | FightUpdateWithWhereUniqueWithoutClanWarInput[]
    updateMany?: FightUpdateManyWithWhereWithoutClanWarInput | FightUpdateManyWithWhereWithoutClanWarInput[]
    deleteMany?: FightScalarWhereInput | FightScalarWhereInput[]
  }

  export type ClanWarFightersUpdateManyWithoutClanWarNestedInput = {
    create?: XOR<ClanWarFightersCreateWithoutClanWarInput, ClanWarFightersUncheckedCreateWithoutClanWarInput> | ClanWarFightersCreateWithoutClanWarInput[] | ClanWarFightersUncheckedCreateWithoutClanWarInput[]
    connectOrCreate?: ClanWarFightersCreateOrConnectWithoutClanWarInput | ClanWarFightersCreateOrConnectWithoutClanWarInput[]
    upsert?: ClanWarFightersUpsertWithWhereUniqueWithoutClanWarInput | ClanWarFightersUpsertWithWhereUniqueWithoutClanWarInput[]
    createMany?: ClanWarFightersCreateManyClanWarInputEnvelope
    set?: ClanWarFightersWhereUniqueInput | ClanWarFightersWhereUniqueInput[]
    disconnect?: ClanWarFightersWhereUniqueInput | ClanWarFightersWhereUniqueInput[]
    delete?: ClanWarFightersWhereUniqueInput | ClanWarFightersWhereUniqueInput[]
    connect?: ClanWarFightersWhereUniqueInput | ClanWarFightersWhereUniqueInput[]
    update?: ClanWarFightersUpdateWithWhereUniqueWithoutClanWarInput | ClanWarFightersUpdateWithWhereUniqueWithoutClanWarInput[]
    updateMany?: ClanWarFightersUpdateManyWithWhereWithoutClanWarInput | ClanWarFightersUpdateManyWithWhereWithoutClanWarInput[]
    deleteMany?: ClanWarFightersScalarWhereInput | ClanWarFightersScalarWhereInput[]
  }

  export type FightUncheckedUpdateManyWithoutClanWarNestedInput = {
    create?: XOR<FightCreateWithoutClanWarInput, FightUncheckedCreateWithoutClanWarInput> | FightCreateWithoutClanWarInput[] | FightUncheckedCreateWithoutClanWarInput[]
    connectOrCreate?: FightCreateOrConnectWithoutClanWarInput | FightCreateOrConnectWithoutClanWarInput[]
    upsert?: FightUpsertWithWhereUniqueWithoutClanWarInput | FightUpsertWithWhereUniqueWithoutClanWarInput[]
    createMany?: FightCreateManyClanWarInputEnvelope
    set?: FightWhereUniqueInput | FightWhereUniqueInput[]
    disconnect?: FightWhereUniqueInput | FightWhereUniqueInput[]
    delete?: FightWhereUniqueInput | FightWhereUniqueInput[]
    connect?: FightWhereUniqueInput | FightWhereUniqueInput[]
    update?: FightUpdateWithWhereUniqueWithoutClanWarInput | FightUpdateWithWhereUniqueWithoutClanWarInput[]
    updateMany?: FightUpdateManyWithWhereWithoutClanWarInput | FightUpdateManyWithWhereWithoutClanWarInput[]
    deleteMany?: FightScalarWhereInput | FightScalarWhereInput[]
  }

  export type ClanWarFightersUncheckedUpdateManyWithoutClanWarNestedInput = {
    create?: XOR<ClanWarFightersCreateWithoutClanWarInput, ClanWarFightersUncheckedCreateWithoutClanWarInput> | ClanWarFightersCreateWithoutClanWarInput[] | ClanWarFightersUncheckedCreateWithoutClanWarInput[]
    connectOrCreate?: ClanWarFightersCreateOrConnectWithoutClanWarInput | ClanWarFightersCreateOrConnectWithoutClanWarInput[]
    upsert?: ClanWarFightersUpsertWithWhereUniqueWithoutClanWarInput | ClanWarFightersUpsertWithWhereUniqueWithoutClanWarInput[]
    createMany?: ClanWarFightersCreateManyClanWarInputEnvelope
    set?: ClanWarFightersWhereUniqueInput | ClanWarFightersWhereUniqueInput[]
    disconnect?: ClanWarFightersWhereUniqueInput | ClanWarFightersWhereUniqueInput[]
    delete?: ClanWarFightersWhereUniqueInput | ClanWarFightersWhereUniqueInput[]
    connect?: ClanWarFightersWhereUniqueInput | ClanWarFightersWhereUniqueInput[]
    update?: ClanWarFightersUpdateWithWhereUniqueWithoutClanWarInput | ClanWarFightersUpdateWithWhereUniqueWithoutClanWarInput[]
    updateMany?: ClanWarFightersUpdateManyWithWhereWithoutClanWarInput | ClanWarFightersUpdateManyWithWhereWithoutClanWarInput[]
    deleteMany?: ClanWarFightersScalarWhereInput | ClanWarFightersScalarWhereInput[]
  }

  export type ClanWarCreateNestedOneWithoutFightersInput = {
    create?: XOR<ClanWarCreateWithoutFightersInput, ClanWarUncheckedCreateWithoutFightersInput>
    connectOrCreate?: ClanWarCreateOrConnectWithoutFightersInput
    connect?: ClanWarWhereUniqueInput
  }

  export type BruteCreateNestedManyWithoutInClanWarAttackerFightersInput = {
    create?: XOR<BruteCreateWithoutInClanWarAttackerFightersInput, BruteUncheckedCreateWithoutInClanWarAttackerFightersInput> | BruteCreateWithoutInClanWarAttackerFightersInput[] | BruteUncheckedCreateWithoutInClanWarAttackerFightersInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutInClanWarAttackerFightersInput | BruteCreateOrConnectWithoutInClanWarAttackerFightersInput[]
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
  }

  export type BruteCreateNestedManyWithoutInClanWarDefenderFightersInput = {
    create?: XOR<BruteCreateWithoutInClanWarDefenderFightersInput, BruteUncheckedCreateWithoutInClanWarDefenderFightersInput> | BruteCreateWithoutInClanWarDefenderFightersInput[] | BruteUncheckedCreateWithoutInClanWarDefenderFightersInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutInClanWarDefenderFightersInput | BruteCreateOrConnectWithoutInClanWarDefenderFightersInput[]
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
  }

  export type BruteUncheckedCreateNestedManyWithoutInClanWarAttackerFightersInput = {
    create?: XOR<BruteCreateWithoutInClanWarAttackerFightersInput, BruteUncheckedCreateWithoutInClanWarAttackerFightersInput> | BruteCreateWithoutInClanWarAttackerFightersInput[] | BruteUncheckedCreateWithoutInClanWarAttackerFightersInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutInClanWarAttackerFightersInput | BruteCreateOrConnectWithoutInClanWarAttackerFightersInput[]
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
  }

  export type BruteUncheckedCreateNestedManyWithoutInClanWarDefenderFightersInput = {
    create?: XOR<BruteCreateWithoutInClanWarDefenderFightersInput, BruteUncheckedCreateWithoutInClanWarDefenderFightersInput> | BruteCreateWithoutInClanWarDefenderFightersInput[] | BruteUncheckedCreateWithoutInClanWarDefenderFightersInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutInClanWarDefenderFightersInput | BruteCreateOrConnectWithoutInClanWarDefenderFightersInput[]
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
  }

  export type ClanWarUpdateOneRequiredWithoutFightersNestedInput = {
    create?: XOR<ClanWarCreateWithoutFightersInput, ClanWarUncheckedCreateWithoutFightersInput>
    connectOrCreate?: ClanWarCreateOrConnectWithoutFightersInput
    upsert?: ClanWarUpsertWithoutFightersInput
    connect?: ClanWarWhereUniqueInput
    update?: XOR<XOR<ClanWarUpdateToOneWithWhereWithoutFightersInput, ClanWarUpdateWithoutFightersInput>, ClanWarUncheckedUpdateWithoutFightersInput>
  }

  export type BruteUpdateManyWithoutInClanWarAttackerFightersNestedInput = {
    create?: XOR<BruteCreateWithoutInClanWarAttackerFightersInput, BruteUncheckedCreateWithoutInClanWarAttackerFightersInput> | BruteCreateWithoutInClanWarAttackerFightersInput[] | BruteUncheckedCreateWithoutInClanWarAttackerFightersInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutInClanWarAttackerFightersInput | BruteCreateOrConnectWithoutInClanWarAttackerFightersInput[]
    upsert?: BruteUpsertWithWhereUniqueWithoutInClanWarAttackerFightersInput | BruteUpsertWithWhereUniqueWithoutInClanWarAttackerFightersInput[]
    set?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    disconnect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    delete?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    update?: BruteUpdateWithWhereUniqueWithoutInClanWarAttackerFightersInput | BruteUpdateWithWhereUniqueWithoutInClanWarAttackerFightersInput[]
    updateMany?: BruteUpdateManyWithWhereWithoutInClanWarAttackerFightersInput | BruteUpdateManyWithWhereWithoutInClanWarAttackerFightersInput[]
    deleteMany?: BruteScalarWhereInput | BruteScalarWhereInput[]
  }

  export type BruteUpdateManyWithoutInClanWarDefenderFightersNestedInput = {
    create?: XOR<BruteCreateWithoutInClanWarDefenderFightersInput, BruteUncheckedCreateWithoutInClanWarDefenderFightersInput> | BruteCreateWithoutInClanWarDefenderFightersInput[] | BruteUncheckedCreateWithoutInClanWarDefenderFightersInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutInClanWarDefenderFightersInput | BruteCreateOrConnectWithoutInClanWarDefenderFightersInput[]
    upsert?: BruteUpsertWithWhereUniqueWithoutInClanWarDefenderFightersInput | BruteUpsertWithWhereUniqueWithoutInClanWarDefenderFightersInput[]
    set?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    disconnect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    delete?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    update?: BruteUpdateWithWhereUniqueWithoutInClanWarDefenderFightersInput | BruteUpdateWithWhereUniqueWithoutInClanWarDefenderFightersInput[]
    updateMany?: BruteUpdateManyWithWhereWithoutInClanWarDefenderFightersInput | BruteUpdateManyWithWhereWithoutInClanWarDefenderFightersInput[]
    deleteMany?: BruteScalarWhereInput | BruteScalarWhereInput[]
  }

  export type BruteUncheckedUpdateManyWithoutInClanWarAttackerFightersNestedInput = {
    create?: XOR<BruteCreateWithoutInClanWarAttackerFightersInput, BruteUncheckedCreateWithoutInClanWarAttackerFightersInput> | BruteCreateWithoutInClanWarAttackerFightersInput[] | BruteUncheckedCreateWithoutInClanWarAttackerFightersInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutInClanWarAttackerFightersInput | BruteCreateOrConnectWithoutInClanWarAttackerFightersInput[]
    upsert?: BruteUpsertWithWhereUniqueWithoutInClanWarAttackerFightersInput | BruteUpsertWithWhereUniqueWithoutInClanWarAttackerFightersInput[]
    set?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    disconnect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    delete?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    update?: BruteUpdateWithWhereUniqueWithoutInClanWarAttackerFightersInput | BruteUpdateWithWhereUniqueWithoutInClanWarAttackerFightersInput[]
    updateMany?: BruteUpdateManyWithWhereWithoutInClanWarAttackerFightersInput | BruteUpdateManyWithWhereWithoutInClanWarAttackerFightersInput[]
    deleteMany?: BruteScalarWhereInput | BruteScalarWhereInput[]
  }

  export type BruteUncheckedUpdateManyWithoutInClanWarDefenderFightersNestedInput = {
    create?: XOR<BruteCreateWithoutInClanWarDefenderFightersInput, BruteUncheckedCreateWithoutInClanWarDefenderFightersInput> | BruteCreateWithoutInClanWarDefenderFightersInput[] | BruteUncheckedCreateWithoutInClanWarDefenderFightersInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutInClanWarDefenderFightersInput | BruteCreateOrConnectWithoutInClanWarDefenderFightersInput[]
    upsert?: BruteUpsertWithWhereUniqueWithoutInClanWarDefenderFightersInput | BruteUpsertWithWhereUniqueWithoutInClanWarDefenderFightersInput[]
    set?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    disconnect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    delete?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    update?: BruteUpdateWithWhereUniqueWithoutInClanWarDefenderFightersInput | BruteUpdateWithWhereUniqueWithoutInClanWarDefenderFightersInput[]
    updateMany?: BruteUpdateManyWithWhereWithoutInClanWarDefenderFightersInput | BruteUpdateManyWithWhereWithoutInClanWarDefenderFightersInput[]
    deleteMany?: BruteScalarWhereInput | BruteScalarWhereInput[]
  }

  export type BruteCreateNestedOneWithoutInventoryInput = {
    create?: XOR<BruteCreateWithoutInventoryInput, BruteUncheckedCreateWithoutInventoryInput>
    connectOrCreate?: BruteCreateOrConnectWithoutInventoryInput
    connect?: BruteWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutInventoryInput = {
    create?: XOR<UserCreateWithoutInventoryInput, UserUncheckedCreateWithoutInventoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutInventoryInput
    connect?: UserWhereUniqueInput
  }

  export type EnumInventoryItemTypeFieldUpdateOperationsInput = {
    set?: $Enums.InventoryItemType
  }

  export type BruteUpdateOneWithoutInventoryNestedInput = {
    create?: XOR<BruteCreateWithoutInventoryInput, BruteUncheckedCreateWithoutInventoryInput>
    connectOrCreate?: BruteCreateOrConnectWithoutInventoryInput
    upsert?: BruteUpsertWithoutInventoryInput
    disconnect?: BruteWhereInput | boolean
    delete?: BruteWhereInput | boolean
    connect?: BruteWhereUniqueInput
    update?: XOR<XOR<BruteUpdateToOneWithWhereWithoutInventoryInput, BruteUpdateWithoutInventoryInput>, BruteUncheckedUpdateWithoutInventoryInput>
  }

  export type UserUpdateOneWithoutInventoryNestedInput = {
    create?: XOR<UserCreateWithoutInventoryInput, UserUncheckedCreateWithoutInventoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutInventoryInput
    upsert?: UserUpsertWithoutInventoryInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInventoryInput, UserUpdateWithoutInventoryInput>, UserUncheckedUpdateWithoutInventoryInput>
  }

  export type EventCreatesortedBrutesInput = {
    set: string[]
  }

  export type BruteCreateNestedManyWithoutEventInput = {
    create?: XOR<BruteCreateWithoutEventInput, BruteUncheckedCreateWithoutEventInput> | BruteCreateWithoutEventInput[] | BruteUncheckedCreateWithoutEventInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutEventInput | BruteCreateOrConnectWithoutEventInput[]
    createMany?: BruteCreateManyEventInputEnvelope
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
  }

  export type TournamentCreateNestedOneWithoutEventInput = {
    create?: XOR<TournamentCreateWithoutEventInput, TournamentUncheckedCreateWithoutEventInput>
    connectOrCreate?: TournamentCreateOrConnectWithoutEventInput
    connect?: TournamentWhereUniqueInput
  }

  export type BruteCreateNestedOneWithoutWonEventsInput = {
    create?: XOR<BruteCreateWithoutWonEventsInput, BruteUncheckedCreateWithoutWonEventsInput>
    connectOrCreate?: BruteCreateOrConnectWithoutWonEventsInput
    connect?: BruteWhereUniqueInput
  }

  export type BruteUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<BruteCreateWithoutEventInput, BruteUncheckedCreateWithoutEventInput> | BruteCreateWithoutEventInput[] | BruteUncheckedCreateWithoutEventInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutEventInput | BruteCreateOrConnectWithoutEventInput[]
    createMany?: BruteCreateManyEventInputEnvelope
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
  }

  export type TournamentUncheckedCreateNestedOneWithoutEventInput = {
    create?: XOR<TournamentCreateWithoutEventInput, TournamentUncheckedCreateWithoutEventInput>
    connectOrCreate?: TournamentCreateOrConnectWithoutEventInput
    connect?: TournamentWhereUniqueInput
  }

  export type EnumEventTypeFieldUpdateOperationsInput = {
    set?: $Enums.EventType
  }

  export type EnumEventStatusFieldUpdateOperationsInput = {
    set?: $Enums.EventStatus
  }

  export type EventUpdatesortedBrutesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type BruteUpdateManyWithoutEventNestedInput = {
    create?: XOR<BruteCreateWithoutEventInput, BruteUncheckedCreateWithoutEventInput> | BruteCreateWithoutEventInput[] | BruteUncheckedCreateWithoutEventInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutEventInput | BruteCreateOrConnectWithoutEventInput[]
    upsert?: BruteUpsertWithWhereUniqueWithoutEventInput | BruteUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: BruteCreateManyEventInputEnvelope
    set?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    disconnect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    delete?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    update?: BruteUpdateWithWhereUniqueWithoutEventInput | BruteUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: BruteUpdateManyWithWhereWithoutEventInput | BruteUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: BruteScalarWhereInput | BruteScalarWhereInput[]
  }

  export type TournamentUpdateOneWithoutEventNestedInput = {
    create?: XOR<TournamentCreateWithoutEventInput, TournamentUncheckedCreateWithoutEventInput>
    connectOrCreate?: TournamentCreateOrConnectWithoutEventInput
    upsert?: TournamentUpsertWithoutEventInput
    disconnect?: TournamentWhereInput | boolean
    delete?: TournamentWhereInput | boolean
    connect?: TournamentWhereUniqueInput
    update?: XOR<XOR<TournamentUpdateToOneWithWhereWithoutEventInput, TournamentUpdateWithoutEventInput>, TournamentUncheckedUpdateWithoutEventInput>
  }

  export type BruteUpdateOneWithoutWonEventsNestedInput = {
    create?: XOR<BruteCreateWithoutWonEventsInput, BruteUncheckedCreateWithoutWonEventsInput>
    connectOrCreate?: BruteCreateOrConnectWithoutWonEventsInput
    upsert?: BruteUpsertWithoutWonEventsInput
    disconnect?: BruteWhereInput | boolean
    delete?: BruteWhereInput | boolean
    connect?: BruteWhereUniqueInput
    update?: XOR<XOR<BruteUpdateToOneWithWhereWithoutWonEventsInput, BruteUpdateWithoutWonEventsInput>, BruteUncheckedUpdateWithoutWonEventsInput>
  }

  export type BruteUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<BruteCreateWithoutEventInput, BruteUncheckedCreateWithoutEventInput> | BruteCreateWithoutEventInput[] | BruteUncheckedCreateWithoutEventInput[]
    connectOrCreate?: BruteCreateOrConnectWithoutEventInput | BruteCreateOrConnectWithoutEventInput[]
    upsert?: BruteUpsertWithWhereUniqueWithoutEventInput | BruteUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: BruteCreateManyEventInputEnvelope
    set?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    disconnect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    delete?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    connect?: BruteWhereUniqueInput | BruteWhereUniqueInput[]
    update?: BruteUpdateWithWhereUniqueWithoutEventInput | BruteUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: BruteUpdateManyWithWhereWithoutEventInput | BruteUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: BruteScalarWhereInput | BruteScalarWhereInput[]
  }

  export type TournamentUncheckedUpdateOneWithoutEventNestedInput = {
    create?: XOR<TournamentCreateWithoutEventInput, TournamentUncheckedCreateWithoutEventInput>
    connectOrCreate?: TournamentCreateOrConnectWithoutEventInput
    upsert?: TournamentUpsertWithoutEventInput
    disconnect?: TournamentWhereInput | boolean
    delete?: TournamentWhereInput | boolean
    connect?: TournamentWhereUniqueInput
    update?: XOR<XOR<TournamentUpdateToOneWithWhereWithoutEventInput, TournamentUpdateWithoutEventInput>, TournamentUncheckedUpdateWithoutEventInput>
  }

  export type NestedUuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type NestedEnumLangFilter<$PrismaModel = never> = {
    equals?: $Enums.Lang | EnumLangFieldRefInput<$PrismaModel>
    in?: $Enums.Lang[] | ListEnumLangFieldRefInput<$PrismaModel>
    notIn?: $Enums.Lang[] | ListEnumLangFieldRefInput<$PrismaModel>
    not?: NestedEnumLangFilter<$PrismaModel> | $Enums.Lang
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedUuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumLangWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Lang | EnumLangFieldRefInput<$PrismaModel>
    in?: $Enums.Lang[] | ListEnumLangFieldRefInput<$PrismaModel>
    notIn?: $Enums.Lang[] | ListEnumLangFieldRefInput<$PrismaModel>
    not?: NestedEnumLangWithAggregatesFilter<$PrismaModel> | $Enums.Lang
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLangFilter<$PrismaModel>
    _max?: NestedEnumLangFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumGenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderFilter<$PrismaModel> | $Enums.Gender
  }

  export type NestedUuidNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumGenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderWithAggregatesFilter<$PrismaModel> | $Enums.Gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderFilter<$PrismaModel>
    _max?: NestedEnumGenderFilter<$PrismaModel>
  }

  export type NestedUuidNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumLogTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.LogType | EnumLogTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LogType[] | ListEnumLogTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogType[] | ListEnumLogTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLogTypeFilter<$PrismaModel> | $Enums.LogType
  }

  export type NestedEnumLogTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LogType | EnumLogTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LogType[] | ListEnumLogTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogType[] | ListEnumLogTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLogTypeWithAggregatesFilter<$PrismaModel> | $Enums.LogType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLogTypeFilter<$PrismaModel>
    _max?: NestedEnumLogTypeFilter<$PrismaModel>
  }

  export type NestedEnumDestinyChoiceTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DestinyChoiceType | EnumDestinyChoiceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DestinyChoiceType[] | ListEnumDestinyChoiceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DestinyChoiceType[] | ListEnumDestinyChoiceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDestinyChoiceTypeFilter<$PrismaModel> | $Enums.DestinyChoiceType
  }

  export type NestedEnumSkillNameNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.SkillName | EnumSkillNameFieldRefInput<$PrismaModel> | null
    in?: $Enums.SkillName[] | ListEnumSkillNameFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.SkillName[] | ListEnumSkillNameFieldRefInput<$PrismaModel> | null
    not?: NestedEnumSkillNameNullableFilter<$PrismaModel> | $Enums.SkillName | null
  }

  export type NestedEnumWeaponNameNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.WeaponName | EnumWeaponNameFieldRefInput<$PrismaModel> | null
    in?: $Enums.WeaponName[] | ListEnumWeaponNameFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.WeaponName[] | ListEnumWeaponNameFieldRefInput<$PrismaModel> | null
    not?: NestedEnumWeaponNameNullableFilter<$PrismaModel> | $Enums.WeaponName | null
  }

  export type NestedEnumPetNameNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.PetName | EnumPetNameFieldRefInput<$PrismaModel> | null
    in?: $Enums.PetName[] | ListEnumPetNameFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PetName[] | ListEnumPetNameFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPetNameNullableFilter<$PrismaModel> | $Enums.PetName | null
  }

  export type NestedEnumBruteStatNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.BruteStat | EnumBruteStatFieldRefInput<$PrismaModel> | null
    in?: $Enums.BruteStat[] | ListEnumBruteStatFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.BruteStat[] | ListEnumBruteStatFieldRefInput<$PrismaModel> | null
    not?: NestedEnumBruteStatNullableFilter<$PrismaModel> | $Enums.BruteStat | null
  }

  export type NestedEnumDestinyChoiceTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DestinyChoiceType | EnumDestinyChoiceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DestinyChoiceType[] | ListEnumDestinyChoiceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DestinyChoiceType[] | ListEnumDestinyChoiceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDestinyChoiceTypeWithAggregatesFilter<$PrismaModel> | $Enums.DestinyChoiceType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDestinyChoiceTypeFilter<$PrismaModel>
    _max?: NestedEnumDestinyChoiceTypeFilter<$PrismaModel>
  }

  export type NestedEnumSkillNameNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SkillName | EnumSkillNameFieldRefInput<$PrismaModel> | null
    in?: $Enums.SkillName[] | ListEnumSkillNameFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.SkillName[] | ListEnumSkillNameFieldRefInput<$PrismaModel> | null
    not?: NestedEnumSkillNameNullableWithAggregatesFilter<$PrismaModel> | $Enums.SkillName | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumSkillNameNullableFilter<$PrismaModel>
    _max?: NestedEnumSkillNameNullableFilter<$PrismaModel>
  }

  export type NestedEnumWeaponNameNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WeaponName | EnumWeaponNameFieldRefInput<$PrismaModel> | null
    in?: $Enums.WeaponName[] | ListEnumWeaponNameFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.WeaponName[] | ListEnumWeaponNameFieldRefInput<$PrismaModel> | null
    not?: NestedEnumWeaponNameNullableWithAggregatesFilter<$PrismaModel> | $Enums.WeaponName | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumWeaponNameNullableFilter<$PrismaModel>
    _max?: NestedEnumWeaponNameNullableFilter<$PrismaModel>
  }

  export type NestedEnumPetNameNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PetName | EnumPetNameFieldRefInput<$PrismaModel> | null
    in?: $Enums.PetName[] | ListEnumPetNameFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PetName[] | ListEnumPetNameFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPetNameNullableWithAggregatesFilter<$PrismaModel> | $Enums.PetName | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPetNameNullableFilter<$PrismaModel>
    _max?: NestedEnumPetNameNullableFilter<$PrismaModel>
  }

  export type NestedEnumBruteStatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BruteStat | EnumBruteStatFieldRefInput<$PrismaModel> | null
    in?: $Enums.BruteStat[] | ListEnumBruteStatFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.BruteStat[] | ListEnumBruteStatFieldRefInput<$PrismaModel> | null
    not?: NestedEnumBruteStatNullableWithAggregatesFilter<$PrismaModel> | $Enums.BruteStat | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumBruteStatNullableFilter<$PrismaModel>
    _max?: NestedEnumBruteStatNullableFilter<$PrismaModel>
  }

  export type NestedEnumTournamentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TournamentType | EnumTournamentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TournamentType[] | ListEnumTournamentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TournamentType[] | ListEnumTournamentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTournamentTypeFilter<$PrismaModel> | $Enums.TournamentType
  }

  export type NestedEnumTournamentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TournamentType | EnumTournamentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TournamentType[] | ListEnumTournamentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TournamentType[] | ListEnumTournamentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTournamentTypeWithAggregatesFilter<$PrismaModel> | $Enums.TournamentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTournamentTypeFilter<$PrismaModel>
    _max?: NestedEnumTournamentTypeFilter<$PrismaModel>
  }

  export type NestedEnumAchievementNameFilter<$PrismaModel = never> = {
    equals?: $Enums.AchievementName | EnumAchievementNameFieldRefInput<$PrismaModel>
    in?: $Enums.AchievementName[] | ListEnumAchievementNameFieldRefInput<$PrismaModel>
    notIn?: $Enums.AchievementName[] | ListEnumAchievementNameFieldRefInput<$PrismaModel>
    not?: NestedEnumAchievementNameFilter<$PrismaModel> | $Enums.AchievementName
  }

  export type NestedEnumAchievementNameWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AchievementName | EnumAchievementNameFieldRefInput<$PrismaModel>
    in?: $Enums.AchievementName[] | ListEnumAchievementNameFieldRefInput<$PrismaModel>
    notIn?: $Enums.AchievementName[] | ListEnumAchievementNameFieldRefInput<$PrismaModel>
    not?: NestedEnumAchievementNameWithAggregatesFilter<$PrismaModel> | $Enums.AchievementName
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAchievementNameFilter<$PrismaModel>
    _max?: NestedEnumAchievementNameFilter<$PrismaModel>
  }

  export type NestedEnumBruteReportReasonFilter<$PrismaModel = never> = {
    equals?: $Enums.BruteReportReason | EnumBruteReportReasonFieldRefInput<$PrismaModel>
    in?: $Enums.BruteReportReason[] | ListEnumBruteReportReasonFieldRefInput<$PrismaModel>
    notIn?: $Enums.BruteReportReason[] | ListEnumBruteReportReasonFieldRefInput<$PrismaModel>
    not?: NestedEnumBruteReportReasonFilter<$PrismaModel> | $Enums.BruteReportReason
  }

  export type NestedEnumBruteReportStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BruteReportStatus | EnumBruteReportStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BruteReportStatus[] | ListEnumBruteReportStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BruteReportStatus[] | ListEnumBruteReportStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBruteReportStatusFilter<$PrismaModel> | $Enums.BruteReportStatus
  }

  export type NestedEnumBruteReportReasonWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BruteReportReason | EnumBruteReportReasonFieldRefInput<$PrismaModel>
    in?: $Enums.BruteReportReason[] | ListEnumBruteReportReasonFieldRefInput<$PrismaModel>
    notIn?: $Enums.BruteReportReason[] | ListEnumBruteReportReasonFieldRefInput<$PrismaModel>
    not?: NestedEnumBruteReportReasonWithAggregatesFilter<$PrismaModel> | $Enums.BruteReportReason
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBruteReportReasonFilter<$PrismaModel>
    _max?: NestedEnumBruteReportReasonFilter<$PrismaModel>
  }

  export type NestedEnumBruteReportStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BruteReportStatus | EnumBruteReportStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BruteReportStatus[] | ListEnumBruteReportStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BruteReportStatus[] | ListEnumBruteReportStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBruteReportStatusWithAggregatesFilter<$PrismaModel> | $Enums.BruteReportStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBruteReportStatusFilter<$PrismaModel>
    _max?: NestedEnumBruteReportStatusFilter<$PrismaModel>
  }

  export type NestedEnumBossNameFilter<$PrismaModel = never> = {
    equals?: $Enums.BossName | EnumBossNameFieldRefInput<$PrismaModel>
    in?: $Enums.BossName[] | ListEnumBossNameFieldRefInput<$PrismaModel>
    notIn?: $Enums.BossName[] | ListEnumBossNameFieldRefInput<$PrismaModel>
    not?: NestedEnumBossNameFilter<$PrismaModel> | $Enums.BossName
  }

  export type NestedEnumBossNameWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BossName | EnumBossNameFieldRefInput<$PrismaModel>
    in?: $Enums.BossName[] | ListEnumBossNameFieldRefInput<$PrismaModel>
    notIn?: $Enums.BossName[] | ListEnumBossNameFieldRefInput<$PrismaModel>
    not?: NestedEnumBossNameWithAggregatesFilter<$PrismaModel> | $Enums.BossName
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBossNameFilter<$PrismaModel>
    _max?: NestedEnumBossNameFilter<$PrismaModel>
  }

  export type NestedEnumClanWarTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ClanWarType | EnumClanWarTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ClanWarType[] | ListEnumClanWarTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClanWarType[] | ListEnumClanWarTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumClanWarTypeFilter<$PrismaModel> | $Enums.ClanWarType
  }

  export type NestedEnumClanWarStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ClanWarStatus | EnumClanWarStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ClanWarStatus[] | ListEnumClanWarStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClanWarStatus[] | ListEnumClanWarStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumClanWarStatusFilter<$PrismaModel> | $Enums.ClanWarStatus
  }

  export type NestedEnumClanWarTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ClanWarType | EnumClanWarTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ClanWarType[] | ListEnumClanWarTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClanWarType[] | ListEnumClanWarTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumClanWarTypeWithAggregatesFilter<$PrismaModel> | $Enums.ClanWarType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumClanWarTypeFilter<$PrismaModel>
    _max?: NestedEnumClanWarTypeFilter<$PrismaModel>
  }

  export type NestedEnumClanWarStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ClanWarStatus | EnumClanWarStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ClanWarStatus[] | ListEnumClanWarStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClanWarStatus[] | ListEnumClanWarStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumClanWarStatusWithAggregatesFilter<$PrismaModel> | $Enums.ClanWarStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumClanWarStatusFilter<$PrismaModel>
    _max?: NestedEnumClanWarStatusFilter<$PrismaModel>
  }

  export type NestedEnumInventoryItemTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.InventoryItemType | EnumInventoryItemTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InventoryItemType[] | ListEnumInventoryItemTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InventoryItemType[] | ListEnumInventoryItemTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInventoryItemTypeFilter<$PrismaModel> | $Enums.InventoryItemType
  }

  export type NestedEnumInventoryItemTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InventoryItemType | EnumInventoryItemTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InventoryItemType[] | ListEnumInventoryItemTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InventoryItemType[] | ListEnumInventoryItemTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInventoryItemTypeWithAggregatesFilter<$PrismaModel> | $Enums.InventoryItemType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInventoryItemTypeFilter<$PrismaModel>
    _max?: NestedEnumInventoryItemTypeFilter<$PrismaModel>
  }

  export type NestedEnumEventTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.EventType | EnumEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EventType[] | ListEnumEventTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventType[] | ListEnumEventTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEventTypeFilter<$PrismaModel> | $Enums.EventType
  }

  export type NestedEnumEventStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EventStatus | EnumEventStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEventStatusFilter<$PrismaModel> | $Enums.EventStatus
  }

  export type NestedEnumEventTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EventType | EnumEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EventType[] | ListEnumEventTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventType[] | ListEnumEventTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEventTypeWithAggregatesFilter<$PrismaModel> | $Enums.EventType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEventTypeFilter<$PrismaModel>
    _max?: NestedEnumEventTypeFilter<$PrismaModel>
  }

  export type NestedEnumEventStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EventStatus | EnumEventStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEventStatusWithAggregatesFilter<$PrismaModel> | $Enums.EventStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEventStatusFilter<$PrismaModel>
    _max?: NestedEnumEventStatusFilter<$PrismaModel>
  }

  export type BruteCreateWithoutUserInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: number
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    tournamentWins?: number
    resets?: number
    master?: BruteCreateNestedOneWithoutPupilsInput
    pupils?: BruteCreateNestedManyWithoutMasterInput
    clan?: ClanCreateNestedOneWithoutBrutesInput
    fights?: FightCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightCreateNestedManyWithoutBrute2Input
    logs?: LogCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceCreateNestedManyWithoutBruteInput
    tournaments?: TournamentCreateNestedManyWithoutParticipantsInput
    opponents?: BruteCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementCreateNestedManyWithoutBruteInput
    reports?: BruteReportCreateNestedManyWithoutBruteInput
    titles?: TitleCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostCreateNestedManyWithoutAuthorInput
    wantToJoinClan?: ClanCreateNestedOneWithoutJoinRequestsInput
    threads?: ClanThreadCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageCreateNestedManyWithoutBruteInput
    followers?: UserCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersCreateNestedManyWithoutDefendersInput
    event?: EventCreateNestedOneWithoutBrutesInput
    wonEvents?: EventCreateNestedManyWithoutWinnerInput
  }

  export type BruteUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    masterId?: string | null
    pupilsCount?: number
    clanId?: string | null
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    wantToJoinClanId?: string | null
    tournamentWins?: number
    eventId?: string | null
    resets?: number
    pupils?: BruteUncheckedCreateNestedManyWithoutMasterInput
    fights?: FightUncheckedCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightUncheckedCreateNestedManyWithoutBrute2Input
    logs?: LogUncheckedCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceUncheckedCreateNestedManyWithoutBruteInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutParticipantsInput
    opponents?: BruteUncheckedCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteUncheckedCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementUncheckedCreateNestedManyWithoutBruteInput
    reports?: BruteReportUncheckedCreateNestedManyWithoutBruteInput
    titles?: TitleUncheckedCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanUncheckedCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostUncheckedCreateNestedManyWithoutAuthorInput
    threads?: ClanThreadUncheckedCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemUncheckedCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementUncheckedCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpUncheckedCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsUncheckedCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageUncheckedCreateNestedManyWithoutBruteInput
    followers?: UserUncheckedCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutDefendersInput
    wonEvents?: EventUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type BruteCreateOrConnectWithoutUserInput = {
    where: BruteWhereUniqueInput
    create: XOR<BruteCreateWithoutUserInput, BruteUncheckedCreateWithoutUserInput>
  }

  export type BruteCreateManyUserInputEnvelope = {
    data: BruteCreateManyUserInput | BruteCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AchievementCreateWithoutUserInput = {
    id?: string
    name: $Enums.AchievementName
    count?: number
    brute?: BruteCreateNestedOneWithoutAchievementsInput
  }

  export type AchievementUncheckedCreateWithoutUserInput = {
    id?: string
    name: $Enums.AchievementName
    count?: number
    bruteId?: string | null
  }

  export type AchievementCreateOrConnectWithoutUserInput = {
    where: AchievementWhereUniqueInput
    create: XOR<AchievementCreateWithoutUserInput, AchievementUncheckedCreateWithoutUserInput>
  }

  export type AchievementCreateManyUserInputEnvelope = {
    data: AchievementCreateManyUserInput | AchievementCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BruteReportCreateWithoutUsersInput = {
    id?: string
    reason?: $Enums.BruteReportReason
    count?: number
    date?: Date | string
    status?: $Enums.BruteReportStatus
    brute: BruteCreateNestedOneWithoutReportsInput
  }

  export type BruteReportUncheckedCreateWithoutUsersInput = {
    id?: string
    bruteId: string
    reason?: $Enums.BruteReportReason
    count?: number
    date?: Date | string
    status?: $Enums.BruteReportStatus
  }

  export type BruteReportCreateOrConnectWithoutUsersInput = {
    where: BruteReportWhereUniqueInput
    create: XOR<BruteReportCreateWithoutUsersInput, BruteReportUncheckedCreateWithoutUsersInput>
  }

  export type TournamentGoldCreateWithoutUserInput = {
    id?: string
    date: Date | string
    gold: number
  }

  export type TournamentGoldUncheckedCreateWithoutUserInput = {
    id?: string
    date: Date | string
    gold: number
  }

  export type TournamentGoldCreateOrConnectWithoutUserInput = {
    where: TournamentGoldWhereUniqueInput
    create: XOR<TournamentGoldCreateWithoutUserInput, TournamentGoldUncheckedCreateWithoutUserInput>
  }

  export type TournamentGoldCreateManyUserInputEnvelope = {
    data: TournamentGoldCreateManyUserInput | TournamentGoldCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type InventoryItemCreateWithoutUserInput = {
    id?: string
    type: $Enums.InventoryItemType
    count?: number
    brute?: BruteCreateNestedOneWithoutInventoryInput
  }

  export type InventoryItemUncheckedCreateWithoutUserInput = {
    id?: string
    type: $Enums.InventoryItemType
    count?: number
    bruteId?: string | null
  }

  export type InventoryItemCreateOrConnectWithoutUserInput = {
    where: InventoryItemWhereUniqueInput
    create: XOR<InventoryItemCreateWithoutUserInput, InventoryItemUncheckedCreateWithoutUserInput>
  }

  export type InventoryItemCreateManyUserInputEnvelope = {
    data: InventoryItemCreateManyUserInput | InventoryItemCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FightCreateWithoutFavoritedByInput = {
    id?: string
    date?: Date | string
    winner: string
    loser: string
    steps: string
    fighters: string
    tournamentStep?: number
    modifiers?: FightCreatemodifiersInput | $Enums.FightModifier[]
    background?: string
    brute1: BruteCreateNestedOneWithoutFightsInput
    brute2?: BruteCreateNestedOneWithoutFightsAsAdversaryInput
    logs?: LogCreateNestedManyWithoutFightInput
    tournament?: TournamentCreateNestedOneWithoutFightsInput
    clanWar?: ClanWarCreateNestedOneWithoutFightsInput
  }

  export type FightUncheckedCreateWithoutFavoritedByInput = {
    id?: string
    date?: Date | string
    brute1Id: string
    brute2Id?: string | null
    winner: string
    loser: string
    steps: string
    fighters: string
    tournamentId?: string | null
    tournamentStep?: number
    modifiers?: FightCreatemodifiersInput | $Enums.FightModifier[]
    background?: string
    clanWarId?: string | null
    logs?: LogUncheckedCreateNestedManyWithoutFightInput
  }

  export type FightCreateOrConnectWithoutFavoritedByInput = {
    where: FightWhereUniqueInput
    create: XOR<FightCreateWithoutFavoritedByInput, FightUncheckedCreateWithoutFavoritedByInput>
  }

  export type BruteCreateWithoutFollowersInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: number
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    tournamentWins?: number
    resets?: number
    user?: UserCreateNestedOneWithoutBrutesInput
    master?: BruteCreateNestedOneWithoutPupilsInput
    pupils?: BruteCreateNestedManyWithoutMasterInput
    clan?: ClanCreateNestedOneWithoutBrutesInput
    fights?: FightCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightCreateNestedManyWithoutBrute2Input
    logs?: LogCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceCreateNestedManyWithoutBruteInput
    tournaments?: TournamentCreateNestedManyWithoutParticipantsInput
    opponents?: BruteCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementCreateNestedManyWithoutBruteInput
    reports?: BruteReportCreateNestedManyWithoutBruteInput
    titles?: TitleCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostCreateNestedManyWithoutAuthorInput
    wantToJoinClan?: ClanCreateNestedOneWithoutJoinRequestsInput
    threads?: ClanThreadCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageCreateNestedManyWithoutBruteInput
    inClanWarAttackerFighters?: ClanWarFightersCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersCreateNestedManyWithoutDefendersInput
    event?: EventCreateNestedOneWithoutBrutesInput
    wonEvents?: EventCreateNestedManyWithoutWinnerInput
  }

  export type BruteUncheckedCreateWithoutFollowersInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    userId?: string | null
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    masterId?: string | null
    pupilsCount?: number
    clanId?: string | null
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    wantToJoinClanId?: string | null
    tournamentWins?: number
    eventId?: string | null
    resets?: number
    pupils?: BruteUncheckedCreateNestedManyWithoutMasterInput
    fights?: FightUncheckedCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightUncheckedCreateNestedManyWithoutBrute2Input
    logs?: LogUncheckedCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceUncheckedCreateNestedManyWithoutBruteInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutParticipantsInput
    opponents?: BruteUncheckedCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteUncheckedCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementUncheckedCreateNestedManyWithoutBruteInput
    reports?: BruteReportUncheckedCreateNestedManyWithoutBruteInput
    titles?: TitleUncheckedCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanUncheckedCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostUncheckedCreateNestedManyWithoutAuthorInput
    threads?: ClanThreadUncheckedCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemUncheckedCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementUncheckedCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpUncheckedCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsUncheckedCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageUncheckedCreateNestedManyWithoutBruteInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutDefendersInput
    wonEvents?: EventUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type BruteCreateOrConnectWithoutFollowersInput = {
    where: BruteWhereUniqueInput
    create: XOR<BruteCreateWithoutFollowersInput, BruteUncheckedCreateWithoutFollowersInput>
  }

  export type BruteUpsertWithWhereUniqueWithoutUserInput = {
    where: BruteWhereUniqueInput
    update: XOR<BruteUpdateWithoutUserInput, BruteUncheckedUpdateWithoutUserInput>
    create: XOR<BruteCreateWithoutUserInput, BruteUncheckedCreateWithoutUserInput>
  }

  export type BruteUpdateWithWhereUniqueWithoutUserInput = {
    where: BruteWhereUniqueInput
    data: XOR<BruteUpdateWithoutUserInput, BruteUncheckedUpdateWithoutUserInput>
  }

  export type BruteUpdateManyWithWhereWithoutUserInput = {
    where: BruteScalarWhereInput
    data: XOR<BruteUpdateManyMutationInput, BruteUncheckedUpdateManyWithoutUserInput>
  }

  export type BruteScalarWhereInput = {
    AND?: BruteScalarWhereInput | BruteScalarWhereInput[]
    OR?: BruteScalarWhereInput[]
    NOT?: BruteScalarWhereInput | BruteScalarWhereInput[]
    id?: UuidFilter<"Brute"> | string
    name?: StringFilter<"Brute"> | string
    deletedAt?: DateTimeNullableFilter<"Brute"> | Date | string | null
    createdAt?: DateTimeFilter<"Brute"> | Date | string
    willBeDeletedAt?: DateTimeNullableFilter<"Brute"> | Date | string | null
    deletionReason?: StringNullableFilter<"Brute"> | string | null
    destinyPath?: EnumDestinyChoiceSideNullableListFilter<"Brute">
    previousDestinyPath?: EnumDestinyChoiceSideNullableListFilter<"Brute">
    level?: IntFilter<"Brute"> | number
    xp?: IntFilter<"Brute"> | number
    hp?: IntFilter<"Brute"> | number
    enduranceStat?: IntFilter<"Brute"> | number
    enduranceModifier?: FloatFilter<"Brute"> | number
    enduranceValue?: IntFilter<"Brute"> | number
    strengthStat?: IntFilter<"Brute"> | number
    strengthModifier?: FloatFilter<"Brute"> | number
    strengthValue?: IntFilter<"Brute"> | number
    agilityStat?: IntFilter<"Brute"> | number
    agilityModifier?: FloatFilter<"Brute"> | number
    agilityValue?: IntFilter<"Brute"> | number
    speedStat?: IntFilter<"Brute"> | number
    speedModifier?: FloatFilter<"Brute"> | number
    speedValue?: IntFilter<"Brute"> | number
    ranking?: IntFilter<"Brute"> | number
    gender?: EnumGenderFilter<"Brute"> | $Enums.Gender
    userId?: UuidNullableFilter<"Brute"> | string | null
    body?: StringFilter<"Brute"> | string
    colors?: StringFilter<"Brute"> | string
    weapons?: EnumWeaponNameNullableListFilter<"Brute">
    skills?: EnumSkillNameNullableListFilter<"Brute">
    pets?: EnumPetNameNullableListFilter<"Brute">
    ascensions?: IntFilter<"Brute"> | number
    ascendedWeapons?: EnumWeaponNameNullableListFilter<"Brute">
    ascendedSkills?: EnumSkillNameNullableListFilter<"Brute">
    ascendedPets?: EnumPetNameNullableListFilter<"Brute">
    masterId?: UuidNullableFilter<"Brute"> | string | null
    pupilsCount?: IntFilter<"Brute"> | number
    clanId?: UuidNullableFilter<"Brute"> | string | null
    registeredForTournament?: BoolFilter<"Brute"> | boolean
    nextTournamentDate?: DateTimeNullableFilter<"Brute"> | Date | string | null
    currentTournamentDate?: DateTimeNullableFilter<"Brute"> | Date | string | null
    currentTournamentStepWatched?: IntNullableFilter<"Brute"> | number | null
    globalTournamentWatchedDate?: DateTimeNullableFilter<"Brute"> | Date | string | null
    globalTournamentRoundWatched?: IntNullableFilter<"Brute"> | number | null
    eventTournamentWatchedDate?: DateTimeNullableFilter<"Brute"> | Date | string | null
    eventTournamentRoundWatched?: IntNullableFilter<"Brute"> | number | null
    lastFight?: DateTimeNullableFilter<"Brute"> | Date | string | null
    fightsLeft?: IntFilter<"Brute"> | number
    victories?: IntFilter<"Brute"> | number
    losses?: IntFilter<"Brute"> | number
    opponentsGeneratedAt?: DateTimeNullableFilter<"Brute"> | Date | string | null
    canRankUpSince?: DateTimeNullableFilter<"Brute"> | Date | string | null
    favorite?: BoolFilter<"Brute"> | boolean
    wantToJoinClanId?: UuidNullableFilter<"Brute"> | string | null
    tournamentWins?: IntFilter<"Brute"> | number
    eventId?: UuidNullableFilter<"Brute"> | string | null
    resets?: IntFilter<"Brute"> | number
  }

  export type AchievementUpsertWithWhereUniqueWithoutUserInput = {
    where: AchievementWhereUniqueInput
    update: XOR<AchievementUpdateWithoutUserInput, AchievementUncheckedUpdateWithoutUserInput>
    create: XOR<AchievementCreateWithoutUserInput, AchievementUncheckedCreateWithoutUserInput>
  }

  export type AchievementUpdateWithWhereUniqueWithoutUserInput = {
    where: AchievementWhereUniqueInput
    data: XOR<AchievementUpdateWithoutUserInput, AchievementUncheckedUpdateWithoutUserInput>
  }

  export type AchievementUpdateManyWithWhereWithoutUserInput = {
    where: AchievementScalarWhereInput
    data: XOR<AchievementUpdateManyMutationInput, AchievementUncheckedUpdateManyWithoutUserInput>
  }

  export type AchievementScalarWhereInput = {
    AND?: AchievementScalarWhereInput | AchievementScalarWhereInput[]
    OR?: AchievementScalarWhereInput[]
    NOT?: AchievementScalarWhereInput | AchievementScalarWhereInput[]
    id?: UuidFilter<"Achievement"> | string
    name?: EnumAchievementNameFilter<"Achievement"> | $Enums.AchievementName
    count?: IntFilter<"Achievement"> | number
    bruteId?: UuidNullableFilter<"Achievement"> | string | null
    userId?: UuidNullableFilter<"Achievement"> | string | null
  }

  export type BruteReportUpsertWithWhereUniqueWithoutUsersInput = {
    where: BruteReportWhereUniqueInput
    update: XOR<BruteReportUpdateWithoutUsersInput, BruteReportUncheckedUpdateWithoutUsersInput>
    create: XOR<BruteReportCreateWithoutUsersInput, BruteReportUncheckedCreateWithoutUsersInput>
  }

  export type BruteReportUpdateWithWhereUniqueWithoutUsersInput = {
    where: BruteReportWhereUniqueInput
    data: XOR<BruteReportUpdateWithoutUsersInput, BruteReportUncheckedUpdateWithoutUsersInput>
  }

  export type BruteReportUpdateManyWithWhereWithoutUsersInput = {
    where: BruteReportScalarWhereInput
    data: XOR<BruteReportUpdateManyMutationInput, BruteReportUncheckedUpdateManyWithoutUsersInput>
  }

  export type BruteReportScalarWhereInput = {
    AND?: BruteReportScalarWhereInput | BruteReportScalarWhereInput[]
    OR?: BruteReportScalarWhereInput[]
    NOT?: BruteReportScalarWhereInput | BruteReportScalarWhereInput[]
    id?: UuidFilter<"BruteReport"> | string
    bruteId?: UuidFilter<"BruteReport"> | string
    reason?: EnumBruteReportReasonFilter<"BruteReport"> | $Enums.BruteReportReason
    count?: IntFilter<"BruteReport"> | number
    date?: DateTimeFilter<"BruteReport"> | Date | string
    status?: EnumBruteReportStatusFilter<"BruteReport"> | $Enums.BruteReportStatus
  }

  export type TournamentGoldUpsertWithWhereUniqueWithoutUserInput = {
    where: TournamentGoldWhereUniqueInput
    update: XOR<TournamentGoldUpdateWithoutUserInput, TournamentGoldUncheckedUpdateWithoutUserInput>
    create: XOR<TournamentGoldCreateWithoutUserInput, TournamentGoldUncheckedCreateWithoutUserInput>
  }

  export type TournamentGoldUpdateWithWhereUniqueWithoutUserInput = {
    where: TournamentGoldWhereUniqueInput
    data: XOR<TournamentGoldUpdateWithoutUserInput, TournamentGoldUncheckedUpdateWithoutUserInput>
  }

  export type TournamentGoldUpdateManyWithWhereWithoutUserInput = {
    where: TournamentGoldScalarWhereInput
    data: XOR<TournamentGoldUpdateManyMutationInput, TournamentGoldUncheckedUpdateManyWithoutUserInput>
  }

  export type TournamentGoldScalarWhereInput = {
    AND?: TournamentGoldScalarWhereInput | TournamentGoldScalarWhereInput[]
    OR?: TournamentGoldScalarWhereInput[]
    NOT?: TournamentGoldScalarWhereInput | TournamentGoldScalarWhereInput[]
    id?: UuidFilter<"TournamentGold"> | string
    date?: DateTimeFilter<"TournamentGold"> | Date | string
    userId?: UuidFilter<"TournamentGold"> | string
    gold?: IntFilter<"TournamentGold"> | number
  }

  export type InventoryItemUpsertWithWhereUniqueWithoutUserInput = {
    where: InventoryItemWhereUniqueInput
    update: XOR<InventoryItemUpdateWithoutUserInput, InventoryItemUncheckedUpdateWithoutUserInput>
    create: XOR<InventoryItemCreateWithoutUserInput, InventoryItemUncheckedCreateWithoutUserInput>
  }

  export type InventoryItemUpdateWithWhereUniqueWithoutUserInput = {
    where: InventoryItemWhereUniqueInput
    data: XOR<InventoryItemUpdateWithoutUserInput, InventoryItemUncheckedUpdateWithoutUserInput>
  }

  export type InventoryItemUpdateManyWithWhereWithoutUserInput = {
    where: InventoryItemScalarWhereInput
    data: XOR<InventoryItemUpdateManyMutationInput, InventoryItemUncheckedUpdateManyWithoutUserInput>
  }

  export type InventoryItemScalarWhereInput = {
    AND?: InventoryItemScalarWhereInput | InventoryItemScalarWhereInput[]
    OR?: InventoryItemScalarWhereInput[]
    NOT?: InventoryItemScalarWhereInput | InventoryItemScalarWhereInput[]
    id?: UuidFilter<"InventoryItem"> | string
    type?: EnumInventoryItemTypeFilter<"InventoryItem"> | $Enums.InventoryItemType
    count?: IntFilter<"InventoryItem"> | number
    bruteId?: UuidNullableFilter<"InventoryItem"> | string | null
    userId?: UuidNullableFilter<"InventoryItem"> | string | null
  }

  export type FightUpsertWithWhereUniqueWithoutFavoritedByInput = {
    where: FightWhereUniqueInput
    update: XOR<FightUpdateWithoutFavoritedByInput, FightUncheckedUpdateWithoutFavoritedByInput>
    create: XOR<FightCreateWithoutFavoritedByInput, FightUncheckedCreateWithoutFavoritedByInput>
  }

  export type FightUpdateWithWhereUniqueWithoutFavoritedByInput = {
    where: FightWhereUniqueInput
    data: XOR<FightUpdateWithoutFavoritedByInput, FightUncheckedUpdateWithoutFavoritedByInput>
  }

  export type FightUpdateManyWithWhereWithoutFavoritedByInput = {
    where: FightScalarWhereInput
    data: XOR<FightUpdateManyMutationInput, FightUncheckedUpdateManyWithoutFavoritedByInput>
  }

  export type FightScalarWhereInput = {
    AND?: FightScalarWhereInput | FightScalarWhereInput[]
    OR?: FightScalarWhereInput[]
    NOT?: FightScalarWhereInput | FightScalarWhereInput[]
    id?: UuidFilter<"Fight"> | string
    date?: DateTimeFilter<"Fight"> | Date | string
    brute1Id?: UuidFilter<"Fight"> | string
    brute2Id?: UuidNullableFilter<"Fight"> | string | null
    winner?: StringFilter<"Fight"> | string
    loser?: StringFilter<"Fight"> | string
    steps?: StringFilter<"Fight"> | string
    fighters?: StringFilter<"Fight"> | string
    tournamentId?: UuidNullableFilter<"Fight"> | string | null
    tournamentStep?: IntFilter<"Fight"> | number
    modifiers?: EnumFightModifierNullableListFilter<"Fight">
    background?: StringFilter<"Fight"> | string
    clanWarId?: UuidNullableFilter<"Fight"> | string | null
  }

  export type BruteUpsertWithWhereUniqueWithoutFollowersInput = {
    where: BruteWhereUniqueInput
    update: XOR<BruteUpdateWithoutFollowersInput, BruteUncheckedUpdateWithoutFollowersInput>
    create: XOR<BruteCreateWithoutFollowersInput, BruteUncheckedCreateWithoutFollowersInput>
  }

  export type BruteUpdateWithWhereUniqueWithoutFollowersInput = {
    where: BruteWhereUniqueInput
    data: XOR<BruteUpdateWithoutFollowersInput, BruteUncheckedUpdateWithoutFollowersInput>
  }

  export type BruteUpdateManyWithWhereWithoutFollowersInput = {
    where: BruteScalarWhereInput
    data: XOR<BruteUpdateManyMutationInput, BruteUncheckedUpdateManyWithoutFollowersInput>
  }

  export type UserCreateWithoutBrutesInput = {
    id: string
    lang?: $Enums.Lang
    name: string
    admin?: boolean
    moderator?: boolean
    connexionToken: string
    bruteLimit?: number
    gold?: number
    fightSpeed?: number
    backgroundMusic?: boolean
    dinorpgDone?: Date | string | null
    ips?: UserCreateipsInput | string[]
    bannedAt?: Date | string | null
    banReason?: string | null
    lastReleaseSeen?: string | null
    displayVersusPage?: boolean
    achievements?: AchievementCreateNestedManyWithoutUserInput
    reports?: BruteReportCreateNestedManyWithoutUsersInput
    tournamentGolds?: TournamentGoldCreateNestedManyWithoutUserInput
    inventory?: InventoryItemCreateNestedManyWithoutUserInput
    favoriteFights?: FightCreateNestedManyWithoutFavoritedByInput
    following?: BruteCreateNestedManyWithoutFollowersInput
  }

  export type UserUncheckedCreateWithoutBrutesInput = {
    id: string
    lang?: $Enums.Lang
    name: string
    admin?: boolean
    moderator?: boolean
    connexionToken: string
    bruteLimit?: number
    gold?: number
    fightSpeed?: number
    backgroundMusic?: boolean
    dinorpgDone?: Date | string | null
    ips?: UserCreateipsInput | string[]
    bannedAt?: Date | string | null
    banReason?: string | null
    lastReleaseSeen?: string | null
    displayVersusPage?: boolean
    achievements?: AchievementUncheckedCreateNestedManyWithoutUserInput
    reports?: BruteReportUncheckedCreateNestedManyWithoutUsersInput
    tournamentGolds?: TournamentGoldUncheckedCreateNestedManyWithoutUserInput
    inventory?: InventoryItemUncheckedCreateNestedManyWithoutUserInput
    favoriteFights?: FightUncheckedCreateNestedManyWithoutFavoritedByInput
    following?: BruteUncheckedCreateNestedManyWithoutFollowersInput
  }

  export type UserCreateOrConnectWithoutBrutesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBrutesInput, UserUncheckedCreateWithoutBrutesInput>
  }

  export type BruteCreateWithoutPupilsInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: number
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    tournamentWins?: number
    resets?: number
    user?: UserCreateNestedOneWithoutBrutesInput
    master?: BruteCreateNestedOneWithoutPupilsInput
    clan?: ClanCreateNestedOneWithoutBrutesInput
    fights?: FightCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightCreateNestedManyWithoutBrute2Input
    logs?: LogCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceCreateNestedManyWithoutBruteInput
    tournaments?: TournamentCreateNestedManyWithoutParticipantsInput
    opponents?: BruteCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementCreateNestedManyWithoutBruteInput
    reports?: BruteReportCreateNestedManyWithoutBruteInput
    titles?: TitleCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostCreateNestedManyWithoutAuthorInput
    wantToJoinClan?: ClanCreateNestedOneWithoutJoinRequestsInput
    threads?: ClanThreadCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageCreateNestedManyWithoutBruteInput
    followers?: UserCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersCreateNestedManyWithoutDefendersInput
    event?: EventCreateNestedOneWithoutBrutesInput
    wonEvents?: EventCreateNestedManyWithoutWinnerInput
  }

  export type BruteUncheckedCreateWithoutPupilsInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    userId?: string | null
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    masterId?: string | null
    pupilsCount?: number
    clanId?: string | null
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    wantToJoinClanId?: string | null
    tournamentWins?: number
    eventId?: string | null
    resets?: number
    fights?: FightUncheckedCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightUncheckedCreateNestedManyWithoutBrute2Input
    logs?: LogUncheckedCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceUncheckedCreateNestedManyWithoutBruteInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutParticipantsInput
    opponents?: BruteUncheckedCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteUncheckedCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementUncheckedCreateNestedManyWithoutBruteInput
    reports?: BruteReportUncheckedCreateNestedManyWithoutBruteInput
    titles?: TitleUncheckedCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanUncheckedCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostUncheckedCreateNestedManyWithoutAuthorInput
    threads?: ClanThreadUncheckedCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemUncheckedCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementUncheckedCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpUncheckedCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsUncheckedCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageUncheckedCreateNestedManyWithoutBruteInput
    followers?: UserUncheckedCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutDefendersInput
    wonEvents?: EventUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type BruteCreateOrConnectWithoutPupilsInput = {
    where: BruteWhereUniqueInput
    create: XOR<BruteCreateWithoutPupilsInput, BruteUncheckedCreateWithoutPupilsInput>
  }

  export type BruteCreateWithoutMasterInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: number
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    tournamentWins?: number
    resets?: number
    user?: UserCreateNestedOneWithoutBrutesInput
    pupils?: BruteCreateNestedManyWithoutMasterInput
    clan?: ClanCreateNestedOneWithoutBrutesInput
    fights?: FightCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightCreateNestedManyWithoutBrute2Input
    logs?: LogCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceCreateNestedManyWithoutBruteInput
    tournaments?: TournamentCreateNestedManyWithoutParticipantsInput
    opponents?: BruteCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementCreateNestedManyWithoutBruteInput
    reports?: BruteReportCreateNestedManyWithoutBruteInput
    titles?: TitleCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostCreateNestedManyWithoutAuthorInput
    wantToJoinClan?: ClanCreateNestedOneWithoutJoinRequestsInput
    threads?: ClanThreadCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageCreateNestedManyWithoutBruteInput
    followers?: UserCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersCreateNestedManyWithoutDefendersInput
    event?: EventCreateNestedOneWithoutBrutesInput
    wonEvents?: EventCreateNestedManyWithoutWinnerInput
  }

  export type BruteUncheckedCreateWithoutMasterInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    userId?: string | null
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: number
    clanId?: string | null
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    wantToJoinClanId?: string | null
    tournamentWins?: number
    eventId?: string | null
    resets?: number
    pupils?: BruteUncheckedCreateNestedManyWithoutMasterInput
    fights?: FightUncheckedCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightUncheckedCreateNestedManyWithoutBrute2Input
    logs?: LogUncheckedCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceUncheckedCreateNestedManyWithoutBruteInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutParticipantsInput
    opponents?: BruteUncheckedCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteUncheckedCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementUncheckedCreateNestedManyWithoutBruteInput
    reports?: BruteReportUncheckedCreateNestedManyWithoutBruteInput
    titles?: TitleUncheckedCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanUncheckedCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostUncheckedCreateNestedManyWithoutAuthorInput
    threads?: ClanThreadUncheckedCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemUncheckedCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementUncheckedCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpUncheckedCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsUncheckedCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageUncheckedCreateNestedManyWithoutBruteInput
    followers?: UserUncheckedCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutDefendersInput
    wonEvents?: EventUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type BruteCreateOrConnectWithoutMasterInput = {
    where: BruteWhereUniqueInput
    create: XOR<BruteCreateWithoutMasterInput, BruteUncheckedCreateWithoutMasterInput>
  }

  export type BruteCreateManyMasterInputEnvelope = {
    data: BruteCreateManyMasterInput | BruteCreateManyMasterInput[]
    skipDuplicates?: boolean
  }

  export type ClanCreateWithoutBrutesInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    limit?: number
    points?: number
    elo?: number
    boss?: $Enums.BossName
    damageOnBoss?: number
    participateInClanWar?: boolean
    master?: BruteCreateNestedOneWithoutMasterOfClanInput
    joinRequests?: BruteCreateNestedManyWithoutWantToJoinClanInput
    threads?: ClanThreadCreateNestedManyWithoutClanInput
    bossDamages?: BossDamageCreateNestedManyWithoutClanInput
    attacks?: ClanWarCreateNestedManyWithoutAttackerInput
    defenses?: ClanWarCreateNestedManyWithoutDefenderInput
    wins?: ClanWarCreateNestedManyWithoutWinnerInput
  }

  export type ClanUncheckedCreateWithoutBrutesInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    limit?: number
    points?: number
    elo?: number
    boss?: $Enums.BossName
    damageOnBoss?: number
    masterId?: string | null
    participateInClanWar?: boolean
    joinRequests?: BruteUncheckedCreateNestedManyWithoutWantToJoinClanInput
    threads?: ClanThreadUncheckedCreateNestedManyWithoutClanInput
    bossDamages?: BossDamageUncheckedCreateNestedManyWithoutClanInput
    attacks?: ClanWarUncheckedCreateNestedManyWithoutAttackerInput
    defenses?: ClanWarUncheckedCreateNestedManyWithoutDefenderInput
    wins?: ClanWarUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type ClanCreateOrConnectWithoutBrutesInput = {
    where: ClanWhereUniqueInput
    create: XOR<ClanCreateWithoutBrutesInput, ClanUncheckedCreateWithoutBrutesInput>
  }

  export type FightCreateWithoutBrute1Input = {
    id?: string
    date?: Date | string
    winner: string
    loser: string
    steps: string
    fighters: string
    tournamentStep?: number
    modifiers?: FightCreatemodifiersInput | $Enums.FightModifier[]
    background?: string
    brute2?: BruteCreateNestedOneWithoutFightsAsAdversaryInput
    logs?: LogCreateNestedManyWithoutFightInput
    tournament?: TournamentCreateNestedOneWithoutFightsInput
    favoritedBy?: UserCreateNestedManyWithoutFavoriteFightsInput
    clanWar?: ClanWarCreateNestedOneWithoutFightsInput
  }

  export type FightUncheckedCreateWithoutBrute1Input = {
    id?: string
    date?: Date | string
    brute2Id?: string | null
    winner: string
    loser: string
    steps: string
    fighters: string
    tournamentId?: string | null
    tournamentStep?: number
    modifiers?: FightCreatemodifiersInput | $Enums.FightModifier[]
    background?: string
    clanWarId?: string | null
    logs?: LogUncheckedCreateNestedManyWithoutFightInput
    favoritedBy?: UserUncheckedCreateNestedManyWithoutFavoriteFightsInput
  }

  export type FightCreateOrConnectWithoutBrute1Input = {
    where: FightWhereUniqueInput
    create: XOR<FightCreateWithoutBrute1Input, FightUncheckedCreateWithoutBrute1Input>
  }

  export type FightCreateManyBrute1InputEnvelope = {
    data: FightCreateManyBrute1Input | FightCreateManyBrute1Input[]
    skipDuplicates?: boolean
  }

  export type FightCreateWithoutBrute2Input = {
    id?: string
    date?: Date | string
    winner: string
    loser: string
    steps: string
    fighters: string
    tournamentStep?: number
    modifiers?: FightCreatemodifiersInput | $Enums.FightModifier[]
    background?: string
    brute1: BruteCreateNestedOneWithoutFightsInput
    logs?: LogCreateNestedManyWithoutFightInput
    tournament?: TournamentCreateNestedOneWithoutFightsInput
    favoritedBy?: UserCreateNestedManyWithoutFavoriteFightsInput
    clanWar?: ClanWarCreateNestedOneWithoutFightsInput
  }

  export type FightUncheckedCreateWithoutBrute2Input = {
    id?: string
    date?: Date | string
    brute1Id: string
    winner: string
    loser: string
    steps: string
    fighters: string
    tournamentId?: string | null
    tournamentStep?: number
    modifiers?: FightCreatemodifiersInput | $Enums.FightModifier[]
    background?: string
    clanWarId?: string | null
    logs?: LogUncheckedCreateNestedManyWithoutFightInput
    favoritedBy?: UserUncheckedCreateNestedManyWithoutFavoriteFightsInput
  }

  export type FightCreateOrConnectWithoutBrute2Input = {
    where: FightWhereUniqueInput
    create: XOR<FightCreateWithoutBrute2Input, FightUncheckedCreateWithoutBrute2Input>
  }

  export type FightCreateManyBrute2InputEnvelope = {
    data: FightCreateManyBrute2Input | FightCreateManyBrute2Input[]
    skipDuplicates?: boolean
  }

  export type LogCreateWithoutCurrentBruteInput = {
    id?: string
    date?: Date | string
    type: $Enums.LogType
    level?: number | null
    brute?: string | null
    xp?: number | null
    gold?: number | null
    template?: string | null
    fight?: FightCreateNestedOneWithoutLogsInput
    destinyChoice?: DestinyChoiceCreateNestedOneWithoutLogsInput
  }

  export type LogUncheckedCreateWithoutCurrentBruteInput = {
    id?: string
    date?: Date | string
    type: $Enums.LogType
    level?: number | null
    brute?: string | null
    fightId?: string | null
    xp?: number | null
    gold?: number | null
    template?: string | null
    destinyChoiceId?: string | null
  }

  export type LogCreateOrConnectWithoutCurrentBruteInput = {
    where: LogWhereUniqueInput
    create: XOR<LogCreateWithoutCurrentBruteInput, LogUncheckedCreateWithoutCurrentBruteInput>
  }

  export type LogCreateManyCurrentBruteInputEnvelope = {
    data: LogCreateManyCurrentBruteInput | LogCreateManyCurrentBruteInput[]
    skipDuplicates?: boolean
  }

  export type DestinyChoiceCreateWithoutBruteInput = {
    id?: string
    path?: DestinyChoiceCreatepathInput | $Enums.DestinyChoiceSide[]
    type: $Enums.DestinyChoiceType
    skill?: $Enums.SkillName | null
    weapon?: $Enums.WeaponName | null
    pet?: $Enums.PetName | null
    originalSkill?: $Enums.SkillName | null
    originalWeapon?: $Enums.WeaponName | null
    originalPet?: $Enums.PetName | null
    stat1?: $Enums.BruteStat | null
    stat1Value?: number | null
    stat2?: $Enums.BruteStat | null
    stat2Value?: number | null
    logs?: LogCreateNestedManyWithoutDestinyChoiceInput
  }

  export type DestinyChoiceUncheckedCreateWithoutBruteInput = {
    id?: string
    path?: DestinyChoiceCreatepathInput | $Enums.DestinyChoiceSide[]
    type: $Enums.DestinyChoiceType
    skill?: $Enums.SkillName | null
    weapon?: $Enums.WeaponName | null
    pet?: $Enums.PetName | null
    originalSkill?: $Enums.SkillName | null
    originalWeapon?: $Enums.WeaponName | null
    originalPet?: $Enums.PetName | null
    stat1?: $Enums.BruteStat | null
    stat1Value?: number | null
    stat2?: $Enums.BruteStat | null
    stat2Value?: number | null
    logs?: LogUncheckedCreateNestedManyWithoutDestinyChoiceInput
  }

  export type DestinyChoiceCreateOrConnectWithoutBruteInput = {
    where: DestinyChoiceWhereUniqueInput
    create: XOR<DestinyChoiceCreateWithoutBruteInput, DestinyChoiceUncheckedCreateWithoutBruteInput>
  }

  export type DestinyChoiceCreateManyBruteInputEnvelope = {
    data: DestinyChoiceCreateManyBruteInput | DestinyChoiceCreateManyBruteInput[]
    skipDuplicates?: boolean
  }

  export type TournamentCreateWithoutParticipantsInput = {
    id?: string
    date: Date | string
    type?: $Enums.TournamentType
    rounds: number
    fights?: FightCreateNestedManyWithoutTournamentInput
    event?: EventCreateNestedOneWithoutTournamentInput
  }

  export type TournamentUncheckedCreateWithoutParticipantsInput = {
    id?: string
    date: Date | string
    type?: $Enums.TournamentType
    rounds: number
    eventId?: string | null
    fights?: FightUncheckedCreateNestedManyWithoutTournamentInput
  }

  export type TournamentCreateOrConnectWithoutParticipantsInput = {
    where: TournamentWhereUniqueInput
    create: XOR<TournamentCreateWithoutParticipantsInput, TournamentUncheckedCreateWithoutParticipantsInput>
  }

  export type BruteCreateWithoutOpponentOfInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: number
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    tournamentWins?: number
    resets?: number
    user?: UserCreateNestedOneWithoutBrutesInput
    master?: BruteCreateNestedOneWithoutPupilsInput
    pupils?: BruteCreateNestedManyWithoutMasterInput
    clan?: ClanCreateNestedOneWithoutBrutesInput
    fights?: FightCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightCreateNestedManyWithoutBrute2Input
    logs?: LogCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceCreateNestedManyWithoutBruteInput
    tournaments?: TournamentCreateNestedManyWithoutParticipantsInput
    opponents?: BruteCreateNestedManyWithoutOpponentOfInput
    achievements?: AchievementCreateNestedManyWithoutBruteInput
    reports?: BruteReportCreateNestedManyWithoutBruteInput
    titles?: TitleCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostCreateNestedManyWithoutAuthorInput
    wantToJoinClan?: ClanCreateNestedOneWithoutJoinRequestsInput
    threads?: ClanThreadCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageCreateNestedManyWithoutBruteInput
    followers?: UserCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersCreateNestedManyWithoutDefendersInput
    event?: EventCreateNestedOneWithoutBrutesInput
    wonEvents?: EventCreateNestedManyWithoutWinnerInput
  }

  export type BruteUncheckedCreateWithoutOpponentOfInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    userId?: string | null
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    masterId?: string | null
    pupilsCount?: number
    clanId?: string | null
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    wantToJoinClanId?: string | null
    tournamentWins?: number
    eventId?: string | null
    resets?: number
    pupils?: BruteUncheckedCreateNestedManyWithoutMasterInput
    fights?: FightUncheckedCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightUncheckedCreateNestedManyWithoutBrute2Input
    logs?: LogUncheckedCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceUncheckedCreateNestedManyWithoutBruteInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutParticipantsInput
    opponents?: BruteUncheckedCreateNestedManyWithoutOpponentOfInput
    achievements?: AchievementUncheckedCreateNestedManyWithoutBruteInput
    reports?: BruteReportUncheckedCreateNestedManyWithoutBruteInput
    titles?: TitleUncheckedCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanUncheckedCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostUncheckedCreateNestedManyWithoutAuthorInput
    threads?: ClanThreadUncheckedCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemUncheckedCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementUncheckedCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpUncheckedCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsUncheckedCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageUncheckedCreateNestedManyWithoutBruteInput
    followers?: UserUncheckedCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutDefendersInput
    wonEvents?: EventUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type BruteCreateOrConnectWithoutOpponentOfInput = {
    where: BruteWhereUniqueInput
    create: XOR<BruteCreateWithoutOpponentOfInput, BruteUncheckedCreateWithoutOpponentOfInput>
  }

  export type BruteCreateWithoutOpponentsInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: number
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    tournamentWins?: number
    resets?: number
    user?: UserCreateNestedOneWithoutBrutesInput
    master?: BruteCreateNestedOneWithoutPupilsInput
    pupils?: BruteCreateNestedManyWithoutMasterInput
    clan?: ClanCreateNestedOneWithoutBrutesInput
    fights?: FightCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightCreateNestedManyWithoutBrute2Input
    logs?: LogCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceCreateNestedManyWithoutBruteInput
    tournaments?: TournamentCreateNestedManyWithoutParticipantsInput
    opponentOf?: BruteCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementCreateNestedManyWithoutBruteInput
    reports?: BruteReportCreateNestedManyWithoutBruteInput
    titles?: TitleCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostCreateNestedManyWithoutAuthorInput
    wantToJoinClan?: ClanCreateNestedOneWithoutJoinRequestsInput
    threads?: ClanThreadCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageCreateNestedManyWithoutBruteInput
    followers?: UserCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersCreateNestedManyWithoutDefendersInput
    event?: EventCreateNestedOneWithoutBrutesInput
    wonEvents?: EventCreateNestedManyWithoutWinnerInput
  }

  export type BruteUncheckedCreateWithoutOpponentsInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    userId?: string | null
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    masterId?: string | null
    pupilsCount?: number
    clanId?: string | null
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    wantToJoinClanId?: string | null
    tournamentWins?: number
    eventId?: string | null
    resets?: number
    pupils?: BruteUncheckedCreateNestedManyWithoutMasterInput
    fights?: FightUncheckedCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightUncheckedCreateNestedManyWithoutBrute2Input
    logs?: LogUncheckedCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceUncheckedCreateNestedManyWithoutBruteInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutParticipantsInput
    opponentOf?: BruteUncheckedCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementUncheckedCreateNestedManyWithoutBruteInput
    reports?: BruteReportUncheckedCreateNestedManyWithoutBruteInput
    titles?: TitleUncheckedCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanUncheckedCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostUncheckedCreateNestedManyWithoutAuthorInput
    threads?: ClanThreadUncheckedCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemUncheckedCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementUncheckedCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpUncheckedCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsUncheckedCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageUncheckedCreateNestedManyWithoutBruteInput
    followers?: UserUncheckedCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutDefendersInput
    wonEvents?: EventUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type BruteCreateOrConnectWithoutOpponentsInput = {
    where: BruteWhereUniqueInput
    create: XOR<BruteCreateWithoutOpponentsInput, BruteUncheckedCreateWithoutOpponentsInput>
  }

  export type AchievementCreateWithoutBruteInput = {
    id?: string
    name: $Enums.AchievementName
    count?: number
    user?: UserCreateNestedOneWithoutAchievementsInput
  }

  export type AchievementUncheckedCreateWithoutBruteInput = {
    id?: string
    name: $Enums.AchievementName
    count?: number
    userId?: string | null
  }

  export type AchievementCreateOrConnectWithoutBruteInput = {
    where: AchievementWhereUniqueInput
    create: XOR<AchievementCreateWithoutBruteInput, AchievementUncheckedCreateWithoutBruteInput>
  }

  export type AchievementCreateManyBruteInputEnvelope = {
    data: AchievementCreateManyBruteInput | AchievementCreateManyBruteInput[]
    skipDuplicates?: boolean
  }

  export type BruteReportCreateWithoutBruteInput = {
    id?: string
    reason?: $Enums.BruteReportReason
    count?: number
    date?: Date | string
    status?: $Enums.BruteReportStatus
    users?: UserCreateNestedManyWithoutReportsInput
  }

  export type BruteReportUncheckedCreateWithoutBruteInput = {
    id?: string
    reason?: $Enums.BruteReportReason
    count?: number
    date?: Date | string
    status?: $Enums.BruteReportStatus
    users?: UserUncheckedCreateNestedManyWithoutReportsInput
  }

  export type BruteReportCreateOrConnectWithoutBruteInput = {
    where: BruteReportWhereUniqueInput
    create: XOR<BruteReportCreateWithoutBruteInput, BruteReportUncheckedCreateWithoutBruteInput>
  }

  export type BruteReportCreateManyBruteInputEnvelope = {
    data: BruteReportCreateManyBruteInput | BruteReportCreateManyBruteInput[]
    skipDuplicates?: boolean
  }

  export type TitleCreateWithoutBrutesInput = {
    id?: string
    name: $Enums.AchievementName
    count?: number
  }

  export type TitleUncheckedCreateWithoutBrutesInput = {
    id?: string
    name: $Enums.AchievementName
    count?: number
  }

  export type TitleCreateOrConnectWithoutBrutesInput = {
    where: TitleWhereUniqueInput
    create: XOR<TitleCreateWithoutBrutesInput, TitleUncheckedCreateWithoutBrutesInput>
  }

  export type ClanCreateWithoutMasterInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    limit?: number
    points?: number
    elo?: number
    boss?: $Enums.BossName
    damageOnBoss?: number
    participateInClanWar?: boolean
    brutes?: BruteCreateNestedManyWithoutClanInput
    joinRequests?: BruteCreateNestedManyWithoutWantToJoinClanInput
    threads?: ClanThreadCreateNestedManyWithoutClanInput
    bossDamages?: BossDamageCreateNestedManyWithoutClanInput
    attacks?: ClanWarCreateNestedManyWithoutAttackerInput
    defenses?: ClanWarCreateNestedManyWithoutDefenderInput
    wins?: ClanWarCreateNestedManyWithoutWinnerInput
  }

  export type ClanUncheckedCreateWithoutMasterInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    limit?: number
    points?: number
    elo?: number
    boss?: $Enums.BossName
    damageOnBoss?: number
    participateInClanWar?: boolean
    brutes?: BruteUncheckedCreateNestedManyWithoutClanInput
    joinRequests?: BruteUncheckedCreateNestedManyWithoutWantToJoinClanInput
    threads?: ClanThreadUncheckedCreateNestedManyWithoutClanInput
    bossDamages?: BossDamageUncheckedCreateNestedManyWithoutClanInput
    attacks?: ClanWarUncheckedCreateNestedManyWithoutAttackerInput
    defenses?: ClanWarUncheckedCreateNestedManyWithoutDefenderInput
    wins?: ClanWarUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type ClanCreateOrConnectWithoutMasterInput = {
    where: ClanWhereUniqueInput
    create: XOR<ClanCreateWithoutMasterInput, ClanUncheckedCreateWithoutMasterInput>
  }

  export type ClanPostCreateWithoutAuthorInput = {
    id?: string
    date?: Date | string
    message: string
    thread: ClanThreadCreateNestedOneWithoutPostsInput
  }

  export type ClanPostUncheckedCreateWithoutAuthorInput = {
    id?: string
    threadId: string
    date?: Date | string
    message: string
  }

  export type ClanPostCreateOrConnectWithoutAuthorInput = {
    where: ClanPostWhereUniqueInput
    create: XOR<ClanPostCreateWithoutAuthorInput, ClanPostUncheckedCreateWithoutAuthorInput>
  }

  export type ClanPostCreateManyAuthorInputEnvelope = {
    data: ClanPostCreateManyAuthorInput | ClanPostCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type ClanCreateWithoutJoinRequestsInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    limit?: number
    points?: number
    elo?: number
    boss?: $Enums.BossName
    damageOnBoss?: number
    participateInClanWar?: boolean
    master?: BruteCreateNestedOneWithoutMasterOfClanInput
    brutes?: BruteCreateNestedManyWithoutClanInput
    threads?: ClanThreadCreateNestedManyWithoutClanInput
    bossDamages?: BossDamageCreateNestedManyWithoutClanInput
    attacks?: ClanWarCreateNestedManyWithoutAttackerInput
    defenses?: ClanWarCreateNestedManyWithoutDefenderInput
    wins?: ClanWarCreateNestedManyWithoutWinnerInput
  }

  export type ClanUncheckedCreateWithoutJoinRequestsInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    limit?: number
    points?: number
    elo?: number
    boss?: $Enums.BossName
    damageOnBoss?: number
    masterId?: string | null
    participateInClanWar?: boolean
    brutes?: BruteUncheckedCreateNestedManyWithoutClanInput
    threads?: ClanThreadUncheckedCreateNestedManyWithoutClanInput
    bossDamages?: BossDamageUncheckedCreateNestedManyWithoutClanInput
    attacks?: ClanWarUncheckedCreateNestedManyWithoutAttackerInput
    defenses?: ClanWarUncheckedCreateNestedManyWithoutDefenderInput
    wins?: ClanWarUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type ClanCreateOrConnectWithoutJoinRequestsInput = {
    where: ClanWhereUniqueInput
    create: XOR<ClanCreateWithoutJoinRequestsInput, ClanUncheckedCreateWithoutJoinRequestsInput>
  }

  export type ClanThreadCreateWithoutCreatorInput = {
    id?: string
    title: string
    locked?: boolean
    pinned?: boolean
    postCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    clan: ClanCreateNestedOneWithoutThreadsInput
    posts?: ClanPostCreateNestedManyWithoutThreadInput
  }

  export type ClanThreadUncheckedCreateWithoutCreatorInput = {
    id?: string
    clanId: string
    title: string
    locked?: boolean
    pinned?: boolean
    postCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: ClanPostUncheckedCreateNestedManyWithoutThreadInput
  }

  export type ClanThreadCreateOrConnectWithoutCreatorInput = {
    where: ClanThreadWhereUniqueInput
    create: XOR<ClanThreadCreateWithoutCreatorInput, ClanThreadUncheckedCreateWithoutCreatorInput>
  }

  export type ClanThreadCreateManyCreatorInputEnvelope = {
    data: ClanThreadCreateManyCreatorInput | ClanThreadCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type InventoryItemCreateWithoutBruteInput = {
    id?: string
    type: $Enums.InventoryItemType
    count?: number
    user?: UserCreateNestedOneWithoutInventoryInput
  }

  export type InventoryItemUncheckedCreateWithoutBruteInput = {
    id?: string
    type: $Enums.InventoryItemType
    count?: number
    userId?: string | null
  }

  export type InventoryItemCreateOrConnectWithoutBruteInput = {
    where: InventoryItemWhereUniqueInput
    create: XOR<InventoryItemCreateWithoutBruteInput, InventoryItemUncheckedCreateWithoutBruteInput>
  }

  export type InventoryItemCreateManyBruteInputEnvelope = {
    data: InventoryItemCreateManyBruteInput | InventoryItemCreateManyBruteInput[]
    skipDuplicates?: boolean
  }

  export type TournamentAchievementCreateWithoutBruteInput = {
    id?: string
    date: Date | string
    achievement: $Enums.AchievementName
    achievementCount: number
  }

  export type TournamentAchievementUncheckedCreateWithoutBruteInput = {
    id?: string
    date: Date | string
    achievement: $Enums.AchievementName
    achievementCount: number
  }

  export type TournamentAchievementCreateOrConnectWithoutBruteInput = {
    where: TournamentAchievementWhereUniqueInput
    create: XOR<TournamentAchievementCreateWithoutBruteInput, TournamentAchievementUncheckedCreateWithoutBruteInput>
  }

  export type TournamentAchievementCreateManyBruteInputEnvelope = {
    data: TournamentAchievementCreateManyBruteInput | TournamentAchievementCreateManyBruteInput[]
    skipDuplicates?: boolean
  }

  export type TournamentXpCreateWithoutBruteInput = {
    id?: string
    date: Date | string
    xp: number
  }

  export type TournamentXpUncheckedCreateWithoutBruteInput = {
    id?: string
    date: Date | string
    xp: number
  }

  export type TournamentXpCreateOrConnectWithoutBruteInput = {
    where: TournamentXpWhereUniqueInput
    create: XOR<TournamentXpCreateWithoutBruteInput, TournamentXpUncheckedCreateWithoutBruteInput>
  }

  export type TournamentXpCreateManyBruteInputEnvelope = {
    data: TournamentXpCreateManyBruteInput | TournamentXpCreateManyBruteInput[]
    skipDuplicates?: boolean
  }

  export type BruteStartingStatsCreateWithoutBruteInput = {
    id?: string
    endurance?: number
    strength?: number
    agility?: number
    speed?: number
  }

  export type BruteStartingStatsUncheckedCreateWithoutBruteInput = {
    id?: string
    endurance?: number
    strength?: number
    agility?: number
    speed?: number
  }

  export type BruteStartingStatsCreateOrConnectWithoutBruteInput = {
    where: BruteStartingStatsWhereUniqueInput
    create: XOR<BruteStartingStatsCreateWithoutBruteInput, BruteStartingStatsUncheckedCreateWithoutBruteInput>
  }

  export type BossDamageCreateWithoutBruteInput = {
    id?: string
    damage: number
    clan: ClanCreateNestedOneWithoutBossDamagesInput
  }

  export type BossDamageUncheckedCreateWithoutBruteInput = {
    id?: string
    clanId: string
    damage: number
  }

  export type BossDamageCreateOrConnectWithoutBruteInput = {
    where: BossDamageWhereUniqueInput
    create: XOR<BossDamageCreateWithoutBruteInput, BossDamageUncheckedCreateWithoutBruteInput>
  }

  export type BossDamageCreateManyBruteInputEnvelope = {
    data: BossDamageCreateManyBruteInput | BossDamageCreateManyBruteInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutFollowingInput = {
    id: string
    lang?: $Enums.Lang
    name: string
    admin?: boolean
    moderator?: boolean
    connexionToken: string
    bruteLimit?: number
    gold?: number
    fightSpeed?: number
    backgroundMusic?: boolean
    dinorpgDone?: Date | string | null
    ips?: UserCreateipsInput | string[]
    bannedAt?: Date | string | null
    banReason?: string | null
    lastReleaseSeen?: string | null
    displayVersusPage?: boolean
    brutes?: BruteCreateNestedManyWithoutUserInput
    achievements?: AchievementCreateNestedManyWithoutUserInput
    reports?: BruteReportCreateNestedManyWithoutUsersInput
    tournamentGolds?: TournamentGoldCreateNestedManyWithoutUserInput
    inventory?: InventoryItemCreateNestedManyWithoutUserInput
    favoriteFights?: FightCreateNestedManyWithoutFavoritedByInput
  }

  export type UserUncheckedCreateWithoutFollowingInput = {
    id: string
    lang?: $Enums.Lang
    name: string
    admin?: boolean
    moderator?: boolean
    connexionToken: string
    bruteLimit?: number
    gold?: number
    fightSpeed?: number
    backgroundMusic?: boolean
    dinorpgDone?: Date | string | null
    ips?: UserCreateipsInput | string[]
    bannedAt?: Date | string | null
    banReason?: string | null
    lastReleaseSeen?: string | null
    displayVersusPage?: boolean
    brutes?: BruteUncheckedCreateNestedManyWithoutUserInput
    achievements?: AchievementUncheckedCreateNestedManyWithoutUserInput
    reports?: BruteReportUncheckedCreateNestedManyWithoutUsersInput
    tournamentGolds?: TournamentGoldUncheckedCreateNestedManyWithoutUserInput
    inventory?: InventoryItemUncheckedCreateNestedManyWithoutUserInput
    favoriteFights?: FightUncheckedCreateNestedManyWithoutFavoritedByInput
  }

  export type UserCreateOrConnectWithoutFollowingInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>
  }

  export type ClanWarFightersCreateWithoutAttackersInput = {
    id?: string
    day: number
    clanWar: ClanWarCreateNestedOneWithoutFightersInput
    defenders?: BruteCreateNestedManyWithoutInClanWarDefenderFightersInput
  }

  export type ClanWarFightersUncheckedCreateWithoutAttackersInput = {
    id?: string
    clanWarId: string
    day: number
    defenders?: BruteUncheckedCreateNestedManyWithoutInClanWarDefenderFightersInput
  }

  export type ClanWarFightersCreateOrConnectWithoutAttackersInput = {
    where: ClanWarFightersWhereUniqueInput
    create: XOR<ClanWarFightersCreateWithoutAttackersInput, ClanWarFightersUncheckedCreateWithoutAttackersInput>
  }

  export type ClanWarFightersCreateWithoutDefendersInput = {
    id?: string
    day: number
    clanWar: ClanWarCreateNestedOneWithoutFightersInput
    attackers?: BruteCreateNestedManyWithoutInClanWarAttackerFightersInput
  }

  export type ClanWarFightersUncheckedCreateWithoutDefendersInput = {
    id?: string
    clanWarId: string
    day: number
    attackers?: BruteUncheckedCreateNestedManyWithoutInClanWarAttackerFightersInput
  }

  export type ClanWarFightersCreateOrConnectWithoutDefendersInput = {
    where: ClanWarFightersWhereUniqueInput
    create: XOR<ClanWarFightersCreateWithoutDefendersInput, ClanWarFightersUncheckedCreateWithoutDefendersInput>
  }

  export type EventCreateWithoutBrutesInput = {
    id?: string
    date?: Date | string
    type?: $Enums.EventType
    maxLevel: number
    maxRound?: number
    status?: $Enums.EventStatus
    finishedAt?: Date | string | null
    sortedBrutes?: EventCreatesortedBrutesInput | string[]
    tournament?: TournamentCreateNestedOneWithoutEventInput
    winner?: BruteCreateNestedOneWithoutWonEventsInput
  }

  export type EventUncheckedCreateWithoutBrutesInput = {
    id?: string
    date?: Date | string
    type?: $Enums.EventType
    maxLevel: number
    maxRound?: number
    status?: $Enums.EventStatus
    winnerId?: string | null
    finishedAt?: Date | string | null
    sortedBrutes?: EventCreatesortedBrutesInput | string[]
    tournament?: TournamentUncheckedCreateNestedOneWithoutEventInput
  }

  export type EventCreateOrConnectWithoutBrutesInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutBrutesInput, EventUncheckedCreateWithoutBrutesInput>
  }

  export type EventCreateWithoutWinnerInput = {
    id?: string
    date?: Date | string
    type?: $Enums.EventType
    maxLevel: number
    maxRound?: number
    status?: $Enums.EventStatus
    finishedAt?: Date | string | null
    sortedBrutes?: EventCreatesortedBrutesInput | string[]
    brutes?: BruteCreateNestedManyWithoutEventInput
    tournament?: TournamentCreateNestedOneWithoutEventInput
  }

  export type EventUncheckedCreateWithoutWinnerInput = {
    id?: string
    date?: Date | string
    type?: $Enums.EventType
    maxLevel: number
    maxRound?: number
    status?: $Enums.EventStatus
    finishedAt?: Date | string | null
    sortedBrutes?: EventCreatesortedBrutesInput | string[]
    brutes?: BruteUncheckedCreateNestedManyWithoutEventInput
    tournament?: TournamentUncheckedCreateNestedOneWithoutEventInput
  }

  export type EventCreateOrConnectWithoutWinnerInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutWinnerInput, EventUncheckedCreateWithoutWinnerInput>
  }

  export type EventCreateManyWinnerInputEnvelope = {
    data: EventCreateManyWinnerInput | EventCreateManyWinnerInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutBrutesInput = {
    update: XOR<UserUpdateWithoutBrutesInput, UserUncheckedUpdateWithoutBrutesInput>
    create: XOR<UserCreateWithoutBrutesInput, UserUncheckedCreateWithoutBrutesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBrutesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBrutesInput, UserUncheckedUpdateWithoutBrutesInput>
  }

  export type UserUpdateWithoutBrutesInput = {
    id?: StringFieldUpdateOperationsInput | string
    lang?: EnumLangFieldUpdateOperationsInput | $Enums.Lang
    name?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
    moderator?: BoolFieldUpdateOperationsInput | boolean
    connexionToken?: StringFieldUpdateOperationsInput | string
    bruteLimit?: IntFieldUpdateOperationsInput | number
    gold?: IntFieldUpdateOperationsInput | number
    fightSpeed?: IntFieldUpdateOperationsInput | number
    backgroundMusic?: BoolFieldUpdateOperationsInput | boolean
    dinorpgDone?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ips?: UserUpdateipsInput | string[]
    bannedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    lastReleaseSeen?: NullableStringFieldUpdateOperationsInput | string | null
    displayVersusPage?: BoolFieldUpdateOperationsInput | boolean
    achievements?: AchievementUpdateManyWithoutUserNestedInput
    reports?: BruteReportUpdateManyWithoutUsersNestedInput
    tournamentGolds?: TournamentGoldUpdateManyWithoutUserNestedInput
    inventory?: InventoryItemUpdateManyWithoutUserNestedInput
    favoriteFights?: FightUpdateManyWithoutFavoritedByNestedInput
    following?: BruteUpdateManyWithoutFollowersNestedInput
  }

  export type UserUncheckedUpdateWithoutBrutesInput = {
    id?: StringFieldUpdateOperationsInput | string
    lang?: EnumLangFieldUpdateOperationsInput | $Enums.Lang
    name?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
    moderator?: BoolFieldUpdateOperationsInput | boolean
    connexionToken?: StringFieldUpdateOperationsInput | string
    bruteLimit?: IntFieldUpdateOperationsInput | number
    gold?: IntFieldUpdateOperationsInput | number
    fightSpeed?: IntFieldUpdateOperationsInput | number
    backgroundMusic?: BoolFieldUpdateOperationsInput | boolean
    dinorpgDone?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ips?: UserUpdateipsInput | string[]
    bannedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    lastReleaseSeen?: NullableStringFieldUpdateOperationsInput | string | null
    displayVersusPage?: BoolFieldUpdateOperationsInput | boolean
    achievements?: AchievementUncheckedUpdateManyWithoutUserNestedInput
    reports?: BruteReportUncheckedUpdateManyWithoutUsersNestedInput
    tournamentGolds?: TournamentGoldUncheckedUpdateManyWithoutUserNestedInput
    inventory?: InventoryItemUncheckedUpdateManyWithoutUserNestedInput
    favoriteFights?: FightUncheckedUpdateManyWithoutFavoritedByNestedInput
    following?: BruteUncheckedUpdateManyWithoutFollowersNestedInput
  }

  export type BruteUpsertWithoutPupilsInput = {
    update: XOR<BruteUpdateWithoutPupilsInput, BruteUncheckedUpdateWithoutPupilsInput>
    create: XOR<BruteCreateWithoutPupilsInput, BruteUncheckedCreateWithoutPupilsInput>
    where?: BruteWhereInput
  }

  export type BruteUpdateToOneWithWhereWithoutPupilsInput = {
    where?: BruteWhereInput
    data: XOR<BruteUpdateWithoutPupilsInput, BruteUncheckedUpdateWithoutPupilsInput>
  }

  export type BruteUpdateWithoutPupilsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: IntFieldUpdateOperationsInput | number
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    tournamentWins?: IntFieldUpdateOperationsInput | number
    resets?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutBrutesNestedInput
    master?: BruteUpdateOneWithoutPupilsNestedInput
    clan?: ClanUpdateOneWithoutBrutesNestedInput
    fights?: FightUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUpdateManyWithoutBrute2NestedInput
    logs?: LogUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUpdateManyWithoutBruteNestedInput
    titles?: TitleUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUpdateManyWithoutAuthorNestedInput
    wantToJoinClan?: ClanUpdateOneWithoutJoinRequestsNestedInput
    threads?: ClanThreadUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUpdateManyWithoutBruteNestedInput
    followers?: UserUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUpdateManyWithoutDefendersNestedInput
    event?: EventUpdateOneWithoutBrutesNestedInput
    wonEvents?: EventUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateWithoutPupilsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
    fights?: FightUncheckedUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUncheckedUpdateManyWithoutBrute2NestedInput
    logs?: LogUncheckedUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUncheckedUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUncheckedUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUncheckedUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUncheckedUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUncheckedUpdateManyWithoutBruteNestedInput
    titles?: TitleUncheckedUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUncheckedUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUncheckedUpdateManyWithoutAuthorNestedInput
    threads?: ClanThreadUncheckedUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUncheckedUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUncheckedUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUncheckedUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUncheckedUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUncheckedUpdateManyWithoutBruteNestedInput
    followers?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedUpdateManyWithoutDefendersNestedInput
    wonEvents?: EventUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUpsertWithWhereUniqueWithoutMasterInput = {
    where: BruteWhereUniqueInput
    update: XOR<BruteUpdateWithoutMasterInput, BruteUncheckedUpdateWithoutMasterInput>
    create: XOR<BruteCreateWithoutMasterInput, BruteUncheckedCreateWithoutMasterInput>
  }

  export type BruteUpdateWithWhereUniqueWithoutMasterInput = {
    where: BruteWhereUniqueInput
    data: XOR<BruteUpdateWithoutMasterInput, BruteUncheckedUpdateWithoutMasterInput>
  }

  export type BruteUpdateManyWithWhereWithoutMasterInput = {
    where: BruteScalarWhereInput
    data: XOR<BruteUpdateManyMutationInput, BruteUncheckedUpdateManyWithoutMasterInput>
  }

  export type ClanUpsertWithoutBrutesInput = {
    update: XOR<ClanUpdateWithoutBrutesInput, ClanUncheckedUpdateWithoutBrutesInput>
    create: XOR<ClanCreateWithoutBrutesInput, ClanUncheckedCreateWithoutBrutesInput>
    where?: ClanWhereInput
  }

  export type ClanUpdateToOneWithWhereWithoutBrutesInput = {
    where?: ClanWhereInput
    data: XOR<ClanUpdateWithoutBrutesInput, ClanUncheckedUpdateWithoutBrutesInput>
  }

  export type ClanUpdateWithoutBrutesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    limit?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    elo?: IntFieldUpdateOperationsInput | number
    boss?: EnumBossNameFieldUpdateOperationsInput | $Enums.BossName
    damageOnBoss?: IntFieldUpdateOperationsInput | number
    participateInClanWar?: BoolFieldUpdateOperationsInput | boolean
    master?: BruteUpdateOneWithoutMasterOfClanNestedInput
    joinRequests?: BruteUpdateManyWithoutWantToJoinClanNestedInput
    threads?: ClanThreadUpdateManyWithoutClanNestedInput
    bossDamages?: BossDamageUpdateManyWithoutClanNestedInput
    attacks?: ClanWarUpdateManyWithoutAttackerNestedInput
    defenses?: ClanWarUpdateManyWithoutDefenderNestedInput
    wins?: ClanWarUpdateManyWithoutWinnerNestedInput
  }

  export type ClanUncheckedUpdateWithoutBrutesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    limit?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    elo?: IntFieldUpdateOperationsInput | number
    boss?: EnumBossNameFieldUpdateOperationsInput | $Enums.BossName
    damageOnBoss?: IntFieldUpdateOperationsInput | number
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    participateInClanWar?: BoolFieldUpdateOperationsInput | boolean
    joinRequests?: BruteUncheckedUpdateManyWithoutWantToJoinClanNestedInput
    threads?: ClanThreadUncheckedUpdateManyWithoutClanNestedInput
    bossDamages?: BossDamageUncheckedUpdateManyWithoutClanNestedInput
    attacks?: ClanWarUncheckedUpdateManyWithoutAttackerNestedInput
    defenses?: ClanWarUncheckedUpdateManyWithoutDefenderNestedInput
    wins?: ClanWarUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type FightUpsertWithWhereUniqueWithoutBrute1Input = {
    where: FightWhereUniqueInput
    update: XOR<FightUpdateWithoutBrute1Input, FightUncheckedUpdateWithoutBrute1Input>
    create: XOR<FightCreateWithoutBrute1Input, FightUncheckedCreateWithoutBrute1Input>
  }

  export type FightUpdateWithWhereUniqueWithoutBrute1Input = {
    where: FightWhereUniqueInput
    data: XOR<FightUpdateWithoutBrute1Input, FightUncheckedUpdateWithoutBrute1Input>
  }

  export type FightUpdateManyWithWhereWithoutBrute1Input = {
    where: FightScalarWhereInput
    data: XOR<FightUpdateManyMutationInput, FightUncheckedUpdateManyWithoutBrute1Input>
  }

  export type FightUpsertWithWhereUniqueWithoutBrute2Input = {
    where: FightWhereUniqueInput
    update: XOR<FightUpdateWithoutBrute2Input, FightUncheckedUpdateWithoutBrute2Input>
    create: XOR<FightCreateWithoutBrute2Input, FightUncheckedCreateWithoutBrute2Input>
  }

  export type FightUpdateWithWhereUniqueWithoutBrute2Input = {
    where: FightWhereUniqueInput
    data: XOR<FightUpdateWithoutBrute2Input, FightUncheckedUpdateWithoutBrute2Input>
  }

  export type FightUpdateManyWithWhereWithoutBrute2Input = {
    where: FightScalarWhereInput
    data: XOR<FightUpdateManyMutationInput, FightUncheckedUpdateManyWithoutBrute2Input>
  }

  export type LogUpsertWithWhereUniqueWithoutCurrentBruteInput = {
    where: LogWhereUniqueInput
    update: XOR<LogUpdateWithoutCurrentBruteInput, LogUncheckedUpdateWithoutCurrentBruteInput>
    create: XOR<LogCreateWithoutCurrentBruteInput, LogUncheckedCreateWithoutCurrentBruteInput>
  }

  export type LogUpdateWithWhereUniqueWithoutCurrentBruteInput = {
    where: LogWhereUniqueInput
    data: XOR<LogUpdateWithoutCurrentBruteInput, LogUncheckedUpdateWithoutCurrentBruteInput>
  }

  export type LogUpdateManyWithWhereWithoutCurrentBruteInput = {
    where: LogScalarWhereInput
    data: XOR<LogUpdateManyMutationInput, LogUncheckedUpdateManyWithoutCurrentBruteInput>
  }

  export type LogScalarWhereInput = {
    AND?: LogScalarWhereInput | LogScalarWhereInput[]
    OR?: LogScalarWhereInput[]
    NOT?: LogScalarWhereInput | LogScalarWhereInput[]
    id?: UuidFilter<"Log"> | string
    date?: DateTimeFilter<"Log"> | Date | string
    currentBruteId?: UuidFilter<"Log"> | string
    type?: EnumLogTypeFilter<"Log"> | $Enums.LogType
    level?: IntNullableFilter<"Log"> | number | null
    brute?: StringNullableFilter<"Log"> | string | null
    fightId?: UuidNullableFilter<"Log"> | string | null
    xp?: IntNullableFilter<"Log"> | number | null
    gold?: IntNullableFilter<"Log"> | number | null
    template?: StringNullableFilter<"Log"> | string | null
    destinyChoiceId?: UuidNullableFilter<"Log"> | string | null
  }

  export type DestinyChoiceUpsertWithWhereUniqueWithoutBruteInput = {
    where: DestinyChoiceWhereUniqueInput
    update: XOR<DestinyChoiceUpdateWithoutBruteInput, DestinyChoiceUncheckedUpdateWithoutBruteInput>
    create: XOR<DestinyChoiceCreateWithoutBruteInput, DestinyChoiceUncheckedCreateWithoutBruteInput>
  }

  export type DestinyChoiceUpdateWithWhereUniqueWithoutBruteInput = {
    where: DestinyChoiceWhereUniqueInput
    data: XOR<DestinyChoiceUpdateWithoutBruteInput, DestinyChoiceUncheckedUpdateWithoutBruteInput>
  }

  export type DestinyChoiceUpdateManyWithWhereWithoutBruteInput = {
    where: DestinyChoiceScalarWhereInput
    data: XOR<DestinyChoiceUpdateManyMutationInput, DestinyChoiceUncheckedUpdateManyWithoutBruteInput>
  }

  export type DestinyChoiceScalarWhereInput = {
    AND?: DestinyChoiceScalarWhereInput | DestinyChoiceScalarWhereInput[]
    OR?: DestinyChoiceScalarWhereInput[]
    NOT?: DestinyChoiceScalarWhereInput | DestinyChoiceScalarWhereInput[]
    id?: UuidFilter<"DestinyChoice"> | string
    bruteId?: UuidFilter<"DestinyChoice"> | string
    path?: EnumDestinyChoiceSideNullableListFilter<"DestinyChoice">
    type?: EnumDestinyChoiceTypeFilter<"DestinyChoice"> | $Enums.DestinyChoiceType
    skill?: EnumSkillNameNullableFilter<"DestinyChoice"> | $Enums.SkillName | null
    weapon?: EnumWeaponNameNullableFilter<"DestinyChoice"> | $Enums.WeaponName | null
    pet?: EnumPetNameNullableFilter<"DestinyChoice"> | $Enums.PetName | null
    originalSkill?: EnumSkillNameNullableFilter<"DestinyChoice"> | $Enums.SkillName | null
    originalWeapon?: EnumWeaponNameNullableFilter<"DestinyChoice"> | $Enums.WeaponName | null
    originalPet?: EnumPetNameNullableFilter<"DestinyChoice"> | $Enums.PetName | null
    stat1?: EnumBruteStatNullableFilter<"DestinyChoice"> | $Enums.BruteStat | null
    stat1Value?: IntNullableFilter<"DestinyChoice"> | number | null
    stat2?: EnumBruteStatNullableFilter<"DestinyChoice"> | $Enums.BruteStat | null
    stat2Value?: IntNullableFilter<"DestinyChoice"> | number | null
  }

  export type TournamentUpsertWithWhereUniqueWithoutParticipantsInput = {
    where: TournamentWhereUniqueInput
    update: XOR<TournamentUpdateWithoutParticipantsInput, TournamentUncheckedUpdateWithoutParticipantsInput>
    create: XOR<TournamentCreateWithoutParticipantsInput, TournamentUncheckedCreateWithoutParticipantsInput>
  }

  export type TournamentUpdateWithWhereUniqueWithoutParticipantsInput = {
    where: TournamentWhereUniqueInput
    data: XOR<TournamentUpdateWithoutParticipantsInput, TournamentUncheckedUpdateWithoutParticipantsInput>
  }

  export type TournamentUpdateManyWithWhereWithoutParticipantsInput = {
    where: TournamentScalarWhereInput
    data: XOR<TournamentUpdateManyMutationInput, TournamentUncheckedUpdateManyWithoutParticipantsInput>
  }

  export type TournamentScalarWhereInput = {
    AND?: TournamentScalarWhereInput | TournamentScalarWhereInput[]
    OR?: TournamentScalarWhereInput[]
    NOT?: TournamentScalarWhereInput | TournamentScalarWhereInput[]
    id?: UuidFilter<"Tournament"> | string
    date?: DateTimeFilter<"Tournament"> | Date | string
    type?: EnumTournamentTypeFilter<"Tournament"> | $Enums.TournamentType
    rounds?: IntFilter<"Tournament"> | number
    eventId?: UuidNullableFilter<"Tournament"> | string | null
  }

  export type BruteUpsertWithWhereUniqueWithoutOpponentOfInput = {
    where: BruteWhereUniqueInput
    update: XOR<BruteUpdateWithoutOpponentOfInput, BruteUncheckedUpdateWithoutOpponentOfInput>
    create: XOR<BruteCreateWithoutOpponentOfInput, BruteUncheckedCreateWithoutOpponentOfInput>
  }

  export type BruteUpdateWithWhereUniqueWithoutOpponentOfInput = {
    where: BruteWhereUniqueInput
    data: XOR<BruteUpdateWithoutOpponentOfInput, BruteUncheckedUpdateWithoutOpponentOfInput>
  }

  export type BruteUpdateManyWithWhereWithoutOpponentOfInput = {
    where: BruteScalarWhereInput
    data: XOR<BruteUpdateManyMutationInput, BruteUncheckedUpdateManyWithoutOpponentOfInput>
  }

  export type BruteUpsertWithWhereUniqueWithoutOpponentsInput = {
    where: BruteWhereUniqueInput
    update: XOR<BruteUpdateWithoutOpponentsInput, BruteUncheckedUpdateWithoutOpponentsInput>
    create: XOR<BruteCreateWithoutOpponentsInput, BruteUncheckedCreateWithoutOpponentsInput>
  }

  export type BruteUpdateWithWhereUniqueWithoutOpponentsInput = {
    where: BruteWhereUniqueInput
    data: XOR<BruteUpdateWithoutOpponentsInput, BruteUncheckedUpdateWithoutOpponentsInput>
  }

  export type BruteUpdateManyWithWhereWithoutOpponentsInput = {
    where: BruteScalarWhereInput
    data: XOR<BruteUpdateManyMutationInput, BruteUncheckedUpdateManyWithoutOpponentsInput>
  }

  export type AchievementUpsertWithWhereUniqueWithoutBruteInput = {
    where: AchievementWhereUniqueInput
    update: XOR<AchievementUpdateWithoutBruteInput, AchievementUncheckedUpdateWithoutBruteInput>
    create: XOR<AchievementCreateWithoutBruteInput, AchievementUncheckedCreateWithoutBruteInput>
  }

  export type AchievementUpdateWithWhereUniqueWithoutBruteInput = {
    where: AchievementWhereUniqueInput
    data: XOR<AchievementUpdateWithoutBruteInput, AchievementUncheckedUpdateWithoutBruteInput>
  }

  export type AchievementUpdateManyWithWhereWithoutBruteInput = {
    where: AchievementScalarWhereInput
    data: XOR<AchievementUpdateManyMutationInput, AchievementUncheckedUpdateManyWithoutBruteInput>
  }

  export type BruteReportUpsertWithWhereUniqueWithoutBruteInput = {
    where: BruteReportWhereUniqueInput
    update: XOR<BruteReportUpdateWithoutBruteInput, BruteReportUncheckedUpdateWithoutBruteInput>
    create: XOR<BruteReportCreateWithoutBruteInput, BruteReportUncheckedCreateWithoutBruteInput>
  }

  export type BruteReportUpdateWithWhereUniqueWithoutBruteInput = {
    where: BruteReportWhereUniqueInput
    data: XOR<BruteReportUpdateWithoutBruteInput, BruteReportUncheckedUpdateWithoutBruteInput>
  }

  export type BruteReportUpdateManyWithWhereWithoutBruteInput = {
    where: BruteReportScalarWhereInput
    data: XOR<BruteReportUpdateManyMutationInput, BruteReportUncheckedUpdateManyWithoutBruteInput>
  }

  export type TitleUpsertWithWhereUniqueWithoutBrutesInput = {
    where: TitleWhereUniqueInput
    update: XOR<TitleUpdateWithoutBrutesInput, TitleUncheckedUpdateWithoutBrutesInput>
    create: XOR<TitleCreateWithoutBrutesInput, TitleUncheckedCreateWithoutBrutesInput>
  }

  export type TitleUpdateWithWhereUniqueWithoutBrutesInput = {
    where: TitleWhereUniqueInput
    data: XOR<TitleUpdateWithoutBrutesInput, TitleUncheckedUpdateWithoutBrutesInput>
  }

  export type TitleUpdateManyWithWhereWithoutBrutesInput = {
    where: TitleScalarWhereInput
    data: XOR<TitleUpdateManyMutationInput, TitleUncheckedUpdateManyWithoutBrutesInput>
  }

  export type TitleScalarWhereInput = {
    AND?: TitleScalarWhereInput | TitleScalarWhereInput[]
    OR?: TitleScalarWhereInput[]
    NOT?: TitleScalarWhereInput | TitleScalarWhereInput[]
    id?: UuidFilter<"Title"> | string
    name?: EnumAchievementNameFilter<"Title"> | $Enums.AchievementName
    count?: IntFilter<"Title"> | number
  }

  export type ClanUpsertWithoutMasterInput = {
    update: XOR<ClanUpdateWithoutMasterInput, ClanUncheckedUpdateWithoutMasterInput>
    create: XOR<ClanCreateWithoutMasterInput, ClanUncheckedCreateWithoutMasterInput>
    where?: ClanWhereInput
  }

  export type ClanUpdateToOneWithWhereWithoutMasterInput = {
    where?: ClanWhereInput
    data: XOR<ClanUpdateWithoutMasterInput, ClanUncheckedUpdateWithoutMasterInput>
  }

  export type ClanUpdateWithoutMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    limit?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    elo?: IntFieldUpdateOperationsInput | number
    boss?: EnumBossNameFieldUpdateOperationsInput | $Enums.BossName
    damageOnBoss?: IntFieldUpdateOperationsInput | number
    participateInClanWar?: BoolFieldUpdateOperationsInput | boolean
    brutes?: BruteUpdateManyWithoutClanNestedInput
    joinRequests?: BruteUpdateManyWithoutWantToJoinClanNestedInput
    threads?: ClanThreadUpdateManyWithoutClanNestedInput
    bossDamages?: BossDamageUpdateManyWithoutClanNestedInput
    attacks?: ClanWarUpdateManyWithoutAttackerNestedInput
    defenses?: ClanWarUpdateManyWithoutDefenderNestedInput
    wins?: ClanWarUpdateManyWithoutWinnerNestedInput
  }

  export type ClanUncheckedUpdateWithoutMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    limit?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    elo?: IntFieldUpdateOperationsInput | number
    boss?: EnumBossNameFieldUpdateOperationsInput | $Enums.BossName
    damageOnBoss?: IntFieldUpdateOperationsInput | number
    participateInClanWar?: BoolFieldUpdateOperationsInput | boolean
    brutes?: BruteUncheckedUpdateManyWithoutClanNestedInput
    joinRequests?: BruteUncheckedUpdateManyWithoutWantToJoinClanNestedInput
    threads?: ClanThreadUncheckedUpdateManyWithoutClanNestedInput
    bossDamages?: BossDamageUncheckedUpdateManyWithoutClanNestedInput
    attacks?: ClanWarUncheckedUpdateManyWithoutAttackerNestedInput
    defenses?: ClanWarUncheckedUpdateManyWithoutDefenderNestedInput
    wins?: ClanWarUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type ClanPostUpsertWithWhereUniqueWithoutAuthorInput = {
    where: ClanPostWhereUniqueInput
    update: XOR<ClanPostUpdateWithoutAuthorInput, ClanPostUncheckedUpdateWithoutAuthorInput>
    create: XOR<ClanPostCreateWithoutAuthorInput, ClanPostUncheckedCreateWithoutAuthorInput>
  }

  export type ClanPostUpdateWithWhereUniqueWithoutAuthorInput = {
    where: ClanPostWhereUniqueInput
    data: XOR<ClanPostUpdateWithoutAuthorInput, ClanPostUncheckedUpdateWithoutAuthorInput>
  }

  export type ClanPostUpdateManyWithWhereWithoutAuthorInput = {
    where: ClanPostScalarWhereInput
    data: XOR<ClanPostUpdateManyMutationInput, ClanPostUncheckedUpdateManyWithoutAuthorInput>
  }

  export type ClanPostScalarWhereInput = {
    AND?: ClanPostScalarWhereInput | ClanPostScalarWhereInput[]
    OR?: ClanPostScalarWhereInput[]
    NOT?: ClanPostScalarWhereInput | ClanPostScalarWhereInput[]
    id?: UuidFilter<"ClanPost"> | string
    threadId?: UuidFilter<"ClanPost"> | string
    authorId?: UuidFilter<"ClanPost"> | string
    date?: DateTimeFilter<"ClanPost"> | Date | string
    message?: StringFilter<"ClanPost"> | string
  }

  export type ClanUpsertWithoutJoinRequestsInput = {
    update: XOR<ClanUpdateWithoutJoinRequestsInput, ClanUncheckedUpdateWithoutJoinRequestsInput>
    create: XOR<ClanCreateWithoutJoinRequestsInput, ClanUncheckedCreateWithoutJoinRequestsInput>
    where?: ClanWhereInput
  }

  export type ClanUpdateToOneWithWhereWithoutJoinRequestsInput = {
    where?: ClanWhereInput
    data: XOR<ClanUpdateWithoutJoinRequestsInput, ClanUncheckedUpdateWithoutJoinRequestsInput>
  }

  export type ClanUpdateWithoutJoinRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    limit?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    elo?: IntFieldUpdateOperationsInput | number
    boss?: EnumBossNameFieldUpdateOperationsInput | $Enums.BossName
    damageOnBoss?: IntFieldUpdateOperationsInput | number
    participateInClanWar?: BoolFieldUpdateOperationsInput | boolean
    master?: BruteUpdateOneWithoutMasterOfClanNestedInput
    brutes?: BruteUpdateManyWithoutClanNestedInput
    threads?: ClanThreadUpdateManyWithoutClanNestedInput
    bossDamages?: BossDamageUpdateManyWithoutClanNestedInput
    attacks?: ClanWarUpdateManyWithoutAttackerNestedInput
    defenses?: ClanWarUpdateManyWithoutDefenderNestedInput
    wins?: ClanWarUpdateManyWithoutWinnerNestedInput
  }

  export type ClanUncheckedUpdateWithoutJoinRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    limit?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    elo?: IntFieldUpdateOperationsInput | number
    boss?: EnumBossNameFieldUpdateOperationsInput | $Enums.BossName
    damageOnBoss?: IntFieldUpdateOperationsInput | number
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    participateInClanWar?: BoolFieldUpdateOperationsInput | boolean
    brutes?: BruteUncheckedUpdateManyWithoutClanNestedInput
    threads?: ClanThreadUncheckedUpdateManyWithoutClanNestedInput
    bossDamages?: BossDamageUncheckedUpdateManyWithoutClanNestedInput
    attacks?: ClanWarUncheckedUpdateManyWithoutAttackerNestedInput
    defenses?: ClanWarUncheckedUpdateManyWithoutDefenderNestedInput
    wins?: ClanWarUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type ClanThreadUpsertWithWhereUniqueWithoutCreatorInput = {
    where: ClanThreadWhereUniqueInput
    update: XOR<ClanThreadUpdateWithoutCreatorInput, ClanThreadUncheckedUpdateWithoutCreatorInput>
    create: XOR<ClanThreadCreateWithoutCreatorInput, ClanThreadUncheckedCreateWithoutCreatorInput>
  }

  export type ClanThreadUpdateWithWhereUniqueWithoutCreatorInput = {
    where: ClanThreadWhereUniqueInput
    data: XOR<ClanThreadUpdateWithoutCreatorInput, ClanThreadUncheckedUpdateWithoutCreatorInput>
  }

  export type ClanThreadUpdateManyWithWhereWithoutCreatorInput = {
    where: ClanThreadScalarWhereInput
    data: XOR<ClanThreadUpdateManyMutationInput, ClanThreadUncheckedUpdateManyWithoutCreatorInput>
  }

  export type ClanThreadScalarWhereInput = {
    AND?: ClanThreadScalarWhereInput | ClanThreadScalarWhereInput[]
    OR?: ClanThreadScalarWhereInput[]
    NOT?: ClanThreadScalarWhereInput | ClanThreadScalarWhereInput[]
    id?: UuidFilter<"ClanThread"> | string
    clanId?: UuidFilter<"ClanThread"> | string
    creatorId?: UuidFilter<"ClanThread"> | string
    title?: StringFilter<"ClanThread"> | string
    locked?: BoolFilter<"ClanThread"> | boolean
    pinned?: BoolFilter<"ClanThread"> | boolean
    postCount?: IntFilter<"ClanThread"> | number
    createdAt?: DateTimeFilter<"ClanThread"> | Date | string
    updatedAt?: DateTimeFilter<"ClanThread"> | Date | string
  }

  export type InventoryItemUpsertWithWhereUniqueWithoutBruteInput = {
    where: InventoryItemWhereUniqueInput
    update: XOR<InventoryItemUpdateWithoutBruteInput, InventoryItemUncheckedUpdateWithoutBruteInput>
    create: XOR<InventoryItemCreateWithoutBruteInput, InventoryItemUncheckedCreateWithoutBruteInput>
  }

  export type InventoryItemUpdateWithWhereUniqueWithoutBruteInput = {
    where: InventoryItemWhereUniqueInput
    data: XOR<InventoryItemUpdateWithoutBruteInput, InventoryItemUncheckedUpdateWithoutBruteInput>
  }

  export type InventoryItemUpdateManyWithWhereWithoutBruteInput = {
    where: InventoryItemScalarWhereInput
    data: XOR<InventoryItemUpdateManyMutationInput, InventoryItemUncheckedUpdateManyWithoutBruteInput>
  }

  export type TournamentAchievementUpsertWithWhereUniqueWithoutBruteInput = {
    where: TournamentAchievementWhereUniqueInput
    update: XOR<TournamentAchievementUpdateWithoutBruteInput, TournamentAchievementUncheckedUpdateWithoutBruteInput>
    create: XOR<TournamentAchievementCreateWithoutBruteInput, TournamentAchievementUncheckedCreateWithoutBruteInput>
  }

  export type TournamentAchievementUpdateWithWhereUniqueWithoutBruteInput = {
    where: TournamentAchievementWhereUniqueInput
    data: XOR<TournamentAchievementUpdateWithoutBruteInput, TournamentAchievementUncheckedUpdateWithoutBruteInput>
  }

  export type TournamentAchievementUpdateManyWithWhereWithoutBruteInput = {
    where: TournamentAchievementScalarWhereInput
    data: XOR<TournamentAchievementUpdateManyMutationInput, TournamentAchievementUncheckedUpdateManyWithoutBruteInput>
  }

  export type TournamentAchievementScalarWhereInput = {
    AND?: TournamentAchievementScalarWhereInput | TournamentAchievementScalarWhereInput[]
    OR?: TournamentAchievementScalarWhereInput[]
    NOT?: TournamentAchievementScalarWhereInput | TournamentAchievementScalarWhereInput[]
    id?: UuidFilter<"TournamentAchievement"> | string
    bruteId?: UuidFilter<"TournamentAchievement"> | string
    date?: DateTimeFilter<"TournamentAchievement"> | Date | string
    achievement?: EnumAchievementNameFilter<"TournamentAchievement"> | $Enums.AchievementName
    achievementCount?: IntFilter<"TournamentAchievement"> | number
  }

  export type TournamentXpUpsertWithWhereUniqueWithoutBruteInput = {
    where: TournamentXpWhereUniqueInput
    update: XOR<TournamentXpUpdateWithoutBruteInput, TournamentXpUncheckedUpdateWithoutBruteInput>
    create: XOR<TournamentXpCreateWithoutBruteInput, TournamentXpUncheckedCreateWithoutBruteInput>
  }

  export type TournamentXpUpdateWithWhereUniqueWithoutBruteInput = {
    where: TournamentXpWhereUniqueInput
    data: XOR<TournamentXpUpdateWithoutBruteInput, TournamentXpUncheckedUpdateWithoutBruteInput>
  }

  export type TournamentXpUpdateManyWithWhereWithoutBruteInput = {
    where: TournamentXpScalarWhereInput
    data: XOR<TournamentXpUpdateManyMutationInput, TournamentXpUncheckedUpdateManyWithoutBruteInput>
  }

  export type TournamentXpScalarWhereInput = {
    AND?: TournamentXpScalarWhereInput | TournamentXpScalarWhereInput[]
    OR?: TournamentXpScalarWhereInput[]
    NOT?: TournamentXpScalarWhereInput | TournamentXpScalarWhereInput[]
    id?: UuidFilter<"TournamentXp"> | string
    date?: DateTimeFilter<"TournamentXp"> | Date | string
    bruteId?: UuidFilter<"TournamentXp"> | string
    xp?: IntFilter<"TournamentXp"> | number
  }

  export type BruteStartingStatsUpsertWithoutBruteInput = {
    update: XOR<BruteStartingStatsUpdateWithoutBruteInput, BruteStartingStatsUncheckedUpdateWithoutBruteInput>
    create: XOR<BruteStartingStatsCreateWithoutBruteInput, BruteStartingStatsUncheckedCreateWithoutBruteInput>
    where?: BruteStartingStatsWhereInput
  }

  export type BruteStartingStatsUpdateToOneWithWhereWithoutBruteInput = {
    where?: BruteStartingStatsWhereInput
    data: XOR<BruteStartingStatsUpdateWithoutBruteInput, BruteStartingStatsUncheckedUpdateWithoutBruteInput>
  }

  export type BruteStartingStatsUpdateWithoutBruteInput = {
    id?: StringFieldUpdateOperationsInput | string
    endurance?: IntFieldUpdateOperationsInput | number
    strength?: IntFieldUpdateOperationsInput | number
    agility?: IntFieldUpdateOperationsInput | number
    speed?: IntFieldUpdateOperationsInput | number
  }

  export type BruteStartingStatsUncheckedUpdateWithoutBruteInput = {
    id?: StringFieldUpdateOperationsInput | string
    endurance?: IntFieldUpdateOperationsInput | number
    strength?: IntFieldUpdateOperationsInput | number
    agility?: IntFieldUpdateOperationsInput | number
    speed?: IntFieldUpdateOperationsInput | number
  }

  export type BossDamageUpsertWithWhereUniqueWithoutBruteInput = {
    where: BossDamageWhereUniqueInput
    update: XOR<BossDamageUpdateWithoutBruteInput, BossDamageUncheckedUpdateWithoutBruteInput>
    create: XOR<BossDamageCreateWithoutBruteInput, BossDamageUncheckedCreateWithoutBruteInput>
  }

  export type BossDamageUpdateWithWhereUniqueWithoutBruteInput = {
    where: BossDamageWhereUniqueInput
    data: XOR<BossDamageUpdateWithoutBruteInput, BossDamageUncheckedUpdateWithoutBruteInput>
  }

  export type BossDamageUpdateManyWithWhereWithoutBruteInput = {
    where: BossDamageScalarWhereInput
    data: XOR<BossDamageUpdateManyMutationInput, BossDamageUncheckedUpdateManyWithoutBruteInput>
  }

  export type BossDamageScalarWhereInput = {
    AND?: BossDamageScalarWhereInput | BossDamageScalarWhereInput[]
    OR?: BossDamageScalarWhereInput[]
    NOT?: BossDamageScalarWhereInput | BossDamageScalarWhereInput[]
    id?: UuidFilter<"BossDamage"> | string
    bruteId?: UuidFilter<"BossDamage"> | string
    clanId?: UuidFilter<"BossDamage"> | string
    damage?: IntFilter<"BossDamage"> | number
  }

  export type UserUpsertWithWhereUniqueWithoutFollowingInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutFollowingInput, UserUncheckedUpdateWithoutFollowingInput>
    create: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>
  }

  export type UserUpdateWithWhereUniqueWithoutFollowingInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutFollowingInput, UserUncheckedUpdateWithoutFollowingInput>
  }

  export type UserUpdateManyWithWhereWithoutFollowingInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutFollowingInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: UuidFilter<"User"> | string
    lang?: EnumLangFilter<"User"> | $Enums.Lang
    name?: StringFilter<"User"> | string
    admin?: BoolFilter<"User"> | boolean
    moderator?: BoolFilter<"User"> | boolean
    connexionToken?: UuidFilter<"User"> | string
    bruteLimit?: IntFilter<"User"> | number
    gold?: IntFilter<"User"> | number
    fightSpeed?: IntFilter<"User"> | number
    backgroundMusic?: BoolFilter<"User"> | boolean
    dinorpgDone?: DateTimeNullableFilter<"User"> | Date | string | null
    ips?: StringNullableListFilter<"User">
    bannedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    banReason?: StringNullableFilter<"User"> | string | null
    lastReleaseSeen?: StringNullableFilter<"User"> | string | null
    displayVersusPage?: BoolFilter<"User"> | boolean
  }

  export type ClanWarFightersUpsertWithWhereUniqueWithoutAttackersInput = {
    where: ClanWarFightersWhereUniqueInput
    update: XOR<ClanWarFightersUpdateWithoutAttackersInput, ClanWarFightersUncheckedUpdateWithoutAttackersInput>
    create: XOR<ClanWarFightersCreateWithoutAttackersInput, ClanWarFightersUncheckedCreateWithoutAttackersInput>
  }

  export type ClanWarFightersUpdateWithWhereUniqueWithoutAttackersInput = {
    where: ClanWarFightersWhereUniqueInput
    data: XOR<ClanWarFightersUpdateWithoutAttackersInput, ClanWarFightersUncheckedUpdateWithoutAttackersInput>
  }

  export type ClanWarFightersUpdateManyWithWhereWithoutAttackersInput = {
    where: ClanWarFightersScalarWhereInput
    data: XOR<ClanWarFightersUpdateManyMutationInput, ClanWarFightersUncheckedUpdateManyWithoutAttackersInput>
  }

  export type ClanWarFightersScalarWhereInput = {
    AND?: ClanWarFightersScalarWhereInput | ClanWarFightersScalarWhereInput[]
    OR?: ClanWarFightersScalarWhereInput[]
    NOT?: ClanWarFightersScalarWhereInput | ClanWarFightersScalarWhereInput[]
    id?: UuidFilter<"ClanWarFighters"> | string
    clanWarId?: UuidFilter<"ClanWarFighters"> | string
    day?: IntFilter<"ClanWarFighters"> | number
  }

  export type ClanWarFightersUpsertWithWhereUniqueWithoutDefendersInput = {
    where: ClanWarFightersWhereUniqueInput
    update: XOR<ClanWarFightersUpdateWithoutDefendersInput, ClanWarFightersUncheckedUpdateWithoutDefendersInput>
    create: XOR<ClanWarFightersCreateWithoutDefendersInput, ClanWarFightersUncheckedCreateWithoutDefendersInput>
  }

  export type ClanWarFightersUpdateWithWhereUniqueWithoutDefendersInput = {
    where: ClanWarFightersWhereUniqueInput
    data: XOR<ClanWarFightersUpdateWithoutDefendersInput, ClanWarFightersUncheckedUpdateWithoutDefendersInput>
  }

  export type ClanWarFightersUpdateManyWithWhereWithoutDefendersInput = {
    where: ClanWarFightersScalarWhereInput
    data: XOR<ClanWarFightersUpdateManyMutationInput, ClanWarFightersUncheckedUpdateManyWithoutDefendersInput>
  }

  export type EventUpsertWithoutBrutesInput = {
    update: XOR<EventUpdateWithoutBrutesInput, EventUncheckedUpdateWithoutBrutesInput>
    create: XOR<EventCreateWithoutBrutesInput, EventUncheckedCreateWithoutBrutesInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutBrutesInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutBrutesInput, EventUncheckedUpdateWithoutBrutesInput>
  }

  export type EventUpdateWithoutBrutesInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    maxLevel?: IntFieldUpdateOperationsInput | number
    maxRound?: IntFieldUpdateOperationsInput | number
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortedBrutes?: EventUpdatesortedBrutesInput | string[]
    tournament?: TournamentUpdateOneWithoutEventNestedInput
    winner?: BruteUpdateOneWithoutWonEventsNestedInput
  }

  export type EventUncheckedUpdateWithoutBrutesInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    maxLevel?: IntFieldUpdateOperationsInput | number
    maxRound?: IntFieldUpdateOperationsInput | number
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    winnerId?: NullableStringFieldUpdateOperationsInput | string | null
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortedBrutes?: EventUpdatesortedBrutesInput | string[]
    tournament?: TournamentUncheckedUpdateOneWithoutEventNestedInput
  }

  export type EventUpsertWithWhereUniqueWithoutWinnerInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutWinnerInput, EventUncheckedUpdateWithoutWinnerInput>
    create: XOR<EventCreateWithoutWinnerInput, EventUncheckedCreateWithoutWinnerInput>
  }

  export type EventUpdateWithWhereUniqueWithoutWinnerInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutWinnerInput, EventUncheckedUpdateWithoutWinnerInput>
  }

  export type EventUpdateManyWithWhereWithoutWinnerInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutWinnerInput>
  }

  export type EventScalarWhereInput = {
    AND?: EventScalarWhereInput | EventScalarWhereInput[]
    OR?: EventScalarWhereInput[]
    NOT?: EventScalarWhereInput | EventScalarWhereInput[]
    id?: UuidFilter<"Event"> | string
    date?: DateTimeFilter<"Event"> | Date | string
    type?: EnumEventTypeFilter<"Event"> | $Enums.EventType
    maxLevel?: IntFilter<"Event"> | number
    maxRound?: IntFilter<"Event"> | number
    status?: EnumEventStatusFilter<"Event"> | $Enums.EventStatus
    winnerId?: UuidNullableFilter<"Event"> | string | null
    finishedAt?: DateTimeNullableFilter<"Event"> | Date | string | null
    sortedBrutes?: StringNullableListFilter<"Event">
  }

  export type BruteCreateWithoutStartingStatsInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: number
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    tournamentWins?: number
    resets?: number
    user?: UserCreateNestedOneWithoutBrutesInput
    master?: BruteCreateNestedOneWithoutPupilsInput
    pupils?: BruteCreateNestedManyWithoutMasterInput
    clan?: ClanCreateNestedOneWithoutBrutesInput
    fights?: FightCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightCreateNestedManyWithoutBrute2Input
    logs?: LogCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceCreateNestedManyWithoutBruteInput
    tournaments?: TournamentCreateNestedManyWithoutParticipantsInput
    opponents?: BruteCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementCreateNestedManyWithoutBruteInput
    reports?: BruteReportCreateNestedManyWithoutBruteInput
    titles?: TitleCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostCreateNestedManyWithoutAuthorInput
    wantToJoinClan?: ClanCreateNestedOneWithoutJoinRequestsInput
    threads?: ClanThreadCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpCreateNestedManyWithoutBruteInput
    damageOnBosses?: BossDamageCreateNestedManyWithoutBruteInput
    followers?: UserCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersCreateNestedManyWithoutDefendersInput
    event?: EventCreateNestedOneWithoutBrutesInput
    wonEvents?: EventCreateNestedManyWithoutWinnerInput
  }

  export type BruteUncheckedCreateWithoutStartingStatsInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    userId?: string | null
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    masterId?: string | null
    pupilsCount?: number
    clanId?: string | null
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    wantToJoinClanId?: string | null
    tournamentWins?: number
    eventId?: string | null
    resets?: number
    pupils?: BruteUncheckedCreateNestedManyWithoutMasterInput
    fights?: FightUncheckedCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightUncheckedCreateNestedManyWithoutBrute2Input
    logs?: LogUncheckedCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceUncheckedCreateNestedManyWithoutBruteInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutParticipantsInput
    opponents?: BruteUncheckedCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteUncheckedCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementUncheckedCreateNestedManyWithoutBruteInput
    reports?: BruteReportUncheckedCreateNestedManyWithoutBruteInput
    titles?: TitleUncheckedCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanUncheckedCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostUncheckedCreateNestedManyWithoutAuthorInput
    threads?: ClanThreadUncheckedCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemUncheckedCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementUncheckedCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpUncheckedCreateNestedManyWithoutBruteInput
    damageOnBosses?: BossDamageUncheckedCreateNestedManyWithoutBruteInput
    followers?: UserUncheckedCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutDefendersInput
    wonEvents?: EventUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type BruteCreateOrConnectWithoutStartingStatsInput = {
    where: BruteWhereUniqueInput
    create: XOR<BruteCreateWithoutStartingStatsInput, BruteUncheckedCreateWithoutStartingStatsInput>
  }

  export type BruteUpsertWithoutStartingStatsInput = {
    update: XOR<BruteUpdateWithoutStartingStatsInput, BruteUncheckedUpdateWithoutStartingStatsInput>
    create: XOR<BruteCreateWithoutStartingStatsInput, BruteUncheckedCreateWithoutStartingStatsInput>
    where?: BruteWhereInput
  }

  export type BruteUpdateToOneWithWhereWithoutStartingStatsInput = {
    where?: BruteWhereInput
    data: XOR<BruteUpdateWithoutStartingStatsInput, BruteUncheckedUpdateWithoutStartingStatsInput>
  }

  export type BruteUpdateWithoutStartingStatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: IntFieldUpdateOperationsInput | number
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    tournamentWins?: IntFieldUpdateOperationsInput | number
    resets?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutBrutesNestedInput
    master?: BruteUpdateOneWithoutPupilsNestedInput
    pupils?: BruteUpdateManyWithoutMasterNestedInput
    clan?: ClanUpdateOneWithoutBrutesNestedInput
    fights?: FightUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUpdateManyWithoutBrute2NestedInput
    logs?: LogUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUpdateManyWithoutBruteNestedInput
    titles?: TitleUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUpdateManyWithoutAuthorNestedInput
    wantToJoinClan?: ClanUpdateOneWithoutJoinRequestsNestedInput
    threads?: ClanThreadUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUpdateManyWithoutBruteNestedInput
    damageOnBosses?: BossDamageUpdateManyWithoutBruteNestedInput
    followers?: UserUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUpdateManyWithoutDefendersNestedInput
    event?: EventUpdateOneWithoutBrutesNestedInput
    wonEvents?: EventUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateWithoutStartingStatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
    pupils?: BruteUncheckedUpdateManyWithoutMasterNestedInput
    fights?: FightUncheckedUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUncheckedUpdateManyWithoutBrute2NestedInput
    logs?: LogUncheckedUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUncheckedUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUncheckedUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUncheckedUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUncheckedUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUncheckedUpdateManyWithoutBruteNestedInput
    titles?: TitleUncheckedUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUncheckedUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUncheckedUpdateManyWithoutAuthorNestedInput
    threads?: ClanThreadUncheckedUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUncheckedUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUncheckedUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUncheckedUpdateManyWithoutBruteNestedInput
    damageOnBosses?: BossDamageUncheckedUpdateManyWithoutBruteNestedInput
    followers?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedUpdateManyWithoutDefendersNestedInput
    wonEvents?: EventUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type BruteCreateWithoutFightsInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: number
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    tournamentWins?: number
    resets?: number
    user?: UserCreateNestedOneWithoutBrutesInput
    master?: BruteCreateNestedOneWithoutPupilsInput
    pupils?: BruteCreateNestedManyWithoutMasterInput
    clan?: ClanCreateNestedOneWithoutBrutesInput
    fightsAsAdversary?: FightCreateNestedManyWithoutBrute2Input
    logs?: LogCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceCreateNestedManyWithoutBruteInput
    tournaments?: TournamentCreateNestedManyWithoutParticipantsInput
    opponents?: BruteCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementCreateNestedManyWithoutBruteInput
    reports?: BruteReportCreateNestedManyWithoutBruteInput
    titles?: TitleCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostCreateNestedManyWithoutAuthorInput
    wantToJoinClan?: ClanCreateNestedOneWithoutJoinRequestsInput
    threads?: ClanThreadCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageCreateNestedManyWithoutBruteInput
    followers?: UserCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersCreateNestedManyWithoutDefendersInput
    event?: EventCreateNestedOneWithoutBrutesInput
    wonEvents?: EventCreateNestedManyWithoutWinnerInput
  }

  export type BruteUncheckedCreateWithoutFightsInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    userId?: string | null
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    masterId?: string | null
    pupilsCount?: number
    clanId?: string | null
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    wantToJoinClanId?: string | null
    tournamentWins?: number
    eventId?: string | null
    resets?: number
    pupils?: BruteUncheckedCreateNestedManyWithoutMasterInput
    fightsAsAdversary?: FightUncheckedCreateNestedManyWithoutBrute2Input
    logs?: LogUncheckedCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceUncheckedCreateNestedManyWithoutBruteInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutParticipantsInput
    opponents?: BruteUncheckedCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteUncheckedCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementUncheckedCreateNestedManyWithoutBruteInput
    reports?: BruteReportUncheckedCreateNestedManyWithoutBruteInput
    titles?: TitleUncheckedCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanUncheckedCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostUncheckedCreateNestedManyWithoutAuthorInput
    threads?: ClanThreadUncheckedCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemUncheckedCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementUncheckedCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpUncheckedCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsUncheckedCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageUncheckedCreateNestedManyWithoutBruteInput
    followers?: UserUncheckedCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutDefendersInput
    wonEvents?: EventUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type BruteCreateOrConnectWithoutFightsInput = {
    where: BruteWhereUniqueInput
    create: XOR<BruteCreateWithoutFightsInput, BruteUncheckedCreateWithoutFightsInput>
  }

  export type BruteCreateWithoutFightsAsAdversaryInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: number
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    tournamentWins?: number
    resets?: number
    user?: UserCreateNestedOneWithoutBrutesInput
    master?: BruteCreateNestedOneWithoutPupilsInput
    pupils?: BruteCreateNestedManyWithoutMasterInput
    clan?: ClanCreateNestedOneWithoutBrutesInput
    fights?: FightCreateNestedManyWithoutBrute1Input
    logs?: LogCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceCreateNestedManyWithoutBruteInput
    tournaments?: TournamentCreateNestedManyWithoutParticipantsInput
    opponents?: BruteCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementCreateNestedManyWithoutBruteInput
    reports?: BruteReportCreateNestedManyWithoutBruteInput
    titles?: TitleCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostCreateNestedManyWithoutAuthorInput
    wantToJoinClan?: ClanCreateNestedOneWithoutJoinRequestsInput
    threads?: ClanThreadCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageCreateNestedManyWithoutBruteInput
    followers?: UserCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersCreateNestedManyWithoutDefendersInput
    event?: EventCreateNestedOneWithoutBrutesInput
    wonEvents?: EventCreateNestedManyWithoutWinnerInput
  }

  export type BruteUncheckedCreateWithoutFightsAsAdversaryInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    userId?: string | null
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    masterId?: string | null
    pupilsCount?: number
    clanId?: string | null
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    wantToJoinClanId?: string | null
    tournamentWins?: number
    eventId?: string | null
    resets?: number
    pupils?: BruteUncheckedCreateNestedManyWithoutMasterInput
    fights?: FightUncheckedCreateNestedManyWithoutBrute1Input
    logs?: LogUncheckedCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceUncheckedCreateNestedManyWithoutBruteInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutParticipantsInput
    opponents?: BruteUncheckedCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteUncheckedCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementUncheckedCreateNestedManyWithoutBruteInput
    reports?: BruteReportUncheckedCreateNestedManyWithoutBruteInput
    titles?: TitleUncheckedCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanUncheckedCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostUncheckedCreateNestedManyWithoutAuthorInput
    threads?: ClanThreadUncheckedCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemUncheckedCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementUncheckedCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpUncheckedCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsUncheckedCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageUncheckedCreateNestedManyWithoutBruteInput
    followers?: UserUncheckedCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutDefendersInput
    wonEvents?: EventUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type BruteCreateOrConnectWithoutFightsAsAdversaryInput = {
    where: BruteWhereUniqueInput
    create: XOR<BruteCreateWithoutFightsAsAdversaryInput, BruteUncheckedCreateWithoutFightsAsAdversaryInput>
  }

  export type LogCreateWithoutFightInput = {
    id?: string
    date?: Date | string
    type: $Enums.LogType
    level?: number | null
    brute?: string | null
    xp?: number | null
    gold?: number | null
    template?: string | null
    currentBrute: BruteCreateNestedOneWithoutLogsInput
    destinyChoice?: DestinyChoiceCreateNestedOneWithoutLogsInput
  }

  export type LogUncheckedCreateWithoutFightInput = {
    id?: string
    date?: Date | string
    currentBruteId: string
    type: $Enums.LogType
    level?: number | null
    brute?: string | null
    xp?: number | null
    gold?: number | null
    template?: string | null
    destinyChoiceId?: string | null
  }

  export type LogCreateOrConnectWithoutFightInput = {
    where: LogWhereUniqueInput
    create: XOR<LogCreateWithoutFightInput, LogUncheckedCreateWithoutFightInput>
  }

  export type LogCreateManyFightInputEnvelope = {
    data: LogCreateManyFightInput | LogCreateManyFightInput[]
    skipDuplicates?: boolean
  }

  export type TournamentCreateWithoutFightsInput = {
    id?: string
    date: Date | string
    type?: $Enums.TournamentType
    rounds: number
    participants?: BruteCreateNestedManyWithoutTournamentsInput
    event?: EventCreateNestedOneWithoutTournamentInput
  }

  export type TournamentUncheckedCreateWithoutFightsInput = {
    id?: string
    date: Date | string
    type?: $Enums.TournamentType
    rounds: number
    eventId?: string | null
    participants?: BruteUncheckedCreateNestedManyWithoutTournamentsInput
  }

  export type TournamentCreateOrConnectWithoutFightsInput = {
    where: TournamentWhereUniqueInput
    create: XOR<TournamentCreateWithoutFightsInput, TournamentUncheckedCreateWithoutFightsInput>
  }

  export type UserCreateWithoutFavoriteFightsInput = {
    id: string
    lang?: $Enums.Lang
    name: string
    admin?: boolean
    moderator?: boolean
    connexionToken: string
    bruteLimit?: number
    gold?: number
    fightSpeed?: number
    backgroundMusic?: boolean
    dinorpgDone?: Date | string | null
    ips?: UserCreateipsInput | string[]
    bannedAt?: Date | string | null
    banReason?: string | null
    lastReleaseSeen?: string | null
    displayVersusPage?: boolean
    brutes?: BruteCreateNestedManyWithoutUserInput
    achievements?: AchievementCreateNestedManyWithoutUserInput
    reports?: BruteReportCreateNestedManyWithoutUsersInput
    tournamentGolds?: TournamentGoldCreateNestedManyWithoutUserInput
    inventory?: InventoryItemCreateNestedManyWithoutUserInput
    following?: BruteCreateNestedManyWithoutFollowersInput
  }

  export type UserUncheckedCreateWithoutFavoriteFightsInput = {
    id: string
    lang?: $Enums.Lang
    name: string
    admin?: boolean
    moderator?: boolean
    connexionToken: string
    bruteLimit?: number
    gold?: number
    fightSpeed?: number
    backgroundMusic?: boolean
    dinorpgDone?: Date | string | null
    ips?: UserCreateipsInput | string[]
    bannedAt?: Date | string | null
    banReason?: string | null
    lastReleaseSeen?: string | null
    displayVersusPage?: boolean
    brutes?: BruteUncheckedCreateNestedManyWithoutUserInput
    achievements?: AchievementUncheckedCreateNestedManyWithoutUserInput
    reports?: BruteReportUncheckedCreateNestedManyWithoutUsersInput
    tournamentGolds?: TournamentGoldUncheckedCreateNestedManyWithoutUserInput
    inventory?: InventoryItemUncheckedCreateNestedManyWithoutUserInput
    following?: BruteUncheckedCreateNestedManyWithoutFollowersInput
  }

  export type UserCreateOrConnectWithoutFavoriteFightsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFavoriteFightsInput, UserUncheckedCreateWithoutFavoriteFightsInput>
  }

  export type ClanWarCreateWithoutFightsInput = {
    id?: string
    duration?: number
    type?: $Enums.ClanWarType
    date?: Date | string
    status?: $Enums.ClanWarStatus
    attackerEloChange?: number
    attackerWins?: number
    defenderEloChange?: number
    defenderWins?: number
    attacker: ClanCreateNestedOneWithoutAttacksInput
    defender: ClanCreateNestedOneWithoutDefensesInput
    winner?: ClanCreateNestedOneWithoutWinsInput
    fighters?: ClanWarFightersCreateNestedManyWithoutClanWarInput
  }

  export type ClanWarUncheckedCreateWithoutFightsInput = {
    id?: string
    duration?: number
    type?: $Enums.ClanWarType
    date?: Date | string
    status?: $Enums.ClanWarStatus
    attackerId: string
    attackerEloChange?: number
    attackerWins?: number
    defenderId: string
    defenderEloChange?: number
    defenderWins?: number
    winnerId?: string | null
    fighters?: ClanWarFightersUncheckedCreateNestedManyWithoutClanWarInput
  }

  export type ClanWarCreateOrConnectWithoutFightsInput = {
    where: ClanWarWhereUniqueInput
    create: XOR<ClanWarCreateWithoutFightsInput, ClanWarUncheckedCreateWithoutFightsInput>
  }

  export type BruteUpsertWithoutFightsInput = {
    update: XOR<BruteUpdateWithoutFightsInput, BruteUncheckedUpdateWithoutFightsInput>
    create: XOR<BruteCreateWithoutFightsInput, BruteUncheckedCreateWithoutFightsInput>
    where?: BruteWhereInput
  }

  export type BruteUpdateToOneWithWhereWithoutFightsInput = {
    where?: BruteWhereInput
    data: XOR<BruteUpdateWithoutFightsInput, BruteUncheckedUpdateWithoutFightsInput>
  }

  export type BruteUpdateWithoutFightsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: IntFieldUpdateOperationsInput | number
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    tournamentWins?: IntFieldUpdateOperationsInput | number
    resets?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutBrutesNestedInput
    master?: BruteUpdateOneWithoutPupilsNestedInput
    pupils?: BruteUpdateManyWithoutMasterNestedInput
    clan?: ClanUpdateOneWithoutBrutesNestedInput
    fightsAsAdversary?: FightUpdateManyWithoutBrute2NestedInput
    logs?: LogUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUpdateManyWithoutBruteNestedInput
    titles?: TitleUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUpdateManyWithoutAuthorNestedInput
    wantToJoinClan?: ClanUpdateOneWithoutJoinRequestsNestedInput
    threads?: ClanThreadUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUpdateManyWithoutBruteNestedInput
    followers?: UserUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUpdateManyWithoutDefendersNestedInput
    event?: EventUpdateOneWithoutBrutesNestedInput
    wonEvents?: EventUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateWithoutFightsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
    pupils?: BruteUncheckedUpdateManyWithoutMasterNestedInput
    fightsAsAdversary?: FightUncheckedUpdateManyWithoutBrute2NestedInput
    logs?: LogUncheckedUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUncheckedUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUncheckedUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUncheckedUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUncheckedUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUncheckedUpdateManyWithoutBruteNestedInput
    titles?: TitleUncheckedUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUncheckedUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUncheckedUpdateManyWithoutAuthorNestedInput
    threads?: ClanThreadUncheckedUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUncheckedUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUncheckedUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUncheckedUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUncheckedUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUncheckedUpdateManyWithoutBruteNestedInput
    followers?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedUpdateManyWithoutDefendersNestedInput
    wonEvents?: EventUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUpsertWithoutFightsAsAdversaryInput = {
    update: XOR<BruteUpdateWithoutFightsAsAdversaryInput, BruteUncheckedUpdateWithoutFightsAsAdversaryInput>
    create: XOR<BruteCreateWithoutFightsAsAdversaryInput, BruteUncheckedCreateWithoutFightsAsAdversaryInput>
    where?: BruteWhereInput
  }

  export type BruteUpdateToOneWithWhereWithoutFightsAsAdversaryInput = {
    where?: BruteWhereInput
    data: XOR<BruteUpdateWithoutFightsAsAdversaryInput, BruteUncheckedUpdateWithoutFightsAsAdversaryInput>
  }

  export type BruteUpdateWithoutFightsAsAdversaryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: IntFieldUpdateOperationsInput | number
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    tournamentWins?: IntFieldUpdateOperationsInput | number
    resets?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutBrutesNestedInput
    master?: BruteUpdateOneWithoutPupilsNestedInput
    pupils?: BruteUpdateManyWithoutMasterNestedInput
    clan?: ClanUpdateOneWithoutBrutesNestedInput
    fights?: FightUpdateManyWithoutBrute1NestedInput
    logs?: LogUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUpdateManyWithoutBruteNestedInput
    titles?: TitleUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUpdateManyWithoutAuthorNestedInput
    wantToJoinClan?: ClanUpdateOneWithoutJoinRequestsNestedInput
    threads?: ClanThreadUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUpdateManyWithoutBruteNestedInput
    followers?: UserUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUpdateManyWithoutDefendersNestedInput
    event?: EventUpdateOneWithoutBrutesNestedInput
    wonEvents?: EventUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateWithoutFightsAsAdversaryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
    pupils?: BruteUncheckedUpdateManyWithoutMasterNestedInput
    fights?: FightUncheckedUpdateManyWithoutBrute1NestedInput
    logs?: LogUncheckedUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUncheckedUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUncheckedUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUncheckedUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUncheckedUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUncheckedUpdateManyWithoutBruteNestedInput
    titles?: TitleUncheckedUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUncheckedUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUncheckedUpdateManyWithoutAuthorNestedInput
    threads?: ClanThreadUncheckedUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUncheckedUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUncheckedUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUncheckedUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUncheckedUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUncheckedUpdateManyWithoutBruteNestedInput
    followers?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedUpdateManyWithoutDefendersNestedInput
    wonEvents?: EventUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type LogUpsertWithWhereUniqueWithoutFightInput = {
    where: LogWhereUniqueInput
    update: XOR<LogUpdateWithoutFightInput, LogUncheckedUpdateWithoutFightInput>
    create: XOR<LogCreateWithoutFightInput, LogUncheckedCreateWithoutFightInput>
  }

  export type LogUpdateWithWhereUniqueWithoutFightInput = {
    where: LogWhereUniqueInput
    data: XOR<LogUpdateWithoutFightInput, LogUncheckedUpdateWithoutFightInput>
  }

  export type LogUpdateManyWithWhereWithoutFightInput = {
    where: LogScalarWhereInput
    data: XOR<LogUpdateManyMutationInput, LogUncheckedUpdateManyWithoutFightInput>
  }

  export type TournamentUpsertWithoutFightsInput = {
    update: XOR<TournamentUpdateWithoutFightsInput, TournamentUncheckedUpdateWithoutFightsInput>
    create: XOR<TournamentCreateWithoutFightsInput, TournamentUncheckedCreateWithoutFightsInput>
    where?: TournamentWhereInput
  }

  export type TournamentUpdateToOneWithWhereWithoutFightsInput = {
    where?: TournamentWhereInput
    data: XOR<TournamentUpdateWithoutFightsInput, TournamentUncheckedUpdateWithoutFightsInput>
  }

  export type TournamentUpdateWithoutFightsInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumTournamentTypeFieldUpdateOperationsInput | $Enums.TournamentType
    rounds?: IntFieldUpdateOperationsInput | number
    participants?: BruteUpdateManyWithoutTournamentsNestedInput
    event?: EventUpdateOneWithoutTournamentNestedInput
  }

  export type TournamentUncheckedUpdateWithoutFightsInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumTournamentTypeFieldUpdateOperationsInput | $Enums.TournamentType
    rounds?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    participants?: BruteUncheckedUpdateManyWithoutTournamentsNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutFavoriteFightsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutFavoriteFightsInput, UserUncheckedUpdateWithoutFavoriteFightsInput>
    create: XOR<UserCreateWithoutFavoriteFightsInput, UserUncheckedCreateWithoutFavoriteFightsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutFavoriteFightsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutFavoriteFightsInput, UserUncheckedUpdateWithoutFavoriteFightsInput>
  }

  export type UserUpdateManyWithWhereWithoutFavoriteFightsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutFavoriteFightsInput>
  }

  export type ClanWarUpsertWithoutFightsInput = {
    update: XOR<ClanWarUpdateWithoutFightsInput, ClanWarUncheckedUpdateWithoutFightsInput>
    create: XOR<ClanWarCreateWithoutFightsInput, ClanWarUncheckedCreateWithoutFightsInput>
    where?: ClanWarWhereInput
  }

  export type ClanWarUpdateToOneWithWhereWithoutFightsInput = {
    where?: ClanWarWhereInput
    data: XOR<ClanWarUpdateWithoutFightsInput, ClanWarUncheckedUpdateWithoutFightsInput>
  }

  export type ClanWarUpdateWithoutFightsInput = {
    id?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    type?: EnumClanWarTypeFieldUpdateOperationsInput | $Enums.ClanWarType
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumClanWarStatusFieldUpdateOperationsInput | $Enums.ClanWarStatus
    attackerEloChange?: IntFieldUpdateOperationsInput | number
    attackerWins?: IntFieldUpdateOperationsInput | number
    defenderEloChange?: IntFieldUpdateOperationsInput | number
    defenderWins?: IntFieldUpdateOperationsInput | number
    attacker?: ClanUpdateOneRequiredWithoutAttacksNestedInput
    defender?: ClanUpdateOneRequiredWithoutDefensesNestedInput
    winner?: ClanUpdateOneWithoutWinsNestedInput
    fighters?: ClanWarFightersUpdateManyWithoutClanWarNestedInput
  }

  export type ClanWarUncheckedUpdateWithoutFightsInput = {
    id?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    type?: EnumClanWarTypeFieldUpdateOperationsInput | $Enums.ClanWarType
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumClanWarStatusFieldUpdateOperationsInput | $Enums.ClanWarStatus
    attackerId?: StringFieldUpdateOperationsInput | string
    attackerEloChange?: IntFieldUpdateOperationsInput | number
    attackerWins?: IntFieldUpdateOperationsInput | number
    defenderId?: StringFieldUpdateOperationsInput | string
    defenderEloChange?: IntFieldUpdateOperationsInput | number
    defenderWins?: IntFieldUpdateOperationsInput | number
    winnerId?: NullableStringFieldUpdateOperationsInput | string | null
    fighters?: ClanWarFightersUncheckedUpdateManyWithoutClanWarNestedInput
  }

  export type BruteCreateWithoutLogsInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: number
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    tournamentWins?: number
    resets?: number
    user?: UserCreateNestedOneWithoutBrutesInput
    master?: BruteCreateNestedOneWithoutPupilsInput
    pupils?: BruteCreateNestedManyWithoutMasterInput
    clan?: ClanCreateNestedOneWithoutBrutesInput
    fights?: FightCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightCreateNestedManyWithoutBrute2Input
    destinyChoices?: DestinyChoiceCreateNestedManyWithoutBruteInput
    tournaments?: TournamentCreateNestedManyWithoutParticipantsInput
    opponents?: BruteCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementCreateNestedManyWithoutBruteInput
    reports?: BruteReportCreateNestedManyWithoutBruteInput
    titles?: TitleCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostCreateNestedManyWithoutAuthorInput
    wantToJoinClan?: ClanCreateNestedOneWithoutJoinRequestsInput
    threads?: ClanThreadCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageCreateNestedManyWithoutBruteInput
    followers?: UserCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersCreateNestedManyWithoutDefendersInput
    event?: EventCreateNestedOneWithoutBrutesInput
    wonEvents?: EventCreateNestedManyWithoutWinnerInput
  }

  export type BruteUncheckedCreateWithoutLogsInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    userId?: string | null
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    masterId?: string | null
    pupilsCount?: number
    clanId?: string | null
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    wantToJoinClanId?: string | null
    tournamentWins?: number
    eventId?: string | null
    resets?: number
    pupils?: BruteUncheckedCreateNestedManyWithoutMasterInput
    fights?: FightUncheckedCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightUncheckedCreateNestedManyWithoutBrute2Input
    destinyChoices?: DestinyChoiceUncheckedCreateNestedManyWithoutBruteInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutParticipantsInput
    opponents?: BruteUncheckedCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteUncheckedCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementUncheckedCreateNestedManyWithoutBruteInput
    reports?: BruteReportUncheckedCreateNestedManyWithoutBruteInput
    titles?: TitleUncheckedCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanUncheckedCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostUncheckedCreateNestedManyWithoutAuthorInput
    threads?: ClanThreadUncheckedCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemUncheckedCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementUncheckedCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpUncheckedCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsUncheckedCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageUncheckedCreateNestedManyWithoutBruteInput
    followers?: UserUncheckedCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutDefendersInput
    wonEvents?: EventUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type BruteCreateOrConnectWithoutLogsInput = {
    where: BruteWhereUniqueInput
    create: XOR<BruteCreateWithoutLogsInput, BruteUncheckedCreateWithoutLogsInput>
  }

  export type FightCreateWithoutLogsInput = {
    id?: string
    date?: Date | string
    winner: string
    loser: string
    steps: string
    fighters: string
    tournamentStep?: number
    modifiers?: FightCreatemodifiersInput | $Enums.FightModifier[]
    background?: string
    brute1: BruteCreateNestedOneWithoutFightsInput
    brute2?: BruteCreateNestedOneWithoutFightsAsAdversaryInput
    tournament?: TournamentCreateNestedOneWithoutFightsInput
    favoritedBy?: UserCreateNestedManyWithoutFavoriteFightsInput
    clanWar?: ClanWarCreateNestedOneWithoutFightsInput
  }

  export type FightUncheckedCreateWithoutLogsInput = {
    id?: string
    date?: Date | string
    brute1Id: string
    brute2Id?: string | null
    winner: string
    loser: string
    steps: string
    fighters: string
    tournamentId?: string | null
    tournamentStep?: number
    modifiers?: FightCreatemodifiersInput | $Enums.FightModifier[]
    background?: string
    clanWarId?: string | null
    favoritedBy?: UserUncheckedCreateNestedManyWithoutFavoriteFightsInput
  }

  export type FightCreateOrConnectWithoutLogsInput = {
    where: FightWhereUniqueInput
    create: XOR<FightCreateWithoutLogsInput, FightUncheckedCreateWithoutLogsInput>
  }

  export type DestinyChoiceCreateWithoutLogsInput = {
    id?: string
    path?: DestinyChoiceCreatepathInput | $Enums.DestinyChoiceSide[]
    type: $Enums.DestinyChoiceType
    skill?: $Enums.SkillName | null
    weapon?: $Enums.WeaponName | null
    pet?: $Enums.PetName | null
    originalSkill?: $Enums.SkillName | null
    originalWeapon?: $Enums.WeaponName | null
    originalPet?: $Enums.PetName | null
    stat1?: $Enums.BruteStat | null
    stat1Value?: number | null
    stat2?: $Enums.BruteStat | null
    stat2Value?: number | null
    brute: BruteCreateNestedOneWithoutDestinyChoicesInput
  }

  export type DestinyChoiceUncheckedCreateWithoutLogsInput = {
    id?: string
    bruteId: string
    path?: DestinyChoiceCreatepathInput | $Enums.DestinyChoiceSide[]
    type: $Enums.DestinyChoiceType
    skill?: $Enums.SkillName | null
    weapon?: $Enums.WeaponName | null
    pet?: $Enums.PetName | null
    originalSkill?: $Enums.SkillName | null
    originalWeapon?: $Enums.WeaponName | null
    originalPet?: $Enums.PetName | null
    stat1?: $Enums.BruteStat | null
    stat1Value?: number | null
    stat2?: $Enums.BruteStat | null
    stat2Value?: number | null
  }

  export type DestinyChoiceCreateOrConnectWithoutLogsInput = {
    where: DestinyChoiceWhereUniqueInput
    create: XOR<DestinyChoiceCreateWithoutLogsInput, DestinyChoiceUncheckedCreateWithoutLogsInput>
  }

  export type BruteUpsertWithoutLogsInput = {
    update: XOR<BruteUpdateWithoutLogsInput, BruteUncheckedUpdateWithoutLogsInput>
    create: XOR<BruteCreateWithoutLogsInput, BruteUncheckedCreateWithoutLogsInput>
    where?: BruteWhereInput
  }

  export type BruteUpdateToOneWithWhereWithoutLogsInput = {
    where?: BruteWhereInput
    data: XOR<BruteUpdateWithoutLogsInput, BruteUncheckedUpdateWithoutLogsInput>
  }

  export type BruteUpdateWithoutLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: IntFieldUpdateOperationsInput | number
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    tournamentWins?: IntFieldUpdateOperationsInput | number
    resets?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutBrutesNestedInput
    master?: BruteUpdateOneWithoutPupilsNestedInput
    pupils?: BruteUpdateManyWithoutMasterNestedInput
    clan?: ClanUpdateOneWithoutBrutesNestedInput
    fights?: FightUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUpdateManyWithoutBrute2NestedInput
    destinyChoices?: DestinyChoiceUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUpdateManyWithoutBruteNestedInput
    titles?: TitleUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUpdateManyWithoutAuthorNestedInput
    wantToJoinClan?: ClanUpdateOneWithoutJoinRequestsNestedInput
    threads?: ClanThreadUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUpdateManyWithoutBruteNestedInput
    followers?: UserUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUpdateManyWithoutDefendersNestedInput
    event?: EventUpdateOneWithoutBrutesNestedInput
    wonEvents?: EventUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateWithoutLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
    pupils?: BruteUncheckedUpdateManyWithoutMasterNestedInput
    fights?: FightUncheckedUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUncheckedUpdateManyWithoutBrute2NestedInput
    destinyChoices?: DestinyChoiceUncheckedUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUncheckedUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUncheckedUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUncheckedUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUncheckedUpdateManyWithoutBruteNestedInput
    titles?: TitleUncheckedUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUncheckedUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUncheckedUpdateManyWithoutAuthorNestedInput
    threads?: ClanThreadUncheckedUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUncheckedUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUncheckedUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUncheckedUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUncheckedUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUncheckedUpdateManyWithoutBruteNestedInput
    followers?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedUpdateManyWithoutDefendersNestedInput
    wonEvents?: EventUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type FightUpsertWithoutLogsInput = {
    update: XOR<FightUpdateWithoutLogsInput, FightUncheckedUpdateWithoutLogsInput>
    create: XOR<FightCreateWithoutLogsInput, FightUncheckedCreateWithoutLogsInput>
    where?: FightWhereInput
  }

  export type FightUpdateToOneWithWhereWithoutLogsInput = {
    where?: FightWhereInput
    data: XOR<FightUpdateWithoutLogsInput, FightUncheckedUpdateWithoutLogsInput>
  }

  export type FightUpdateWithoutLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    winner?: StringFieldUpdateOperationsInput | string
    loser?: StringFieldUpdateOperationsInput | string
    steps?: StringFieldUpdateOperationsInput | string
    fighters?: StringFieldUpdateOperationsInput | string
    tournamentStep?: IntFieldUpdateOperationsInput | number
    modifiers?: FightUpdatemodifiersInput | $Enums.FightModifier[]
    background?: StringFieldUpdateOperationsInput | string
    brute1?: BruteUpdateOneRequiredWithoutFightsNestedInput
    brute2?: BruteUpdateOneWithoutFightsAsAdversaryNestedInput
    tournament?: TournamentUpdateOneWithoutFightsNestedInput
    favoritedBy?: UserUpdateManyWithoutFavoriteFightsNestedInput
    clanWar?: ClanWarUpdateOneWithoutFightsNestedInput
  }

  export type FightUncheckedUpdateWithoutLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    brute1Id?: StringFieldUpdateOperationsInput | string
    brute2Id?: NullableStringFieldUpdateOperationsInput | string | null
    winner?: StringFieldUpdateOperationsInput | string
    loser?: StringFieldUpdateOperationsInput | string
    steps?: StringFieldUpdateOperationsInput | string
    fighters?: StringFieldUpdateOperationsInput | string
    tournamentId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentStep?: IntFieldUpdateOperationsInput | number
    modifiers?: FightUpdatemodifiersInput | $Enums.FightModifier[]
    background?: StringFieldUpdateOperationsInput | string
    clanWarId?: NullableStringFieldUpdateOperationsInput | string | null
    favoritedBy?: UserUncheckedUpdateManyWithoutFavoriteFightsNestedInput
  }

  export type DestinyChoiceUpsertWithoutLogsInput = {
    update: XOR<DestinyChoiceUpdateWithoutLogsInput, DestinyChoiceUncheckedUpdateWithoutLogsInput>
    create: XOR<DestinyChoiceCreateWithoutLogsInput, DestinyChoiceUncheckedCreateWithoutLogsInput>
    where?: DestinyChoiceWhereInput
  }

  export type DestinyChoiceUpdateToOneWithWhereWithoutLogsInput = {
    where?: DestinyChoiceWhereInput
    data: XOR<DestinyChoiceUpdateWithoutLogsInput, DestinyChoiceUncheckedUpdateWithoutLogsInput>
  }

  export type DestinyChoiceUpdateWithoutLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: DestinyChoiceUpdatepathInput | $Enums.DestinyChoiceSide[]
    type?: EnumDestinyChoiceTypeFieldUpdateOperationsInput | $Enums.DestinyChoiceType
    skill?: NullableEnumSkillNameFieldUpdateOperationsInput | $Enums.SkillName | null
    weapon?: NullableEnumWeaponNameFieldUpdateOperationsInput | $Enums.WeaponName | null
    pet?: NullableEnumPetNameFieldUpdateOperationsInput | $Enums.PetName | null
    originalSkill?: NullableEnumSkillNameFieldUpdateOperationsInput | $Enums.SkillName | null
    originalWeapon?: NullableEnumWeaponNameFieldUpdateOperationsInput | $Enums.WeaponName | null
    originalPet?: NullableEnumPetNameFieldUpdateOperationsInput | $Enums.PetName | null
    stat1?: NullableEnumBruteStatFieldUpdateOperationsInput | $Enums.BruteStat | null
    stat1Value?: NullableIntFieldUpdateOperationsInput | number | null
    stat2?: NullableEnumBruteStatFieldUpdateOperationsInput | $Enums.BruteStat | null
    stat2Value?: NullableIntFieldUpdateOperationsInput | number | null
    brute?: BruteUpdateOneRequiredWithoutDestinyChoicesNestedInput
  }

  export type DestinyChoiceUncheckedUpdateWithoutLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    bruteId?: StringFieldUpdateOperationsInput | string
    path?: DestinyChoiceUpdatepathInput | $Enums.DestinyChoiceSide[]
    type?: EnumDestinyChoiceTypeFieldUpdateOperationsInput | $Enums.DestinyChoiceType
    skill?: NullableEnumSkillNameFieldUpdateOperationsInput | $Enums.SkillName | null
    weapon?: NullableEnumWeaponNameFieldUpdateOperationsInput | $Enums.WeaponName | null
    pet?: NullableEnumPetNameFieldUpdateOperationsInput | $Enums.PetName | null
    originalSkill?: NullableEnumSkillNameFieldUpdateOperationsInput | $Enums.SkillName | null
    originalWeapon?: NullableEnumWeaponNameFieldUpdateOperationsInput | $Enums.WeaponName | null
    originalPet?: NullableEnumPetNameFieldUpdateOperationsInput | $Enums.PetName | null
    stat1?: NullableEnumBruteStatFieldUpdateOperationsInput | $Enums.BruteStat | null
    stat1Value?: NullableIntFieldUpdateOperationsInput | number | null
    stat2?: NullableEnumBruteStatFieldUpdateOperationsInput | $Enums.BruteStat | null
    stat2Value?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BruteCreateWithoutDestinyChoicesInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: number
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    tournamentWins?: number
    resets?: number
    user?: UserCreateNestedOneWithoutBrutesInput
    master?: BruteCreateNestedOneWithoutPupilsInput
    pupils?: BruteCreateNestedManyWithoutMasterInput
    clan?: ClanCreateNestedOneWithoutBrutesInput
    fights?: FightCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightCreateNestedManyWithoutBrute2Input
    logs?: LogCreateNestedManyWithoutCurrentBruteInput
    tournaments?: TournamentCreateNestedManyWithoutParticipantsInput
    opponents?: BruteCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementCreateNestedManyWithoutBruteInput
    reports?: BruteReportCreateNestedManyWithoutBruteInput
    titles?: TitleCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostCreateNestedManyWithoutAuthorInput
    wantToJoinClan?: ClanCreateNestedOneWithoutJoinRequestsInput
    threads?: ClanThreadCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageCreateNestedManyWithoutBruteInput
    followers?: UserCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersCreateNestedManyWithoutDefendersInput
    event?: EventCreateNestedOneWithoutBrutesInput
    wonEvents?: EventCreateNestedManyWithoutWinnerInput
  }

  export type BruteUncheckedCreateWithoutDestinyChoicesInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    userId?: string | null
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    masterId?: string | null
    pupilsCount?: number
    clanId?: string | null
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    wantToJoinClanId?: string | null
    tournamentWins?: number
    eventId?: string | null
    resets?: number
    pupils?: BruteUncheckedCreateNestedManyWithoutMasterInput
    fights?: FightUncheckedCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightUncheckedCreateNestedManyWithoutBrute2Input
    logs?: LogUncheckedCreateNestedManyWithoutCurrentBruteInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutParticipantsInput
    opponents?: BruteUncheckedCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteUncheckedCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementUncheckedCreateNestedManyWithoutBruteInput
    reports?: BruteReportUncheckedCreateNestedManyWithoutBruteInput
    titles?: TitleUncheckedCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanUncheckedCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostUncheckedCreateNestedManyWithoutAuthorInput
    threads?: ClanThreadUncheckedCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemUncheckedCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementUncheckedCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpUncheckedCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsUncheckedCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageUncheckedCreateNestedManyWithoutBruteInput
    followers?: UserUncheckedCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutDefendersInput
    wonEvents?: EventUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type BruteCreateOrConnectWithoutDestinyChoicesInput = {
    where: BruteWhereUniqueInput
    create: XOR<BruteCreateWithoutDestinyChoicesInput, BruteUncheckedCreateWithoutDestinyChoicesInput>
  }

  export type LogCreateWithoutDestinyChoiceInput = {
    id?: string
    date?: Date | string
    type: $Enums.LogType
    level?: number | null
    brute?: string | null
    xp?: number | null
    gold?: number | null
    template?: string | null
    currentBrute: BruteCreateNestedOneWithoutLogsInput
    fight?: FightCreateNestedOneWithoutLogsInput
  }

  export type LogUncheckedCreateWithoutDestinyChoiceInput = {
    id?: string
    date?: Date | string
    currentBruteId: string
    type: $Enums.LogType
    level?: number | null
    brute?: string | null
    fightId?: string | null
    xp?: number | null
    gold?: number | null
    template?: string | null
  }

  export type LogCreateOrConnectWithoutDestinyChoiceInput = {
    where: LogWhereUniqueInput
    create: XOR<LogCreateWithoutDestinyChoiceInput, LogUncheckedCreateWithoutDestinyChoiceInput>
  }

  export type LogCreateManyDestinyChoiceInputEnvelope = {
    data: LogCreateManyDestinyChoiceInput | LogCreateManyDestinyChoiceInput[]
    skipDuplicates?: boolean
  }

  export type BruteUpsertWithoutDestinyChoicesInput = {
    update: XOR<BruteUpdateWithoutDestinyChoicesInput, BruteUncheckedUpdateWithoutDestinyChoicesInput>
    create: XOR<BruteCreateWithoutDestinyChoicesInput, BruteUncheckedCreateWithoutDestinyChoicesInput>
    where?: BruteWhereInput
  }

  export type BruteUpdateToOneWithWhereWithoutDestinyChoicesInput = {
    where?: BruteWhereInput
    data: XOR<BruteUpdateWithoutDestinyChoicesInput, BruteUncheckedUpdateWithoutDestinyChoicesInput>
  }

  export type BruteUpdateWithoutDestinyChoicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: IntFieldUpdateOperationsInput | number
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    tournamentWins?: IntFieldUpdateOperationsInput | number
    resets?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutBrutesNestedInput
    master?: BruteUpdateOneWithoutPupilsNestedInput
    pupils?: BruteUpdateManyWithoutMasterNestedInput
    clan?: ClanUpdateOneWithoutBrutesNestedInput
    fights?: FightUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUpdateManyWithoutBrute2NestedInput
    logs?: LogUpdateManyWithoutCurrentBruteNestedInput
    tournaments?: TournamentUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUpdateManyWithoutBruteNestedInput
    titles?: TitleUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUpdateManyWithoutAuthorNestedInput
    wantToJoinClan?: ClanUpdateOneWithoutJoinRequestsNestedInput
    threads?: ClanThreadUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUpdateManyWithoutBruteNestedInput
    followers?: UserUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUpdateManyWithoutDefendersNestedInput
    event?: EventUpdateOneWithoutBrutesNestedInput
    wonEvents?: EventUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateWithoutDestinyChoicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
    pupils?: BruteUncheckedUpdateManyWithoutMasterNestedInput
    fights?: FightUncheckedUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUncheckedUpdateManyWithoutBrute2NestedInput
    logs?: LogUncheckedUpdateManyWithoutCurrentBruteNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUncheckedUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUncheckedUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUncheckedUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUncheckedUpdateManyWithoutBruteNestedInput
    titles?: TitleUncheckedUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUncheckedUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUncheckedUpdateManyWithoutAuthorNestedInput
    threads?: ClanThreadUncheckedUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUncheckedUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUncheckedUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUncheckedUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUncheckedUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUncheckedUpdateManyWithoutBruteNestedInput
    followers?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedUpdateManyWithoutDefendersNestedInput
    wonEvents?: EventUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type LogUpsertWithWhereUniqueWithoutDestinyChoiceInput = {
    where: LogWhereUniqueInput
    update: XOR<LogUpdateWithoutDestinyChoiceInput, LogUncheckedUpdateWithoutDestinyChoiceInput>
    create: XOR<LogCreateWithoutDestinyChoiceInput, LogUncheckedCreateWithoutDestinyChoiceInput>
  }

  export type LogUpdateWithWhereUniqueWithoutDestinyChoiceInput = {
    where: LogWhereUniqueInput
    data: XOR<LogUpdateWithoutDestinyChoiceInput, LogUncheckedUpdateWithoutDestinyChoiceInput>
  }

  export type LogUpdateManyWithWhereWithoutDestinyChoiceInput = {
    where: LogScalarWhereInput
    data: XOR<LogUpdateManyMutationInput, LogUncheckedUpdateManyWithoutDestinyChoiceInput>
  }

  export type BruteCreateWithoutTournamentsInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: number
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    tournamentWins?: number
    resets?: number
    user?: UserCreateNestedOneWithoutBrutesInput
    master?: BruteCreateNestedOneWithoutPupilsInput
    pupils?: BruteCreateNestedManyWithoutMasterInput
    clan?: ClanCreateNestedOneWithoutBrutesInput
    fights?: FightCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightCreateNestedManyWithoutBrute2Input
    logs?: LogCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceCreateNestedManyWithoutBruteInput
    opponents?: BruteCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementCreateNestedManyWithoutBruteInput
    reports?: BruteReportCreateNestedManyWithoutBruteInput
    titles?: TitleCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostCreateNestedManyWithoutAuthorInput
    wantToJoinClan?: ClanCreateNestedOneWithoutJoinRequestsInput
    threads?: ClanThreadCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageCreateNestedManyWithoutBruteInput
    followers?: UserCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersCreateNestedManyWithoutDefendersInput
    event?: EventCreateNestedOneWithoutBrutesInput
    wonEvents?: EventCreateNestedManyWithoutWinnerInput
  }

  export type BruteUncheckedCreateWithoutTournamentsInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    userId?: string | null
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    masterId?: string | null
    pupilsCount?: number
    clanId?: string | null
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    wantToJoinClanId?: string | null
    tournamentWins?: number
    eventId?: string | null
    resets?: number
    pupils?: BruteUncheckedCreateNestedManyWithoutMasterInput
    fights?: FightUncheckedCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightUncheckedCreateNestedManyWithoutBrute2Input
    logs?: LogUncheckedCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceUncheckedCreateNestedManyWithoutBruteInput
    opponents?: BruteUncheckedCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteUncheckedCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementUncheckedCreateNestedManyWithoutBruteInput
    reports?: BruteReportUncheckedCreateNestedManyWithoutBruteInput
    titles?: TitleUncheckedCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanUncheckedCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostUncheckedCreateNestedManyWithoutAuthorInput
    threads?: ClanThreadUncheckedCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemUncheckedCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementUncheckedCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpUncheckedCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsUncheckedCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageUncheckedCreateNestedManyWithoutBruteInput
    followers?: UserUncheckedCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutDefendersInput
    wonEvents?: EventUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type BruteCreateOrConnectWithoutTournamentsInput = {
    where: BruteWhereUniqueInput
    create: XOR<BruteCreateWithoutTournamentsInput, BruteUncheckedCreateWithoutTournamentsInput>
  }

  export type FightCreateWithoutTournamentInput = {
    id?: string
    date?: Date | string
    winner: string
    loser: string
    steps: string
    fighters: string
    tournamentStep?: number
    modifiers?: FightCreatemodifiersInput | $Enums.FightModifier[]
    background?: string
    brute1: BruteCreateNestedOneWithoutFightsInput
    brute2?: BruteCreateNestedOneWithoutFightsAsAdversaryInput
    logs?: LogCreateNestedManyWithoutFightInput
    favoritedBy?: UserCreateNestedManyWithoutFavoriteFightsInput
    clanWar?: ClanWarCreateNestedOneWithoutFightsInput
  }

  export type FightUncheckedCreateWithoutTournamentInput = {
    id?: string
    date?: Date | string
    brute1Id: string
    brute2Id?: string | null
    winner: string
    loser: string
    steps: string
    fighters: string
    tournamentStep?: number
    modifiers?: FightCreatemodifiersInput | $Enums.FightModifier[]
    background?: string
    clanWarId?: string | null
    logs?: LogUncheckedCreateNestedManyWithoutFightInput
    favoritedBy?: UserUncheckedCreateNestedManyWithoutFavoriteFightsInput
  }

  export type FightCreateOrConnectWithoutTournamentInput = {
    where: FightWhereUniqueInput
    create: XOR<FightCreateWithoutTournamentInput, FightUncheckedCreateWithoutTournamentInput>
  }

  export type FightCreateManyTournamentInputEnvelope = {
    data: FightCreateManyTournamentInput | FightCreateManyTournamentInput[]
    skipDuplicates?: boolean
  }

  export type EventCreateWithoutTournamentInput = {
    id?: string
    date?: Date | string
    type?: $Enums.EventType
    maxLevel: number
    maxRound?: number
    status?: $Enums.EventStatus
    finishedAt?: Date | string | null
    sortedBrutes?: EventCreatesortedBrutesInput | string[]
    brutes?: BruteCreateNestedManyWithoutEventInput
    winner?: BruteCreateNestedOneWithoutWonEventsInput
  }

  export type EventUncheckedCreateWithoutTournamentInput = {
    id?: string
    date?: Date | string
    type?: $Enums.EventType
    maxLevel: number
    maxRound?: number
    status?: $Enums.EventStatus
    winnerId?: string | null
    finishedAt?: Date | string | null
    sortedBrutes?: EventCreatesortedBrutesInput | string[]
    brutes?: BruteUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutTournamentInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutTournamentInput, EventUncheckedCreateWithoutTournamentInput>
  }

  export type BruteUpsertWithWhereUniqueWithoutTournamentsInput = {
    where: BruteWhereUniqueInput
    update: XOR<BruteUpdateWithoutTournamentsInput, BruteUncheckedUpdateWithoutTournamentsInput>
    create: XOR<BruteCreateWithoutTournamentsInput, BruteUncheckedCreateWithoutTournamentsInput>
  }

  export type BruteUpdateWithWhereUniqueWithoutTournamentsInput = {
    where: BruteWhereUniqueInput
    data: XOR<BruteUpdateWithoutTournamentsInput, BruteUncheckedUpdateWithoutTournamentsInput>
  }

  export type BruteUpdateManyWithWhereWithoutTournamentsInput = {
    where: BruteScalarWhereInput
    data: XOR<BruteUpdateManyMutationInput, BruteUncheckedUpdateManyWithoutTournamentsInput>
  }

  export type FightUpsertWithWhereUniqueWithoutTournamentInput = {
    where: FightWhereUniqueInput
    update: XOR<FightUpdateWithoutTournamentInput, FightUncheckedUpdateWithoutTournamentInput>
    create: XOR<FightCreateWithoutTournamentInput, FightUncheckedCreateWithoutTournamentInput>
  }

  export type FightUpdateWithWhereUniqueWithoutTournamentInput = {
    where: FightWhereUniqueInput
    data: XOR<FightUpdateWithoutTournamentInput, FightUncheckedUpdateWithoutTournamentInput>
  }

  export type FightUpdateManyWithWhereWithoutTournamentInput = {
    where: FightScalarWhereInput
    data: XOR<FightUpdateManyMutationInput, FightUncheckedUpdateManyWithoutTournamentInput>
  }

  export type EventUpsertWithoutTournamentInput = {
    update: XOR<EventUpdateWithoutTournamentInput, EventUncheckedUpdateWithoutTournamentInput>
    create: XOR<EventCreateWithoutTournamentInput, EventUncheckedCreateWithoutTournamentInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutTournamentInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutTournamentInput, EventUncheckedUpdateWithoutTournamentInput>
  }

  export type EventUpdateWithoutTournamentInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    maxLevel?: IntFieldUpdateOperationsInput | number
    maxRound?: IntFieldUpdateOperationsInput | number
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortedBrutes?: EventUpdatesortedBrutesInput | string[]
    brutes?: BruteUpdateManyWithoutEventNestedInput
    winner?: BruteUpdateOneWithoutWonEventsNestedInput
  }

  export type EventUncheckedUpdateWithoutTournamentInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    maxLevel?: IntFieldUpdateOperationsInput | number
    maxRound?: IntFieldUpdateOperationsInput | number
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    winnerId?: NullableStringFieldUpdateOperationsInput | string | null
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortedBrutes?: EventUpdatesortedBrutesInput | string[]
    brutes?: BruteUncheckedUpdateManyWithoutEventNestedInput
  }

  export type BruteCreateWithoutTournamentAchievementsInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: number
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    tournamentWins?: number
    resets?: number
    user?: UserCreateNestedOneWithoutBrutesInput
    master?: BruteCreateNestedOneWithoutPupilsInput
    pupils?: BruteCreateNestedManyWithoutMasterInput
    clan?: ClanCreateNestedOneWithoutBrutesInput
    fights?: FightCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightCreateNestedManyWithoutBrute2Input
    logs?: LogCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceCreateNestedManyWithoutBruteInput
    tournaments?: TournamentCreateNestedManyWithoutParticipantsInput
    opponents?: BruteCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementCreateNestedManyWithoutBruteInput
    reports?: BruteReportCreateNestedManyWithoutBruteInput
    titles?: TitleCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostCreateNestedManyWithoutAuthorInput
    wantToJoinClan?: ClanCreateNestedOneWithoutJoinRequestsInput
    threads?: ClanThreadCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageCreateNestedManyWithoutBruteInput
    followers?: UserCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersCreateNestedManyWithoutDefendersInput
    event?: EventCreateNestedOneWithoutBrutesInput
    wonEvents?: EventCreateNestedManyWithoutWinnerInput
  }

  export type BruteUncheckedCreateWithoutTournamentAchievementsInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    userId?: string | null
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    masterId?: string | null
    pupilsCount?: number
    clanId?: string | null
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    wantToJoinClanId?: string | null
    tournamentWins?: number
    eventId?: string | null
    resets?: number
    pupils?: BruteUncheckedCreateNestedManyWithoutMasterInput
    fights?: FightUncheckedCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightUncheckedCreateNestedManyWithoutBrute2Input
    logs?: LogUncheckedCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceUncheckedCreateNestedManyWithoutBruteInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutParticipantsInput
    opponents?: BruteUncheckedCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteUncheckedCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementUncheckedCreateNestedManyWithoutBruteInput
    reports?: BruteReportUncheckedCreateNestedManyWithoutBruteInput
    titles?: TitleUncheckedCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanUncheckedCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostUncheckedCreateNestedManyWithoutAuthorInput
    threads?: ClanThreadUncheckedCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemUncheckedCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpUncheckedCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsUncheckedCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageUncheckedCreateNestedManyWithoutBruteInput
    followers?: UserUncheckedCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutDefendersInput
    wonEvents?: EventUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type BruteCreateOrConnectWithoutTournamentAchievementsInput = {
    where: BruteWhereUniqueInput
    create: XOR<BruteCreateWithoutTournamentAchievementsInput, BruteUncheckedCreateWithoutTournamentAchievementsInput>
  }

  export type BruteUpsertWithoutTournamentAchievementsInput = {
    update: XOR<BruteUpdateWithoutTournamentAchievementsInput, BruteUncheckedUpdateWithoutTournamentAchievementsInput>
    create: XOR<BruteCreateWithoutTournamentAchievementsInput, BruteUncheckedCreateWithoutTournamentAchievementsInput>
    where?: BruteWhereInput
  }

  export type BruteUpdateToOneWithWhereWithoutTournamentAchievementsInput = {
    where?: BruteWhereInput
    data: XOR<BruteUpdateWithoutTournamentAchievementsInput, BruteUncheckedUpdateWithoutTournamentAchievementsInput>
  }

  export type BruteUpdateWithoutTournamentAchievementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: IntFieldUpdateOperationsInput | number
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    tournamentWins?: IntFieldUpdateOperationsInput | number
    resets?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutBrutesNestedInput
    master?: BruteUpdateOneWithoutPupilsNestedInput
    pupils?: BruteUpdateManyWithoutMasterNestedInput
    clan?: ClanUpdateOneWithoutBrutesNestedInput
    fights?: FightUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUpdateManyWithoutBrute2NestedInput
    logs?: LogUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUpdateManyWithoutBruteNestedInput
    titles?: TitleUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUpdateManyWithoutAuthorNestedInput
    wantToJoinClan?: ClanUpdateOneWithoutJoinRequestsNestedInput
    threads?: ClanThreadUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUpdateManyWithoutBruteNestedInput
    followers?: UserUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUpdateManyWithoutDefendersNestedInput
    event?: EventUpdateOneWithoutBrutesNestedInput
    wonEvents?: EventUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateWithoutTournamentAchievementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
    pupils?: BruteUncheckedUpdateManyWithoutMasterNestedInput
    fights?: FightUncheckedUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUncheckedUpdateManyWithoutBrute2NestedInput
    logs?: LogUncheckedUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUncheckedUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUncheckedUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUncheckedUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUncheckedUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUncheckedUpdateManyWithoutBruteNestedInput
    titles?: TitleUncheckedUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUncheckedUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUncheckedUpdateManyWithoutAuthorNestedInput
    threads?: ClanThreadUncheckedUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUncheckedUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUncheckedUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUncheckedUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUncheckedUpdateManyWithoutBruteNestedInput
    followers?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedUpdateManyWithoutDefendersNestedInput
    wonEvents?: EventUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type UserCreateWithoutTournamentGoldsInput = {
    id: string
    lang?: $Enums.Lang
    name: string
    admin?: boolean
    moderator?: boolean
    connexionToken: string
    bruteLimit?: number
    gold?: number
    fightSpeed?: number
    backgroundMusic?: boolean
    dinorpgDone?: Date | string | null
    ips?: UserCreateipsInput | string[]
    bannedAt?: Date | string | null
    banReason?: string | null
    lastReleaseSeen?: string | null
    displayVersusPage?: boolean
    brutes?: BruteCreateNestedManyWithoutUserInput
    achievements?: AchievementCreateNestedManyWithoutUserInput
    reports?: BruteReportCreateNestedManyWithoutUsersInput
    inventory?: InventoryItemCreateNestedManyWithoutUserInput
    favoriteFights?: FightCreateNestedManyWithoutFavoritedByInput
    following?: BruteCreateNestedManyWithoutFollowersInput
  }

  export type UserUncheckedCreateWithoutTournamentGoldsInput = {
    id: string
    lang?: $Enums.Lang
    name: string
    admin?: boolean
    moderator?: boolean
    connexionToken: string
    bruteLimit?: number
    gold?: number
    fightSpeed?: number
    backgroundMusic?: boolean
    dinorpgDone?: Date | string | null
    ips?: UserCreateipsInput | string[]
    bannedAt?: Date | string | null
    banReason?: string | null
    lastReleaseSeen?: string | null
    displayVersusPage?: boolean
    brutes?: BruteUncheckedCreateNestedManyWithoutUserInput
    achievements?: AchievementUncheckedCreateNestedManyWithoutUserInput
    reports?: BruteReportUncheckedCreateNestedManyWithoutUsersInput
    inventory?: InventoryItemUncheckedCreateNestedManyWithoutUserInput
    favoriteFights?: FightUncheckedCreateNestedManyWithoutFavoritedByInput
    following?: BruteUncheckedCreateNestedManyWithoutFollowersInput
  }

  export type UserCreateOrConnectWithoutTournamentGoldsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTournamentGoldsInput, UserUncheckedCreateWithoutTournamentGoldsInput>
  }

  export type UserUpsertWithoutTournamentGoldsInput = {
    update: XOR<UserUpdateWithoutTournamentGoldsInput, UserUncheckedUpdateWithoutTournamentGoldsInput>
    create: XOR<UserCreateWithoutTournamentGoldsInput, UserUncheckedCreateWithoutTournamentGoldsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTournamentGoldsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTournamentGoldsInput, UserUncheckedUpdateWithoutTournamentGoldsInput>
  }

  export type UserUpdateWithoutTournamentGoldsInput = {
    id?: StringFieldUpdateOperationsInput | string
    lang?: EnumLangFieldUpdateOperationsInput | $Enums.Lang
    name?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
    moderator?: BoolFieldUpdateOperationsInput | boolean
    connexionToken?: StringFieldUpdateOperationsInput | string
    bruteLimit?: IntFieldUpdateOperationsInput | number
    gold?: IntFieldUpdateOperationsInput | number
    fightSpeed?: IntFieldUpdateOperationsInput | number
    backgroundMusic?: BoolFieldUpdateOperationsInput | boolean
    dinorpgDone?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ips?: UserUpdateipsInput | string[]
    bannedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    lastReleaseSeen?: NullableStringFieldUpdateOperationsInput | string | null
    displayVersusPage?: BoolFieldUpdateOperationsInput | boolean
    brutes?: BruteUpdateManyWithoutUserNestedInput
    achievements?: AchievementUpdateManyWithoutUserNestedInput
    reports?: BruteReportUpdateManyWithoutUsersNestedInput
    inventory?: InventoryItemUpdateManyWithoutUserNestedInput
    favoriteFights?: FightUpdateManyWithoutFavoritedByNestedInput
    following?: BruteUpdateManyWithoutFollowersNestedInput
  }

  export type UserUncheckedUpdateWithoutTournamentGoldsInput = {
    id?: StringFieldUpdateOperationsInput | string
    lang?: EnumLangFieldUpdateOperationsInput | $Enums.Lang
    name?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
    moderator?: BoolFieldUpdateOperationsInput | boolean
    connexionToken?: StringFieldUpdateOperationsInput | string
    bruteLimit?: IntFieldUpdateOperationsInput | number
    gold?: IntFieldUpdateOperationsInput | number
    fightSpeed?: IntFieldUpdateOperationsInput | number
    backgroundMusic?: BoolFieldUpdateOperationsInput | boolean
    dinorpgDone?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ips?: UserUpdateipsInput | string[]
    bannedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    lastReleaseSeen?: NullableStringFieldUpdateOperationsInput | string | null
    displayVersusPage?: BoolFieldUpdateOperationsInput | boolean
    brutes?: BruteUncheckedUpdateManyWithoutUserNestedInput
    achievements?: AchievementUncheckedUpdateManyWithoutUserNestedInput
    reports?: BruteReportUncheckedUpdateManyWithoutUsersNestedInput
    inventory?: InventoryItemUncheckedUpdateManyWithoutUserNestedInput
    favoriteFights?: FightUncheckedUpdateManyWithoutFavoritedByNestedInput
    following?: BruteUncheckedUpdateManyWithoutFollowersNestedInput
  }

  export type BruteCreateWithoutTournamentXpsInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: number
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    tournamentWins?: number
    resets?: number
    user?: UserCreateNestedOneWithoutBrutesInput
    master?: BruteCreateNestedOneWithoutPupilsInput
    pupils?: BruteCreateNestedManyWithoutMasterInput
    clan?: ClanCreateNestedOneWithoutBrutesInput
    fights?: FightCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightCreateNestedManyWithoutBrute2Input
    logs?: LogCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceCreateNestedManyWithoutBruteInput
    tournaments?: TournamentCreateNestedManyWithoutParticipantsInput
    opponents?: BruteCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementCreateNestedManyWithoutBruteInput
    reports?: BruteReportCreateNestedManyWithoutBruteInput
    titles?: TitleCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostCreateNestedManyWithoutAuthorInput
    wantToJoinClan?: ClanCreateNestedOneWithoutJoinRequestsInput
    threads?: ClanThreadCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageCreateNestedManyWithoutBruteInput
    followers?: UserCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersCreateNestedManyWithoutDefendersInput
    event?: EventCreateNestedOneWithoutBrutesInput
    wonEvents?: EventCreateNestedManyWithoutWinnerInput
  }

  export type BruteUncheckedCreateWithoutTournamentXpsInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    userId?: string | null
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    masterId?: string | null
    pupilsCount?: number
    clanId?: string | null
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    wantToJoinClanId?: string | null
    tournamentWins?: number
    eventId?: string | null
    resets?: number
    pupils?: BruteUncheckedCreateNestedManyWithoutMasterInput
    fights?: FightUncheckedCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightUncheckedCreateNestedManyWithoutBrute2Input
    logs?: LogUncheckedCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceUncheckedCreateNestedManyWithoutBruteInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutParticipantsInput
    opponents?: BruteUncheckedCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteUncheckedCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementUncheckedCreateNestedManyWithoutBruteInput
    reports?: BruteReportUncheckedCreateNestedManyWithoutBruteInput
    titles?: TitleUncheckedCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanUncheckedCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostUncheckedCreateNestedManyWithoutAuthorInput
    threads?: ClanThreadUncheckedCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemUncheckedCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementUncheckedCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsUncheckedCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageUncheckedCreateNestedManyWithoutBruteInput
    followers?: UserUncheckedCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutDefendersInput
    wonEvents?: EventUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type BruteCreateOrConnectWithoutTournamentXpsInput = {
    where: BruteWhereUniqueInput
    create: XOR<BruteCreateWithoutTournamentXpsInput, BruteUncheckedCreateWithoutTournamentXpsInput>
  }

  export type BruteUpsertWithoutTournamentXpsInput = {
    update: XOR<BruteUpdateWithoutTournamentXpsInput, BruteUncheckedUpdateWithoutTournamentXpsInput>
    create: XOR<BruteCreateWithoutTournamentXpsInput, BruteUncheckedCreateWithoutTournamentXpsInput>
    where?: BruteWhereInput
  }

  export type BruteUpdateToOneWithWhereWithoutTournamentXpsInput = {
    where?: BruteWhereInput
    data: XOR<BruteUpdateWithoutTournamentXpsInput, BruteUncheckedUpdateWithoutTournamentXpsInput>
  }

  export type BruteUpdateWithoutTournamentXpsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: IntFieldUpdateOperationsInput | number
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    tournamentWins?: IntFieldUpdateOperationsInput | number
    resets?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutBrutesNestedInput
    master?: BruteUpdateOneWithoutPupilsNestedInput
    pupils?: BruteUpdateManyWithoutMasterNestedInput
    clan?: ClanUpdateOneWithoutBrutesNestedInput
    fights?: FightUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUpdateManyWithoutBrute2NestedInput
    logs?: LogUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUpdateManyWithoutBruteNestedInput
    titles?: TitleUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUpdateManyWithoutAuthorNestedInput
    wantToJoinClan?: ClanUpdateOneWithoutJoinRequestsNestedInput
    threads?: ClanThreadUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUpdateManyWithoutBruteNestedInput
    followers?: UserUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUpdateManyWithoutDefendersNestedInput
    event?: EventUpdateOneWithoutBrutesNestedInput
    wonEvents?: EventUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateWithoutTournamentXpsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
    pupils?: BruteUncheckedUpdateManyWithoutMasterNestedInput
    fights?: FightUncheckedUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUncheckedUpdateManyWithoutBrute2NestedInput
    logs?: LogUncheckedUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUncheckedUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUncheckedUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUncheckedUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUncheckedUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUncheckedUpdateManyWithoutBruteNestedInput
    titles?: TitleUncheckedUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUncheckedUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUncheckedUpdateManyWithoutAuthorNestedInput
    threads?: ClanThreadUncheckedUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUncheckedUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUncheckedUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUncheckedUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUncheckedUpdateManyWithoutBruteNestedInput
    followers?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedUpdateManyWithoutDefendersNestedInput
    wonEvents?: EventUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type BruteCreateWithoutAchievementsInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: number
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    tournamentWins?: number
    resets?: number
    user?: UserCreateNestedOneWithoutBrutesInput
    master?: BruteCreateNestedOneWithoutPupilsInput
    pupils?: BruteCreateNestedManyWithoutMasterInput
    clan?: ClanCreateNestedOneWithoutBrutesInput
    fights?: FightCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightCreateNestedManyWithoutBrute2Input
    logs?: LogCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceCreateNestedManyWithoutBruteInput
    tournaments?: TournamentCreateNestedManyWithoutParticipantsInput
    opponents?: BruteCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteCreateNestedManyWithoutOpponentsInput
    reports?: BruteReportCreateNestedManyWithoutBruteInput
    titles?: TitleCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostCreateNestedManyWithoutAuthorInput
    wantToJoinClan?: ClanCreateNestedOneWithoutJoinRequestsInput
    threads?: ClanThreadCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageCreateNestedManyWithoutBruteInput
    followers?: UserCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersCreateNestedManyWithoutDefendersInput
    event?: EventCreateNestedOneWithoutBrutesInput
    wonEvents?: EventCreateNestedManyWithoutWinnerInput
  }

  export type BruteUncheckedCreateWithoutAchievementsInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    userId?: string | null
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    masterId?: string | null
    pupilsCount?: number
    clanId?: string | null
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    wantToJoinClanId?: string | null
    tournamentWins?: number
    eventId?: string | null
    resets?: number
    pupils?: BruteUncheckedCreateNestedManyWithoutMasterInput
    fights?: FightUncheckedCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightUncheckedCreateNestedManyWithoutBrute2Input
    logs?: LogUncheckedCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceUncheckedCreateNestedManyWithoutBruteInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutParticipantsInput
    opponents?: BruteUncheckedCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteUncheckedCreateNestedManyWithoutOpponentsInput
    reports?: BruteReportUncheckedCreateNestedManyWithoutBruteInput
    titles?: TitleUncheckedCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanUncheckedCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostUncheckedCreateNestedManyWithoutAuthorInput
    threads?: ClanThreadUncheckedCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemUncheckedCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementUncheckedCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpUncheckedCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsUncheckedCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageUncheckedCreateNestedManyWithoutBruteInput
    followers?: UserUncheckedCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutDefendersInput
    wonEvents?: EventUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type BruteCreateOrConnectWithoutAchievementsInput = {
    where: BruteWhereUniqueInput
    create: XOR<BruteCreateWithoutAchievementsInput, BruteUncheckedCreateWithoutAchievementsInput>
  }

  export type UserCreateWithoutAchievementsInput = {
    id: string
    lang?: $Enums.Lang
    name: string
    admin?: boolean
    moderator?: boolean
    connexionToken: string
    bruteLimit?: number
    gold?: number
    fightSpeed?: number
    backgroundMusic?: boolean
    dinorpgDone?: Date | string | null
    ips?: UserCreateipsInput | string[]
    bannedAt?: Date | string | null
    banReason?: string | null
    lastReleaseSeen?: string | null
    displayVersusPage?: boolean
    brutes?: BruteCreateNestedManyWithoutUserInput
    reports?: BruteReportCreateNestedManyWithoutUsersInput
    tournamentGolds?: TournamentGoldCreateNestedManyWithoutUserInput
    inventory?: InventoryItemCreateNestedManyWithoutUserInput
    favoriteFights?: FightCreateNestedManyWithoutFavoritedByInput
    following?: BruteCreateNestedManyWithoutFollowersInput
  }

  export type UserUncheckedCreateWithoutAchievementsInput = {
    id: string
    lang?: $Enums.Lang
    name: string
    admin?: boolean
    moderator?: boolean
    connexionToken: string
    bruteLimit?: number
    gold?: number
    fightSpeed?: number
    backgroundMusic?: boolean
    dinorpgDone?: Date | string | null
    ips?: UserCreateipsInput | string[]
    bannedAt?: Date | string | null
    banReason?: string | null
    lastReleaseSeen?: string | null
    displayVersusPage?: boolean
    brutes?: BruteUncheckedCreateNestedManyWithoutUserInput
    reports?: BruteReportUncheckedCreateNestedManyWithoutUsersInput
    tournamentGolds?: TournamentGoldUncheckedCreateNestedManyWithoutUserInput
    inventory?: InventoryItemUncheckedCreateNestedManyWithoutUserInput
    favoriteFights?: FightUncheckedCreateNestedManyWithoutFavoritedByInput
    following?: BruteUncheckedCreateNestedManyWithoutFollowersInput
  }

  export type UserCreateOrConnectWithoutAchievementsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAchievementsInput, UserUncheckedCreateWithoutAchievementsInput>
  }

  export type BruteUpsertWithoutAchievementsInput = {
    update: XOR<BruteUpdateWithoutAchievementsInput, BruteUncheckedUpdateWithoutAchievementsInput>
    create: XOR<BruteCreateWithoutAchievementsInput, BruteUncheckedCreateWithoutAchievementsInput>
    where?: BruteWhereInput
  }

  export type BruteUpdateToOneWithWhereWithoutAchievementsInput = {
    where?: BruteWhereInput
    data: XOR<BruteUpdateWithoutAchievementsInput, BruteUncheckedUpdateWithoutAchievementsInput>
  }

  export type BruteUpdateWithoutAchievementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: IntFieldUpdateOperationsInput | number
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    tournamentWins?: IntFieldUpdateOperationsInput | number
    resets?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutBrutesNestedInput
    master?: BruteUpdateOneWithoutPupilsNestedInput
    pupils?: BruteUpdateManyWithoutMasterNestedInput
    clan?: ClanUpdateOneWithoutBrutesNestedInput
    fights?: FightUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUpdateManyWithoutBrute2NestedInput
    logs?: LogUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUpdateManyWithoutOpponentsNestedInput
    reports?: BruteReportUpdateManyWithoutBruteNestedInput
    titles?: TitleUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUpdateManyWithoutAuthorNestedInput
    wantToJoinClan?: ClanUpdateOneWithoutJoinRequestsNestedInput
    threads?: ClanThreadUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUpdateManyWithoutBruteNestedInput
    followers?: UserUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUpdateManyWithoutDefendersNestedInput
    event?: EventUpdateOneWithoutBrutesNestedInput
    wonEvents?: EventUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateWithoutAchievementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
    pupils?: BruteUncheckedUpdateManyWithoutMasterNestedInput
    fights?: FightUncheckedUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUncheckedUpdateManyWithoutBrute2NestedInput
    logs?: LogUncheckedUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUncheckedUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUncheckedUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUncheckedUpdateManyWithoutOpponentsNestedInput
    reports?: BruteReportUncheckedUpdateManyWithoutBruteNestedInput
    titles?: TitleUncheckedUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUncheckedUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUncheckedUpdateManyWithoutAuthorNestedInput
    threads?: ClanThreadUncheckedUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUncheckedUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUncheckedUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUncheckedUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUncheckedUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUncheckedUpdateManyWithoutBruteNestedInput
    followers?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedUpdateManyWithoutDefendersNestedInput
    wonEvents?: EventUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type UserUpsertWithoutAchievementsInput = {
    update: XOR<UserUpdateWithoutAchievementsInput, UserUncheckedUpdateWithoutAchievementsInput>
    create: XOR<UserCreateWithoutAchievementsInput, UserUncheckedCreateWithoutAchievementsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAchievementsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAchievementsInput, UserUncheckedUpdateWithoutAchievementsInput>
  }

  export type UserUpdateWithoutAchievementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    lang?: EnumLangFieldUpdateOperationsInput | $Enums.Lang
    name?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
    moderator?: BoolFieldUpdateOperationsInput | boolean
    connexionToken?: StringFieldUpdateOperationsInput | string
    bruteLimit?: IntFieldUpdateOperationsInput | number
    gold?: IntFieldUpdateOperationsInput | number
    fightSpeed?: IntFieldUpdateOperationsInput | number
    backgroundMusic?: BoolFieldUpdateOperationsInput | boolean
    dinorpgDone?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ips?: UserUpdateipsInput | string[]
    bannedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    lastReleaseSeen?: NullableStringFieldUpdateOperationsInput | string | null
    displayVersusPage?: BoolFieldUpdateOperationsInput | boolean
    brutes?: BruteUpdateManyWithoutUserNestedInput
    reports?: BruteReportUpdateManyWithoutUsersNestedInput
    tournamentGolds?: TournamentGoldUpdateManyWithoutUserNestedInput
    inventory?: InventoryItemUpdateManyWithoutUserNestedInput
    favoriteFights?: FightUpdateManyWithoutFavoritedByNestedInput
    following?: BruteUpdateManyWithoutFollowersNestedInput
  }

  export type UserUncheckedUpdateWithoutAchievementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    lang?: EnumLangFieldUpdateOperationsInput | $Enums.Lang
    name?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
    moderator?: BoolFieldUpdateOperationsInput | boolean
    connexionToken?: StringFieldUpdateOperationsInput | string
    bruteLimit?: IntFieldUpdateOperationsInput | number
    gold?: IntFieldUpdateOperationsInput | number
    fightSpeed?: IntFieldUpdateOperationsInput | number
    backgroundMusic?: BoolFieldUpdateOperationsInput | boolean
    dinorpgDone?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ips?: UserUpdateipsInput | string[]
    bannedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    lastReleaseSeen?: NullableStringFieldUpdateOperationsInput | string | null
    displayVersusPage?: BoolFieldUpdateOperationsInput | boolean
    brutes?: BruteUncheckedUpdateManyWithoutUserNestedInput
    reports?: BruteReportUncheckedUpdateManyWithoutUsersNestedInput
    tournamentGolds?: TournamentGoldUncheckedUpdateManyWithoutUserNestedInput
    inventory?: InventoryItemUncheckedUpdateManyWithoutUserNestedInput
    favoriteFights?: FightUncheckedUpdateManyWithoutFavoritedByNestedInput
    following?: BruteUncheckedUpdateManyWithoutFollowersNestedInput
  }

  export type BruteCreateWithoutTitlesInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: number
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    tournamentWins?: number
    resets?: number
    user?: UserCreateNestedOneWithoutBrutesInput
    master?: BruteCreateNestedOneWithoutPupilsInput
    pupils?: BruteCreateNestedManyWithoutMasterInput
    clan?: ClanCreateNestedOneWithoutBrutesInput
    fights?: FightCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightCreateNestedManyWithoutBrute2Input
    logs?: LogCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceCreateNestedManyWithoutBruteInput
    tournaments?: TournamentCreateNestedManyWithoutParticipantsInput
    opponents?: BruteCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementCreateNestedManyWithoutBruteInput
    reports?: BruteReportCreateNestedManyWithoutBruteInput
    masterOfClan?: ClanCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostCreateNestedManyWithoutAuthorInput
    wantToJoinClan?: ClanCreateNestedOneWithoutJoinRequestsInput
    threads?: ClanThreadCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageCreateNestedManyWithoutBruteInput
    followers?: UserCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersCreateNestedManyWithoutDefendersInput
    event?: EventCreateNestedOneWithoutBrutesInput
    wonEvents?: EventCreateNestedManyWithoutWinnerInput
  }

  export type BruteUncheckedCreateWithoutTitlesInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    userId?: string | null
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    masterId?: string | null
    pupilsCount?: number
    clanId?: string | null
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    wantToJoinClanId?: string | null
    tournamentWins?: number
    eventId?: string | null
    resets?: number
    pupils?: BruteUncheckedCreateNestedManyWithoutMasterInput
    fights?: FightUncheckedCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightUncheckedCreateNestedManyWithoutBrute2Input
    logs?: LogUncheckedCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceUncheckedCreateNestedManyWithoutBruteInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutParticipantsInput
    opponents?: BruteUncheckedCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteUncheckedCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementUncheckedCreateNestedManyWithoutBruteInput
    reports?: BruteReportUncheckedCreateNestedManyWithoutBruteInput
    masterOfClan?: ClanUncheckedCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostUncheckedCreateNestedManyWithoutAuthorInput
    threads?: ClanThreadUncheckedCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemUncheckedCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementUncheckedCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpUncheckedCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsUncheckedCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageUncheckedCreateNestedManyWithoutBruteInput
    followers?: UserUncheckedCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutDefendersInput
    wonEvents?: EventUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type BruteCreateOrConnectWithoutTitlesInput = {
    where: BruteWhereUniqueInput
    create: XOR<BruteCreateWithoutTitlesInput, BruteUncheckedCreateWithoutTitlesInput>
  }

  export type BruteUpsertWithWhereUniqueWithoutTitlesInput = {
    where: BruteWhereUniqueInput
    update: XOR<BruteUpdateWithoutTitlesInput, BruteUncheckedUpdateWithoutTitlesInput>
    create: XOR<BruteCreateWithoutTitlesInput, BruteUncheckedCreateWithoutTitlesInput>
  }

  export type BruteUpdateWithWhereUniqueWithoutTitlesInput = {
    where: BruteWhereUniqueInput
    data: XOR<BruteUpdateWithoutTitlesInput, BruteUncheckedUpdateWithoutTitlesInput>
  }

  export type BruteUpdateManyWithWhereWithoutTitlesInput = {
    where: BruteScalarWhereInput
    data: XOR<BruteUpdateManyMutationInput, BruteUncheckedUpdateManyWithoutTitlesInput>
  }

  export type BruteCreateWithoutReportsInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: number
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    tournamentWins?: number
    resets?: number
    user?: UserCreateNestedOneWithoutBrutesInput
    master?: BruteCreateNestedOneWithoutPupilsInput
    pupils?: BruteCreateNestedManyWithoutMasterInput
    clan?: ClanCreateNestedOneWithoutBrutesInput
    fights?: FightCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightCreateNestedManyWithoutBrute2Input
    logs?: LogCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceCreateNestedManyWithoutBruteInput
    tournaments?: TournamentCreateNestedManyWithoutParticipantsInput
    opponents?: BruteCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementCreateNestedManyWithoutBruteInput
    titles?: TitleCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostCreateNestedManyWithoutAuthorInput
    wantToJoinClan?: ClanCreateNestedOneWithoutJoinRequestsInput
    threads?: ClanThreadCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageCreateNestedManyWithoutBruteInput
    followers?: UserCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersCreateNestedManyWithoutDefendersInput
    event?: EventCreateNestedOneWithoutBrutesInput
    wonEvents?: EventCreateNestedManyWithoutWinnerInput
  }

  export type BruteUncheckedCreateWithoutReportsInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    userId?: string | null
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    masterId?: string | null
    pupilsCount?: number
    clanId?: string | null
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    wantToJoinClanId?: string | null
    tournamentWins?: number
    eventId?: string | null
    resets?: number
    pupils?: BruteUncheckedCreateNestedManyWithoutMasterInput
    fights?: FightUncheckedCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightUncheckedCreateNestedManyWithoutBrute2Input
    logs?: LogUncheckedCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceUncheckedCreateNestedManyWithoutBruteInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutParticipantsInput
    opponents?: BruteUncheckedCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteUncheckedCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementUncheckedCreateNestedManyWithoutBruteInput
    titles?: TitleUncheckedCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanUncheckedCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostUncheckedCreateNestedManyWithoutAuthorInput
    threads?: ClanThreadUncheckedCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemUncheckedCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementUncheckedCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpUncheckedCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsUncheckedCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageUncheckedCreateNestedManyWithoutBruteInput
    followers?: UserUncheckedCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutDefendersInput
    wonEvents?: EventUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type BruteCreateOrConnectWithoutReportsInput = {
    where: BruteWhereUniqueInput
    create: XOR<BruteCreateWithoutReportsInput, BruteUncheckedCreateWithoutReportsInput>
  }

  export type UserCreateWithoutReportsInput = {
    id: string
    lang?: $Enums.Lang
    name: string
    admin?: boolean
    moderator?: boolean
    connexionToken: string
    bruteLimit?: number
    gold?: number
    fightSpeed?: number
    backgroundMusic?: boolean
    dinorpgDone?: Date | string | null
    ips?: UserCreateipsInput | string[]
    bannedAt?: Date | string | null
    banReason?: string | null
    lastReleaseSeen?: string | null
    displayVersusPage?: boolean
    brutes?: BruteCreateNestedManyWithoutUserInput
    achievements?: AchievementCreateNestedManyWithoutUserInput
    tournamentGolds?: TournamentGoldCreateNestedManyWithoutUserInput
    inventory?: InventoryItemCreateNestedManyWithoutUserInput
    favoriteFights?: FightCreateNestedManyWithoutFavoritedByInput
    following?: BruteCreateNestedManyWithoutFollowersInput
  }

  export type UserUncheckedCreateWithoutReportsInput = {
    id: string
    lang?: $Enums.Lang
    name: string
    admin?: boolean
    moderator?: boolean
    connexionToken: string
    bruteLimit?: number
    gold?: number
    fightSpeed?: number
    backgroundMusic?: boolean
    dinorpgDone?: Date | string | null
    ips?: UserCreateipsInput | string[]
    bannedAt?: Date | string | null
    banReason?: string | null
    lastReleaseSeen?: string | null
    displayVersusPage?: boolean
    brutes?: BruteUncheckedCreateNestedManyWithoutUserInput
    achievements?: AchievementUncheckedCreateNestedManyWithoutUserInput
    tournamentGolds?: TournamentGoldUncheckedCreateNestedManyWithoutUserInput
    inventory?: InventoryItemUncheckedCreateNestedManyWithoutUserInput
    favoriteFights?: FightUncheckedCreateNestedManyWithoutFavoritedByInput
    following?: BruteUncheckedCreateNestedManyWithoutFollowersInput
  }

  export type UserCreateOrConnectWithoutReportsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
  }

  export type BruteUpsertWithoutReportsInput = {
    update: XOR<BruteUpdateWithoutReportsInput, BruteUncheckedUpdateWithoutReportsInput>
    create: XOR<BruteCreateWithoutReportsInput, BruteUncheckedCreateWithoutReportsInput>
    where?: BruteWhereInput
  }

  export type BruteUpdateToOneWithWhereWithoutReportsInput = {
    where?: BruteWhereInput
    data: XOR<BruteUpdateWithoutReportsInput, BruteUncheckedUpdateWithoutReportsInput>
  }

  export type BruteUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: IntFieldUpdateOperationsInput | number
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    tournamentWins?: IntFieldUpdateOperationsInput | number
    resets?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutBrutesNestedInput
    master?: BruteUpdateOneWithoutPupilsNestedInput
    pupils?: BruteUpdateManyWithoutMasterNestedInput
    clan?: ClanUpdateOneWithoutBrutesNestedInput
    fights?: FightUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUpdateManyWithoutBrute2NestedInput
    logs?: LogUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUpdateManyWithoutBruteNestedInput
    titles?: TitleUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUpdateManyWithoutAuthorNestedInput
    wantToJoinClan?: ClanUpdateOneWithoutJoinRequestsNestedInput
    threads?: ClanThreadUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUpdateManyWithoutBruteNestedInput
    followers?: UserUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUpdateManyWithoutDefendersNestedInput
    event?: EventUpdateOneWithoutBrutesNestedInput
    wonEvents?: EventUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
    pupils?: BruteUncheckedUpdateManyWithoutMasterNestedInput
    fights?: FightUncheckedUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUncheckedUpdateManyWithoutBrute2NestedInput
    logs?: LogUncheckedUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUncheckedUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUncheckedUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUncheckedUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUncheckedUpdateManyWithoutBruteNestedInput
    titles?: TitleUncheckedUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUncheckedUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUncheckedUpdateManyWithoutAuthorNestedInput
    threads?: ClanThreadUncheckedUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUncheckedUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUncheckedUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUncheckedUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUncheckedUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUncheckedUpdateManyWithoutBruteNestedInput
    followers?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedUpdateManyWithoutDefendersNestedInput
    wonEvents?: EventUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutReportsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutReportsInput, UserUncheckedUpdateWithoutReportsInput>
    create: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutReportsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutReportsInput, UserUncheckedUpdateWithoutReportsInput>
  }

  export type UserUpdateManyWithWhereWithoutReportsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutReportsInput>
  }

  export type BruteCreateWithoutMasterOfClanInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: number
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    tournamentWins?: number
    resets?: number
    user?: UserCreateNestedOneWithoutBrutesInput
    master?: BruteCreateNestedOneWithoutPupilsInput
    pupils?: BruteCreateNestedManyWithoutMasterInput
    clan?: ClanCreateNestedOneWithoutBrutesInput
    fights?: FightCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightCreateNestedManyWithoutBrute2Input
    logs?: LogCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceCreateNestedManyWithoutBruteInput
    tournaments?: TournamentCreateNestedManyWithoutParticipantsInput
    opponents?: BruteCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementCreateNestedManyWithoutBruteInput
    reports?: BruteReportCreateNestedManyWithoutBruteInput
    titles?: TitleCreateNestedManyWithoutBrutesInput
    clanPosts?: ClanPostCreateNestedManyWithoutAuthorInput
    wantToJoinClan?: ClanCreateNestedOneWithoutJoinRequestsInput
    threads?: ClanThreadCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageCreateNestedManyWithoutBruteInput
    followers?: UserCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersCreateNestedManyWithoutDefendersInput
    event?: EventCreateNestedOneWithoutBrutesInput
    wonEvents?: EventCreateNestedManyWithoutWinnerInput
  }

  export type BruteUncheckedCreateWithoutMasterOfClanInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    userId?: string | null
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    masterId?: string | null
    pupilsCount?: number
    clanId?: string | null
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    wantToJoinClanId?: string | null
    tournamentWins?: number
    eventId?: string | null
    resets?: number
    pupils?: BruteUncheckedCreateNestedManyWithoutMasterInput
    fights?: FightUncheckedCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightUncheckedCreateNestedManyWithoutBrute2Input
    logs?: LogUncheckedCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceUncheckedCreateNestedManyWithoutBruteInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutParticipantsInput
    opponents?: BruteUncheckedCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteUncheckedCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementUncheckedCreateNestedManyWithoutBruteInput
    reports?: BruteReportUncheckedCreateNestedManyWithoutBruteInput
    titles?: TitleUncheckedCreateNestedManyWithoutBrutesInput
    clanPosts?: ClanPostUncheckedCreateNestedManyWithoutAuthorInput
    threads?: ClanThreadUncheckedCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemUncheckedCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementUncheckedCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpUncheckedCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsUncheckedCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageUncheckedCreateNestedManyWithoutBruteInput
    followers?: UserUncheckedCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutDefendersInput
    wonEvents?: EventUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type BruteCreateOrConnectWithoutMasterOfClanInput = {
    where: BruteWhereUniqueInput
    create: XOR<BruteCreateWithoutMasterOfClanInput, BruteUncheckedCreateWithoutMasterOfClanInput>
  }

  export type BruteCreateWithoutClanInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: number
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    tournamentWins?: number
    resets?: number
    user?: UserCreateNestedOneWithoutBrutesInput
    master?: BruteCreateNestedOneWithoutPupilsInput
    pupils?: BruteCreateNestedManyWithoutMasterInput
    fights?: FightCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightCreateNestedManyWithoutBrute2Input
    logs?: LogCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceCreateNestedManyWithoutBruteInput
    tournaments?: TournamentCreateNestedManyWithoutParticipantsInput
    opponents?: BruteCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementCreateNestedManyWithoutBruteInput
    reports?: BruteReportCreateNestedManyWithoutBruteInput
    titles?: TitleCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostCreateNestedManyWithoutAuthorInput
    wantToJoinClan?: ClanCreateNestedOneWithoutJoinRequestsInput
    threads?: ClanThreadCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageCreateNestedManyWithoutBruteInput
    followers?: UserCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersCreateNestedManyWithoutDefendersInput
    event?: EventCreateNestedOneWithoutBrutesInput
    wonEvents?: EventCreateNestedManyWithoutWinnerInput
  }

  export type BruteUncheckedCreateWithoutClanInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    userId?: string | null
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    masterId?: string | null
    pupilsCount?: number
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    wantToJoinClanId?: string | null
    tournamentWins?: number
    eventId?: string | null
    resets?: number
    pupils?: BruteUncheckedCreateNestedManyWithoutMasterInput
    fights?: FightUncheckedCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightUncheckedCreateNestedManyWithoutBrute2Input
    logs?: LogUncheckedCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceUncheckedCreateNestedManyWithoutBruteInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutParticipantsInput
    opponents?: BruteUncheckedCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteUncheckedCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementUncheckedCreateNestedManyWithoutBruteInput
    reports?: BruteReportUncheckedCreateNestedManyWithoutBruteInput
    titles?: TitleUncheckedCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanUncheckedCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostUncheckedCreateNestedManyWithoutAuthorInput
    threads?: ClanThreadUncheckedCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemUncheckedCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementUncheckedCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpUncheckedCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsUncheckedCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageUncheckedCreateNestedManyWithoutBruteInput
    followers?: UserUncheckedCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutDefendersInput
    wonEvents?: EventUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type BruteCreateOrConnectWithoutClanInput = {
    where: BruteWhereUniqueInput
    create: XOR<BruteCreateWithoutClanInput, BruteUncheckedCreateWithoutClanInput>
  }

  export type BruteCreateManyClanInputEnvelope = {
    data: BruteCreateManyClanInput | BruteCreateManyClanInput[]
    skipDuplicates?: boolean
  }

  export type BruteCreateWithoutWantToJoinClanInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: number
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    tournamentWins?: number
    resets?: number
    user?: UserCreateNestedOneWithoutBrutesInput
    master?: BruteCreateNestedOneWithoutPupilsInput
    pupils?: BruteCreateNestedManyWithoutMasterInput
    clan?: ClanCreateNestedOneWithoutBrutesInput
    fights?: FightCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightCreateNestedManyWithoutBrute2Input
    logs?: LogCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceCreateNestedManyWithoutBruteInput
    tournaments?: TournamentCreateNestedManyWithoutParticipantsInput
    opponents?: BruteCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementCreateNestedManyWithoutBruteInput
    reports?: BruteReportCreateNestedManyWithoutBruteInput
    titles?: TitleCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostCreateNestedManyWithoutAuthorInput
    threads?: ClanThreadCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageCreateNestedManyWithoutBruteInput
    followers?: UserCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersCreateNestedManyWithoutDefendersInput
    event?: EventCreateNestedOneWithoutBrutesInput
    wonEvents?: EventCreateNestedManyWithoutWinnerInput
  }

  export type BruteUncheckedCreateWithoutWantToJoinClanInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    userId?: string | null
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    masterId?: string | null
    pupilsCount?: number
    clanId?: string | null
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    tournamentWins?: number
    eventId?: string | null
    resets?: number
    pupils?: BruteUncheckedCreateNestedManyWithoutMasterInput
    fights?: FightUncheckedCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightUncheckedCreateNestedManyWithoutBrute2Input
    logs?: LogUncheckedCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceUncheckedCreateNestedManyWithoutBruteInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutParticipantsInput
    opponents?: BruteUncheckedCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteUncheckedCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementUncheckedCreateNestedManyWithoutBruteInput
    reports?: BruteReportUncheckedCreateNestedManyWithoutBruteInput
    titles?: TitleUncheckedCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanUncheckedCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostUncheckedCreateNestedManyWithoutAuthorInput
    threads?: ClanThreadUncheckedCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemUncheckedCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementUncheckedCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpUncheckedCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsUncheckedCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageUncheckedCreateNestedManyWithoutBruteInput
    followers?: UserUncheckedCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutDefendersInput
    wonEvents?: EventUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type BruteCreateOrConnectWithoutWantToJoinClanInput = {
    where: BruteWhereUniqueInput
    create: XOR<BruteCreateWithoutWantToJoinClanInput, BruteUncheckedCreateWithoutWantToJoinClanInput>
  }

  export type BruteCreateManyWantToJoinClanInputEnvelope = {
    data: BruteCreateManyWantToJoinClanInput | BruteCreateManyWantToJoinClanInput[]
    skipDuplicates?: boolean
  }

  export type ClanThreadCreateWithoutClanInput = {
    id?: string
    title: string
    locked?: boolean
    pinned?: boolean
    postCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: BruteCreateNestedOneWithoutThreadsInput
    posts?: ClanPostCreateNestedManyWithoutThreadInput
  }

  export type ClanThreadUncheckedCreateWithoutClanInput = {
    id?: string
    creatorId: string
    title: string
    locked?: boolean
    pinned?: boolean
    postCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: ClanPostUncheckedCreateNestedManyWithoutThreadInput
  }

  export type ClanThreadCreateOrConnectWithoutClanInput = {
    where: ClanThreadWhereUniqueInput
    create: XOR<ClanThreadCreateWithoutClanInput, ClanThreadUncheckedCreateWithoutClanInput>
  }

  export type ClanThreadCreateManyClanInputEnvelope = {
    data: ClanThreadCreateManyClanInput | ClanThreadCreateManyClanInput[]
    skipDuplicates?: boolean
  }

  export type BossDamageCreateWithoutClanInput = {
    id?: string
    damage: number
    brute: BruteCreateNestedOneWithoutDamageOnBossesInput
  }

  export type BossDamageUncheckedCreateWithoutClanInput = {
    id?: string
    bruteId: string
    damage: number
  }

  export type BossDamageCreateOrConnectWithoutClanInput = {
    where: BossDamageWhereUniqueInput
    create: XOR<BossDamageCreateWithoutClanInput, BossDamageUncheckedCreateWithoutClanInput>
  }

  export type BossDamageCreateManyClanInputEnvelope = {
    data: BossDamageCreateManyClanInput | BossDamageCreateManyClanInput[]
    skipDuplicates?: boolean
  }

  export type ClanWarCreateWithoutAttackerInput = {
    id?: string
    duration?: number
    type?: $Enums.ClanWarType
    date?: Date | string
    status?: $Enums.ClanWarStatus
    attackerEloChange?: number
    attackerWins?: number
    defenderEloChange?: number
    defenderWins?: number
    defender: ClanCreateNestedOneWithoutDefensesInput
    winner?: ClanCreateNestedOneWithoutWinsInput
    fights?: FightCreateNestedManyWithoutClanWarInput
    fighters?: ClanWarFightersCreateNestedManyWithoutClanWarInput
  }

  export type ClanWarUncheckedCreateWithoutAttackerInput = {
    id?: string
    duration?: number
    type?: $Enums.ClanWarType
    date?: Date | string
    status?: $Enums.ClanWarStatus
    attackerEloChange?: number
    attackerWins?: number
    defenderId: string
    defenderEloChange?: number
    defenderWins?: number
    winnerId?: string | null
    fights?: FightUncheckedCreateNestedManyWithoutClanWarInput
    fighters?: ClanWarFightersUncheckedCreateNestedManyWithoutClanWarInput
  }

  export type ClanWarCreateOrConnectWithoutAttackerInput = {
    where: ClanWarWhereUniqueInput
    create: XOR<ClanWarCreateWithoutAttackerInput, ClanWarUncheckedCreateWithoutAttackerInput>
  }

  export type ClanWarCreateManyAttackerInputEnvelope = {
    data: ClanWarCreateManyAttackerInput | ClanWarCreateManyAttackerInput[]
    skipDuplicates?: boolean
  }

  export type ClanWarCreateWithoutDefenderInput = {
    id?: string
    duration?: number
    type?: $Enums.ClanWarType
    date?: Date | string
    status?: $Enums.ClanWarStatus
    attackerEloChange?: number
    attackerWins?: number
    defenderEloChange?: number
    defenderWins?: number
    attacker: ClanCreateNestedOneWithoutAttacksInput
    winner?: ClanCreateNestedOneWithoutWinsInput
    fights?: FightCreateNestedManyWithoutClanWarInput
    fighters?: ClanWarFightersCreateNestedManyWithoutClanWarInput
  }

  export type ClanWarUncheckedCreateWithoutDefenderInput = {
    id?: string
    duration?: number
    type?: $Enums.ClanWarType
    date?: Date | string
    status?: $Enums.ClanWarStatus
    attackerId: string
    attackerEloChange?: number
    attackerWins?: number
    defenderEloChange?: number
    defenderWins?: number
    winnerId?: string | null
    fights?: FightUncheckedCreateNestedManyWithoutClanWarInput
    fighters?: ClanWarFightersUncheckedCreateNestedManyWithoutClanWarInput
  }

  export type ClanWarCreateOrConnectWithoutDefenderInput = {
    where: ClanWarWhereUniqueInput
    create: XOR<ClanWarCreateWithoutDefenderInput, ClanWarUncheckedCreateWithoutDefenderInput>
  }

  export type ClanWarCreateManyDefenderInputEnvelope = {
    data: ClanWarCreateManyDefenderInput | ClanWarCreateManyDefenderInput[]
    skipDuplicates?: boolean
  }

  export type ClanWarCreateWithoutWinnerInput = {
    id?: string
    duration?: number
    type?: $Enums.ClanWarType
    date?: Date | string
    status?: $Enums.ClanWarStatus
    attackerEloChange?: number
    attackerWins?: number
    defenderEloChange?: number
    defenderWins?: number
    attacker: ClanCreateNestedOneWithoutAttacksInput
    defender: ClanCreateNestedOneWithoutDefensesInput
    fights?: FightCreateNestedManyWithoutClanWarInput
    fighters?: ClanWarFightersCreateNestedManyWithoutClanWarInput
  }

  export type ClanWarUncheckedCreateWithoutWinnerInput = {
    id?: string
    duration?: number
    type?: $Enums.ClanWarType
    date?: Date | string
    status?: $Enums.ClanWarStatus
    attackerId: string
    attackerEloChange?: number
    attackerWins?: number
    defenderId: string
    defenderEloChange?: number
    defenderWins?: number
    fights?: FightUncheckedCreateNestedManyWithoutClanWarInput
    fighters?: ClanWarFightersUncheckedCreateNestedManyWithoutClanWarInput
  }

  export type ClanWarCreateOrConnectWithoutWinnerInput = {
    where: ClanWarWhereUniqueInput
    create: XOR<ClanWarCreateWithoutWinnerInput, ClanWarUncheckedCreateWithoutWinnerInput>
  }

  export type ClanWarCreateManyWinnerInputEnvelope = {
    data: ClanWarCreateManyWinnerInput | ClanWarCreateManyWinnerInput[]
    skipDuplicates?: boolean
  }

  export type BruteUpsertWithoutMasterOfClanInput = {
    update: XOR<BruteUpdateWithoutMasterOfClanInput, BruteUncheckedUpdateWithoutMasterOfClanInput>
    create: XOR<BruteCreateWithoutMasterOfClanInput, BruteUncheckedCreateWithoutMasterOfClanInput>
    where?: BruteWhereInput
  }

  export type BruteUpdateToOneWithWhereWithoutMasterOfClanInput = {
    where?: BruteWhereInput
    data: XOR<BruteUpdateWithoutMasterOfClanInput, BruteUncheckedUpdateWithoutMasterOfClanInput>
  }

  export type BruteUpdateWithoutMasterOfClanInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: IntFieldUpdateOperationsInput | number
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    tournamentWins?: IntFieldUpdateOperationsInput | number
    resets?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutBrutesNestedInput
    master?: BruteUpdateOneWithoutPupilsNestedInput
    pupils?: BruteUpdateManyWithoutMasterNestedInput
    clan?: ClanUpdateOneWithoutBrutesNestedInput
    fights?: FightUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUpdateManyWithoutBrute2NestedInput
    logs?: LogUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUpdateManyWithoutBruteNestedInput
    titles?: TitleUpdateManyWithoutBrutesNestedInput
    clanPosts?: ClanPostUpdateManyWithoutAuthorNestedInput
    wantToJoinClan?: ClanUpdateOneWithoutJoinRequestsNestedInput
    threads?: ClanThreadUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUpdateManyWithoutBruteNestedInput
    followers?: UserUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUpdateManyWithoutDefendersNestedInput
    event?: EventUpdateOneWithoutBrutesNestedInput
    wonEvents?: EventUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateWithoutMasterOfClanInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
    pupils?: BruteUncheckedUpdateManyWithoutMasterNestedInput
    fights?: FightUncheckedUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUncheckedUpdateManyWithoutBrute2NestedInput
    logs?: LogUncheckedUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUncheckedUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUncheckedUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUncheckedUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUncheckedUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUncheckedUpdateManyWithoutBruteNestedInput
    titles?: TitleUncheckedUpdateManyWithoutBrutesNestedInput
    clanPosts?: ClanPostUncheckedUpdateManyWithoutAuthorNestedInput
    threads?: ClanThreadUncheckedUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUncheckedUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUncheckedUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUncheckedUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUncheckedUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUncheckedUpdateManyWithoutBruteNestedInput
    followers?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedUpdateManyWithoutDefendersNestedInput
    wonEvents?: EventUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUpsertWithWhereUniqueWithoutClanInput = {
    where: BruteWhereUniqueInput
    update: XOR<BruteUpdateWithoutClanInput, BruteUncheckedUpdateWithoutClanInput>
    create: XOR<BruteCreateWithoutClanInput, BruteUncheckedCreateWithoutClanInput>
  }

  export type BruteUpdateWithWhereUniqueWithoutClanInput = {
    where: BruteWhereUniqueInput
    data: XOR<BruteUpdateWithoutClanInput, BruteUncheckedUpdateWithoutClanInput>
  }

  export type BruteUpdateManyWithWhereWithoutClanInput = {
    where: BruteScalarWhereInput
    data: XOR<BruteUpdateManyMutationInput, BruteUncheckedUpdateManyWithoutClanInput>
  }

  export type BruteUpsertWithWhereUniqueWithoutWantToJoinClanInput = {
    where: BruteWhereUniqueInput
    update: XOR<BruteUpdateWithoutWantToJoinClanInput, BruteUncheckedUpdateWithoutWantToJoinClanInput>
    create: XOR<BruteCreateWithoutWantToJoinClanInput, BruteUncheckedCreateWithoutWantToJoinClanInput>
  }

  export type BruteUpdateWithWhereUniqueWithoutWantToJoinClanInput = {
    where: BruteWhereUniqueInput
    data: XOR<BruteUpdateWithoutWantToJoinClanInput, BruteUncheckedUpdateWithoutWantToJoinClanInput>
  }

  export type BruteUpdateManyWithWhereWithoutWantToJoinClanInput = {
    where: BruteScalarWhereInput
    data: XOR<BruteUpdateManyMutationInput, BruteUncheckedUpdateManyWithoutWantToJoinClanInput>
  }

  export type ClanThreadUpsertWithWhereUniqueWithoutClanInput = {
    where: ClanThreadWhereUniqueInput
    update: XOR<ClanThreadUpdateWithoutClanInput, ClanThreadUncheckedUpdateWithoutClanInput>
    create: XOR<ClanThreadCreateWithoutClanInput, ClanThreadUncheckedCreateWithoutClanInput>
  }

  export type ClanThreadUpdateWithWhereUniqueWithoutClanInput = {
    where: ClanThreadWhereUniqueInput
    data: XOR<ClanThreadUpdateWithoutClanInput, ClanThreadUncheckedUpdateWithoutClanInput>
  }

  export type ClanThreadUpdateManyWithWhereWithoutClanInput = {
    where: ClanThreadScalarWhereInput
    data: XOR<ClanThreadUpdateManyMutationInput, ClanThreadUncheckedUpdateManyWithoutClanInput>
  }

  export type BossDamageUpsertWithWhereUniqueWithoutClanInput = {
    where: BossDamageWhereUniqueInput
    update: XOR<BossDamageUpdateWithoutClanInput, BossDamageUncheckedUpdateWithoutClanInput>
    create: XOR<BossDamageCreateWithoutClanInput, BossDamageUncheckedCreateWithoutClanInput>
  }

  export type BossDamageUpdateWithWhereUniqueWithoutClanInput = {
    where: BossDamageWhereUniqueInput
    data: XOR<BossDamageUpdateWithoutClanInput, BossDamageUncheckedUpdateWithoutClanInput>
  }

  export type BossDamageUpdateManyWithWhereWithoutClanInput = {
    where: BossDamageScalarWhereInput
    data: XOR<BossDamageUpdateManyMutationInput, BossDamageUncheckedUpdateManyWithoutClanInput>
  }

  export type ClanWarUpsertWithWhereUniqueWithoutAttackerInput = {
    where: ClanWarWhereUniqueInput
    update: XOR<ClanWarUpdateWithoutAttackerInput, ClanWarUncheckedUpdateWithoutAttackerInput>
    create: XOR<ClanWarCreateWithoutAttackerInput, ClanWarUncheckedCreateWithoutAttackerInput>
  }

  export type ClanWarUpdateWithWhereUniqueWithoutAttackerInput = {
    where: ClanWarWhereUniqueInput
    data: XOR<ClanWarUpdateWithoutAttackerInput, ClanWarUncheckedUpdateWithoutAttackerInput>
  }

  export type ClanWarUpdateManyWithWhereWithoutAttackerInput = {
    where: ClanWarScalarWhereInput
    data: XOR<ClanWarUpdateManyMutationInput, ClanWarUncheckedUpdateManyWithoutAttackerInput>
  }

  export type ClanWarScalarWhereInput = {
    AND?: ClanWarScalarWhereInput | ClanWarScalarWhereInput[]
    OR?: ClanWarScalarWhereInput[]
    NOT?: ClanWarScalarWhereInput | ClanWarScalarWhereInput[]
    id?: UuidFilter<"ClanWar"> | string
    duration?: IntFilter<"ClanWar"> | number
    type?: EnumClanWarTypeFilter<"ClanWar"> | $Enums.ClanWarType
    date?: DateTimeFilter<"ClanWar"> | Date | string
    status?: EnumClanWarStatusFilter<"ClanWar"> | $Enums.ClanWarStatus
    attackerId?: UuidFilter<"ClanWar"> | string
    attackerEloChange?: IntFilter<"ClanWar"> | number
    attackerWins?: IntFilter<"ClanWar"> | number
    defenderId?: UuidFilter<"ClanWar"> | string
    defenderEloChange?: IntFilter<"ClanWar"> | number
    defenderWins?: IntFilter<"ClanWar"> | number
    winnerId?: UuidNullableFilter<"ClanWar"> | string | null
  }

  export type ClanWarUpsertWithWhereUniqueWithoutDefenderInput = {
    where: ClanWarWhereUniqueInput
    update: XOR<ClanWarUpdateWithoutDefenderInput, ClanWarUncheckedUpdateWithoutDefenderInput>
    create: XOR<ClanWarCreateWithoutDefenderInput, ClanWarUncheckedCreateWithoutDefenderInput>
  }

  export type ClanWarUpdateWithWhereUniqueWithoutDefenderInput = {
    where: ClanWarWhereUniqueInput
    data: XOR<ClanWarUpdateWithoutDefenderInput, ClanWarUncheckedUpdateWithoutDefenderInput>
  }

  export type ClanWarUpdateManyWithWhereWithoutDefenderInput = {
    where: ClanWarScalarWhereInput
    data: XOR<ClanWarUpdateManyMutationInput, ClanWarUncheckedUpdateManyWithoutDefenderInput>
  }

  export type ClanWarUpsertWithWhereUniqueWithoutWinnerInput = {
    where: ClanWarWhereUniqueInput
    update: XOR<ClanWarUpdateWithoutWinnerInput, ClanWarUncheckedUpdateWithoutWinnerInput>
    create: XOR<ClanWarCreateWithoutWinnerInput, ClanWarUncheckedCreateWithoutWinnerInput>
  }

  export type ClanWarUpdateWithWhereUniqueWithoutWinnerInput = {
    where: ClanWarWhereUniqueInput
    data: XOR<ClanWarUpdateWithoutWinnerInput, ClanWarUncheckedUpdateWithoutWinnerInput>
  }

  export type ClanWarUpdateManyWithWhereWithoutWinnerInput = {
    where: ClanWarScalarWhereInput
    data: XOR<ClanWarUpdateManyMutationInput, ClanWarUncheckedUpdateManyWithoutWinnerInput>
  }

  export type ClanCreateWithoutThreadsInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    limit?: number
    points?: number
    elo?: number
    boss?: $Enums.BossName
    damageOnBoss?: number
    participateInClanWar?: boolean
    master?: BruteCreateNestedOneWithoutMasterOfClanInput
    brutes?: BruteCreateNestedManyWithoutClanInput
    joinRequests?: BruteCreateNestedManyWithoutWantToJoinClanInput
    bossDamages?: BossDamageCreateNestedManyWithoutClanInput
    attacks?: ClanWarCreateNestedManyWithoutAttackerInput
    defenses?: ClanWarCreateNestedManyWithoutDefenderInput
    wins?: ClanWarCreateNestedManyWithoutWinnerInput
  }

  export type ClanUncheckedCreateWithoutThreadsInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    limit?: number
    points?: number
    elo?: number
    boss?: $Enums.BossName
    damageOnBoss?: number
    masterId?: string | null
    participateInClanWar?: boolean
    brutes?: BruteUncheckedCreateNestedManyWithoutClanInput
    joinRequests?: BruteUncheckedCreateNestedManyWithoutWantToJoinClanInput
    bossDamages?: BossDamageUncheckedCreateNestedManyWithoutClanInput
    attacks?: ClanWarUncheckedCreateNestedManyWithoutAttackerInput
    defenses?: ClanWarUncheckedCreateNestedManyWithoutDefenderInput
    wins?: ClanWarUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type ClanCreateOrConnectWithoutThreadsInput = {
    where: ClanWhereUniqueInput
    create: XOR<ClanCreateWithoutThreadsInput, ClanUncheckedCreateWithoutThreadsInput>
  }

  export type BruteCreateWithoutThreadsInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: number
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    tournamentWins?: number
    resets?: number
    user?: UserCreateNestedOneWithoutBrutesInput
    master?: BruteCreateNestedOneWithoutPupilsInput
    pupils?: BruteCreateNestedManyWithoutMasterInput
    clan?: ClanCreateNestedOneWithoutBrutesInput
    fights?: FightCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightCreateNestedManyWithoutBrute2Input
    logs?: LogCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceCreateNestedManyWithoutBruteInput
    tournaments?: TournamentCreateNestedManyWithoutParticipantsInput
    opponents?: BruteCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementCreateNestedManyWithoutBruteInput
    reports?: BruteReportCreateNestedManyWithoutBruteInput
    titles?: TitleCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostCreateNestedManyWithoutAuthorInput
    wantToJoinClan?: ClanCreateNestedOneWithoutJoinRequestsInput
    inventory?: InventoryItemCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageCreateNestedManyWithoutBruteInput
    followers?: UserCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersCreateNestedManyWithoutDefendersInput
    event?: EventCreateNestedOneWithoutBrutesInput
    wonEvents?: EventCreateNestedManyWithoutWinnerInput
  }

  export type BruteUncheckedCreateWithoutThreadsInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    userId?: string | null
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    masterId?: string | null
    pupilsCount?: number
    clanId?: string | null
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    wantToJoinClanId?: string | null
    tournamentWins?: number
    eventId?: string | null
    resets?: number
    pupils?: BruteUncheckedCreateNestedManyWithoutMasterInput
    fights?: FightUncheckedCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightUncheckedCreateNestedManyWithoutBrute2Input
    logs?: LogUncheckedCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceUncheckedCreateNestedManyWithoutBruteInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutParticipantsInput
    opponents?: BruteUncheckedCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteUncheckedCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementUncheckedCreateNestedManyWithoutBruteInput
    reports?: BruteReportUncheckedCreateNestedManyWithoutBruteInput
    titles?: TitleUncheckedCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanUncheckedCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostUncheckedCreateNestedManyWithoutAuthorInput
    inventory?: InventoryItemUncheckedCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementUncheckedCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpUncheckedCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsUncheckedCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageUncheckedCreateNestedManyWithoutBruteInput
    followers?: UserUncheckedCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutDefendersInput
    wonEvents?: EventUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type BruteCreateOrConnectWithoutThreadsInput = {
    where: BruteWhereUniqueInput
    create: XOR<BruteCreateWithoutThreadsInput, BruteUncheckedCreateWithoutThreadsInput>
  }

  export type ClanPostCreateWithoutThreadInput = {
    id?: string
    date?: Date | string
    message: string
    author: BruteCreateNestedOneWithoutClanPostsInput
  }

  export type ClanPostUncheckedCreateWithoutThreadInput = {
    id?: string
    authorId: string
    date?: Date | string
    message: string
  }

  export type ClanPostCreateOrConnectWithoutThreadInput = {
    where: ClanPostWhereUniqueInput
    create: XOR<ClanPostCreateWithoutThreadInput, ClanPostUncheckedCreateWithoutThreadInput>
  }

  export type ClanPostCreateManyThreadInputEnvelope = {
    data: ClanPostCreateManyThreadInput | ClanPostCreateManyThreadInput[]
    skipDuplicates?: boolean
  }

  export type ClanUpsertWithoutThreadsInput = {
    update: XOR<ClanUpdateWithoutThreadsInput, ClanUncheckedUpdateWithoutThreadsInput>
    create: XOR<ClanCreateWithoutThreadsInput, ClanUncheckedCreateWithoutThreadsInput>
    where?: ClanWhereInput
  }

  export type ClanUpdateToOneWithWhereWithoutThreadsInput = {
    where?: ClanWhereInput
    data: XOR<ClanUpdateWithoutThreadsInput, ClanUncheckedUpdateWithoutThreadsInput>
  }

  export type ClanUpdateWithoutThreadsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    limit?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    elo?: IntFieldUpdateOperationsInput | number
    boss?: EnumBossNameFieldUpdateOperationsInput | $Enums.BossName
    damageOnBoss?: IntFieldUpdateOperationsInput | number
    participateInClanWar?: BoolFieldUpdateOperationsInput | boolean
    master?: BruteUpdateOneWithoutMasterOfClanNestedInput
    brutes?: BruteUpdateManyWithoutClanNestedInput
    joinRequests?: BruteUpdateManyWithoutWantToJoinClanNestedInput
    bossDamages?: BossDamageUpdateManyWithoutClanNestedInput
    attacks?: ClanWarUpdateManyWithoutAttackerNestedInput
    defenses?: ClanWarUpdateManyWithoutDefenderNestedInput
    wins?: ClanWarUpdateManyWithoutWinnerNestedInput
  }

  export type ClanUncheckedUpdateWithoutThreadsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    limit?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    elo?: IntFieldUpdateOperationsInput | number
    boss?: EnumBossNameFieldUpdateOperationsInput | $Enums.BossName
    damageOnBoss?: IntFieldUpdateOperationsInput | number
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    participateInClanWar?: BoolFieldUpdateOperationsInput | boolean
    brutes?: BruteUncheckedUpdateManyWithoutClanNestedInput
    joinRequests?: BruteUncheckedUpdateManyWithoutWantToJoinClanNestedInput
    bossDamages?: BossDamageUncheckedUpdateManyWithoutClanNestedInput
    attacks?: ClanWarUncheckedUpdateManyWithoutAttackerNestedInput
    defenses?: ClanWarUncheckedUpdateManyWithoutDefenderNestedInput
    wins?: ClanWarUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUpsertWithoutThreadsInput = {
    update: XOR<BruteUpdateWithoutThreadsInput, BruteUncheckedUpdateWithoutThreadsInput>
    create: XOR<BruteCreateWithoutThreadsInput, BruteUncheckedCreateWithoutThreadsInput>
    where?: BruteWhereInput
  }

  export type BruteUpdateToOneWithWhereWithoutThreadsInput = {
    where?: BruteWhereInput
    data: XOR<BruteUpdateWithoutThreadsInput, BruteUncheckedUpdateWithoutThreadsInput>
  }

  export type BruteUpdateWithoutThreadsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: IntFieldUpdateOperationsInput | number
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    tournamentWins?: IntFieldUpdateOperationsInput | number
    resets?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutBrutesNestedInput
    master?: BruteUpdateOneWithoutPupilsNestedInput
    pupils?: BruteUpdateManyWithoutMasterNestedInput
    clan?: ClanUpdateOneWithoutBrutesNestedInput
    fights?: FightUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUpdateManyWithoutBrute2NestedInput
    logs?: LogUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUpdateManyWithoutBruteNestedInput
    titles?: TitleUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUpdateManyWithoutAuthorNestedInput
    wantToJoinClan?: ClanUpdateOneWithoutJoinRequestsNestedInput
    inventory?: InventoryItemUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUpdateManyWithoutBruteNestedInput
    followers?: UserUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUpdateManyWithoutDefendersNestedInput
    event?: EventUpdateOneWithoutBrutesNestedInput
    wonEvents?: EventUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateWithoutThreadsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
    pupils?: BruteUncheckedUpdateManyWithoutMasterNestedInput
    fights?: FightUncheckedUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUncheckedUpdateManyWithoutBrute2NestedInput
    logs?: LogUncheckedUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUncheckedUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUncheckedUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUncheckedUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUncheckedUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUncheckedUpdateManyWithoutBruteNestedInput
    titles?: TitleUncheckedUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUncheckedUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUncheckedUpdateManyWithoutAuthorNestedInput
    inventory?: InventoryItemUncheckedUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUncheckedUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUncheckedUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUncheckedUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUncheckedUpdateManyWithoutBruteNestedInput
    followers?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedUpdateManyWithoutDefendersNestedInput
    wonEvents?: EventUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type ClanPostUpsertWithWhereUniqueWithoutThreadInput = {
    where: ClanPostWhereUniqueInput
    update: XOR<ClanPostUpdateWithoutThreadInput, ClanPostUncheckedUpdateWithoutThreadInput>
    create: XOR<ClanPostCreateWithoutThreadInput, ClanPostUncheckedCreateWithoutThreadInput>
  }

  export type ClanPostUpdateWithWhereUniqueWithoutThreadInput = {
    where: ClanPostWhereUniqueInput
    data: XOR<ClanPostUpdateWithoutThreadInput, ClanPostUncheckedUpdateWithoutThreadInput>
  }

  export type ClanPostUpdateManyWithWhereWithoutThreadInput = {
    where: ClanPostScalarWhereInput
    data: XOR<ClanPostUpdateManyMutationInput, ClanPostUncheckedUpdateManyWithoutThreadInput>
  }

  export type ClanThreadCreateWithoutPostsInput = {
    id?: string
    title: string
    locked?: boolean
    pinned?: boolean
    postCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    clan: ClanCreateNestedOneWithoutThreadsInput
    creator: BruteCreateNestedOneWithoutThreadsInput
  }

  export type ClanThreadUncheckedCreateWithoutPostsInput = {
    id?: string
    clanId: string
    creatorId: string
    title: string
    locked?: boolean
    pinned?: boolean
    postCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClanThreadCreateOrConnectWithoutPostsInput = {
    where: ClanThreadWhereUniqueInput
    create: XOR<ClanThreadCreateWithoutPostsInput, ClanThreadUncheckedCreateWithoutPostsInput>
  }

  export type BruteCreateWithoutClanPostsInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: number
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    tournamentWins?: number
    resets?: number
    user?: UserCreateNestedOneWithoutBrutesInput
    master?: BruteCreateNestedOneWithoutPupilsInput
    pupils?: BruteCreateNestedManyWithoutMasterInput
    clan?: ClanCreateNestedOneWithoutBrutesInput
    fights?: FightCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightCreateNestedManyWithoutBrute2Input
    logs?: LogCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceCreateNestedManyWithoutBruteInput
    tournaments?: TournamentCreateNestedManyWithoutParticipantsInput
    opponents?: BruteCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementCreateNestedManyWithoutBruteInput
    reports?: BruteReportCreateNestedManyWithoutBruteInput
    titles?: TitleCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanCreateNestedOneWithoutMasterInput
    wantToJoinClan?: ClanCreateNestedOneWithoutJoinRequestsInput
    threads?: ClanThreadCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageCreateNestedManyWithoutBruteInput
    followers?: UserCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersCreateNestedManyWithoutDefendersInput
    event?: EventCreateNestedOneWithoutBrutesInput
    wonEvents?: EventCreateNestedManyWithoutWinnerInput
  }

  export type BruteUncheckedCreateWithoutClanPostsInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    userId?: string | null
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    masterId?: string | null
    pupilsCount?: number
    clanId?: string | null
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    wantToJoinClanId?: string | null
    tournamentWins?: number
    eventId?: string | null
    resets?: number
    pupils?: BruteUncheckedCreateNestedManyWithoutMasterInput
    fights?: FightUncheckedCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightUncheckedCreateNestedManyWithoutBrute2Input
    logs?: LogUncheckedCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceUncheckedCreateNestedManyWithoutBruteInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutParticipantsInput
    opponents?: BruteUncheckedCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteUncheckedCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementUncheckedCreateNestedManyWithoutBruteInput
    reports?: BruteReportUncheckedCreateNestedManyWithoutBruteInput
    titles?: TitleUncheckedCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanUncheckedCreateNestedOneWithoutMasterInput
    threads?: ClanThreadUncheckedCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemUncheckedCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementUncheckedCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpUncheckedCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsUncheckedCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageUncheckedCreateNestedManyWithoutBruteInput
    followers?: UserUncheckedCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutDefendersInput
    wonEvents?: EventUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type BruteCreateOrConnectWithoutClanPostsInput = {
    where: BruteWhereUniqueInput
    create: XOR<BruteCreateWithoutClanPostsInput, BruteUncheckedCreateWithoutClanPostsInput>
  }

  export type ClanThreadUpsertWithoutPostsInput = {
    update: XOR<ClanThreadUpdateWithoutPostsInput, ClanThreadUncheckedUpdateWithoutPostsInput>
    create: XOR<ClanThreadCreateWithoutPostsInput, ClanThreadUncheckedCreateWithoutPostsInput>
    where?: ClanThreadWhereInput
  }

  export type ClanThreadUpdateToOneWithWhereWithoutPostsInput = {
    where?: ClanThreadWhereInput
    data: XOR<ClanThreadUpdateWithoutPostsInput, ClanThreadUncheckedUpdateWithoutPostsInput>
  }

  export type ClanThreadUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    locked?: BoolFieldUpdateOperationsInput | boolean
    pinned?: BoolFieldUpdateOperationsInput | boolean
    postCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clan?: ClanUpdateOneRequiredWithoutThreadsNestedInput
    creator?: BruteUpdateOneRequiredWithoutThreadsNestedInput
  }

  export type ClanThreadUncheckedUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clanId?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    locked?: BoolFieldUpdateOperationsInput | boolean
    pinned?: BoolFieldUpdateOperationsInput | boolean
    postCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BruteUpsertWithoutClanPostsInput = {
    update: XOR<BruteUpdateWithoutClanPostsInput, BruteUncheckedUpdateWithoutClanPostsInput>
    create: XOR<BruteCreateWithoutClanPostsInput, BruteUncheckedCreateWithoutClanPostsInput>
    where?: BruteWhereInput
  }

  export type BruteUpdateToOneWithWhereWithoutClanPostsInput = {
    where?: BruteWhereInput
    data: XOR<BruteUpdateWithoutClanPostsInput, BruteUncheckedUpdateWithoutClanPostsInput>
  }

  export type BruteUpdateWithoutClanPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: IntFieldUpdateOperationsInput | number
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    tournamentWins?: IntFieldUpdateOperationsInput | number
    resets?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutBrutesNestedInput
    master?: BruteUpdateOneWithoutPupilsNestedInput
    pupils?: BruteUpdateManyWithoutMasterNestedInput
    clan?: ClanUpdateOneWithoutBrutesNestedInput
    fights?: FightUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUpdateManyWithoutBrute2NestedInput
    logs?: LogUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUpdateManyWithoutBruteNestedInput
    titles?: TitleUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUpdateOneWithoutMasterNestedInput
    wantToJoinClan?: ClanUpdateOneWithoutJoinRequestsNestedInput
    threads?: ClanThreadUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUpdateManyWithoutBruteNestedInput
    followers?: UserUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUpdateManyWithoutDefendersNestedInput
    event?: EventUpdateOneWithoutBrutesNestedInput
    wonEvents?: EventUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateWithoutClanPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
    pupils?: BruteUncheckedUpdateManyWithoutMasterNestedInput
    fights?: FightUncheckedUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUncheckedUpdateManyWithoutBrute2NestedInput
    logs?: LogUncheckedUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUncheckedUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUncheckedUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUncheckedUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUncheckedUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUncheckedUpdateManyWithoutBruteNestedInput
    titles?: TitleUncheckedUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUncheckedUpdateOneWithoutMasterNestedInput
    threads?: ClanThreadUncheckedUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUncheckedUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUncheckedUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUncheckedUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUncheckedUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUncheckedUpdateManyWithoutBruteNestedInput
    followers?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedUpdateManyWithoutDefendersNestedInput
    wonEvents?: EventUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type BruteCreateWithoutDamageOnBossesInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: number
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    tournamentWins?: number
    resets?: number
    user?: UserCreateNestedOneWithoutBrutesInput
    master?: BruteCreateNestedOneWithoutPupilsInput
    pupils?: BruteCreateNestedManyWithoutMasterInput
    clan?: ClanCreateNestedOneWithoutBrutesInput
    fights?: FightCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightCreateNestedManyWithoutBrute2Input
    logs?: LogCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceCreateNestedManyWithoutBruteInput
    tournaments?: TournamentCreateNestedManyWithoutParticipantsInput
    opponents?: BruteCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementCreateNestedManyWithoutBruteInput
    reports?: BruteReportCreateNestedManyWithoutBruteInput
    titles?: TitleCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostCreateNestedManyWithoutAuthorInput
    wantToJoinClan?: ClanCreateNestedOneWithoutJoinRequestsInput
    threads?: ClanThreadCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsCreateNestedOneWithoutBruteInput
    followers?: UserCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersCreateNestedManyWithoutDefendersInput
    event?: EventCreateNestedOneWithoutBrutesInput
    wonEvents?: EventCreateNestedManyWithoutWinnerInput
  }

  export type BruteUncheckedCreateWithoutDamageOnBossesInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    userId?: string | null
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    masterId?: string | null
    pupilsCount?: number
    clanId?: string | null
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    wantToJoinClanId?: string | null
    tournamentWins?: number
    eventId?: string | null
    resets?: number
    pupils?: BruteUncheckedCreateNestedManyWithoutMasterInput
    fights?: FightUncheckedCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightUncheckedCreateNestedManyWithoutBrute2Input
    logs?: LogUncheckedCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceUncheckedCreateNestedManyWithoutBruteInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutParticipantsInput
    opponents?: BruteUncheckedCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteUncheckedCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementUncheckedCreateNestedManyWithoutBruteInput
    reports?: BruteReportUncheckedCreateNestedManyWithoutBruteInput
    titles?: TitleUncheckedCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanUncheckedCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostUncheckedCreateNestedManyWithoutAuthorInput
    threads?: ClanThreadUncheckedCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemUncheckedCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementUncheckedCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpUncheckedCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsUncheckedCreateNestedOneWithoutBruteInput
    followers?: UserUncheckedCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutDefendersInput
    wonEvents?: EventUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type BruteCreateOrConnectWithoutDamageOnBossesInput = {
    where: BruteWhereUniqueInput
    create: XOR<BruteCreateWithoutDamageOnBossesInput, BruteUncheckedCreateWithoutDamageOnBossesInput>
  }

  export type ClanCreateWithoutBossDamagesInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    limit?: number
    points?: number
    elo?: number
    boss?: $Enums.BossName
    damageOnBoss?: number
    participateInClanWar?: boolean
    master?: BruteCreateNestedOneWithoutMasterOfClanInput
    brutes?: BruteCreateNestedManyWithoutClanInput
    joinRequests?: BruteCreateNestedManyWithoutWantToJoinClanInput
    threads?: ClanThreadCreateNestedManyWithoutClanInput
    attacks?: ClanWarCreateNestedManyWithoutAttackerInput
    defenses?: ClanWarCreateNestedManyWithoutDefenderInput
    wins?: ClanWarCreateNestedManyWithoutWinnerInput
  }

  export type ClanUncheckedCreateWithoutBossDamagesInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    limit?: number
    points?: number
    elo?: number
    boss?: $Enums.BossName
    damageOnBoss?: number
    masterId?: string | null
    participateInClanWar?: boolean
    brutes?: BruteUncheckedCreateNestedManyWithoutClanInput
    joinRequests?: BruteUncheckedCreateNestedManyWithoutWantToJoinClanInput
    threads?: ClanThreadUncheckedCreateNestedManyWithoutClanInput
    attacks?: ClanWarUncheckedCreateNestedManyWithoutAttackerInput
    defenses?: ClanWarUncheckedCreateNestedManyWithoutDefenderInput
    wins?: ClanWarUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type ClanCreateOrConnectWithoutBossDamagesInput = {
    where: ClanWhereUniqueInput
    create: XOR<ClanCreateWithoutBossDamagesInput, ClanUncheckedCreateWithoutBossDamagesInput>
  }

  export type BruteUpsertWithoutDamageOnBossesInput = {
    update: XOR<BruteUpdateWithoutDamageOnBossesInput, BruteUncheckedUpdateWithoutDamageOnBossesInput>
    create: XOR<BruteCreateWithoutDamageOnBossesInput, BruteUncheckedCreateWithoutDamageOnBossesInput>
    where?: BruteWhereInput
  }

  export type BruteUpdateToOneWithWhereWithoutDamageOnBossesInput = {
    where?: BruteWhereInput
    data: XOR<BruteUpdateWithoutDamageOnBossesInput, BruteUncheckedUpdateWithoutDamageOnBossesInput>
  }

  export type BruteUpdateWithoutDamageOnBossesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: IntFieldUpdateOperationsInput | number
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    tournamentWins?: IntFieldUpdateOperationsInput | number
    resets?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutBrutesNestedInput
    master?: BruteUpdateOneWithoutPupilsNestedInput
    pupils?: BruteUpdateManyWithoutMasterNestedInput
    clan?: ClanUpdateOneWithoutBrutesNestedInput
    fights?: FightUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUpdateManyWithoutBrute2NestedInput
    logs?: LogUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUpdateManyWithoutBruteNestedInput
    titles?: TitleUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUpdateManyWithoutAuthorNestedInput
    wantToJoinClan?: ClanUpdateOneWithoutJoinRequestsNestedInput
    threads?: ClanThreadUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUpdateOneWithoutBruteNestedInput
    followers?: UserUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUpdateManyWithoutDefendersNestedInput
    event?: EventUpdateOneWithoutBrutesNestedInput
    wonEvents?: EventUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateWithoutDamageOnBossesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
    pupils?: BruteUncheckedUpdateManyWithoutMasterNestedInput
    fights?: FightUncheckedUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUncheckedUpdateManyWithoutBrute2NestedInput
    logs?: LogUncheckedUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUncheckedUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUncheckedUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUncheckedUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUncheckedUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUncheckedUpdateManyWithoutBruteNestedInput
    titles?: TitleUncheckedUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUncheckedUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUncheckedUpdateManyWithoutAuthorNestedInput
    threads?: ClanThreadUncheckedUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUncheckedUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUncheckedUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUncheckedUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUncheckedUpdateOneWithoutBruteNestedInput
    followers?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedUpdateManyWithoutDefendersNestedInput
    wonEvents?: EventUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type ClanUpsertWithoutBossDamagesInput = {
    update: XOR<ClanUpdateWithoutBossDamagesInput, ClanUncheckedUpdateWithoutBossDamagesInput>
    create: XOR<ClanCreateWithoutBossDamagesInput, ClanUncheckedCreateWithoutBossDamagesInput>
    where?: ClanWhereInput
  }

  export type ClanUpdateToOneWithWhereWithoutBossDamagesInput = {
    where?: ClanWhereInput
    data: XOR<ClanUpdateWithoutBossDamagesInput, ClanUncheckedUpdateWithoutBossDamagesInput>
  }

  export type ClanUpdateWithoutBossDamagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    limit?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    elo?: IntFieldUpdateOperationsInput | number
    boss?: EnumBossNameFieldUpdateOperationsInput | $Enums.BossName
    damageOnBoss?: IntFieldUpdateOperationsInput | number
    participateInClanWar?: BoolFieldUpdateOperationsInput | boolean
    master?: BruteUpdateOneWithoutMasterOfClanNestedInput
    brutes?: BruteUpdateManyWithoutClanNestedInput
    joinRequests?: BruteUpdateManyWithoutWantToJoinClanNestedInput
    threads?: ClanThreadUpdateManyWithoutClanNestedInput
    attacks?: ClanWarUpdateManyWithoutAttackerNestedInput
    defenses?: ClanWarUpdateManyWithoutDefenderNestedInput
    wins?: ClanWarUpdateManyWithoutWinnerNestedInput
  }

  export type ClanUncheckedUpdateWithoutBossDamagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    limit?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    elo?: IntFieldUpdateOperationsInput | number
    boss?: EnumBossNameFieldUpdateOperationsInput | $Enums.BossName
    damageOnBoss?: IntFieldUpdateOperationsInput | number
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    participateInClanWar?: BoolFieldUpdateOperationsInput | boolean
    brutes?: BruteUncheckedUpdateManyWithoutClanNestedInput
    joinRequests?: BruteUncheckedUpdateManyWithoutWantToJoinClanNestedInput
    threads?: ClanThreadUncheckedUpdateManyWithoutClanNestedInput
    attacks?: ClanWarUncheckedUpdateManyWithoutAttackerNestedInput
    defenses?: ClanWarUncheckedUpdateManyWithoutDefenderNestedInput
    wins?: ClanWarUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type ClanCreateWithoutAttacksInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    limit?: number
    points?: number
    elo?: number
    boss?: $Enums.BossName
    damageOnBoss?: number
    participateInClanWar?: boolean
    master?: BruteCreateNestedOneWithoutMasterOfClanInput
    brutes?: BruteCreateNestedManyWithoutClanInput
    joinRequests?: BruteCreateNestedManyWithoutWantToJoinClanInput
    threads?: ClanThreadCreateNestedManyWithoutClanInput
    bossDamages?: BossDamageCreateNestedManyWithoutClanInput
    defenses?: ClanWarCreateNestedManyWithoutDefenderInput
    wins?: ClanWarCreateNestedManyWithoutWinnerInput
  }

  export type ClanUncheckedCreateWithoutAttacksInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    limit?: number
    points?: number
    elo?: number
    boss?: $Enums.BossName
    damageOnBoss?: number
    masterId?: string | null
    participateInClanWar?: boolean
    brutes?: BruteUncheckedCreateNestedManyWithoutClanInput
    joinRequests?: BruteUncheckedCreateNestedManyWithoutWantToJoinClanInput
    threads?: ClanThreadUncheckedCreateNestedManyWithoutClanInput
    bossDamages?: BossDamageUncheckedCreateNestedManyWithoutClanInput
    defenses?: ClanWarUncheckedCreateNestedManyWithoutDefenderInput
    wins?: ClanWarUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type ClanCreateOrConnectWithoutAttacksInput = {
    where: ClanWhereUniqueInput
    create: XOR<ClanCreateWithoutAttacksInput, ClanUncheckedCreateWithoutAttacksInput>
  }

  export type ClanCreateWithoutDefensesInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    limit?: number
    points?: number
    elo?: number
    boss?: $Enums.BossName
    damageOnBoss?: number
    participateInClanWar?: boolean
    master?: BruteCreateNestedOneWithoutMasterOfClanInput
    brutes?: BruteCreateNestedManyWithoutClanInput
    joinRequests?: BruteCreateNestedManyWithoutWantToJoinClanInput
    threads?: ClanThreadCreateNestedManyWithoutClanInput
    bossDamages?: BossDamageCreateNestedManyWithoutClanInput
    attacks?: ClanWarCreateNestedManyWithoutAttackerInput
    wins?: ClanWarCreateNestedManyWithoutWinnerInput
  }

  export type ClanUncheckedCreateWithoutDefensesInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    limit?: number
    points?: number
    elo?: number
    boss?: $Enums.BossName
    damageOnBoss?: number
    masterId?: string | null
    participateInClanWar?: boolean
    brutes?: BruteUncheckedCreateNestedManyWithoutClanInput
    joinRequests?: BruteUncheckedCreateNestedManyWithoutWantToJoinClanInput
    threads?: ClanThreadUncheckedCreateNestedManyWithoutClanInput
    bossDamages?: BossDamageUncheckedCreateNestedManyWithoutClanInput
    attacks?: ClanWarUncheckedCreateNestedManyWithoutAttackerInput
    wins?: ClanWarUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type ClanCreateOrConnectWithoutDefensesInput = {
    where: ClanWhereUniqueInput
    create: XOR<ClanCreateWithoutDefensesInput, ClanUncheckedCreateWithoutDefensesInput>
  }

  export type ClanCreateWithoutWinsInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    limit?: number
    points?: number
    elo?: number
    boss?: $Enums.BossName
    damageOnBoss?: number
    participateInClanWar?: boolean
    master?: BruteCreateNestedOneWithoutMasterOfClanInput
    brutes?: BruteCreateNestedManyWithoutClanInput
    joinRequests?: BruteCreateNestedManyWithoutWantToJoinClanInput
    threads?: ClanThreadCreateNestedManyWithoutClanInput
    bossDamages?: BossDamageCreateNestedManyWithoutClanInput
    attacks?: ClanWarCreateNestedManyWithoutAttackerInput
    defenses?: ClanWarCreateNestedManyWithoutDefenderInput
  }

  export type ClanUncheckedCreateWithoutWinsInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    limit?: number
    points?: number
    elo?: number
    boss?: $Enums.BossName
    damageOnBoss?: number
    masterId?: string | null
    participateInClanWar?: boolean
    brutes?: BruteUncheckedCreateNestedManyWithoutClanInput
    joinRequests?: BruteUncheckedCreateNestedManyWithoutWantToJoinClanInput
    threads?: ClanThreadUncheckedCreateNestedManyWithoutClanInput
    bossDamages?: BossDamageUncheckedCreateNestedManyWithoutClanInput
    attacks?: ClanWarUncheckedCreateNestedManyWithoutAttackerInput
    defenses?: ClanWarUncheckedCreateNestedManyWithoutDefenderInput
  }

  export type ClanCreateOrConnectWithoutWinsInput = {
    where: ClanWhereUniqueInput
    create: XOR<ClanCreateWithoutWinsInput, ClanUncheckedCreateWithoutWinsInput>
  }

  export type FightCreateWithoutClanWarInput = {
    id?: string
    date?: Date | string
    winner: string
    loser: string
    steps: string
    fighters: string
    tournamentStep?: number
    modifiers?: FightCreatemodifiersInput | $Enums.FightModifier[]
    background?: string
    brute1: BruteCreateNestedOneWithoutFightsInput
    brute2?: BruteCreateNestedOneWithoutFightsAsAdversaryInput
    logs?: LogCreateNestedManyWithoutFightInput
    tournament?: TournamentCreateNestedOneWithoutFightsInput
    favoritedBy?: UserCreateNestedManyWithoutFavoriteFightsInput
  }

  export type FightUncheckedCreateWithoutClanWarInput = {
    id?: string
    date?: Date | string
    brute1Id: string
    brute2Id?: string | null
    winner: string
    loser: string
    steps: string
    fighters: string
    tournamentId?: string | null
    tournamentStep?: number
    modifiers?: FightCreatemodifiersInput | $Enums.FightModifier[]
    background?: string
    logs?: LogUncheckedCreateNestedManyWithoutFightInput
    favoritedBy?: UserUncheckedCreateNestedManyWithoutFavoriteFightsInput
  }

  export type FightCreateOrConnectWithoutClanWarInput = {
    where: FightWhereUniqueInput
    create: XOR<FightCreateWithoutClanWarInput, FightUncheckedCreateWithoutClanWarInput>
  }

  export type FightCreateManyClanWarInputEnvelope = {
    data: FightCreateManyClanWarInput | FightCreateManyClanWarInput[]
    skipDuplicates?: boolean
  }

  export type ClanWarFightersCreateWithoutClanWarInput = {
    id?: string
    day: number
    attackers?: BruteCreateNestedManyWithoutInClanWarAttackerFightersInput
    defenders?: BruteCreateNestedManyWithoutInClanWarDefenderFightersInput
  }

  export type ClanWarFightersUncheckedCreateWithoutClanWarInput = {
    id?: string
    day: number
    attackers?: BruteUncheckedCreateNestedManyWithoutInClanWarAttackerFightersInput
    defenders?: BruteUncheckedCreateNestedManyWithoutInClanWarDefenderFightersInput
  }

  export type ClanWarFightersCreateOrConnectWithoutClanWarInput = {
    where: ClanWarFightersWhereUniqueInput
    create: XOR<ClanWarFightersCreateWithoutClanWarInput, ClanWarFightersUncheckedCreateWithoutClanWarInput>
  }

  export type ClanWarFightersCreateManyClanWarInputEnvelope = {
    data: ClanWarFightersCreateManyClanWarInput | ClanWarFightersCreateManyClanWarInput[]
    skipDuplicates?: boolean
  }

  export type ClanUpsertWithoutAttacksInput = {
    update: XOR<ClanUpdateWithoutAttacksInput, ClanUncheckedUpdateWithoutAttacksInput>
    create: XOR<ClanCreateWithoutAttacksInput, ClanUncheckedCreateWithoutAttacksInput>
    where?: ClanWhereInput
  }

  export type ClanUpdateToOneWithWhereWithoutAttacksInput = {
    where?: ClanWhereInput
    data: XOR<ClanUpdateWithoutAttacksInput, ClanUncheckedUpdateWithoutAttacksInput>
  }

  export type ClanUpdateWithoutAttacksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    limit?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    elo?: IntFieldUpdateOperationsInput | number
    boss?: EnumBossNameFieldUpdateOperationsInput | $Enums.BossName
    damageOnBoss?: IntFieldUpdateOperationsInput | number
    participateInClanWar?: BoolFieldUpdateOperationsInput | boolean
    master?: BruteUpdateOneWithoutMasterOfClanNestedInput
    brutes?: BruteUpdateManyWithoutClanNestedInput
    joinRequests?: BruteUpdateManyWithoutWantToJoinClanNestedInput
    threads?: ClanThreadUpdateManyWithoutClanNestedInput
    bossDamages?: BossDamageUpdateManyWithoutClanNestedInput
    defenses?: ClanWarUpdateManyWithoutDefenderNestedInput
    wins?: ClanWarUpdateManyWithoutWinnerNestedInput
  }

  export type ClanUncheckedUpdateWithoutAttacksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    limit?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    elo?: IntFieldUpdateOperationsInput | number
    boss?: EnumBossNameFieldUpdateOperationsInput | $Enums.BossName
    damageOnBoss?: IntFieldUpdateOperationsInput | number
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    participateInClanWar?: BoolFieldUpdateOperationsInput | boolean
    brutes?: BruteUncheckedUpdateManyWithoutClanNestedInput
    joinRequests?: BruteUncheckedUpdateManyWithoutWantToJoinClanNestedInput
    threads?: ClanThreadUncheckedUpdateManyWithoutClanNestedInput
    bossDamages?: BossDamageUncheckedUpdateManyWithoutClanNestedInput
    defenses?: ClanWarUncheckedUpdateManyWithoutDefenderNestedInput
    wins?: ClanWarUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type ClanUpsertWithoutDefensesInput = {
    update: XOR<ClanUpdateWithoutDefensesInput, ClanUncheckedUpdateWithoutDefensesInput>
    create: XOR<ClanCreateWithoutDefensesInput, ClanUncheckedCreateWithoutDefensesInput>
    where?: ClanWhereInput
  }

  export type ClanUpdateToOneWithWhereWithoutDefensesInput = {
    where?: ClanWhereInput
    data: XOR<ClanUpdateWithoutDefensesInput, ClanUncheckedUpdateWithoutDefensesInput>
  }

  export type ClanUpdateWithoutDefensesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    limit?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    elo?: IntFieldUpdateOperationsInput | number
    boss?: EnumBossNameFieldUpdateOperationsInput | $Enums.BossName
    damageOnBoss?: IntFieldUpdateOperationsInput | number
    participateInClanWar?: BoolFieldUpdateOperationsInput | boolean
    master?: BruteUpdateOneWithoutMasterOfClanNestedInput
    brutes?: BruteUpdateManyWithoutClanNestedInput
    joinRequests?: BruteUpdateManyWithoutWantToJoinClanNestedInput
    threads?: ClanThreadUpdateManyWithoutClanNestedInput
    bossDamages?: BossDamageUpdateManyWithoutClanNestedInput
    attacks?: ClanWarUpdateManyWithoutAttackerNestedInput
    wins?: ClanWarUpdateManyWithoutWinnerNestedInput
  }

  export type ClanUncheckedUpdateWithoutDefensesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    limit?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    elo?: IntFieldUpdateOperationsInput | number
    boss?: EnumBossNameFieldUpdateOperationsInput | $Enums.BossName
    damageOnBoss?: IntFieldUpdateOperationsInput | number
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    participateInClanWar?: BoolFieldUpdateOperationsInput | boolean
    brutes?: BruteUncheckedUpdateManyWithoutClanNestedInput
    joinRequests?: BruteUncheckedUpdateManyWithoutWantToJoinClanNestedInput
    threads?: ClanThreadUncheckedUpdateManyWithoutClanNestedInput
    bossDamages?: BossDamageUncheckedUpdateManyWithoutClanNestedInput
    attacks?: ClanWarUncheckedUpdateManyWithoutAttackerNestedInput
    wins?: ClanWarUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type ClanUpsertWithoutWinsInput = {
    update: XOR<ClanUpdateWithoutWinsInput, ClanUncheckedUpdateWithoutWinsInput>
    create: XOR<ClanCreateWithoutWinsInput, ClanUncheckedCreateWithoutWinsInput>
    where?: ClanWhereInput
  }

  export type ClanUpdateToOneWithWhereWithoutWinsInput = {
    where?: ClanWhereInput
    data: XOR<ClanUpdateWithoutWinsInput, ClanUncheckedUpdateWithoutWinsInput>
  }

  export type ClanUpdateWithoutWinsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    limit?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    elo?: IntFieldUpdateOperationsInput | number
    boss?: EnumBossNameFieldUpdateOperationsInput | $Enums.BossName
    damageOnBoss?: IntFieldUpdateOperationsInput | number
    participateInClanWar?: BoolFieldUpdateOperationsInput | boolean
    master?: BruteUpdateOneWithoutMasterOfClanNestedInput
    brutes?: BruteUpdateManyWithoutClanNestedInput
    joinRequests?: BruteUpdateManyWithoutWantToJoinClanNestedInput
    threads?: ClanThreadUpdateManyWithoutClanNestedInput
    bossDamages?: BossDamageUpdateManyWithoutClanNestedInput
    attacks?: ClanWarUpdateManyWithoutAttackerNestedInput
    defenses?: ClanWarUpdateManyWithoutDefenderNestedInput
  }

  export type ClanUncheckedUpdateWithoutWinsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    limit?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    elo?: IntFieldUpdateOperationsInput | number
    boss?: EnumBossNameFieldUpdateOperationsInput | $Enums.BossName
    damageOnBoss?: IntFieldUpdateOperationsInput | number
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    participateInClanWar?: BoolFieldUpdateOperationsInput | boolean
    brutes?: BruteUncheckedUpdateManyWithoutClanNestedInput
    joinRequests?: BruteUncheckedUpdateManyWithoutWantToJoinClanNestedInput
    threads?: ClanThreadUncheckedUpdateManyWithoutClanNestedInput
    bossDamages?: BossDamageUncheckedUpdateManyWithoutClanNestedInput
    attacks?: ClanWarUncheckedUpdateManyWithoutAttackerNestedInput
    defenses?: ClanWarUncheckedUpdateManyWithoutDefenderNestedInput
  }

  export type FightUpsertWithWhereUniqueWithoutClanWarInput = {
    where: FightWhereUniqueInput
    update: XOR<FightUpdateWithoutClanWarInput, FightUncheckedUpdateWithoutClanWarInput>
    create: XOR<FightCreateWithoutClanWarInput, FightUncheckedCreateWithoutClanWarInput>
  }

  export type FightUpdateWithWhereUniqueWithoutClanWarInput = {
    where: FightWhereUniqueInput
    data: XOR<FightUpdateWithoutClanWarInput, FightUncheckedUpdateWithoutClanWarInput>
  }

  export type FightUpdateManyWithWhereWithoutClanWarInput = {
    where: FightScalarWhereInput
    data: XOR<FightUpdateManyMutationInput, FightUncheckedUpdateManyWithoutClanWarInput>
  }

  export type ClanWarFightersUpsertWithWhereUniqueWithoutClanWarInput = {
    where: ClanWarFightersWhereUniqueInput
    update: XOR<ClanWarFightersUpdateWithoutClanWarInput, ClanWarFightersUncheckedUpdateWithoutClanWarInput>
    create: XOR<ClanWarFightersCreateWithoutClanWarInput, ClanWarFightersUncheckedCreateWithoutClanWarInput>
  }

  export type ClanWarFightersUpdateWithWhereUniqueWithoutClanWarInput = {
    where: ClanWarFightersWhereUniqueInput
    data: XOR<ClanWarFightersUpdateWithoutClanWarInput, ClanWarFightersUncheckedUpdateWithoutClanWarInput>
  }

  export type ClanWarFightersUpdateManyWithWhereWithoutClanWarInput = {
    where: ClanWarFightersScalarWhereInput
    data: XOR<ClanWarFightersUpdateManyMutationInput, ClanWarFightersUncheckedUpdateManyWithoutClanWarInput>
  }

  export type ClanWarCreateWithoutFightersInput = {
    id?: string
    duration?: number
    type?: $Enums.ClanWarType
    date?: Date | string
    status?: $Enums.ClanWarStatus
    attackerEloChange?: number
    attackerWins?: number
    defenderEloChange?: number
    defenderWins?: number
    attacker: ClanCreateNestedOneWithoutAttacksInput
    defender: ClanCreateNestedOneWithoutDefensesInput
    winner?: ClanCreateNestedOneWithoutWinsInput
    fights?: FightCreateNestedManyWithoutClanWarInput
  }

  export type ClanWarUncheckedCreateWithoutFightersInput = {
    id?: string
    duration?: number
    type?: $Enums.ClanWarType
    date?: Date | string
    status?: $Enums.ClanWarStatus
    attackerId: string
    attackerEloChange?: number
    attackerWins?: number
    defenderId: string
    defenderEloChange?: number
    defenderWins?: number
    winnerId?: string | null
    fights?: FightUncheckedCreateNestedManyWithoutClanWarInput
  }

  export type ClanWarCreateOrConnectWithoutFightersInput = {
    where: ClanWarWhereUniqueInput
    create: XOR<ClanWarCreateWithoutFightersInput, ClanWarUncheckedCreateWithoutFightersInput>
  }

  export type BruteCreateWithoutInClanWarAttackerFightersInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: number
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    tournamentWins?: number
    resets?: number
    user?: UserCreateNestedOneWithoutBrutesInput
    master?: BruteCreateNestedOneWithoutPupilsInput
    pupils?: BruteCreateNestedManyWithoutMasterInput
    clan?: ClanCreateNestedOneWithoutBrutesInput
    fights?: FightCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightCreateNestedManyWithoutBrute2Input
    logs?: LogCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceCreateNestedManyWithoutBruteInput
    tournaments?: TournamentCreateNestedManyWithoutParticipantsInput
    opponents?: BruteCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementCreateNestedManyWithoutBruteInput
    reports?: BruteReportCreateNestedManyWithoutBruteInput
    titles?: TitleCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostCreateNestedManyWithoutAuthorInput
    wantToJoinClan?: ClanCreateNestedOneWithoutJoinRequestsInput
    threads?: ClanThreadCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageCreateNestedManyWithoutBruteInput
    followers?: UserCreateNestedManyWithoutFollowingInput
    inClanWarDefenderFighters?: ClanWarFightersCreateNestedManyWithoutDefendersInput
    event?: EventCreateNestedOneWithoutBrutesInput
    wonEvents?: EventCreateNestedManyWithoutWinnerInput
  }

  export type BruteUncheckedCreateWithoutInClanWarAttackerFightersInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    userId?: string | null
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    masterId?: string | null
    pupilsCount?: number
    clanId?: string | null
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    wantToJoinClanId?: string | null
    tournamentWins?: number
    eventId?: string | null
    resets?: number
    pupils?: BruteUncheckedCreateNestedManyWithoutMasterInput
    fights?: FightUncheckedCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightUncheckedCreateNestedManyWithoutBrute2Input
    logs?: LogUncheckedCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceUncheckedCreateNestedManyWithoutBruteInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutParticipantsInput
    opponents?: BruteUncheckedCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteUncheckedCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementUncheckedCreateNestedManyWithoutBruteInput
    reports?: BruteReportUncheckedCreateNestedManyWithoutBruteInput
    titles?: TitleUncheckedCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanUncheckedCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostUncheckedCreateNestedManyWithoutAuthorInput
    threads?: ClanThreadUncheckedCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemUncheckedCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementUncheckedCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpUncheckedCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsUncheckedCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageUncheckedCreateNestedManyWithoutBruteInput
    followers?: UserUncheckedCreateNestedManyWithoutFollowingInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutDefendersInput
    wonEvents?: EventUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type BruteCreateOrConnectWithoutInClanWarAttackerFightersInput = {
    where: BruteWhereUniqueInput
    create: XOR<BruteCreateWithoutInClanWarAttackerFightersInput, BruteUncheckedCreateWithoutInClanWarAttackerFightersInput>
  }

  export type BruteCreateWithoutInClanWarDefenderFightersInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: number
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    tournamentWins?: number
    resets?: number
    user?: UserCreateNestedOneWithoutBrutesInput
    master?: BruteCreateNestedOneWithoutPupilsInput
    pupils?: BruteCreateNestedManyWithoutMasterInput
    clan?: ClanCreateNestedOneWithoutBrutesInput
    fights?: FightCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightCreateNestedManyWithoutBrute2Input
    logs?: LogCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceCreateNestedManyWithoutBruteInput
    tournaments?: TournamentCreateNestedManyWithoutParticipantsInput
    opponents?: BruteCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementCreateNestedManyWithoutBruteInput
    reports?: BruteReportCreateNestedManyWithoutBruteInput
    titles?: TitleCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostCreateNestedManyWithoutAuthorInput
    wantToJoinClan?: ClanCreateNestedOneWithoutJoinRequestsInput
    threads?: ClanThreadCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageCreateNestedManyWithoutBruteInput
    followers?: UserCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersCreateNestedManyWithoutAttackersInput
    event?: EventCreateNestedOneWithoutBrutesInput
    wonEvents?: EventCreateNestedManyWithoutWinnerInput
  }

  export type BruteUncheckedCreateWithoutInClanWarDefenderFightersInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    userId?: string | null
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    masterId?: string | null
    pupilsCount?: number
    clanId?: string | null
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    wantToJoinClanId?: string | null
    tournamentWins?: number
    eventId?: string | null
    resets?: number
    pupils?: BruteUncheckedCreateNestedManyWithoutMasterInput
    fights?: FightUncheckedCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightUncheckedCreateNestedManyWithoutBrute2Input
    logs?: LogUncheckedCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceUncheckedCreateNestedManyWithoutBruteInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutParticipantsInput
    opponents?: BruteUncheckedCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteUncheckedCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementUncheckedCreateNestedManyWithoutBruteInput
    reports?: BruteReportUncheckedCreateNestedManyWithoutBruteInput
    titles?: TitleUncheckedCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanUncheckedCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostUncheckedCreateNestedManyWithoutAuthorInput
    threads?: ClanThreadUncheckedCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemUncheckedCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementUncheckedCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpUncheckedCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsUncheckedCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageUncheckedCreateNestedManyWithoutBruteInput
    followers?: UserUncheckedCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutAttackersInput
    wonEvents?: EventUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type BruteCreateOrConnectWithoutInClanWarDefenderFightersInput = {
    where: BruteWhereUniqueInput
    create: XOR<BruteCreateWithoutInClanWarDefenderFightersInput, BruteUncheckedCreateWithoutInClanWarDefenderFightersInput>
  }

  export type ClanWarUpsertWithoutFightersInput = {
    update: XOR<ClanWarUpdateWithoutFightersInput, ClanWarUncheckedUpdateWithoutFightersInput>
    create: XOR<ClanWarCreateWithoutFightersInput, ClanWarUncheckedCreateWithoutFightersInput>
    where?: ClanWarWhereInput
  }

  export type ClanWarUpdateToOneWithWhereWithoutFightersInput = {
    where?: ClanWarWhereInput
    data: XOR<ClanWarUpdateWithoutFightersInput, ClanWarUncheckedUpdateWithoutFightersInput>
  }

  export type ClanWarUpdateWithoutFightersInput = {
    id?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    type?: EnumClanWarTypeFieldUpdateOperationsInput | $Enums.ClanWarType
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumClanWarStatusFieldUpdateOperationsInput | $Enums.ClanWarStatus
    attackerEloChange?: IntFieldUpdateOperationsInput | number
    attackerWins?: IntFieldUpdateOperationsInput | number
    defenderEloChange?: IntFieldUpdateOperationsInput | number
    defenderWins?: IntFieldUpdateOperationsInput | number
    attacker?: ClanUpdateOneRequiredWithoutAttacksNestedInput
    defender?: ClanUpdateOneRequiredWithoutDefensesNestedInput
    winner?: ClanUpdateOneWithoutWinsNestedInput
    fights?: FightUpdateManyWithoutClanWarNestedInput
  }

  export type ClanWarUncheckedUpdateWithoutFightersInput = {
    id?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    type?: EnumClanWarTypeFieldUpdateOperationsInput | $Enums.ClanWarType
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumClanWarStatusFieldUpdateOperationsInput | $Enums.ClanWarStatus
    attackerId?: StringFieldUpdateOperationsInput | string
    attackerEloChange?: IntFieldUpdateOperationsInput | number
    attackerWins?: IntFieldUpdateOperationsInput | number
    defenderId?: StringFieldUpdateOperationsInput | string
    defenderEloChange?: IntFieldUpdateOperationsInput | number
    defenderWins?: IntFieldUpdateOperationsInput | number
    winnerId?: NullableStringFieldUpdateOperationsInput | string | null
    fights?: FightUncheckedUpdateManyWithoutClanWarNestedInput
  }

  export type BruteUpsertWithWhereUniqueWithoutInClanWarAttackerFightersInput = {
    where: BruteWhereUniqueInput
    update: XOR<BruteUpdateWithoutInClanWarAttackerFightersInput, BruteUncheckedUpdateWithoutInClanWarAttackerFightersInput>
    create: XOR<BruteCreateWithoutInClanWarAttackerFightersInput, BruteUncheckedCreateWithoutInClanWarAttackerFightersInput>
  }

  export type BruteUpdateWithWhereUniqueWithoutInClanWarAttackerFightersInput = {
    where: BruteWhereUniqueInput
    data: XOR<BruteUpdateWithoutInClanWarAttackerFightersInput, BruteUncheckedUpdateWithoutInClanWarAttackerFightersInput>
  }

  export type BruteUpdateManyWithWhereWithoutInClanWarAttackerFightersInput = {
    where: BruteScalarWhereInput
    data: XOR<BruteUpdateManyMutationInput, BruteUncheckedUpdateManyWithoutInClanWarAttackerFightersInput>
  }

  export type BruteUpsertWithWhereUniqueWithoutInClanWarDefenderFightersInput = {
    where: BruteWhereUniqueInput
    update: XOR<BruteUpdateWithoutInClanWarDefenderFightersInput, BruteUncheckedUpdateWithoutInClanWarDefenderFightersInput>
    create: XOR<BruteCreateWithoutInClanWarDefenderFightersInput, BruteUncheckedCreateWithoutInClanWarDefenderFightersInput>
  }

  export type BruteUpdateWithWhereUniqueWithoutInClanWarDefenderFightersInput = {
    where: BruteWhereUniqueInput
    data: XOR<BruteUpdateWithoutInClanWarDefenderFightersInput, BruteUncheckedUpdateWithoutInClanWarDefenderFightersInput>
  }

  export type BruteUpdateManyWithWhereWithoutInClanWarDefenderFightersInput = {
    where: BruteScalarWhereInput
    data: XOR<BruteUpdateManyMutationInput, BruteUncheckedUpdateManyWithoutInClanWarDefenderFightersInput>
  }

  export type BruteCreateWithoutInventoryInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: number
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    tournamentWins?: number
    resets?: number
    user?: UserCreateNestedOneWithoutBrutesInput
    master?: BruteCreateNestedOneWithoutPupilsInput
    pupils?: BruteCreateNestedManyWithoutMasterInput
    clan?: ClanCreateNestedOneWithoutBrutesInput
    fights?: FightCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightCreateNestedManyWithoutBrute2Input
    logs?: LogCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceCreateNestedManyWithoutBruteInput
    tournaments?: TournamentCreateNestedManyWithoutParticipantsInput
    opponents?: BruteCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementCreateNestedManyWithoutBruteInput
    reports?: BruteReportCreateNestedManyWithoutBruteInput
    titles?: TitleCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostCreateNestedManyWithoutAuthorInput
    wantToJoinClan?: ClanCreateNestedOneWithoutJoinRequestsInput
    threads?: ClanThreadCreateNestedManyWithoutCreatorInput
    tournamentAchievements?: TournamentAchievementCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageCreateNestedManyWithoutBruteInput
    followers?: UserCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersCreateNestedManyWithoutDefendersInput
    event?: EventCreateNestedOneWithoutBrutesInput
    wonEvents?: EventCreateNestedManyWithoutWinnerInput
  }

  export type BruteUncheckedCreateWithoutInventoryInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    userId?: string | null
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    masterId?: string | null
    pupilsCount?: number
    clanId?: string | null
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    wantToJoinClanId?: string | null
    tournamentWins?: number
    eventId?: string | null
    resets?: number
    pupils?: BruteUncheckedCreateNestedManyWithoutMasterInput
    fights?: FightUncheckedCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightUncheckedCreateNestedManyWithoutBrute2Input
    logs?: LogUncheckedCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceUncheckedCreateNestedManyWithoutBruteInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutParticipantsInput
    opponents?: BruteUncheckedCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteUncheckedCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementUncheckedCreateNestedManyWithoutBruteInput
    reports?: BruteReportUncheckedCreateNestedManyWithoutBruteInput
    titles?: TitleUncheckedCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanUncheckedCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostUncheckedCreateNestedManyWithoutAuthorInput
    threads?: ClanThreadUncheckedCreateNestedManyWithoutCreatorInput
    tournamentAchievements?: TournamentAchievementUncheckedCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpUncheckedCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsUncheckedCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageUncheckedCreateNestedManyWithoutBruteInput
    followers?: UserUncheckedCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutDefendersInput
    wonEvents?: EventUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type BruteCreateOrConnectWithoutInventoryInput = {
    where: BruteWhereUniqueInput
    create: XOR<BruteCreateWithoutInventoryInput, BruteUncheckedCreateWithoutInventoryInput>
  }

  export type UserCreateWithoutInventoryInput = {
    id: string
    lang?: $Enums.Lang
    name: string
    admin?: boolean
    moderator?: boolean
    connexionToken: string
    bruteLimit?: number
    gold?: number
    fightSpeed?: number
    backgroundMusic?: boolean
    dinorpgDone?: Date | string | null
    ips?: UserCreateipsInput | string[]
    bannedAt?: Date | string | null
    banReason?: string | null
    lastReleaseSeen?: string | null
    displayVersusPage?: boolean
    brutes?: BruteCreateNestedManyWithoutUserInput
    achievements?: AchievementCreateNestedManyWithoutUserInput
    reports?: BruteReportCreateNestedManyWithoutUsersInput
    tournamentGolds?: TournamentGoldCreateNestedManyWithoutUserInput
    favoriteFights?: FightCreateNestedManyWithoutFavoritedByInput
    following?: BruteCreateNestedManyWithoutFollowersInput
  }

  export type UserUncheckedCreateWithoutInventoryInput = {
    id: string
    lang?: $Enums.Lang
    name: string
    admin?: boolean
    moderator?: boolean
    connexionToken: string
    bruteLimit?: number
    gold?: number
    fightSpeed?: number
    backgroundMusic?: boolean
    dinorpgDone?: Date | string | null
    ips?: UserCreateipsInput | string[]
    bannedAt?: Date | string | null
    banReason?: string | null
    lastReleaseSeen?: string | null
    displayVersusPage?: boolean
    brutes?: BruteUncheckedCreateNestedManyWithoutUserInput
    achievements?: AchievementUncheckedCreateNestedManyWithoutUserInput
    reports?: BruteReportUncheckedCreateNestedManyWithoutUsersInput
    tournamentGolds?: TournamentGoldUncheckedCreateNestedManyWithoutUserInput
    favoriteFights?: FightUncheckedCreateNestedManyWithoutFavoritedByInput
    following?: BruteUncheckedCreateNestedManyWithoutFollowersInput
  }

  export type UserCreateOrConnectWithoutInventoryInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInventoryInput, UserUncheckedCreateWithoutInventoryInput>
  }

  export type BruteUpsertWithoutInventoryInput = {
    update: XOR<BruteUpdateWithoutInventoryInput, BruteUncheckedUpdateWithoutInventoryInput>
    create: XOR<BruteCreateWithoutInventoryInput, BruteUncheckedCreateWithoutInventoryInput>
    where?: BruteWhereInput
  }

  export type BruteUpdateToOneWithWhereWithoutInventoryInput = {
    where?: BruteWhereInput
    data: XOR<BruteUpdateWithoutInventoryInput, BruteUncheckedUpdateWithoutInventoryInput>
  }

  export type BruteUpdateWithoutInventoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: IntFieldUpdateOperationsInput | number
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    tournamentWins?: IntFieldUpdateOperationsInput | number
    resets?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutBrutesNestedInput
    master?: BruteUpdateOneWithoutPupilsNestedInput
    pupils?: BruteUpdateManyWithoutMasterNestedInput
    clan?: ClanUpdateOneWithoutBrutesNestedInput
    fights?: FightUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUpdateManyWithoutBrute2NestedInput
    logs?: LogUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUpdateManyWithoutBruteNestedInput
    titles?: TitleUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUpdateManyWithoutAuthorNestedInput
    wantToJoinClan?: ClanUpdateOneWithoutJoinRequestsNestedInput
    threads?: ClanThreadUpdateManyWithoutCreatorNestedInput
    tournamentAchievements?: TournamentAchievementUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUpdateManyWithoutBruteNestedInput
    followers?: UserUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUpdateManyWithoutDefendersNestedInput
    event?: EventUpdateOneWithoutBrutesNestedInput
    wonEvents?: EventUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateWithoutInventoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
    pupils?: BruteUncheckedUpdateManyWithoutMasterNestedInput
    fights?: FightUncheckedUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUncheckedUpdateManyWithoutBrute2NestedInput
    logs?: LogUncheckedUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUncheckedUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUncheckedUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUncheckedUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUncheckedUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUncheckedUpdateManyWithoutBruteNestedInput
    titles?: TitleUncheckedUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUncheckedUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUncheckedUpdateManyWithoutAuthorNestedInput
    threads?: ClanThreadUncheckedUpdateManyWithoutCreatorNestedInput
    tournamentAchievements?: TournamentAchievementUncheckedUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUncheckedUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUncheckedUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUncheckedUpdateManyWithoutBruteNestedInput
    followers?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedUpdateManyWithoutDefendersNestedInput
    wonEvents?: EventUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type UserUpsertWithoutInventoryInput = {
    update: XOR<UserUpdateWithoutInventoryInput, UserUncheckedUpdateWithoutInventoryInput>
    create: XOR<UserCreateWithoutInventoryInput, UserUncheckedCreateWithoutInventoryInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInventoryInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInventoryInput, UserUncheckedUpdateWithoutInventoryInput>
  }

  export type UserUpdateWithoutInventoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    lang?: EnumLangFieldUpdateOperationsInput | $Enums.Lang
    name?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
    moderator?: BoolFieldUpdateOperationsInput | boolean
    connexionToken?: StringFieldUpdateOperationsInput | string
    bruteLimit?: IntFieldUpdateOperationsInput | number
    gold?: IntFieldUpdateOperationsInput | number
    fightSpeed?: IntFieldUpdateOperationsInput | number
    backgroundMusic?: BoolFieldUpdateOperationsInput | boolean
    dinorpgDone?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ips?: UserUpdateipsInput | string[]
    bannedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    lastReleaseSeen?: NullableStringFieldUpdateOperationsInput | string | null
    displayVersusPage?: BoolFieldUpdateOperationsInput | boolean
    brutes?: BruteUpdateManyWithoutUserNestedInput
    achievements?: AchievementUpdateManyWithoutUserNestedInput
    reports?: BruteReportUpdateManyWithoutUsersNestedInput
    tournamentGolds?: TournamentGoldUpdateManyWithoutUserNestedInput
    favoriteFights?: FightUpdateManyWithoutFavoritedByNestedInput
    following?: BruteUpdateManyWithoutFollowersNestedInput
  }

  export type UserUncheckedUpdateWithoutInventoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    lang?: EnumLangFieldUpdateOperationsInput | $Enums.Lang
    name?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
    moderator?: BoolFieldUpdateOperationsInput | boolean
    connexionToken?: StringFieldUpdateOperationsInput | string
    bruteLimit?: IntFieldUpdateOperationsInput | number
    gold?: IntFieldUpdateOperationsInput | number
    fightSpeed?: IntFieldUpdateOperationsInput | number
    backgroundMusic?: BoolFieldUpdateOperationsInput | boolean
    dinorpgDone?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ips?: UserUpdateipsInput | string[]
    bannedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    lastReleaseSeen?: NullableStringFieldUpdateOperationsInput | string | null
    displayVersusPage?: BoolFieldUpdateOperationsInput | boolean
    brutes?: BruteUncheckedUpdateManyWithoutUserNestedInput
    achievements?: AchievementUncheckedUpdateManyWithoutUserNestedInput
    reports?: BruteReportUncheckedUpdateManyWithoutUsersNestedInput
    tournamentGolds?: TournamentGoldUncheckedUpdateManyWithoutUserNestedInput
    favoriteFights?: FightUncheckedUpdateManyWithoutFavoritedByNestedInput
    following?: BruteUncheckedUpdateManyWithoutFollowersNestedInput
  }

  export type BruteCreateWithoutEventInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: number
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    tournamentWins?: number
    resets?: number
    user?: UserCreateNestedOneWithoutBrutesInput
    master?: BruteCreateNestedOneWithoutPupilsInput
    pupils?: BruteCreateNestedManyWithoutMasterInput
    clan?: ClanCreateNestedOneWithoutBrutesInput
    fights?: FightCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightCreateNestedManyWithoutBrute2Input
    logs?: LogCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceCreateNestedManyWithoutBruteInput
    tournaments?: TournamentCreateNestedManyWithoutParticipantsInput
    opponents?: BruteCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementCreateNestedManyWithoutBruteInput
    reports?: BruteReportCreateNestedManyWithoutBruteInput
    titles?: TitleCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostCreateNestedManyWithoutAuthorInput
    wantToJoinClan?: ClanCreateNestedOneWithoutJoinRequestsInput
    threads?: ClanThreadCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageCreateNestedManyWithoutBruteInput
    followers?: UserCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersCreateNestedManyWithoutDefendersInput
    wonEvents?: EventCreateNestedManyWithoutWinnerInput
  }

  export type BruteUncheckedCreateWithoutEventInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    userId?: string | null
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    masterId?: string | null
    pupilsCount?: number
    clanId?: string | null
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    wantToJoinClanId?: string | null
    tournamentWins?: number
    resets?: number
    pupils?: BruteUncheckedCreateNestedManyWithoutMasterInput
    fights?: FightUncheckedCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightUncheckedCreateNestedManyWithoutBrute2Input
    logs?: LogUncheckedCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceUncheckedCreateNestedManyWithoutBruteInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutParticipantsInput
    opponents?: BruteUncheckedCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteUncheckedCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementUncheckedCreateNestedManyWithoutBruteInput
    reports?: BruteReportUncheckedCreateNestedManyWithoutBruteInput
    titles?: TitleUncheckedCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanUncheckedCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostUncheckedCreateNestedManyWithoutAuthorInput
    threads?: ClanThreadUncheckedCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemUncheckedCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementUncheckedCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpUncheckedCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsUncheckedCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageUncheckedCreateNestedManyWithoutBruteInput
    followers?: UserUncheckedCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutDefendersInput
    wonEvents?: EventUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type BruteCreateOrConnectWithoutEventInput = {
    where: BruteWhereUniqueInput
    create: XOR<BruteCreateWithoutEventInput, BruteUncheckedCreateWithoutEventInput>
  }

  export type BruteCreateManyEventInputEnvelope = {
    data: BruteCreateManyEventInput | BruteCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type TournamentCreateWithoutEventInput = {
    id?: string
    date: Date | string
    type?: $Enums.TournamentType
    rounds: number
    participants?: BruteCreateNestedManyWithoutTournamentsInput
    fights?: FightCreateNestedManyWithoutTournamentInput
  }

  export type TournamentUncheckedCreateWithoutEventInput = {
    id?: string
    date: Date | string
    type?: $Enums.TournamentType
    rounds: number
    participants?: BruteUncheckedCreateNestedManyWithoutTournamentsInput
    fights?: FightUncheckedCreateNestedManyWithoutTournamentInput
  }

  export type TournamentCreateOrConnectWithoutEventInput = {
    where: TournamentWhereUniqueInput
    create: XOR<TournamentCreateWithoutEventInput, TournamentUncheckedCreateWithoutEventInput>
  }

  export type BruteCreateWithoutWonEventsInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: number
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    tournamentWins?: number
    resets?: number
    user?: UserCreateNestedOneWithoutBrutesInput
    master?: BruteCreateNestedOneWithoutPupilsInput
    pupils?: BruteCreateNestedManyWithoutMasterInput
    clan?: ClanCreateNestedOneWithoutBrutesInput
    fights?: FightCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightCreateNestedManyWithoutBrute2Input
    logs?: LogCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceCreateNestedManyWithoutBruteInput
    tournaments?: TournamentCreateNestedManyWithoutParticipantsInput
    opponents?: BruteCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementCreateNestedManyWithoutBruteInput
    reports?: BruteReportCreateNestedManyWithoutBruteInput
    titles?: TitleCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostCreateNestedManyWithoutAuthorInput
    wantToJoinClan?: ClanCreateNestedOneWithoutJoinRequestsInput
    threads?: ClanThreadCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageCreateNestedManyWithoutBruteInput
    followers?: UserCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersCreateNestedManyWithoutDefendersInput
    event?: EventCreateNestedOneWithoutBrutesInput
  }

  export type BruteUncheckedCreateWithoutWonEventsInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    userId?: string | null
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    masterId?: string | null
    pupilsCount?: number
    clanId?: string | null
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    wantToJoinClanId?: string | null
    tournamentWins?: number
    eventId?: string | null
    resets?: number
    pupils?: BruteUncheckedCreateNestedManyWithoutMasterInput
    fights?: FightUncheckedCreateNestedManyWithoutBrute1Input
    fightsAsAdversary?: FightUncheckedCreateNestedManyWithoutBrute2Input
    logs?: LogUncheckedCreateNestedManyWithoutCurrentBruteInput
    destinyChoices?: DestinyChoiceUncheckedCreateNestedManyWithoutBruteInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutParticipantsInput
    opponents?: BruteUncheckedCreateNestedManyWithoutOpponentOfInput
    opponentOf?: BruteUncheckedCreateNestedManyWithoutOpponentsInput
    achievements?: AchievementUncheckedCreateNestedManyWithoutBruteInput
    reports?: BruteReportUncheckedCreateNestedManyWithoutBruteInput
    titles?: TitleUncheckedCreateNestedManyWithoutBrutesInput
    masterOfClan?: ClanUncheckedCreateNestedOneWithoutMasterInput
    clanPosts?: ClanPostUncheckedCreateNestedManyWithoutAuthorInput
    threads?: ClanThreadUncheckedCreateNestedManyWithoutCreatorInput
    inventory?: InventoryItemUncheckedCreateNestedManyWithoutBruteInput
    tournamentAchievements?: TournamentAchievementUncheckedCreateNestedManyWithoutBruteInput
    tournamentXps?: TournamentXpUncheckedCreateNestedManyWithoutBruteInput
    startingStats?: BruteStartingStatsUncheckedCreateNestedOneWithoutBruteInput
    damageOnBosses?: BossDamageUncheckedCreateNestedManyWithoutBruteInput
    followers?: UserUncheckedCreateNestedManyWithoutFollowingInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutAttackersInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedCreateNestedManyWithoutDefendersInput
  }

  export type BruteCreateOrConnectWithoutWonEventsInput = {
    where: BruteWhereUniqueInput
    create: XOR<BruteCreateWithoutWonEventsInput, BruteUncheckedCreateWithoutWonEventsInput>
  }

  export type BruteUpsertWithWhereUniqueWithoutEventInput = {
    where: BruteWhereUniqueInput
    update: XOR<BruteUpdateWithoutEventInput, BruteUncheckedUpdateWithoutEventInput>
    create: XOR<BruteCreateWithoutEventInput, BruteUncheckedCreateWithoutEventInput>
  }

  export type BruteUpdateWithWhereUniqueWithoutEventInput = {
    where: BruteWhereUniqueInput
    data: XOR<BruteUpdateWithoutEventInput, BruteUncheckedUpdateWithoutEventInput>
  }

  export type BruteUpdateManyWithWhereWithoutEventInput = {
    where: BruteScalarWhereInput
    data: XOR<BruteUpdateManyMutationInput, BruteUncheckedUpdateManyWithoutEventInput>
  }

  export type TournamentUpsertWithoutEventInput = {
    update: XOR<TournamentUpdateWithoutEventInput, TournamentUncheckedUpdateWithoutEventInput>
    create: XOR<TournamentCreateWithoutEventInput, TournamentUncheckedCreateWithoutEventInput>
    where?: TournamentWhereInput
  }

  export type TournamentUpdateToOneWithWhereWithoutEventInput = {
    where?: TournamentWhereInput
    data: XOR<TournamentUpdateWithoutEventInput, TournamentUncheckedUpdateWithoutEventInput>
  }

  export type TournamentUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumTournamentTypeFieldUpdateOperationsInput | $Enums.TournamentType
    rounds?: IntFieldUpdateOperationsInput | number
    participants?: BruteUpdateManyWithoutTournamentsNestedInput
    fights?: FightUpdateManyWithoutTournamentNestedInput
  }

  export type TournamentUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumTournamentTypeFieldUpdateOperationsInput | $Enums.TournamentType
    rounds?: IntFieldUpdateOperationsInput | number
    participants?: BruteUncheckedUpdateManyWithoutTournamentsNestedInput
    fights?: FightUncheckedUpdateManyWithoutTournamentNestedInput
  }

  export type BruteUpsertWithoutWonEventsInput = {
    update: XOR<BruteUpdateWithoutWonEventsInput, BruteUncheckedUpdateWithoutWonEventsInput>
    create: XOR<BruteCreateWithoutWonEventsInput, BruteUncheckedCreateWithoutWonEventsInput>
    where?: BruteWhereInput
  }

  export type BruteUpdateToOneWithWhereWithoutWonEventsInput = {
    where?: BruteWhereInput
    data: XOR<BruteUpdateWithoutWonEventsInput, BruteUncheckedUpdateWithoutWonEventsInput>
  }

  export type BruteUpdateWithoutWonEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: IntFieldUpdateOperationsInput | number
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    tournamentWins?: IntFieldUpdateOperationsInput | number
    resets?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutBrutesNestedInput
    master?: BruteUpdateOneWithoutPupilsNestedInput
    pupils?: BruteUpdateManyWithoutMasterNestedInput
    clan?: ClanUpdateOneWithoutBrutesNestedInput
    fights?: FightUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUpdateManyWithoutBrute2NestedInput
    logs?: LogUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUpdateManyWithoutBruteNestedInput
    titles?: TitleUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUpdateManyWithoutAuthorNestedInput
    wantToJoinClan?: ClanUpdateOneWithoutJoinRequestsNestedInput
    threads?: ClanThreadUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUpdateManyWithoutBruteNestedInput
    followers?: UserUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUpdateManyWithoutDefendersNestedInput
    event?: EventUpdateOneWithoutBrutesNestedInput
  }

  export type BruteUncheckedUpdateWithoutWonEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
    pupils?: BruteUncheckedUpdateManyWithoutMasterNestedInput
    fights?: FightUncheckedUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUncheckedUpdateManyWithoutBrute2NestedInput
    logs?: LogUncheckedUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUncheckedUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUncheckedUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUncheckedUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUncheckedUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUncheckedUpdateManyWithoutBruteNestedInput
    titles?: TitleUncheckedUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUncheckedUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUncheckedUpdateManyWithoutAuthorNestedInput
    threads?: ClanThreadUncheckedUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUncheckedUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUncheckedUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUncheckedUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUncheckedUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUncheckedUpdateManyWithoutBruteNestedInput
    followers?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedUpdateManyWithoutDefendersNestedInput
  }

  export type BruteCreateManyUserInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    masterId?: string | null
    pupilsCount?: number
    clanId?: string | null
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    wantToJoinClanId?: string | null
    tournamentWins?: number
    eventId?: string | null
    resets?: number
  }

  export type AchievementCreateManyUserInput = {
    id?: string
    name: $Enums.AchievementName
    count?: number
    bruteId?: string | null
  }

  export type TournamentGoldCreateManyUserInput = {
    id?: string
    date: Date | string
    gold: number
  }

  export type InventoryItemCreateManyUserInput = {
    id?: string
    type: $Enums.InventoryItemType
    count?: number
    bruteId?: string | null
  }

  export type BruteUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: IntFieldUpdateOperationsInput | number
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    tournamentWins?: IntFieldUpdateOperationsInput | number
    resets?: IntFieldUpdateOperationsInput | number
    master?: BruteUpdateOneWithoutPupilsNestedInput
    pupils?: BruteUpdateManyWithoutMasterNestedInput
    clan?: ClanUpdateOneWithoutBrutesNestedInput
    fights?: FightUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUpdateManyWithoutBrute2NestedInput
    logs?: LogUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUpdateManyWithoutBruteNestedInput
    titles?: TitleUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUpdateManyWithoutAuthorNestedInput
    wantToJoinClan?: ClanUpdateOneWithoutJoinRequestsNestedInput
    threads?: ClanThreadUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUpdateManyWithoutBruteNestedInput
    followers?: UserUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUpdateManyWithoutDefendersNestedInput
    event?: EventUpdateOneWithoutBrutesNestedInput
    wonEvents?: EventUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
    pupils?: BruteUncheckedUpdateManyWithoutMasterNestedInput
    fights?: FightUncheckedUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUncheckedUpdateManyWithoutBrute2NestedInput
    logs?: LogUncheckedUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUncheckedUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUncheckedUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUncheckedUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUncheckedUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUncheckedUpdateManyWithoutBruteNestedInput
    titles?: TitleUncheckedUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUncheckedUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUncheckedUpdateManyWithoutAuthorNestedInput
    threads?: ClanThreadUncheckedUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUncheckedUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUncheckedUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUncheckedUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUncheckedUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUncheckedUpdateManyWithoutBruteNestedInput
    followers?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedUpdateManyWithoutDefendersNestedInput
    wonEvents?: EventUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
  }

  export type AchievementUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: EnumAchievementNameFieldUpdateOperationsInput | $Enums.AchievementName
    count?: IntFieldUpdateOperationsInput | number
    brute?: BruteUpdateOneWithoutAchievementsNestedInput
  }

  export type AchievementUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: EnumAchievementNameFieldUpdateOperationsInput | $Enums.AchievementName
    count?: IntFieldUpdateOperationsInput | number
    bruteId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AchievementUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: EnumAchievementNameFieldUpdateOperationsInput | $Enums.AchievementName
    count?: IntFieldUpdateOperationsInput | number
    bruteId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BruteReportUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: EnumBruteReportReasonFieldUpdateOperationsInput | $Enums.BruteReportReason
    count?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBruteReportStatusFieldUpdateOperationsInput | $Enums.BruteReportStatus
    brute?: BruteUpdateOneRequiredWithoutReportsNestedInput
  }

  export type BruteReportUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    bruteId?: StringFieldUpdateOperationsInput | string
    reason?: EnumBruteReportReasonFieldUpdateOperationsInput | $Enums.BruteReportReason
    count?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBruteReportStatusFieldUpdateOperationsInput | $Enums.BruteReportStatus
  }

  export type BruteReportUncheckedUpdateManyWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    bruteId?: StringFieldUpdateOperationsInput | string
    reason?: EnumBruteReportReasonFieldUpdateOperationsInput | $Enums.BruteReportReason
    count?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBruteReportStatusFieldUpdateOperationsInput | $Enums.BruteReportStatus
  }

  export type TournamentGoldUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    gold?: IntFieldUpdateOperationsInput | number
  }

  export type TournamentGoldUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    gold?: IntFieldUpdateOperationsInput | number
  }

  export type TournamentGoldUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    gold?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryItemUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumInventoryItemTypeFieldUpdateOperationsInput | $Enums.InventoryItemType
    count?: IntFieldUpdateOperationsInput | number
    brute?: BruteUpdateOneWithoutInventoryNestedInput
  }

  export type InventoryItemUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumInventoryItemTypeFieldUpdateOperationsInput | $Enums.InventoryItemType
    count?: IntFieldUpdateOperationsInput | number
    bruteId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InventoryItemUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumInventoryItemTypeFieldUpdateOperationsInput | $Enums.InventoryItemType
    count?: IntFieldUpdateOperationsInput | number
    bruteId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FightUpdateWithoutFavoritedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    winner?: StringFieldUpdateOperationsInput | string
    loser?: StringFieldUpdateOperationsInput | string
    steps?: StringFieldUpdateOperationsInput | string
    fighters?: StringFieldUpdateOperationsInput | string
    tournamentStep?: IntFieldUpdateOperationsInput | number
    modifiers?: FightUpdatemodifiersInput | $Enums.FightModifier[]
    background?: StringFieldUpdateOperationsInput | string
    brute1?: BruteUpdateOneRequiredWithoutFightsNestedInput
    brute2?: BruteUpdateOneWithoutFightsAsAdversaryNestedInput
    logs?: LogUpdateManyWithoutFightNestedInput
    tournament?: TournamentUpdateOneWithoutFightsNestedInput
    clanWar?: ClanWarUpdateOneWithoutFightsNestedInput
  }

  export type FightUncheckedUpdateWithoutFavoritedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    brute1Id?: StringFieldUpdateOperationsInput | string
    brute2Id?: NullableStringFieldUpdateOperationsInput | string | null
    winner?: StringFieldUpdateOperationsInput | string
    loser?: StringFieldUpdateOperationsInput | string
    steps?: StringFieldUpdateOperationsInput | string
    fighters?: StringFieldUpdateOperationsInput | string
    tournamentId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentStep?: IntFieldUpdateOperationsInput | number
    modifiers?: FightUpdatemodifiersInput | $Enums.FightModifier[]
    background?: StringFieldUpdateOperationsInput | string
    clanWarId?: NullableStringFieldUpdateOperationsInput | string | null
    logs?: LogUncheckedUpdateManyWithoutFightNestedInput
  }

  export type FightUncheckedUpdateManyWithoutFavoritedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    brute1Id?: StringFieldUpdateOperationsInput | string
    brute2Id?: NullableStringFieldUpdateOperationsInput | string | null
    winner?: StringFieldUpdateOperationsInput | string
    loser?: StringFieldUpdateOperationsInput | string
    steps?: StringFieldUpdateOperationsInput | string
    fighters?: StringFieldUpdateOperationsInput | string
    tournamentId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentStep?: IntFieldUpdateOperationsInput | number
    modifiers?: FightUpdatemodifiersInput | $Enums.FightModifier[]
    background?: StringFieldUpdateOperationsInput | string
    clanWarId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BruteUpdateWithoutFollowersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: IntFieldUpdateOperationsInput | number
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    tournamentWins?: IntFieldUpdateOperationsInput | number
    resets?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutBrutesNestedInput
    master?: BruteUpdateOneWithoutPupilsNestedInput
    pupils?: BruteUpdateManyWithoutMasterNestedInput
    clan?: ClanUpdateOneWithoutBrutesNestedInput
    fights?: FightUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUpdateManyWithoutBrute2NestedInput
    logs?: LogUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUpdateManyWithoutBruteNestedInput
    titles?: TitleUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUpdateManyWithoutAuthorNestedInput
    wantToJoinClan?: ClanUpdateOneWithoutJoinRequestsNestedInput
    threads?: ClanThreadUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUpdateManyWithoutBruteNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUpdateManyWithoutDefendersNestedInput
    event?: EventUpdateOneWithoutBrutesNestedInput
    wonEvents?: EventUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateWithoutFollowersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
    pupils?: BruteUncheckedUpdateManyWithoutMasterNestedInput
    fights?: FightUncheckedUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUncheckedUpdateManyWithoutBrute2NestedInput
    logs?: LogUncheckedUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUncheckedUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUncheckedUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUncheckedUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUncheckedUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUncheckedUpdateManyWithoutBruteNestedInput
    titles?: TitleUncheckedUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUncheckedUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUncheckedUpdateManyWithoutAuthorNestedInput
    threads?: ClanThreadUncheckedUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUncheckedUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUncheckedUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUncheckedUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUncheckedUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUncheckedUpdateManyWithoutBruteNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedUpdateManyWithoutDefendersNestedInput
    wonEvents?: EventUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateManyWithoutFollowersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
  }

  export type BruteCreateManyMasterInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    userId?: string | null
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: number
    clanId?: string | null
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    wantToJoinClanId?: string | null
    tournamentWins?: number
    eventId?: string | null
    resets?: number
  }

  export type FightCreateManyBrute1Input = {
    id?: string
    date?: Date | string
    brute2Id?: string | null
    winner: string
    loser: string
    steps: string
    fighters: string
    tournamentId?: string | null
    tournamentStep?: number
    modifiers?: FightCreatemodifiersInput | $Enums.FightModifier[]
    background?: string
    clanWarId?: string | null
  }

  export type FightCreateManyBrute2Input = {
    id?: string
    date?: Date | string
    brute1Id: string
    winner: string
    loser: string
    steps: string
    fighters: string
    tournamentId?: string | null
    tournamentStep?: number
    modifiers?: FightCreatemodifiersInput | $Enums.FightModifier[]
    background?: string
    clanWarId?: string | null
  }

  export type LogCreateManyCurrentBruteInput = {
    id?: string
    date?: Date | string
    type: $Enums.LogType
    level?: number | null
    brute?: string | null
    fightId?: string | null
    xp?: number | null
    gold?: number | null
    template?: string | null
    destinyChoiceId?: string | null
  }

  export type DestinyChoiceCreateManyBruteInput = {
    id?: string
    path?: DestinyChoiceCreatepathInput | $Enums.DestinyChoiceSide[]
    type: $Enums.DestinyChoiceType
    skill?: $Enums.SkillName | null
    weapon?: $Enums.WeaponName | null
    pet?: $Enums.PetName | null
    originalSkill?: $Enums.SkillName | null
    originalWeapon?: $Enums.WeaponName | null
    originalPet?: $Enums.PetName | null
    stat1?: $Enums.BruteStat | null
    stat1Value?: number | null
    stat2?: $Enums.BruteStat | null
    stat2Value?: number | null
  }

  export type AchievementCreateManyBruteInput = {
    id?: string
    name: $Enums.AchievementName
    count?: number
    userId?: string | null
  }

  export type BruteReportCreateManyBruteInput = {
    id?: string
    reason?: $Enums.BruteReportReason
    count?: number
    date?: Date | string
    status?: $Enums.BruteReportStatus
  }

  export type ClanPostCreateManyAuthorInput = {
    id?: string
    threadId: string
    date?: Date | string
    message: string
  }

  export type ClanThreadCreateManyCreatorInput = {
    id?: string
    clanId: string
    title: string
    locked?: boolean
    pinned?: boolean
    postCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InventoryItemCreateManyBruteInput = {
    id?: string
    type: $Enums.InventoryItemType
    count?: number
    userId?: string | null
  }

  export type TournamentAchievementCreateManyBruteInput = {
    id?: string
    date: Date | string
    achievement: $Enums.AchievementName
    achievementCount: number
  }

  export type TournamentXpCreateManyBruteInput = {
    id?: string
    date: Date | string
    xp: number
  }

  export type BossDamageCreateManyBruteInput = {
    id?: string
    clanId: string
    damage: number
  }

  export type EventCreateManyWinnerInput = {
    id?: string
    date?: Date | string
    type?: $Enums.EventType
    maxLevel: number
    maxRound?: number
    status?: $Enums.EventStatus
    finishedAt?: Date | string | null
    sortedBrutes?: EventCreatesortedBrutesInput | string[]
  }

  export type BruteUpdateWithoutMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: IntFieldUpdateOperationsInput | number
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    tournamentWins?: IntFieldUpdateOperationsInput | number
    resets?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutBrutesNestedInput
    pupils?: BruteUpdateManyWithoutMasterNestedInput
    clan?: ClanUpdateOneWithoutBrutesNestedInput
    fights?: FightUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUpdateManyWithoutBrute2NestedInput
    logs?: LogUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUpdateManyWithoutBruteNestedInput
    titles?: TitleUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUpdateManyWithoutAuthorNestedInput
    wantToJoinClan?: ClanUpdateOneWithoutJoinRequestsNestedInput
    threads?: ClanThreadUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUpdateManyWithoutBruteNestedInput
    followers?: UserUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUpdateManyWithoutDefendersNestedInput
    event?: EventUpdateOneWithoutBrutesNestedInput
    wonEvents?: EventUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateWithoutMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
    pupils?: BruteUncheckedUpdateManyWithoutMasterNestedInput
    fights?: FightUncheckedUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUncheckedUpdateManyWithoutBrute2NestedInput
    logs?: LogUncheckedUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUncheckedUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUncheckedUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUncheckedUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUncheckedUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUncheckedUpdateManyWithoutBruteNestedInput
    titles?: TitleUncheckedUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUncheckedUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUncheckedUpdateManyWithoutAuthorNestedInput
    threads?: ClanThreadUncheckedUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUncheckedUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUncheckedUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUncheckedUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUncheckedUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUncheckedUpdateManyWithoutBruteNestedInput
    followers?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedUpdateManyWithoutDefendersNestedInput
    wonEvents?: EventUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateManyWithoutMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
  }

  export type FightUpdateWithoutBrute1Input = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    winner?: StringFieldUpdateOperationsInput | string
    loser?: StringFieldUpdateOperationsInput | string
    steps?: StringFieldUpdateOperationsInput | string
    fighters?: StringFieldUpdateOperationsInput | string
    tournamentStep?: IntFieldUpdateOperationsInput | number
    modifiers?: FightUpdatemodifiersInput | $Enums.FightModifier[]
    background?: StringFieldUpdateOperationsInput | string
    brute2?: BruteUpdateOneWithoutFightsAsAdversaryNestedInput
    logs?: LogUpdateManyWithoutFightNestedInput
    tournament?: TournamentUpdateOneWithoutFightsNestedInput
    favoritedBy?: UserUpdateManyWithoutFavoriteFightsNestedInput
    clanWar?: ClanWarUpdateOneWithoutFightsNestedInput
  }

  export type FightUncheckedUpdateWithoutBrute1Input = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    brute2Id?: NullableStringFieldUpdateOperationsInput | string | null
    winner?: StringFieldUpdateOperationsInput | string
    loser?: StringFieldUpdateOperationsInput | string
    steps?: StringFieldUpdateOperationsInput | string
    fighters?: StringFieldUpdateOperationsInput | string
    tournamentId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentStep?: IntFieldUpdateOperationsInput | number
    modifiers?: FightUpdatemodifiersInput | $Enums.FightModifier[]
    background?: StringFieldUpdateOperationsInput | string
    clanWarId?: NullableStringFieldUpdateOperationsInput | string | null
    logs?: LogUncheckedUpdateManyWithoutFightNestedInput
    favoritedBy?: UserUncheckedUpdateManyWithoutFavoriteFightsNestedInput
  }

  export type FightUncheckedUpdateManyWithoutBrute1Input = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    brute2Id?: NullableStringFieldUpdateOperationsInput | string | null
    winner?: StringFieldUpdateOperationsInput | string
    loser?: StringFieldUpdateOperationsInput | string
    steps?: StringFieldUpdateOperationsInput | string
    fighters?: StringFieldUpdateOperationsInput | string
    tournamentId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentStep?: IntFieldUpdateOperationsInput | number
    modifiers?: FightUpdatemodifiersInput | $Enums.FightModifier[]
    background?: StringFieldUpdateOperationsInput | string
    clanWarId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FightUpdateWithoutBrute2Input = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    winner?: StringFieldUpdateOperationsInput | string
    loser?: StringFieldUpdateOperationsInput | string
    steps?: StringFieldUpdateOperationsInput | string
    fighters?: StringFieldUpdateOperationsInput | string
    tournamentStep?: IntFieldUpdateOperationsInput | number
    modifiers?: FightUpdatemodifiersInput | $Enums.FightModifier[]
    background?: StringFieldUpdateOperationsInput | string
    brute1?: BruteUpdateOneRequiredWithoutFightsNestedInput
    logs?: LogUpdateManyWithoutFightNestedInput
    tournament?: TournamentUpdateOneWithoutFightsNestedInput
    favoritedBy?: UserUpdateManyWithoutFavoriteFightsNestedInput
    clanWar?: ClanWarUpdateOneWithoutFightsNestedInput
  }

  export type FightUncheckedUpdateWithoutBrute2Input = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    brute1Id?: StringFieldUpdateOperationsInput | string
    winner?: StringFieldUpdateOperationsInput | string
    loser?: StringFieldUpdateOperationsInput | string
    steps?: StringFieldUpdateOperationsInput | string
    fighters?: StringFieldUpdateOperationsInput | string
    tournamentId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentStep?: IntFieldUpdateOperationsInput | number
    modifiers?: FightUpdatemodifiersInput | $Enums.FightModifier[]
    background?: StringFieldUpdateOperationsInput | string
    clanWarId?: NullableStringFieldUpdateOperationsInput | string | null
    logs?: LogUncheckedUpdateManyWithoutFightNestedInput
    favoritedBy?: UserUncheckedUpdateManyWithoutFavoriteFightsNestedInput
  }

  export type FightUncheckedUpdateManyWithoutBrute2Input = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    brute1Id?: StringFieldUpdateOperationsInput | string
    winner?: StringFieldUpdateOperationsInput | string
    loser?: StringFieldUpdateOperationsInput | string
    steps?: StringFieldUpdateOperationsInput | string
    fighters?: StringFieldUpdateOperationsInput | string
    tournamentId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentStep?: IntFieldUpdateOperationsInput | number
    modifiers?: FightUpdatemodifiersInput | $Enums.FightModifier[]
    background?: StringFieldUpdateOperationsInput | string
    clanWarId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LogUpdateWithoutCurrentBruteInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumLogTypeFieldUpdateOperationsInput | $Enums.LogType
    level?: NullableIntFieldUpdateOperationsInput | number | null
    brute?: NullableStringFieldUpdateOperationsInput | string | null
    xp?: NullableIntFieldUpdateOperationsInput | number | null
    gold?: NullableIntFieldUpdateOperationsInput | number | null
    template?: NullableStringFieldUpdateOperationsInput | string | null
    fight?: FightUpdateOneWithoutLogsNestedInput
    destinyChoice?: DestinyChoiceUpdateOneWithoutLogsNestedInput
  }

  export type LogUncheckedUpdateWithoutCurrentBruteInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumLogTypeFieldUpdateOperationsInput | $Enums.LogType
    level?: NullableIntFieldUpdateOperationsInput | number | null
    brute?: NullableStringFieldUpdateOperationsInput | string | null
    fightId?: NullableStringFieldUpdateOperationsInput | string | null
    xp?: NullableIntFieldUpdateOperationsInput | number | null
    gold?: NullableIntFieldUpdateOperationsInput | number | null
    template?: NullableStringFieldUpdateOperationsInput | string | null
    destinyChoiceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LogUncheckedUpdateManyWithoutCurrentBruteInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumLogTypeFieldUpdateOperationsInput | $Enums.LogType
    level?: NullableIntFieldUpdateOperationsInput | number | null
    brute?: NullableStringFieldUpdateOperationsInput | string | null
    fightId?: NullableStringFieldUpdateOperationsInput | string | null
    xp?: NullableIntFieldUpdateOperationsInput | number | null
    gold?: NullableIntFieldUpdateOperationsInput | number | null
    template?: NullableStringFieldUpdateOperationsInput | string | null
    destinyChoiceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DestinyChoiceUpdateWithoutBruteInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: DestinyChoiceUpdatepathInput | $Enums.DestinyChoiceSide[]
    type?: EnumDestinyChoiceTypeFieldUpdateOperationsInput | $Enums.DestinyChoiceType
    skill?: NullableEnumSkillNameFieldUpdateOperationsInput | $Enums.SkillName | null
    weapon?: NullableEnumWeaponNameFieldUpdateOperationsInput | $Enums.WeaponName | null
    pet?: NullableEnumPetNameFieldUpdateOperationsInput | $Enums.PetName | null
    originalSkill?: NullableEnumSkillNameFieldUpdateOperationsInput | $Enums.SkillName | null
    originalWeapon?: NullableEnumWeaponNameFieldUpdateOperationsInput | $Enums.WeaponName | null
    originalPet?: NullableEnumPetNameFieldUpdateOperationsInput | $Enums.PetName | null
    stat1?: NullableEnumBruteStatFieldUpdateOperationsInput | $Enums.BruteStat | null
    stat1Value?: NullableIntFieldUpdateOperationsInput | number | null
    stat2?: NullableEnumBruteStatFieldUpdateOperationsInput | $Enums.BruteStat | null
    stat2Value?: NullableIntFieldUpdateOperationsInput | number | null
    logs?: LogUpdateManyWithoutDestinyChoiceNestedInput
  }

  export type DestinyChoiceUncheckedUpdateWithoutBruteInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: DestinyChoiceUpdatepathInput | $Enums.DestinyChoiceSide[]
    type?: EnumDestinyChoiceTypeFieldUpdateOperationsInput | $Enums.DestinyChoiceType
    skill?: NullableEnumSkillNameFieldUpdateOperationsInput | $Enums.SkillName | null
    weapon?: NullableEnumWeaponNameFieldUpdateOperationsInput | $Enums.WeaponName | null
    pet?: NullableEnumPetNameFieldUpdateOperationsInput | $Enums.PetName | null
    originalSkill?: NullableEnumSkillNameFieldUpdateOperationsInput | $Enums.SkillName | null
    originalWeapon?: NullableEnumWeaponNameFieldUpdateOperationsInput | $Enums.WeaponName | null
    originalPet?: NullableEnumPetNameFieldUpdateOperationsInput | $Enums.PetName | null
    stat1?: NullableEnumBruteStatFieldUpdateOperationsInput | $Enums.BruteStat | null
    stat1Value?: NullableIntFieldUpdateOperationsInput | number | null
    stat2?: NullableEnumBruteStatFieldUpdateOperationsInput | $Enums.BruteStat | null
    stat2Value?: NullableIntFieldUpdateOperationsInput | number | null
    logs?: LogUncheckedUpdateManyWithoutDestinyChoiceNestedInput
  }

  export type DestinyChoiceUncheckedUpdateManyWithoutBruteInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: DestinyChoiceUpdatepathInput | $Enums.DestinyChoiceSide[]
    type?: EnumDestinyChoiceTypeFieldUpdateOperationsInput | $Enums.DestinyChoiceType
    skill?: NullableEnumSkillNameFieldUpdateOperationsInput | $Enums.SkillName | null
    weapon?: NullableEnumWeaponNameFieldUpdateOperationsInput | $Enums.WeaponName | null
    pet?: NullableEnumPetNameFieldUpdateOperationsInput | $Enums.PetName | null
    originalSkill?: NullableEnumSkillNameFieldUpdateOperationsInput | $Enums.SkillName | null
    originalWeapon?: NullableEnumWeaponNameFieldUpdateOperationsInput | $Enums.WeaponName | null
    originalPet?: NullableEnumPetNameFieldUpdateOperationsInput | $Enums.PetName | null
    stat1?: NullableEnumBruteStatFieldUpdateOperationsInput | $Enums.BruteStat | null
    stat1Value?: NullableIntFieldUpdateOperationsInput | number | null
    stat2?: NullableEnumBruteStatFieldUpdateOperationsInput | $Enums.BruteStat | null
    stat2Value?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TournamentUpdateWithoutParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumTournamentTypeFieldUpdateOperationsInput | $Enums.TournamentType
    rounds?: IntFieldUpdateOperationsInput | number
    fights?: FightUpdateManyWithoutTournamentNestedInput
    event?: EventUpdateOneWithoutTournamentNestedInput
  }

  export type TournamentUncheckedUpdateWithoutParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumTournamentTypeFieldUpdateOperationsInput | $Enums.TournamentType
    rounds?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    fights?: FightUncheckedUpdateManyWithoutTournamentNestedInput
  }

  export type TournamentUncheckedUpdateManyWithoutParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumTournamentTypeFieldUpdateOperationsInput | $Enums.TournamentType
    rounds?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BruteUpdateWithoutOpponentOfInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: IntFieldUpdateOperationsInput | number
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    tournamentWins?: IntFieldUpdateOperationsInput | number
    resets?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutBrutesNestedInput
    master?: BruteUpdateOneWithoutPupilsNestedInput
    pupils?: BruteUpdateManyWithoutMasterNestedInput
    clan?: ClanUpdateOneWithoutBrutesNestedInput
    fights?: FightUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUpdateManyWithoutBrute2NestedInput
    logs?: LogUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUpdateManyWithoutOpponentOfNestedInput
    achievements?: AchievementUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUpdateManyWithoutBruteNestedInput
    titles?: TitleUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUpdateManyWithoutAuthorNestedInput
    wantToJoinClan?: ClanUpdateOneWithoutJoinRequestsNestedInput
    threads?: ClanThreadUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUpdateManyWithoutBruteNestedInput
    followers?: UserUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUpdateManyWithoutDefendersNestedInput
    event?: EventUpdateOneWithoutBrutesNestedInput
    wonEvents?: EventUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateWithoutOpponentOfInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
    pupils?: BruteUncheckedUpdateManyWithoutMasterNestedInput
    fights?: FightUncheckedUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUncheckedUpdateManyWithoutBrute2NestedInput
    logs?: LogUncheckedUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUncheckedUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUncheckedUpdateManyWithoutOpponentOfNestedInput
    achievements?: AchievementUncheckedUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUncheckedUpdateManyWithoutBruteNestedInput
    titles?: TitleUncheckedUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUncheckedUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUncheckedUpdateManyWithoutAuthorNestedInput
    threads?: ClanThreadUncheckedUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUncheckedUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUncheckedUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUncheckedUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUncheckedUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUncheckedUpdateManyWithoutBruteNestedInput
    followers?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedUpdateManyWithoutDefendersNestedInput
    wonEvents?: EventUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateManyWithoutOpponentOfInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
  }

  export type BruteUpdateWithoutOpponentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: IntFieldUpdateOperationsInput | number
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    tournamentWins?: IntFieldUpdateOperationsInput | number
    resets?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutBrutesNestedInput
    master?: BruteUpdateOneWithoutPupilsNestedInput
    pupils?: BruteUpdateManyWithoutMasterNestedInput
    clan?: ClanUpdateOneWithoutBrutesNestedInput
    fights?: FightUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUpdateManyWithoutBrute2NestedInput
    logs?: LogUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUpdateManyWithoutParticipantsNestedInput
    opponentOf?: BruteUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUpdateManyWithoutBruteNestedInput
    titles?: TitleUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUpdateManyWithoutAuthorNestedInput
    wantToJoinClan?: ClanUpdateOneWithoutJoinRequestsNestedInput
    threads?: ClanThreadUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUpdateManyWithoutBruteNestedInput
    followers?: UserUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUpdateManyWithoutDefendersNestedInput
    event?: EventUpdateOneWithoutBrutesNestedInput
    wonEvents?: EventUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateWithoutOpponentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
    pupils?: BruteUncheckedUpdateManyWithoutMasterNestedInput
    fights?: FightUncheckedUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUncheckedUpdateManyWithoutBrute2NestedInput
    logs?: LogUncheckedUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUncheckedUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutParticipantsNestedInput
    opponentOf?: BruteUncheckedUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUncheckedUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUncheckedUpdateManyWithoutBruteNestedInput
    titles?: TitleUncheckedUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUncheckedUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUncheckedUpdateManyWithoutAuthorNestedInput
    threads?: ClanThreadUncheckedUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUncheckedUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUncheckedUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUncheckedUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUncheckedUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUncheckedUpdateManyWithoutBruteNestedInput
    followers?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedUpdateManyWithoutDefendersNestedInput
    wonEvents?: EventUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateManyWithoutOpponentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
  }

  export type AchievementUpdateWithoutBruteInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: EnumAchievementNameFieldUpdateOperationsInput | $Enums.AchievementName
    count?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutAchievementsNestedInput
  }

  export type AchievementUncheckedUpdateWithoutBruteInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: EnumAchievementNameFieldUpdateOperationsInput | $Enums.AchievementName
    count?: IntFieldUpdateOperationsInput | number
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AchievementUncheckedUpdateManyWithoutBruteInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: EnumAchievementNameFieldUpdateOperationsInput | $Enums.AchievementName
    count?: IntFieldUpdateOperationsInput | number
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BruteReportUpdateWithoutBruteInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: EnumBruteReportReasonFieldUpdateOperationsInput | $Enums.BruteReportReason
    count?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBruteReportStatusFieldUpdateOperationsInput | $Enums.BruteReportStatus
    users?: UserUpdateManyWithoutReportsNestedInput
  }

  export type BruteReportUncheckedUpdateWithoutBruteInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: EnumBruteReportReasonFieldUpdateOperationsInput | $Enums.BruteReportReason
    count?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBruteReportStatusFieldUpdateOperationsInput | $Enums.BruteReportStatus
    users?: UserUncheckedUpdateManyWithoutReportsNestedInput
  }

  export type BruteReportUncheckedUpdateManyWithoutBruteInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: EnumBruteReportReasonFieldUpdateOperationsInput | $Enums.BruteReportReason
    count?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBruteReportStatusFieldUpdateOperationsInput | $Enums.BruteReportStatus
  }

  export type TitleUpdateWithoutBrutesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: EnumAchievementNameFieldUpdateOperationsInput | $Enums.AchievementName
    count?: IntFieldUpdateOperationsInput | number
  }

  export type TitleUncheckedUpdateWithoutBrutesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: EnumAchievementNameFieldUpdateOperationsInput | $Enums.AchievementName
    count?: IntFieldUpdateOperationsInput | number
  }

  export type TitleUncheckedUpdateManyWithoutBrutesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: EnumAchievementNameFieldUpdateOperationsInput | $Enums.AchievementName
    count?: IntFieldUpdateOperationsInput | number
  }

  export type ClanPostUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: StringFieldUpdateOperationsInput | string
    thread?: ClanThreadUpdateOneRequiredWithoutPostsNestedInput
  }

  export type ClanPostUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    threadId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: StringFieldUpdateOperationsInput | string
  }

  export type ClanPostUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    threadId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: StringFieldUpdateOperationsInput | string
  }

  export type ClanThreadUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    locked?: BoolFieldUpdateOperationsInput | boolean
    pinned?: BoolFieldUpdateOperationsInput | boolean
    postCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clan?: ClanUpdateOneRequiredWithoutThreadsNestedInput
    posts?: ClanPostUpdateManyWithoutThreadNestedInput
  }

  export type ClanThreadUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    clanId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    locked?: BoolFieldUpdateOperationsInput | boolean
    pinned?: BoolFieldUpdateOperationsInput | boolean
    postCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: ClanPostUncheckedUpdateManyWithoutThreadNestedInput
  }

  export type ClanThreadUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    clanId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    locked?: BoolFieldUpdateOperationsInput | boolean
    pinned?: BoolFieldUpdateOperationsInput | boolean
    postCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryItemUpdateWithoutBruteInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumInventoryItemTypeFieldUpdateOperationsInput | $Enums.InventoryItemType
    count?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutInventoryNestedInput
  }

  export type InventoryItemUncheckedUpdateWithoutBruteInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumInventoryItemTypeFieldUpdateOperationsInput | $Enums.InventoryItemType
    count?: IntFieldUpdateOperationsInput | number
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InventoryItemUncheckedUpdateManyWithoutBruteInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumInventoryItemTypeFieldUpdateOperationsInput | $Enums.InventoryItemType
    count?: IntFieldUpdateOperationsInput | number
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TournamentAchievementUpdateWithoutBruteInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    achievement?: EnumAchievementNameFieldUpdateOperationsInput | $Enums.AchievementName
    achievementCount?: IntFieldUpdateOperationsInput | number
  }

  export type TournamentAchievementUncheckedUpdateWithoutBruteInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    achievement?: EnumAchievementNameFieldUpdateOperationsInput | $Enums.AchievementName
    achievementCount?: IntFieldUpdateOperationsInput | number
  }

  export type TournamentAchievementUncheckedUpdateManyWithoutBruteInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    achievement?: EnumAchievementNameFieldUpdateOperationsInput | $Enums.AchievementName
    achievementCount?: IntFieldUpdateOperationsInput | number
  }

  export type TournamentXpUpdateWithoutBruteInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    xp?: IntFieldUpdateOperationsInput | number
  }

  export type TournamentXpUncheckedUpdateWithoutBruteInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    xp?: IntFieldUpdateOperationsInput | number
  }

  export type TournamentXpUncheckedUpdateManyWithoutBruteInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    xp?: IntFieldUpdateOperationsInput | number
  }

  export type BossDamageUpdateWithoutBruteInput = {
    id?: StringFieldUpdateOperationsInput | string
    damage?: IntFieldUpdateOperationsInput | number
    clan?: ClanUpdateOneRequiredWithoutBossDamagesNestedInput
  }

  export type BossDamageUncheckedUpdateWithoutBruteInput = {
    id?: StringFieldUpdateOperationsInput | string
    clanId?: StringFieldUpdateOperationsInput | string
    damage?: IntFieldUpdateOperationsInput | number
  }

  export type BossDamageUncheckedUpdateManyWithoutBruteInput = {
    id?: StringFieldUpdateOperationsInput | string
    clanId?: StringFieldUpdateOperationsInput | string
    damage?: IntFieldUpdateOperationsInput | number
  }

  export type UserUpdateWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    lang?: EnumLangFieldUpdateOperationsInput | $Enums.Lang
    name?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
    moderator?: BoolFieldUpdateOperationsInput | boolean
    connexionToken?: StringFieldUpdateOperationsInput | string
    bruteLimit?: IntFieldUpdateOperationsInput | number
    gold?: IntFieldUpdateOperationsInput | number
    fightSpeed?: IntFieldUpdateOperationsInput | number
    backgroundMusic?: BoolFieldUpdateOperationsInput | boolean
    dinorpgDone?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ips?: UserUpdateipsInput | string[]
    bannedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    lastReleaseSeen?: NullableStringFieldUpdateOperationsInput | string | null
    displayVersusPage?: BoolFieldUpdateOperationsInput | boolean
    brutes?: BruteUpdateManyWithoutUserNestedInput
    achievements?: AchievementUpdateManyWithoutUserNestedInput
    reports?: BruteReportUpdateManyWithoutUsersNestedInput
    tournamentGolds?: TournamentGoldUpdateManyWithoutUserNestedInput
    inventory?: InventoryItemUpdateManyWithoutUserNestedInput
    favoriteFights?: FightUpdateManyWithoutFavoritedByNestedInput
  }

  export type UserUncheckedUpdateWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    lang?: EnumLangFieldUpdateOperationsInput | $Enums.Lang
    name?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
    moderator?: BoolFieldUpdateOperationsInput | boolean
    connexionToken?: StringFieldUpdateOperationsInput | string
    bruteLimit?: IntFieldUpdateOperationsInput | number
    gold?: IntFieldUpdateOperationsInput | number
    fightSpeed?: IntFieldUpdateOperationsInput | number
    backgroundMusic?: BoolFieldUpdateOperationsInput | boolean
    dinorpgDone?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ips?: UserUpdateipsInput | string[]
    bannedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    lastReleaseSeen?: NullableStringFieldUpdateOperationsInput | string | null
    displayVersusPage?: BoolFieldUpdateOperationsInput | boolean
    brutes?: BruteUncheckedUpdateManyWithoutUserNestedInput
    achievements?: AchievementUncheckedUpdateManyWithoutUserNestedInput
    reports?: BruteReportUncheckedUpdateManyWithoutUsersNestedInput
    tournamentGolds?: TournamentGoldUncheckedUpdateManyWithoutUserNestedInput
    inventory?: InventoryItemUncheckedUpdateManyWithoutUserNestedInput
    favoriteFights?: FightUncheckedUpdateManyWithoutFavoritedByNestedInput
  }

  export type UserUncheckedUpdateManyWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    lang?: EnumLangFieldUpdateOperationsInput | $Enums.Lang
    name?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
    moderator?: BoolFieldUpdateOperationsInput | boolean
    connexionToken?: StringFieldUpdateOperationsInput | string
    bruteLimit?: IntFieldUpdateOperationsInput | number
    gold?: IntFieldUpdateOperationsInput | number
    fightSpeed?: IntFieldUpdateOperationsInput | number
    backgroundMusic?: BoolFieldUpdateOperationsInput | boolean
    dinorpgDone?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ips?: UserUpdateipsInput | string[]
    bannedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    lastReleaseSeen?: NullableStringFieldUpdateOperationsInput | string | null
    displayVersusPage?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ClanWarFightersUpdateWithoutAttackersInput = {
    id?: StringFieldUpdateOperationsInput | string
    day?: IntFieldUpdateOperationsInput | number
    clanWar?: ClanWarUpdateOneRequiredWithoutFightersNestedInput
    defenders?: BruteUpdateManyWithoutInClanWarDefenderFightersNestedInput
  }

  export type ClanWarFightersUncheckedUpdateWithoutAttackersInput = {
    id?: StringFieldUpdateOperationsInput | string
    clanWarId?: StringFieldUpdateOperationsInput | string
    day?: IntFieldUpdateOperationsInput | number
    defenders?: BruteUncheckedUpdateManyWithoutInClanWarDefenderFightersNestedInput
  }

  export type ClanWarFightersUncheckedUpdateManyWithoutAttackersInput = {
    id?: StringFieldUpdateOperationsInput | string
    clanWarId?: StringFieldUpdateOperationsInput | string
    day?: IntFieldUpdateOperationsInput | number
  }

  export type ClanWarFightersUpdateWithoutDefendersInput = {
    id?: StringFieldUpdateOperationsInput | string
    day?: IntFieldUpdateOperationsInput | number
    clanWar?: ClanWarUpdateOneRequiredWithoutFightersNestedInput
    attackers?: BruteUpdateManyWithoutInClanWarAttackerFightersNestedInput
  }

  export type ClanWarFightersUncheckedUpdateWithoutDefendersInput = {
    id?: StringFieldUpdateOperationsInput | string
    clanWarId?: StringFieldUpdateOperationsInput | string
    day?: IntFieldUpdateOperationsInput | number
    attackers?: BruteUncheckedUpdateManyWithoutInClanWarAttackerFightersNestedInput
  }

  export type ClanWarFightersUncheckedUpdateManyWithoutDefendersInput = {
    id?: StringFieldUpdateOperationsInput | string
    clanWarId?: StringFieldUpdateOperationsInput | string
    day?: IntFieldUpdateOperationsInput | number
  }

  export type EventUpdateWithoutWinnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    maxLevel?: IntFieldUpdateOperationsInput | number
    maxRound?: IntFieldUpdateOperationsInput | number
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortedBrutes?: EventUpdatesortedBrutesInput | string[]
    brutes?: BruteUpdateManyWithoutEventNestedInput
    tournament?: TournamentUpdateOneWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutWinnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    maxLevel?: IntFieldUpdateOperationsInput | number
    maxRound?: IntFieldUpdateOperationsInput | number
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortedBrutes?: EventUpdatesortedBrutesInput | string[]
    brutes?: BruteUncheckedUpdateManyWithoutEventNestedInput
    tournament?: TournamentUncheckedUpdateOneWithoutEventNestedInput
  }

  export type EventUncheckedUpdateManyWithoutWinnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    maxLevel?: IntFieldUpdateOperationsInput | number
    maxRound?: IntFieldUpdateOperationsInput | number
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortedBrutes?: EventUpdatesortedBrutesInput | string[]
  }

  export type LogCreateManyFightInput = {
    id?: string
    date?: Date | string
    currentBruteId: string
    type: $Enums.LogType
    level?: number | null
    brute?: string | null
    xp?: number | null
    gold?: number | null
    template?: string | null
    destinyChoiceId?: string | null
  }

  export type LogUpdateWithoutFightInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumLogTypeFieldUpdateOperationsInput | $Enums.LogType
    level?: NullableIntFieldUpdateOperationsInput | number | null
    brute?: NullableStringFieldUpdateOperationsInput | string | null
    xp?: NullableIntFieldUpdateOperationsInput | number | null
    gold?: NullableIntFieldUpdateOperationsInput | number | null
    template?: NullableStringFieldUpdateOperationsInput | string | null
    currentBrute?: BruteUpdateOneRequiredWithoutLogsNestedInput
    destinyChoice?: DestinyChoiceUpdateOneWithoutLogsNestedInput
  }

  export type LogUncheckedUpdateWithoutFightInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    currentBruteId?: StringFieldUpdateOperationsInput | string
    type?: EnumLogTypeFieldUpdateOperationsInput | $Enums.LogType
    level?: NullableIntFieldUpdateOperationsInput | number | null
    brute?: NullableStringFieldUpdateOperationsInput | string | null
    xp?: NullableIntFieldUpdateOperationsInput | number | null
    gold?: NullableIntFieldUpdateOperationsInput | number | null
    template?: NullableStringFieldUpdateOperationsInput | string | null
    destinyChoiceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LogUncheckedUpdateManyWithoutFightInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    currentBruteId?: StringFieldUpdateOperationsInput | string
    type?: EnumLogTypeFieldUpdateOperationsInput | $Enums.LogType
    level?: NullableIntFieldUpdateOperationsInput | number | null
    brute?: NullableStringFieldUpdateOperationsInput | string | null
    xp?: NullableIntFieldUpdateOperationsInput | number | null
    gold?: NullableIntFieldUpdateOperationsInput | number | null
    template?: NullableStringFieldUpdateOperationsInput | string | null
    destinyChoiceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpdateWithoutFavoriteFightsInput = {
    id?: StringFieldUpdateOperationsInput | string
    lang?: EnumLangFieldUpdateOperationsInput | $Enums.Lang
    name?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
    moderator?: BoolFieldUpdateOperationsInput | boolean
    connexionToken?: StringFieldUpdateOperationsInput | string
    bruteLimit?: IntFieldUpdateOperationsInput | number
    gold?: IntFieldUpdateOperationsInput | number
    fightSpeed?: IntFieldUpdateOperationsInput | number
    backgroundMusic?: BoolFieldUpdateOperationsInput | boolean
    dinorpgDone?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ips?: UserUpdateipsInput | string[]
    bannedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    lastReleaseSeen?: NullableStringFieldUpdateOperationsInput | string | null
    displayVersusPage?: BoolFieldUpdateOperationsInput | boolean
    brutes?: BruteUpdateManyWithoutUserNestedInput
    achievements?: AchievementUpdateManyWithoutUserNestedInput
    reports?: BruteReportUpdateManyWithoutUsersNestedInput
    tournamentGolds?: TournamentGoldUpdateManyWithoutUserNestedInput
    inventory?: InventoryItemUpdateManyWithoutUserNestedInput
    following?: BruteUpdateManyWithoutFollowersNestedInput
  }

  export type UserUncheckedUpdateWithoutFavoriteFightsInput = {
    id?: StringFieldUpdateOperationsInput | string
    lang?: EnumLangFieldUpdateOperationsInput | $Enums.Lang
    name?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
    moderator?: BoolFieldUpdateOperationsInput | boolean
    connexionToken?: StringFieldUpdateOperationsInput | string
    bruteLimit?: IntFieldUpdateOperationsInput | number
    gold?: IntFieldUpdateOperationsInput | number
    fightSpeed?: IntFieldUpdateOperationsInput | number
    backgroundMusic?: BoolFieldUpdateOperationsInput | boolean
    dinorpgDone?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ips?: UserUpdateipsInput | string[]
    bannedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    lastReleaseSeen?: NullableStringFieldUpdateOperationsInput | string | null
    displayVersusPage?: BoolFieldUpdateOperationsInput | boolean
    brutes?: BruteUncheckedUpdateManyWithoutUserNestedInput
    achievements?: AchievementUncheckedUpdateManyWithoutUserNestedInput
    reports?: BruteReportUncheckedUpdateManyWithoutUsersNestedInput
    tournamentGolds?: TournamentGoldUncheckedUpdateManyWithoutUserNestedInput
    inventory?: InventoryItemUncheckedUpdateManyWithoutUserNestedInput
    following?: BruteUncheckedUpdateManyWithoutFollowersNestedInput
  }

  export type UserUncheckedUpdateManyWithoutFavoriteFightsInput = {
    id?: StringFieldUpdateOperationsInput | string
    lang?: EnumLangFieldUpdateOperationsInput | $Enums.Lang
    name?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
    moderator?: BoolFieldUpdateOperationsInput | boolean
    connexionToken?: StringFieldUpdateOperationsInput | string
    bruteLimit?: IntFieldUpdateOperationsInput | number
    gold?: IntFieldUpdateOperationsInput | number
    fightSpeed?: IntFieldUpdateOperationsInput | number
    backgroundMusic?: BoolFieldUpdateOperationsInput | boolean
    dinorpgDone?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ips?: UserUpdateipsInput | string[]
    bannedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    lastReleaseSeen?: NullableStringFieldUpdateOperationsInput | string | null
    displayVersusPage?: BoolFieldUpdateOperationsInput | boolean
  }

  export type LogCreateManyDestinyChoiceInput = {
    id?: string
    date?: Date | string
    currentBruteId: string
    type: $Enums.LogType
    level?: number | null
    brute?: string | null
    fightId?: string | null
    xp?: number | null
    gold?: number | null
    template?: string | null
  }

  export type LogUpdateWithoutDestinyChoiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumLogTypeFieldUpdateOperationsInput | $Enums.LogType
    level?: NullableIntFieldUpdateOperationsInput | number | null
    brute?: NullableStringFieldUpdateOperationsInput | string | null
    xp?: NullableIntFieldUpdateOperationsInput | number | null
    gold?: NullableIntFieldUpdateOperationsInput | number | null
    template?: NullableStringFieldUpdateOperationsInput | string | null
    currentBrute?: BruteUpdateOneRequiredWithoutLogsNestedInput
    fight?: FightUpdateOneWithoutLogsNestedInput
  }

  export type LogUncheckedUpdateWithoutDestinyChoiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    currentBruteId?: StringFieldUpdateOperationsInput | string
    type?: EnumLogTypeFieldUpdateOperationsInput | $Enums.LogType
    level?: NullableIntFieldUpdateOperationsInput | number | null
    brute?: NullableStringFieldUpdateOperationsInput | string | null
    fightId?: NullableStringFieldUpdateOperationsInput | string | null
    xp?: NullableIntFieldUpdateOperationsInput | number | null
    gold?: NullableIntFieldUpdateOperationsInput | number | null
    template?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LogUncheckedUpdateManyWithoutDestinyChoiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    currentBruteId?: StringFieldUpdateOperationsInput | string
    type?: EnumLogTypeFieldUpdateOperationsInput | $Enums.LogType
    level?: NullableIntFieldUpdateOperationsInput | number | null
    brute?: NullableStringFieldUpdateOperationsInput | string | null
    fightId?: NullableStringFieldUpdateOperationsInput | string | null
    xp?: NullableIntFieldUpdateOperationsInput | number | null
    gold?: NullableIntFieldUpdateOperationsInput | number | null
    template?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FightCreateManyTournamentInput = {
    id?: string
    date?: Date | string
    brute1Id: string
    brute2Id?: string | null
    winner: string
    loser: string
    steps: string
    fighters: string
    tournamentStep?: number
    modifiers?: FightCreatemodifiersInput | $Enums.FightModifier[]
    background?: string
    clanWarId?: string | null
  }

  export type BruteUpdateWithoutTournamentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: IntFieldUpdateOperationsInput | number
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    tournamentWins?: IntFieldUpdateOperationsInput | number
    resets?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutBrutesNestedInput
    master?: BruteUpdateOneWithoutPupilsNestedInput
    pupils?: BruteUpdateManyWithoutMasterNestedInput
    clan?: ClanUpdateOneWithoutBrutesNestedInput
    fights?: FightUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUpdateManyWithoutBrute2NestedInput
    logs?: LogUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUpdateManyWithoutBruteNestedInput
    opponents?: BruteUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUpdateManyWithoutBruteNestedInput
    titles?: TitleUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUpdateManyWithoutAuthorNestedInput
    wantToJoinClan?: ClanUpdateOneWithoutJoinRequestsNestedInput
    threads?: ClanThreadUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUpdateManyWithoutBruteNestedInput
    followers?: UserUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUpdateManyWithoutDefendersNestedInput
    event?: EventUpdateOneWithoutBrutesNestedInput
    wonEvents?: EventUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateWithoutTournamentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
    pupils?: BruteUncheckedUpdateManyWithoutMasterNestedInput
    fights?: FightUncheckedUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUncheckedUpdateManyWithoutBrute2NestedInput
    logs?: LogUncheckedUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUncheckedUpdateManyWithoutBruteNestedInput
    opponents?: BruteUncheckedUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUncheckedUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUncheckedUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUncheckedUpdateManyWithoutBruteNestedInput
    titles?: TitleUncheckedUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUncheckedUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUncheckedUpdateManyWithoutAuthorNestedInput
    threads?: ClanThreadUncheckedUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUncheckedUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUncheckedUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUncheckedUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUncheckedUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUncheckedUpdateManyWithoutBruteNestedInput
    followers?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedUpdateManyWithoutDefendersNestedInput
    wonEvents?: EventUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateManyWithoutTournamentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
  }

  export type FightUpdateWithoutTournamentInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    winner?: StringFieldUpdateOperationsInput | string
    loser?: StringFieldUpdateOperationsInput | string
    steps?: StringFieldUpdateOperationsInput | string
    fighters?: StringFieldUpdateOperationsInput | string
    tournamentStep?: IntFieldUpdateOperationsInput | number
    modifiers?: FightUpdatemodifiersInput | $Enums.FightModifier[]
    background?: StringFieldUpdateOperationsInput | string
    brute1?: BruteUpdateOneRequiredWithoutFightsNestedInput
    brute2?: BruteUpdateOneWithoutFightsAsAdversaryNestedInput
    logs?: LogUpdateManyWithoutFightNestedInput
    favoritedBy?: UserUpdateManyWithoutFavoriteFightsNestedInput
    clanWar?: ClanWarUpdateOneWithoutFightsNestedInput
  }

  export type FightUncheckedUpdateWithoutTournamentInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    brute1Id?: StringFieldUpdateOperationsInput | string
    brute2Id?: NullableStringFieldUpdateOperationsInput | string | null
    winner?: StringFieldUpdateOperationsInput | string
    loser?: StringFieldUpdateOperationsInput | string
    steps?: StringFieldUpdateOperationsInput | string
    fighters?: StringFieldUpdateOperationsInput | string
    tournamentStep?: IntFieldUpdateOperationsInput | number
    modifiers?: FightUpdatemodifiersInput | $Enums.FightModifier[]
    background?: StringFieldUpdateOperationsInput | string
    clanWarId?: NullableStringFieldUpdateOperationsInput | string | null
    logs?: LogUncheckedUpdateManyWithoutFightNestedInput
    favoritedBy?: UserUncheckedUpdateManyWithoutFavoriteFightsNestedInput
  }

  export type FightUncheckedUpdateManyWithoutTournamentInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    brute1Id?: StringFieldUpdateOperationsInput | string
    brute2Id?: NullableStringFieldUpdateOperationsInput | string | null
    winner?: StringFieldUpdateOperationsInput | string
    loser?: StringFieldUpdateOperationsInput | string
    steps?: StringFieldUpdateOperationsInput | string
    fighters?: StringFieldUpdateOperationsInput | string
    tournamentStep?: IntFieldUpdateOperationsInput | number
    modifiers?: FightUpdatemodifiersInput | $Enums.FightModifier[]
    background?: StringFieldUpdateOperationsInput | string
    clanWarId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BruteUpdateWithoutTitlesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: IntFieldUpdateOperationsInput | number
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    tournamentWins?: IntFieldUpdateOperationsInput | number
    resets?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutBrutesNestedInput
    master?: BruteUpdateOneWithoutPupilsNestedInput
    pupils?: BruteUpdateManyWithoutMasterNestedInput
    clan?: ClanUpdateOneWithoutBrutesNestedInput
    fights?: FightUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUpdateManyWithoutBrute2NestedInput
    logs?: LogUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUpdateManyWithoutBruteNestedInput
    masterOfClan?: ClanUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUpdateManyWithoutAuthorNestedInput
    wantToJoinClan?: ClanUpdateOneWithoutJoinRequestsNestedInput
    threads?: ClanThreadUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUpdateManyWithoutBruteNestedInput
    followers?: UserUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUpdateManyWithoutDefendersNestedInput
    event?: EventUpdateOneWithoutBrutesNestedInput
    wonEvents?: EventUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateWithoutTitlesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
    pupils?: BruteUncheckedUpdateManyWithoutMasterNestedInput
    fights?: FightUncheckedUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUncheckedUpdateManyWithoutBrute2NestedInput
    logs?: LogUncheckedUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUncheckedUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUncheckedUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUncheckedUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUncheckedUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUncheckedUpdateManyWithoutBruteNestedInput
    masterOfClan?: ClanUncheckedUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUncheckedUpdateManyWithoutAuthorNestedInput
    threads?: ClanThreadUncheckedUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUncheckedUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUncheckedUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUncheckedUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUncheckedUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUncheckedUpdateManyWithoutBruteNestedInput
    followers?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedUpdateManyWithoutDefendersNestedInput
    wonEvents?: EventUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateManyWithoutTitlesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
  }

  export type UserUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    lang?: EnumLangFieldUpdateOperationsInput | $Enums.Lang
    name?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
    moderator?: BoolFieldUpdateOperationsInput | boolean
    connexionToken?: StringFieldUpdateOperationsInput | string
    bruteLimit?: IntFieldUpdateOperationsInput | number
    gold?: IntFieldUpdateOperationsInput | number
    fightSpeed?: IntFieldUpdateOperationsInput | number
    backgroundMusic?: BoolFieldUpdateOperationsInput | boolean
    dinorpgDone?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ips?: UserUpdateipsInput | string[]
    bannedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    lastReleaseSeen?: NullableStringFieldUpdateOperationsInput | string | null
    displayVersusPage?: BoolFieldUpdateOperationsInput | boolean
    brutes?: BruteUpdateManyWithoutUserNestedInput
    achievements?: AchievementUpdateManyWithoutUserNestedInput
    tournamentGolds?: TournamentGoldUpdateManyWithoutUserNestedInput
    inventory?: InventoryItemUpdateManyWithoutUserNestedInput
    favoriteFights?: FightUpdateManyWithoutFavoritedByNestedInput
    following?: BruteUpdateManyWithoutFollowersNestedInput
  }

  export type UserUncheckedUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    lang?: EnumLangFieldUpdateOperationsInput | $Enums.Lang
    name?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
    moderator?: BoolFieldUpdateOperationsInput | boolean
    connexionToken?: StringFieldUpdateOperationsInput | string
    bruteLimit?: IntFieldUpdateOperationsInput | number
    gold?: IntFieldUpdateOperationsInput | number
    fightSpeed?: IntFieldUpdateOperationsInput | number
    backgroundMusic?: BoolFieldUpdateOperationsInput | boolean
    dinorpgDone?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ips?: UserUpdateipsInput | string[]
    bannedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    lastReleaseSeen?: NullableStringFieldUpdateOperationsInput | string | null
    displayVersusPage?: BoolFieldUpdateOperationsInput | boolean
    brutes?: BruteUncheckedUpdateManyWithoutUserNestedInput
    achievements?: AchievementUncheckedUpdateManyWithoutUserNestedInput
    tournamentGolds?: TournamentGoldUncheckedUpdateManyWithoutUserNestedInput
    inventory?: InventoryItemUncheckedUpdateManyWithoutUserNestedInput
    favoriteFights?: FightUncheckedUpdateManyWithoutFavoritedByNestedInput
    following?: BruteUncheckedUpdateManyWithoutFollowersNestedInput
  }

  export type UserUncheckedUpdateManyWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    lang?: EnumLangFieldUpdateOperationsInput | $Enums.Lang
    name?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
    moderator?: BoolFieldUpdateOperationsInput | boolean
    connexionToken?: StringFieldUpdateOperationsInput | string
    bruteLimit?: IntFieldUpdateOperationsInput | number
    gold?: IntFieldUpdateOperationsInput | number
    fightSpeed?: IntFieldUpdateOperationsInput | number
    backgroundMusic?: BoolFieldUpdateOperationsInput | boolean
    dinorpgDone?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ips?: UserUpdateipsInput | string[]
    bannedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    lastReleaseSeen?: NullableStringFieldUpdateOperationsInput | string | null
    displayVersusPage?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BruteCreateManyClanInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    userId?: string | null
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    masterId?: string | null
    pupilsCount?: number
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    wantToJoinClanId?: string | null
    tournamentWins?: number
    eventId?: string | null
    resets?: number
  }

  export type BruteCreateManyWantToJoinClanInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    userId?: string | null
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    masterId?: string | null
    pupilsCount?: number
    clanId?: string | null
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    tournamentWins?: number
    eventId?: string | null
    resets?: number
  }

  export type ClanThreadCreateManyClanInput = {
    id?: string
    creatorId: string
    title: string
    locked?: boolean
    pinned?: boolean
    postCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BossDamageCreateManyClanInput = {
    id?: string
    bruteId: string
    damage: number
  }

  export type ClanWarCreateManyAttackerInput = {
    id?: string
    duration?: number
    type?: $Enums.ClanWarType
    date?: Date | string
    status?: $Enums.ClanWarStatus
    attackerEloChange?: number
    attackerWins?: number
    defenderId: string
    defenderEloChange?: number
    defenderWins?: number
    winnerId?: string | null
  }

  export type ClanWarCreateManyDefenderInput = {
    id?: string
    duration?: number
    type?: $Enums.ClanWarType
    date?: Date | string
    status?: $Enums.ClanWarStatus
    attackerId: string
    attackerEloChange?: number
    attackerWins?: number
    defenderEloChange?: number
    defenderWins?: number
    winnerId?: string | null
  }

  export type ClanWarCreateManyWinnerInput = {
    id?: string
    duration?: number
    type?: $Enums.ClanWarType
    date?: Date | string
    status?: $Enums.ClanWarStatus
    attackerId: string
    attackerEloChange?: number
    attackerWins?: number
    defenderId: string
    defenderEloChange?: number
    defenderWins?: number
  }

  export type BruteUpdateWithoutClanInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: IntFieldUpdateOperationsInput | number
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    tournamentWins?: IntFieldUpdateOperationsInput | number
    resets?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutBrutesNestedInput
    master?: BruteUpdateOneWithoutPupilsNestedInput
    pupils?: BruteUpdateManyWithoutMasterNestedInput
    fights?: FightUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUpdateManyWithoutBrute2NestedInput
    logs?: LogUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUpdateManyWithoutBruteNestedInput
    titles?: TitleUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUpdateManyWithoutAuthorNestedInput
    wantToJoinClan?: ClanUpdateOneWithoutJoinRequestsNestedInput
    threads?: ClanThreadUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUpdateManyWithoutBruteNestedInput
    followers?: UserUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUpdateManyWithoutDefendersNestedInput
    event?: EventUpdateOneWithoutBrutesNestedInput
    wonEvents?: EventUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateWithoutClanInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
    pupils?: BruteUncheckedUpdateManyWithoutMasterNestedInput
    fights?: FightUncheckedUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUncheckedUpdateManyWithoutBrute2NestedInput
    logs?: LogUncheckedUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUncheckedUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUncheckedUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUncheckedUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUncheckedUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUncheckedUpdateManyWithoutBruteNestedInput
    titles?: TitleUncheckedUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUncheckedUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUncheckedUpdateManyWithoutAuthorNestedInput
    threads?: ClanThreadUncheckedUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUncheckedUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUncheckedUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUncheckedUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUncheckedUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUncheckedUpdateManyWithoutBruteNestedInput
    followers?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedUpdateManyWithoutDefendersNestedInput
    wonEvents?: EventUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateManyWithoutClanInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
  }

  export type BruteUpdateWithoutWantToJoinClanInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: IntFieldUpdateOperationsInput | number
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    tournamentWins?: IntFieldUpdateOperationsInput | number
    resets?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutBrutesNestedInput
    master?: BruteUpdateOneWithoutPupilsNestedInput
    pupils?: BruteUpdateManyWithoutMasterNestedInput
    clan?: ClanUpdateOneWithoutBrutesNestedInput
    fights?: FightUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUpdateManyWithoutBrute2NestedInput
    logs?: LogUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUpdateManyWithoutBruteNestedInput
    titles?: TitleUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUpdateManyWithoutAuthorNestedInput
    threads?: ClanThreadUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUpdateManyWithoutBruteNestedInput
    followers?: UserUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUpdateManyWithoutDefendersNestedInput
    event?: EventUpdateOneWithoutBrutesNestedInput
    wonEvents?: EventUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateWithoutWantToJoinClanInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
    pupils?: BruteUncheckedUpdateManyWithoutMasterNestedInput
    fights?: FightUncheckedUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUncheckedUpdateManyWithoutBrute2NestedInput
    logs?: LogUncheckedUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUncheckedUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUncheckedUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUncheckedUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUncheckedUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUncheckedUpdateManyWithoutBruteNestedInput
    titles?: TitleUncheckedUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUncheckedUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUncheckedUpdateManyWithoutAuthorNestedInput
    threads?: ClanThreadUncheckedUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUncheckedUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUncheckedUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUncheckedUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUncheckedUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUncheckedUpdateManyWithoutBruteNestedInput
    followers?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedUpdateManyWithoutDefendersNestedInput
    wonEvents?: EventUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateManyWithoutWantToJoinClanInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
  }

  export type ClanThreadUpdateWithoutClanInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    locked?: BoolFieldUpdateOperationsInput | boolean
    pinned?: BoolFieldUpdateOperationsInput | boolean
    postCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: BruteUpdateOneRequiredWithoutThreadsNestedInput
    posts?: ClanPostUpdateManyWithoutThreadNestedInput
  }

  export type ClanThreadUncheckedUpdateWithoutClanInput = {
    id?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    locked?: BoolFieldUpdateOperationsInput | boolean
    pinned?: BoolFieldUpdateOperationsInput | boolean
    postCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: ClanPostUncheckedUpdateManyWithoutThreadNestedInput
  }

  export type ClanThreadUncheckedUpdateManyWithoutClanInput = {
    id?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    locked?: BoolFieldUpdateOperationsInput | boolean
    pinned?: BoolFieldUpdateOperationsInput | boolean
    postCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BossDamageUpdateWithoutClanInput = {
    id?: StringFieldUpdateOperationsInput | string
    damage?: IntFieldUpdateOperationsInput | number
    brute?: BruteUpdateOneRequiredWithoutDamageOnBossesNestedInput
  }

  export type BossDamageUncheckedUpdateWithoutClanInput = {
    id?: StringFieldUpdateOperationsInput | string
    bruteId?: StringFieldUpdateOperationsInput | string
    damage?: IntFieldUpdateOperationsInput | number
  }

  export type BossDamageUncheckedUpdateManyWithoutClanInput = {
    id?: StringFieldUpdateOperationsInput | string
    bruteId?: StringFieldUpdateOperationsInput | string
    damage?: IntFieldUpdateOperationsInput | number
  }

  export type ClanWarUpdateWithoutAttackerInput = {
    id?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    type?: EnumClanWarTypeFieldUpdateOperationsInput | $Enums.ClanWarType
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumClanWarStatusFieldUpdateOperationsInput | $Enums.ClanWarStatus
    attackerEloChange?: IntFieldUpdateOperationsInput | number
    attackerWins?: IntFieldUpdateOperationsInput | number
    defenderEloChange?: IntFieldUpdateOperationsInput | number
    defenderWins?: IntFieldUpdateOperationsInput | number
    defender?: ClanUpdateOneRequiredWithoutDefensesNestedInput
    winner?: ClanUpdateOneWithoutWinsNestedInput
    fights?: FightUpdateManyWithoutClanWarNestedInput
    fighters?: ClanWarFightersUpdateManyWithoutClanWarNestedInput
  }

  export type ClanWarUncheckedUpdateWithoutAttackerInput = {
    id?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    type?: EnumClanWarTypeFieldUpdateOperationsInput | $Enums.ClanWarType
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumClanWarStatusFieldUpdateOperationsInput | $Enums.ClanWarStatus
    attackerEloChange?: IntFieldUpdateOperationsInput | number
    attackerWins?: IntFieldUpdateOperationsInput | number
    defenderId?: StringFieldUpdateOperationsInput | string
    defenderEloChange?: IntFieldUpdateOperationsInput | number
    defenderWins?: IntFieldUpdateOperationsInput | number
    winnerId?: NullableStringFieldUpdateOperationsInput | string | null
    fights?: FightUncheckedUpdateManyWithoutClanWarNestedInput
    fighters?: ClanWarFightersUncheckedUpdateManyWithoutClanWarNestedInput
  }

  export type ClanWarUncheckedUpdateManyWithoutAttackerInput = {
    id?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    type?: EnumClanWarTypeFieldUpdateOperationsInput | $Enums.ClanWarType
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumClanWarStatusFieldUpdateOperationsInput | $Enums.ClanWarStatus
    attackerEloChange?: IntFieldUpdateOperationsInput | number
    attackerWins?: IntFieldUpdateOperationsInput | number
    defenderId?: StringFieldUpdateOperationsInput | string
    defenderEloChange?: IntFieldUpdateOperationsInput | number
    defenderWins?: IntFieldUpdateOperationsInput | number
    winnerId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClanWarUpdateWithoutDefenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    type?: EnumClanWarTypeFieldUpdateOperationsInput | $Enums.ClanWarType
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumClanWarStatusFieldUpdateOperationsInput | $Enums.ClanWarStatus
    attackerEloChange?: IntFieldUpdateOperationsInput | number
    attackerWins?: IntFieldUpdateOperationsInput | number
    defenderEloChange?: IntFieldUpdateOperationsInput | number
    defenderWins?: IntFieldUpdateOperationsInput | number
    attacker?: ClanUpdateOneRequiredWithoutAttacksNestedInput
    winner?: ClanUpdateOneWithoutWinsNestedInput
    fights?: FightUpdateManyWithoutClanWarNestedInput
    fighters?: ClanWarFightersUpdateManyWithoutClanWarNestedInput
  }

  export type ClanWarUncheckedUpdateWithoutDefenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    type?: EnumClanWarTypeFieldUpdateOperationsInput | $Enums.ClanWarType
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumClanWarStatusFieldUpdateOperationsInput | $Enums.ClanWarStatus
    attackerId?: StringFieldUpdateOperationsInput | string
    attackerEloChange?: IntFieldUpdateOperationsInput | number
    attackerWins?: IntFieldUpdateOperationsInput | number
    defenderEloChange?: IntFieldUpdateOperationsInput | number
    defenderWins?: IntFieldUpdateOperationsInput | number
    winnerId?: NullableStringFieldUpdateOperationsInput | string | null
    fights?: FightUncheckedUpdateManyWithoutClanWarNestedInput
    fighters?: ClanWarFightersUncheckedUpdateManyWithoutClanWarNestedInput
  }

  export type ClanWarUncheckedUpdateManyWithoutDefenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    type?: EnumClanWarTypeFieldUpdateOperationsInput | $Enums.ClanWarType
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumClanWarStatusFieldUpdateOperationsInput | $Enums.ClanWarStatus
    attackerId?: StringFieldUpdateOperationsInput | string
    attackerEloChange?: IntFieldUpdateOperationsInput | number
    attackerWins?: IntFieldUpdateOperationsInput | number
    defenderEloChange?: IntFieldUpdateOperationsInput | number
    defenderWins?: IntFieldUpdateOperationsInput | number
    winnerId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClanWarUpdateWithoutWinnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    type?: EnumClanWarTypeFieldUpdateOperationsInput | $Enums.ClanWarType
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumClanWarStatusFieldUpdateOperationsInput | $Enums.ClanWarStatus
    attackerEloChange?: IntFieldUpdateOperationsInput | number
    attackerWins?: IntFieldUpdateOperationsInput | number
    defenderEloChange?: IntFieldUpdateOperationsInput | number
    defenderWins?: IntFieldUpdateOperationsInput | number
    attacker?: ClanUpdateOneRequiredWithoutAttacksNestedInput
    defender?: ClanUpdateOneRequiredWithoutDefensesNestedInput
    fights?: FightUpdateManyWithoutClanWarNestedInput
    fighters?: ClanWarFightersUpdateManyWithoutClanWarNestedInput
  }

  export type ClanWarUncheckedUpdateWithoutWinnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    type?: EnumClanWarTypeFieldUpdateOperationsInput | $Enums.ClanWarType
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumClanWarStatusFieldUpdateOperationsInput | $Enums.ClanWarStatus
    attackerId?: StringFieldUpdateOperationsInput | string
    attackerEloChange?: IntFieldUpdateOperationsInput | number
    attackerWins?: IntFieldUpdateOperationsInput | number
    defenderId?: StringFieldUpdateOperationsInput | string
    defenderEloChange?: IntFieldUpdateOperationsInput | number
    defenderWins?: IntFieldUpdateOperationsInput | number
    fights?: FightUncheckedUpdateManyWithoutClanWarNestedInput
    fighters?: ClanWarFightersUncheckedUpdateManyWithoutClanWarNestedInput
  }

  export type ClanWarUncheckedUpdateManyWithoutWinnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    type?: EnumClanWarTypeFieldUpdateOperationsInput | $Enums.ClanWarType
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumClanWarStatusFieldUpdateOperationsInput | $Enums.ClanWarStatus
    attackerId?: StringFieldUpdateOperationsInput | string
    attackerEloChange?: IntFieldUpdateOperationsInput | number
    attackerWins?: IntFieldUpdateOperationsInput | number
    defenderId?: StringFieldUpdateOperationsInput | string
    defenderEloChange?: IntFieldUpdateOperationsInput | number
    defenderWins?: IntFieldUpdateOperationsInput | number
  }

  export type ClanPostCreateManyThreadInput = {
    id?: string
    authorId: string
    date?: Date | string
    message: string
  }

  export type ClanPostUpdateWithoutThreadInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: StringFieldUpdateOperationsInput | string
    author?: BruteUpdateOneRequiredWithoutClanPostsNestedInput
  }

  export type ClanPostUncheckedUpdateWithoutThreadInput = {
    id?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: StringFieldUpdateOperationsInput | string
  }

  export type ClanPostUncheckedUpdateManyWithoutThreadInput = {
    id?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: StringFieldUpdateOperationsInput | string
  }

  export type FightCreateManyClanWarInput = {
    id?: string
    date?: Date | string
    brute1Id: string
    brute2Id?: string | null
    winner: string
    loser: string
    steps: string
    fighters: string
    tournamentId?: string | null
    tournamentStep?: number
    modifiers?: FightCreatemodifiersInput | $Enums.FightModifier[]
    background?: string
  }

  export type ClanWarFightersCreateManyClanWarInput = {
    id?: string
    day: number
  }

  export type FightUpdateWithoutClanWarInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    winner?: StringFieldUpdateOperationsInput | string
    loser?: StringFieldUpdateOperationsInput | string
    steps?: StringFieldUpdateOperationsInput | string
    fighters?: StringFieldUpdateOperationsInput | string
    tournamentStep?: IntFieldUpdateOperationsInput | number
    modifiers?: FightUpdatemodifiersInput | $Enums.FightModifier[]
    background?: StringFieldUpdateOperationsInput | string
    brute1?: BruteUpdateOneRequiredWithoutFightsNestedInput
    brute2?: BruteUpdateOneWithoutFightsAsAdversaryNestedInput
    logs?: LogUpdateManyWithoutFightNestedInput
    tournament?: TournamentUpdateOneWithoutFightsNestedInput
    favoritedBy?: UserUpdateManyWithoutFavoriteFightsNestedInput
  }

  export type FightUncheckedUpdateWithoutClanWarInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    brute1Id?: StringFieldUpdateOperationsInput | string
    brute2Id?: NullableStringFieldUpdateOperationsInput | string | null
    winner?: StringFieldUpdateOperationsInput | string
    loser?: StringFieldUpdateOperationsInput | string
    steps?: StringFieldUpdateOperationsInput | string
    fighters?: StringFieldUpdateOperationsInput | string
    tournamentId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentStep?: IntFieldUpdateOperationsInput | number
    modifiers?: FightUpdatemodifiersInput | $Enums.FightModifier[]
    background?: StringFieldUpdateOperationsInput | string
    logs?: LogUncheckedUpdateManyWithoutFightNestedInput
    favoritedBy?: UserUncheckedUpdateManyWithoutFavoriteFightsNestedInput
  }

  export type FightUncheckedUpdateManyWithoutClanWarInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    brute1Id?: StringFieldUpdateOperationsInput | string
    brute2Id?: NullableStringFieldUpdateOperationsInput | string | null
    winner?: StringFieldUpdateOperationsInput | string
    loser?: StringFieldUpdateOperationsInput | string
    steps?: StringFieldUpdateOperationsInput | string
    fighters?: StringFieldUpdateOperationsInput | string
    tournamentId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentStep?: IntFieldUpdateOperationsInput | number
    modifiers?: FightUpdatemodifiersInput | $Enums.FightModifier[]
    background?: StringFieldUpdateOperationsInput | string
  }

  export type ClanWarFightersUpdateWithoutClanWarInput = {
    id?: StringFieldUpdateOperationsInput | string
    day?: IntFieldUpdateOperationsInput | number
    attackers?: BruteUpdateManyWithoutInClanWarAttackerFightersNestedInput
    defenders?: BruteUpdateManyWithoutInClanWarDefenderFightersNestedInput
  }

  export type ClanWarFightersUncheckedUpdateWithoutClanWarInput = {
    id?: StringFieldUpdateOperationsInput | string
    day?: IntFieldUpdateOperationsInput | number
    attackers?: BruteUncheckedUpdateManyWithoutInClanWarAttackerFightersNestedInput
    defenders?: BruteUncheckedUpdateManyWithoutInClanWarDefenderFightersNestedInput
  }

  export type ClanWarFightersUncheckedUpdateManyWithoutClanWarInput = {
    id?: StringFieldUpdateOperationsInput | string
    day?: IntFieldUpdateOperationsInput | number
  }

  export type BruteUpdateWithoutInClanWarAttackerFightersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: IntFieldUpdateOperationsInput | number
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    tournamentWins?: IntFieldUpdateOperationsInput | number
    resets?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutBrutesNestedInput
    master?: BruteUpdateOneWithoutPupilsNestedInput
    pupils?: BruteUpdateManyWithoutMasterNestedInput
    clan?: ClanUpdateOneWithoutBrutesNestedInput
    fights?: FightUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUpdateManyWithoutBrute2NestedInput
    logs?: LogUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUpdateManyWithoutBruteNestedInput
    titles?: TitleUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUpdateManyWithoutAuthorNestedInput
    wantToJoinClan?: ClanUpdateOneWithoutJoinRequestsNestedInput
    threads?: ClanThreadUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUpdateManyWithoutBruteNestedInput
    followers?: UserUpdateManyWithoutFollowingNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUpdateManyWithoutDefendersNestedInput
    event?: EventUpdateOneWithoutBrutesNestedInput
    wonEvents?: EventUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateWithoutInClanWarAttackerFightersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
    pupils?: BruteUncheckedUpdateManyWithoutMasterNestedInput
    fights?: FightUncheckedUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUncheckedUpdateManyWithoutBrute2NestedInput
    logs?: LogUncheckedUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUncheckedUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUncheckedUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUncheckedUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUncheckedUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUncheckedUpdateManyWithoutBruteNestedInput
    titles?: TitleUncheckedUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUncheckedUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUncheckedUpdateManyWithoutAuthorNestedInput
    threads?: ClanThreadUncheckedUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUncheckedUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUncheckedUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUncheckedUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUncheckedUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUncheckedUpdateManyWithoutBruteNestedInput
    followers?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedUpdateManyWithoutDefendersNestedInput
    wonEvents?: EventUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateManyWithoutInClanWarAttackerFightersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
  }

  export type BruteUpdateWithoutInClanWarDefenderFightersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: IntFieldUpdateOperationsInput | number
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    tournamentWins?: IntFieldUpdateOperationsInput | number
    resets?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutBrutesNestedInput
    master?: BruteUpdateOneWithoutPupilsNestedInput
    pupils?: BruteUpdateManyWithoutMasterNestedInput
    clan?: ClanUpdateOneWithoutBrutesNestedInput
    fights?: FightUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUpdateManyWithoutBrute2NestedInput
    logs?: LogUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUpdateManyWithoutBruteNestedInput
    titles?: TitleUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUpdateManyWithoutAuthorNestedInput
    wantToJoinClan?: ClanUpdateOneWithoutJoinRequestsNestedInput
    threads?: ClanThreadUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUpdateManyWithoutBruteNestedInput
    followers?: UserUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUpdateManyWithoutAttackersNestedInput
    event?: EventUpdateOneWithoutBrutesNestedInput
    wonEvents?: EventUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateWithoutInClanWarDefenderFightersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
    pupils?: BruteUncheckedUpdateManyWithoutMasterNestedInput
    fights?: FightUncheckedUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUncheckedUpdateManyWithoutBrute2NestedInput
    logs?: LogUncheckedUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUncheckedUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUncheckedUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUncheckedUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUncheckedUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUncheckedUpdateManyWithoutBruteNestedInput
    titles?: TitleUncheckedUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUncheckedUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUncheckedUpdateManyWithoutAuthorNestedInput
    threads?: ClanThreadUncheckedUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUncheckedUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUncheckedUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUncheckedUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUncheckedUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUncheckedUpdateManyWithoutBruteNestedInput
    followers?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedUpdateManyWithoutAttackersNestedInput
    wonEvents?: EventUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateManyWithoutInClanWarDefenderFightersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    resets?: IntFieldUpdateOperationsInput | number
  }

  export type BruteCreateManyEventInput = {
    id?: string
    name: string
    deletedAt?: Date | string | null
    createdAt?: Date | string
    willBeDeletedAt?: Date | string | null
    deletionReason?: string | null
    destinyPath?: BruteCreatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteCreatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: number
    xp?: number
    hp?: number
    enduranceStat?: number
    enduranceModifier?: number
    enduranceValue?: number
    strengthStat?: number
    strengthModifier?: number
    strengthValue?: number
    agilityStat?: number
    agilityModifier?: number
    agilityValue?: number
    speedStat?: number
    speedModifier?: number
    speedValue?: number
    ranking?: number
    gender: $Enums.Gender
    userId?: string | null
    body?: string
    colors?: string
    weapons?: BruteCreateweaponsInput | $Enums.WeaponName[]
    skills?: BruteCreateskillsInput | $Enums.SkillName[]
    pets?: BruteCreatepetsInput | $Enums.PetName[]
    ascensions?: number
    ascendedWeapons?: BruteCreateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteCreateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteCreateascendedPetsInput | $Enums.PetName[]
    masterId?: string | null
    pupilsCount?: number
    clanId?: string | null
    registeredForTournament?: boolean
    nextTournamentDate?: Date | string | null
    currentTournamentDate?: Date | string | null
    currentTournamentStepWatched?: number | null
    globalTournamentWatchedDate?: Date | string | null
    globalTournamentRoundWatched?: number | null
    eventTournamentWatchedDate?: Date | string | null
    eventTournamentRoundWatched?: number | null
    lastFight?: Date | string | null
    fightsLeft?: number
    victories?: number
    losses?: number
    opponentsGeneratedAt?: Date | string | null
    canRankUpSince?: Date | string | null
    favorite?: boolean
    wantToJoinClanId?: string | null
    tournamentWins?: number
    resets?: number
  }

  export type BruteUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    pupilsCount?: IntFieldUpdateOperationsInput | number
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    tournamentWins?: IntFieldUpdateOperationsInput | number
    resets?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutBrutesNestedInput
    master?: BruteUpdateOneWithoutPupilsNestedInput
    pupils?: BruteUpdateManyWithoutMasterNestedInput
    clan?: ClanUpdateOneWithoutBrutesNestedInput
    fights?: FightUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUpdateManyWithoutBrute2NestedInput
    logs?: LogUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUpdateManyWithoutBruteNestedInput
    titles?: TitleUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUpdateManyWithoutAuthorNestedInput
    wantToJoinClan?: ClanUpdateOneWithoutJoinRequestsNestedInput
    threads?: ClanThreadUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUpdateManyWithoutBruteNestedInput
    followers?: UserUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUpdateManyWithoutDefendersNestedInput
    wonEvents?: EventUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    resets?: IntFieldUpdateOperationsInput | number
    pupils?: BruteUncheckedUpdateManyWithoutMasterNestedInput
    fights?: FightUncheckedUpdateManyWithoutBrute1NestedInput
    fightsAsAdversary?: FightUncheckedUpdateManyWithoutBrute2NestedInput
    logs?: LogUncheckedUpdateManyWithoutCurrentBruteNestedInput
    destinyChoices?: DestinyChoiceUncheckedUpdateManyWithoutBruteNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutParticipantsNestedInput
    opponents?: BruteUncheckedUpdateManyWithoutOpponentOfNestedInput
    opponentOf?: BruteUncheckedUpdateManyWithoutOpponentsNestedInput
    achievements?: AchievementUncheckedUpdateManyWithoutBruteNestedInput
    reports?: BruteReportUncheckedUpdateManyWithoutBruteNestedInput
    titles?: TitleUncheckedUpdateManyWithoutBrutesNestedInput
    masterOfClan?: ClanUncheckedUpdateOneWithoutMasterNestedInput
    clanPosts?: ClanPostUncheckedUpdateManyWithoutAuthorNestedInput
    threads?: ClanThreadUncheckedUpdateManyWithoutCreatorNestedInput
    inventory?: InventoryItemUncheckedUpdateManyWithoutBruteNestedInput
    tournamentAchievements?: TournamentAchievementUncheckedUpdateManyWithoutBruteNestedInput
    tournamentXps?: TournamentXpUncheckedUpdateManyWithoutBruteNestedInput
    startingStats?: BruteStartingStatsUncheckedUpdateOneWithoutBruteNestedInput
    damageOnBosses?: BossDamageUncheckedUpdateManyWithoutBruteNestedInput
    followers?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    inClanWarAttackerFighters?: ClanWarFightersUncheckedUpdateManyWithoutAttackersNestedInput
    inClanWarDefenderFighters?: ClanWarFightersUncheckedUpdateManyWithoutDefendersNestedInput
    wonEvents?: EventUncheckedUpdateManyWithoutWinnerNestedInput
  }

  export type BruteUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    willBeDeletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletionReason?: NullableStringFieldUpdateOperationsInput | string | null
    destinyPath?: BruteUpdatedestinyPathInput | $Enums.DestinyChoiceSide[]
    previousDestinyPath?: BruteUpdatepreviousDestinyPathInput | $Enums.DestinyChoiceSide[]
    level?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    hp?: IntFieldUpdateOperationsInput | number
    enduranceStat?: IntFieldUpdateOperationsInput | number
    enduranceModifier?: FloatFieldUpdateOperationsInput | number
    enduranceValue?: IntFieldUpdateOperationsInput | number
    strengthStat?: IntFieldUpdateOperationsInput | number
    strengthModifier?: FloatFieldUpdateOperationsInput | number
    strengthValue?: IntFieldUpdateOperationsInput | number
    agilityStat?: IntFieldUpdateOperationsInput | number
    agilityModifier?: FloatFieldUpdateOperationsInput | number
    agilityValue?: IntFieldUpdateOperationsInput | number
    speedStat?: IntFieldUpdateOperationsInput | number
    speedModifier?: FloatFieldUpdateOperationsInput | number
    speedValue?: IntFieldUpdateOperationsInput | number
    ranking?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    colors?: StringFieldUpdateOperationsInput | string
    weapons?: BruteUpdateweaponsInput | $Enums.WeaponName[]
    skills?: BruteUpdateskillsInput | $Enums.SkillName[]
    pets?: BruteUpdatepetsInput | $Enums.PetName[]
    ascensions?: IntFieldUpdateOperationsInput | number
    ascendedWeapons?: BruteUpdateascendedWeaponsInput | $Enums.WeaponName[]
    ascendedSkills?: BruteUpdateascendedSkillsInput | $Enums.SkillName[]
    ascendedPets?: BruteUpdateascendedPetsInput | $Enums.PetName[]
    masterId?: NullableStringFieldUpdateOperationsInput | string | null
    pupilsCount?: IntFieldUpdateOperationsInput | number
    clanId?: NullableStringFieldUpdateOperationsInput | string | null
    registeredForTournament?: BoolFieldUpdateOperationsInput | boolean
    nextTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentTournamentStepWatched?: NullableIntFieldUpdateOperationsInput | number | null
    globalTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    globalTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    eventTournamentWatchedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTournamentRoundWatched?: NullableIntFieldUpdateOperationsInput | number | null
    lastFight?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fightsLeft?: IntFieldUpdateOperationsInput | number
    victories?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    opponentsGeneratedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canRankUpSince?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favorite?: BoolFieldUpdateOperationsInput | boolean
    wantToJoinClanId?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentWins?: IntFieldUpdateOperationsInput | number
    resets?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BruteCountOutputTypeDefaultArgs instead
     */
    export type BruteCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BruteCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FightCountOutputTypeDefaultArgs instead
     */
    export type FightCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FightCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DestinyChoiceCountOutputTypeDefaultArgs instead
     */
    export type DestinyChoiceCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DestinyChoiceCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TournamentCountOutputTypeDefaultArgs instead
     */
    export type TournamentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TournamentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TitleCountOutputTypeDefaultArgs instead
     */
    export type TitleCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TitleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BruteReportCountOutputTypeDefaultArgs instead
     */
    export type BruteReportCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BruteReportCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClanCountOutputTypeDefaultArgs instead
     */
    export type ClanCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClanCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClanThreadCountOutputTypeDefaultArgs instead
     */
    export type ClanThreadCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClanThreadCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClanWarCountOutputTypeDefaultArgs instead
     */
    export type ClanWarCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClanWarCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClanWarFightersCountOutputTypeDefaultArgs instead
     */
    export type ClanWarFightersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClanWarFightersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventCountOutputTypeDefaultArgs instead
     */
    export type EventCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BruteDefaultArgs instead
     */
    export type BruteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BruteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BruteStartingStatsDefaultArgs instead
     */
    export type BruteStartingStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BruteStartingStatsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FightDefaultArgs instead
     */
    export type FightArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FightDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LogDefaultArgs instead
     */
    export type LogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DestinyChoiceDefaultArgs instead
     */
    export type DestinyChoiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DestinyChoiceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TournamentDefaultArgs instead
     */
    export type TournamentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TournamentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TournamentAchievementDefaultArgs instead
     */
    export type TournamentAchievementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TournamentAchievementDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TournamentGoldDefaultArgs instead
     */
    export type TournamentGoldArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TournamentGoldDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TournamentXpDefaultArgs instead
     */
    export type TournamentXpArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TournamentXpDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AchievementDefaultArgs instead
     */
    export type AchievementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AchievementDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TitleDefaultArgs instead
     */
    export type TitleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TitleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BruteReportDefaultArgs instead
     */
    export type BruteReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BruteReportDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ServerStateDefaultArgs instead
     */
    export type ServerStateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ServerStateDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BannedWordDefaultArgs instead
     */
    export type BannedWordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BannedWordDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BannedIpDefaultArgs instead
     */
    export type BannedIpArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BannedIpDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClanDefaultArgs instead
     */
    export type ClanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClanDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClanThreadDefaultArgs instead
     */
    export type ClanThreadArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClanThreadDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClanPostDefaultArgs instead
     */
    export type ClanPostArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClanPostDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BossDamageDefaultArgs instead
     */
    export type BossDamageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BossDamageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClanWarDefaultArgs instead
     */
    export type ClanWarArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClanWarDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClanWarFightersDefaultArgs instead
     */
    export type ClanWarFightersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClanWarFightersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InventoryItemDefaultArgs instead
     */
    export type InventoryItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InventoryItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReleaseDefaultArgs instead
     */
    export type ReleaseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReleaseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventDefaultArgs instead
     */
    export type EventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}